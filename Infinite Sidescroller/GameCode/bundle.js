(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/B2d.js":[function(require,module,exports){
// This file contains shortcuts for the methods of the Box2D library that are used
// too often to type their long names

var B2d = function(){

};

B2d.prototype.init = function(){
	include();

	this.b2Vec2 = Box2D.Common.Math.b2Vec2;
	this.b2BodyDef = Box2D.Dynamics.b2BodyDef;
	this.b2Body = Box2D.Dynamics.b2Body;
	this.b2FixtureDef = Box2D.Dynamics.b2FixtureDef;
	this.b2Fixture = Box2D.Dynamics.b2Fixture;
	this.b2World = Box2D.Dynamics.b2World;
	this.b2MassData = Box2D.Collision.Shapes.b2MassData;
	this.b2PolygonShape = Box2D.Collision.Shapes.b2PolygonShape;
	this.b2CircleShape = Box2D.Collision.Shapes.b2CircleShape;
	this.b2DebugDraw = Box2D.Dynamics.b2DebugDraw; 
	this.b2ContactListener = Box2D.Dynamics.b2ContactListener;

};

module.exports = new B2d;

var Includes = require("./Includes.js"); var include_data = Includes.get_include_data({
	current_module: "B2d", 
	include_options: Includes.choices.OTHER_STUFF
}); eval(include_data.name_statements); var include = function(){eval(include_data.module_statements);}


},{"./Includes.js":"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Includes.js"}],"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Config.js":[function(require,module,exports){
var Config = function(){
	this.SCREEN_W = 0; // set up when the page is loaded (to 95% of width of containing element) 
	this.SCREEN_H = 600;

	this.MAIN_CANVAS_NAME = "display_canvas";
	this.DEBUG_CANVAS_NAME = "debug_canvas";

	// Frames Per Second. Essentially, frequency of createjs.Ticker 
	// Warning! Frequency of the Box2D physics updates may be different
	// (Currently not implemented)
	this.FPS = 30; 
	
	//the movement edge, controls terrain generation
	this.movement_edge = 0;

	// Box2D stuff >>>
	this.B2D = {
		SCALE: 30,
		SPS: 60, 			// Steps Per Second
		VELOCITY_ITR: 8,	// velocity iterations
		POSITION_ITR: 3,	// position iterations
		debug_draw: false
	};

	this.TerrainSlice = {
		grid_rows: 20,
		grid_columns: 20,
		cell_w: 1, // in meters

		// is automatically incremented each time new TerrainSliceModel is instantiated:
		next_slice_id: 0 
	};

	this.World = {
		maxy: 22,

	};
	this.Remote = {
		master: false, // am I the one with whome other players sync? 
		connected: false, // am I in multiplayer mode
	};
	
	this.Init = {
		session_id: null,
		player_id: null,
		mode: null,

		// for multiplayer game you have certain time limit
		// to join the game. In this time limit players shouldn't be able to go past
		// certain point of the map.
		movement_blocked: true,
		time_limit: 15, // seconds
		// we should begin automatically after everyone is joined

	}
};

module.exports = new Config;

},{}],"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Controllers/AssetController.js":[function(require,module,exports){

var AssetController = (function(){
	/*
	   AssetController is in charge of setting up all bitmaps/animations/other resources
	   for everyone else.
   */

	// use AssetModel.loader.getResult("id_of_the_asset");

	var init = function(asset_path){
		include();	

		/* TODO make model with the easily managed tables of resources which will be
		   added to the loader automatically
		*/

		//loader = new createjs.LoadQueue(false); // loading resourses using preload.js
		//loader.addEventListener("complete", handleComplete);
		var manifest = AssetModel.manifest;	
		AssetModel.loader.loadManifest(manifest, true, asset_path);
		
	};

	var post_init = function(){
		/* this function will be done differently at some point
		 * it'll have something to do with refactoring InitController
		 */

		//AssetModel.animations["ant"] = new createjs.SpriteSheet({
			//"framerate": 0.2,
			//"images": [get_asset("Ant1"), get_asset("Ant2"), get_asset("Ant3")],
			//"frames": { "regX": 3, "regY": 6, "height": 25, "width": 50, "count": 6},
			//"animations": {
				//"walk": [0, 1, "walk"],
				//"upside_down": [2, 3, "upside_down"],
				//"death": [4, 5, "death"]
			//}
		//})

	};
	

	var get_asset = function(id){

		var result = AssetModel.loader.getResult(id);

		if(!result){
			throw "Error: asset with id " + id + " could not be loaded." +
				" Check that id is valid and that assets were properly loaded";
		}
		
		return result;
	};
		


	
	return {
		init: init,
		get_asset: get_asset,
	};

})();

module.exports = AssetController;

var Includes = require("../Includes.js"); var include_data = Includes.get_include_data({
	current_module: "AssetController", 
	include_options: Includes.choices.DEFAULT
}); eval(include_data.name_statements); var include = function(){eval(include_data.module_statements);}


},{"../Includes.js":"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Includes.js"}],"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Controllers/EntityController.js":[function(require,module,exports){
var EntityController = (function () {
    /* Description
    */

    var type_logic_table;

    var Count = 0;

    var init = function () {
        /* is ran from the InitController once when the game is loaded */

        include(); // satisfy requirements
		//type_logic_table = {
		//	"ant": AntLogic,
		//	"hero": HeroLogic,
		//	"companion": EsteemedCompanionLogic,
		//};
        console.log(MedusaLogic);
        type_logic_table = {
            "ant": AntLogic,
            "hero": HeroLogic,
            "Griffin": GriffinLogic,
            "Hyena": HyenaLogic,
			"Medusa": MedusaLogic,
            "pizza": PizzaLogic,
        };
        

        for (type in type_logic_table) {
            var logic = type_logic_table[type];
            logic.init();

            if (logic.begin_contact) {
                PhysicsController.listen_for_contact_with(type, "BeginContact", logic.begin_contact);
            }

            if (logic.end_contact) {
                PhysicsController.listen_for_contact_with(type, "EndContact", logic.end_contact);
            }

            if (logic.pre_solve) {
                PhysicsController.listen_for_contact_with(type, "PreSolve", logic.pre_solve);
            }

            if (logic.post_solve) {
                PhysicsController.listen_for_contact_with(type, "PostSolve", logic.post_solve);
            }

        }

    };

    //var spawn = function (x, y, type) {
        /**
        * spawn entity of the given type at the given coordinates
        * also registeres thing as awaiting graphics initialization
        */
        //var logic = type_logic_table[type];

        //if (logic) {
            //var new_entity = logic.spawn(x, y);
            //RegisterAsController.register_as("awaiting_graphics_initialization", new_entity)

            //if (!EntityModel.for_logic_update[type]) {
                //EntityModel.for_logic_update[type] = {};
            //}
            //var logic_upd_table = EntityModel.for_logic_update[type];
            //logic_upd_table[new_entity.id] = new_entity;
        //} else {
            //throw "Logic for the type " + type + " is not defined";
        //}

	//};


	var update = function(delta){
		/* is ran each tick from the GameController.update_all */
		var debug_commands = KeyboardController.debug_commands();

		// demonstration purposes
		if(debug_commands("spawn_ant")){
		    spawn((Math.random() * 50 + 10 + WorldController.get_movement_edge()), 10, "ant");
		}

		if (debug_commands("spawn_pizza")) {
		    spawn((Math.random() * 50 + 10 + WorldController.get_movement_edge()), 16, "pizza");
		}

		if(debug_commands("request_hero") && !EntityModel.hero_spawned){
			// if hero is requested, and not spawned yet,
			// spawn hero
			
			EntityModel.hero_spawned = true;
			spawn(WorldController.get_movement_edge() + 10,10, "hero");
		}

		if (debug_commands("spawn_griffin") && Count > 5) {
            var new_griffin = spawn(Math.random() * 50 + WorldController.get_movement_edge(), -20, "Griffin");
            Count = 0;
        }
        Count++;

        if (debug_commands("spawn_griffin")) {
            var new_griffin = spawn(Math.random() * 50 + WorldController.get_movement_edge(), 10, "Griffin");
        }


        // demonstration purposes for hyena
        if (debug_commands("spawn_hyena")) {
            var new_hyena = spawn(Math.random() * 50 + WorldController.get_movement_edge(), 10, "Hyena");
        }
		
		// demonstration purposes for hyena
        if (debug_commands("spawn_medusa")) {
            var new_Medusa = spawn(Math.random() * 50 + WorldController.get_movement_edge(), 10, "Medusa");
        }
		

		/*
		//This should be handled in the update of MultiplayerSync
		if(Config.Remote.master){//if master, parse requests
			MultiplayerSyncController.receive_spawn_request();
		}else if(Config.Remote.connected){//if slave, parse notifications
			MultiplayerSyncController.receive_spawn_notification();
		}
		*/
		for (var type in EntityModel.for_logic_update) {
            var table = EntityModel.for_logic_update[type];

            var logic = type_logic_table[type];
            for (var id in table) {
                var entity = table[id];

                if (beyond_world_boundary(entity)) {
                    // if outside boundaries of the world, despawn
                    entity.point_value = 0;
                    despawn(entity);
                    if (entity.type == "hero") {
                        entity.hp = 0;
                    }
                    console.log("entity of type", type, "deleted due to the world boundary");
                } else {
                    // else tick its AI
                    logic.tick_AI(entity);
                }
            }

        } // end for in 

		sync_hero();

	};

	var spawn = function(x, y, type){
		/**
		* spawn entity of type >type<
		* at position (x, y)
		* ! notice that it doesn't spawn entity directly, but instead sends the request
		* ! for the entity deletion, so undeterminate amount of time may pass from the
		* ! moment this function returned, until the entity is actually spawned
		* this time will usually be relatively small, probably 2-20 ticks or so for multiplayer
		*/

		MultiplayerSyncController.route_outcoming_packet({
			op: "spawn",
			type: type,
			x: x,
			y: y
		});
	};

	var handle_spawn = function(packet){
		/**
		* takes the packet with >op< "spawn"
		* containing properties >x<, >y<, >type<, and possibly more
		* handles creation of the entity, id assignment, etc.
		*/

		
		var x = packet.x,
			y = packet.y,
			type = packet.type;

		if(type_logic_table[type] == null){
			throw "No logic found for the type" + String(type);
		}

		var logic = type_logic_table[type];
		var entity = logic.spawn(x, y);

		if(type == "hero"){
			// TODO: move this whole thing into the HeroLogic.spawn?
			var player_id = packet.player_id;
			if(player_id == null){
				throw "player_id is undefined";
			}
			// identify the hero
			entity.player_id = player_id;
			// store it for EntityController purposes
			EntityModel.heroes[player_id] = entity;
		}

		IdentificationController.assign_id(entity);

		reg_for_logic_update(entity);

		RegisterAsController.register_as("awaiting_graphics_initialization", entity)
	};
	
	

	//takes a string type index as parameter 
	//and returns the spawn() function associated with it
	//var get_operation = function(type){
		//var spawn = type_logic_table[type].spawn;
		//return spawn;
	//};
	
	//registers a new instance
	//so that renderers and updaters know to update it on tick
	var reg_for_logic_update = function(new_entity){
		var type = new_entity.type;

		if(type == null){
			console.log(new_entity);
			throw "Type is undefined for this entity";
		}

		if(!EntityModel.for_logic_update[type]){
			EntityModel.for_logic_update[type] = {};
		}
		var logic_upd_table = EntityModel.for_logic_update[type];
		logic_upd_table[new_entity.id] =  new_entity;
		
	};
	
	//wrapper for universal spawn
	//maintains the old interface
	//var spawn = function(type,x,y){
		//MultiplayerSyncController.handle_spawn({type:type,x:x,y:y});
	//};
	
	var delete_entity = function(entity_instance){
		/**
		* This function is supposed to be called by the individual logic modules, when the are finished
		* animating deat/destruction of something and want to get rid of it, or in other circumstances,
		* when entity should be immediately deleted from the world
		* ! notice that it doesn't delete entity directly, but instead sends the request
		* ! for the entity deletion, so undeterminate amount of time may pass from the
		* ! moment this function returned, until the entity is actually deleted
		* this time will usually be relatively small, probably 2-20 ticks or so for multiplayer
		*/

		MultiplayerSyncController.route_outcoming_packet({
			op: "delete_entity",
			id: entity_instance.id,
			type: entity_instance.type,
		});

	};
	
	var handle_delete = function(packet){
		/**
		* This function will remove this entity along with some other info about this entity
		* from the world, it'll also free the id of this entity. The physical body will be deleted
		* too; 
		*/

		var entity_instance = EntityModel.for_logic_update[packet.type][packet.id];

		if(entity_instance == null){
			// if no such entity,
			// probably it was already deleted through other means,
			// thus abort
			return;
		}
	
		var type = entity_instance.type;
		if(type == null){
			console.log(entity_instance);
			throw "type is undefined for this entity";
		}

		var id = entity_instance.id;
		if(id == null){
			console.log(entity_instance);
			throw "id is undefined for this entity";
		}
		

		// TODO: finish this function and then update it regularly;
		// This one is very sensitive, as even one reference left may prevent 
		// object from being deleted and cause memory leaks. Testing is required
		if(entity_instance.body != null){
			var body = entity_instance.body;
		}else{
			// body is required. if place where body is stored changed, you should update this function
			throw "Body of the instance is undefined"
		}
		// remove graphics
			RegisterAsController.register_as("removed_entity", entity_instance);
		// remove physics
			PhysicsController.remove_body(body);
		// remove stored references within EntityController/Model
			delete EntityModel.for_logic_update[type][id];
			if(type == "hero"){
				delete EntityModel.heroes[entity_instance.player_id];
				EntityModel.hero_spawned = false;
			}
		// free the id
			IdentificationController.remove_id(id);
	};


    var despawn = function (entity) {
        /**
         * this function will despawn given entity
         * in one of two ways:
         * if entity has despawn function, it will be called
         * if not, entity will be deleted directly
        */

        var type = entity.type;
        var id = entity.id;


        if (entity.die) {
            // if custom despawn function is provided, call it
			entity.die();
            console.log("die called for the type", type);
        } else {
            // or delete directly
            delete_entity(entity);
			console.warn("die function not defined for the entity of type", type);
        }

    };


    var beyond_world_boundary = function (entity) {
        /**
        * checks if the entity is beyond one of the world boundaries,
        */
        var body = entity.body;
        return (body.GetWorldCenter().x < WorldController.get_movement_edge() ||
            body.GetWorldCenter().y > Config.World.maxy);

    };
		
		
	var create_abstract_entity = function(){
		return new AbstractEntity();
	};
		
		
	/**
	class AbstractEntity
	member functions:
		//numbers are given in meters rather than pixels except where noted (1 meter = 30 pixels)
		VOID jump(double x, double y)
					applies an impulse with x_component x and y_component y
		VOID jump_direction(double angle, double force)
					where angle is in degrees. calls jump internally
		VOID move(double speed)
					causes the entity to move horizontally at speed/tick. 
		BOOL enemy_in_range
					returns true if any hero is within range (x axis only)
		BOOL direction_nearest_enemy()
					returns true (right) if the nearest enemy is to the right, else returns false (left)
		VOID take_damage()
					checks if damage has been dealt this tick and resolves it 
		VOID die()
					should be called each tick that hp <= 0. handles death and decay
		b2dFixture get_fixture(string name)
					given a name, returns the first fixture in entity.body with matching name. default names are "top", "bottom", "left", "right", and "main".
		BOOL movement_voluntary()
					returns true if the object is moving in the same direction it is facing, else false
		BOOL in_air()
					returns true if there are no objects immediately below the entity, else false
		BOOL path_free()
					returns true if their is an object immediately adjacent to the entity in the currently faced direction
		VOID change_animation(string animation_id)
					sets the animation for the entity, and ensures that the animation will not be continuously reset.
	*/
	this.AbstractEntity = function(){
		this.hp = 2;
		this.speed = 7;
		this.jump_force = 125;
		this.damage = 5;
		this.point_value = 200;
		this.sight_range = 16; //distance at which entity detects heroes
		this.attack_range = 8; //distance at which entity leaps at the hero
		
		this.hit_taken = false; //whether a hit has been taken since the last tick
		this.damage_taken = 0; //the amount of damage inflicted by hits since the last tick
		
		this.direction = false;	//false=left, true=right;
		this.direction_previous = false;//store direction from end of previous tick
		this.x_previous = 0;		//store x value from end of previous tick
		this.y_previous = 0;		//store x value from end of previous tick
		
		this.is_idle = true; //determines whether entity is aggressive or idle
		this.idle_duration = 40; // time buffer between changing idle states
		this.idle_timer = this.idle_duration;
		this.idle_counter = 0; //used to manage the number of times the entity has changed state while idle
		this.is_alive = true; //disables attacking and plays death animation while false
		this.death_duration = 30;//time between death and deletion
		this.decay_duration = 20;//time between decay animation and deletion
		this.death_timer = -1;
		this.running_away = false; //whether the entity is running away
		this.run_away_duration = 30; //set cowardice level
		this.run_away_timer = -1;
		this.can_attack = true;	//whether attacking is enabled
		this.attack_cooldown = 10; //attack cooldown
		this.attack_cooldown_timer = -1;
		this.can_leap = true;		//leaping enabled
		this.leap_cooldown = 40;//minimum time between leaps
		this.leap_cooldown_timer = -1; 
		this.charge_duration = 80;//maximum length of a charge
		this.charge_timer = this.charge_duration;
		this.charge_cooldown = 20;//minimum time between charges
		this.charge_cooldown_timer = -1;
		this.blinking = false;	//whether entity is blinking
		this.blink_duration = 20;//how long the entity blinks after taking damage
		this.blink_timer = -1;
		this.maintenance_frequency = 20;//ticks between routine maintenance checks
		this.maintenance_timer = this.maintenance_frequency;
		
		this.path_blocked = false;//is this deprecated? set during collision
		this.obstruction_tolerance = 4;//how many times the entity can be blocked before he takes action
		this.blocked_count = 0;//tracks number of times blocked between maintenance checks
		
		this.needs_graphics_update = false; //accessed by renderer for animation purposes
		this.animation = "stand"; //accessed by renderer for animation purposes
		
		//boost entity
		this.jump = function(x,y){
			var body = this.body;
			var direction = new B2d.b2Vec2(x, y);
			body.ApplyImpulse(direction, body.GetWorldCenter());
		};
		
		//converts angle and force into x and y, then calls jump
		this.jump_direction = function(angle,force){
			var x,y;
			angle = ((angle%360)*Math.PI)/180;
			x = force*Math.cos(angle);
			y = force*Math.sin(angle);
			this.jump(x,y);
		};
		
		
		//move speed in current direction
		this.move = function(speed){
			var dir = (this.direction*2-1);
			var velocity = this.body.GetLinearVelocity();
			velocity.x = speed*dir; 
			this.body.SetLinearVelocity(velocity);
			this.body.SetAwake(true);
		};
			
		//check for enemies in range (vision or jump)
		this.enemy_in_range = function(range){
			var hero_x;
			var output = false;
			/*
			//Multiplayer
			var hero_list = EntityController.get_all_heroes();
			if(hero_list.length != null){
				for (i=0; i<hero_list.length; i++){
					if(hero_list[i] != null){
						hero_x = hero_list[i].body.GetWorldCenter().x
						if(Math.abs(hero_x - this.body.GetWorldCenter().x) < range){
							output = true;
							break;
						}
					}
				}
			}else if(EntityController.get_my_hero() != null){
			*/
			var hero = EntityController.get_my_hero();
			if(hero != null){
				hero_x = hero.body.GetWorldCenter().x;
				output = (Math.abs(hero_x - this.body.GetWorldCenter().x) < range);
			}
			/*
			}
			*/
			return output;
		};
		
		//returns the direction of nearest enemy
		this.direction_nearest_enemy = function(){
			/*
			//in multiplayer, first find nearest enemy
			var nearest, hero_x; 
			var distance = 0;
			var x = this.body.GetWorldCenter().x;
			var hero_list = EntityController.get_all_heroes();
			if(hero_list.length != null){
				for(i=0;i<8;i++){
					if(hero_list.i != null){
						if(Math.abs(hero_list.i.body.GetWorldCenter().x - x) < Math.abs(nearest.body.GetWorldCenter().x - x) || nearest == null){
							nearest = hero_list.i;
						}
					}
				}
				hero_x = nearest.body.GetWorldCenter().x;
				distance = (hero_x - x);
			}else if(EntityController.get_my_hero() != null){
				distance = EntityController.get_my_hero().body.GetWorldCenter().x - x;
			}
			return (distance > 0);//return true/right of distance is positive, return false/left if distance is negative
			*/
			var nearest;
			var hero_x = EntityController.get_my_hero().body.GetWorldCenter().x;
			var distance = (hero_x - this.body.GetWorldCenter().x);
			return (distance > 0);//return true/right of distance is positive, return false/left if distance is negative
		};
		
		//decrease health
		this.take_damage = function(){
			this.hp -= this.damage_taken;
			this.damage_taken = 0;
			this.hit_taken = false;
			this.blinking = true;
			this.blink_timer = this.blink_duration;
			//knockback here
		};
		
		//die
		this.die = function(){
			if (this.is_alive){//if alive, kill it
				this.death_timer = this.death_duration;
				this.is_alive = false;
				WorldController.increase_score(this.point_value);
				this.hit_taken = false;
				this.can_attack = false;
				this.change_animation(this,"death");
				return ;
			}else{//else decay
				this.death_timer--;
				if (this.death_timer <= this.death_duration && this.death_timer > this.decay_duration && this.death_timer > 0){
					this.change_animation("death");
				} else if (this.death_timer <= this.decay_duration && this.death_timer > 0){
					this.change_animation("decay");
				} else {
					EntityController.delete_entity(this);//remove instance from memory
				}
				return;
			}
		}
		
		//takes a string as parameters. returns the fixture with fixture_name == name, or null if it does not exist
		this.get_fixture = function(entity,name){
			var current_fixture = entity.body.GetFixtureList();
			while (current_fixture != null){
				if (current_fixture.GetUserData() != null){
					if (current_fixture.GetUserData().name == name){
						break;
					}
				}
				current_fixture = current_fixture.GetNext();
			}
			if (current_fixture.GetUserData() == null){
				current_fixture = null;
			}else if (current_fixture.GetUserData().name != name){
				current_fixture = null;
			}
			return current_fixture;
		};
		
		//checks if movement is voluntary or forced
		this.movement_voluntary = function(){
			//if direction being faced is different from the direction moving, return false
			var output = true;
			var velocity = this.body.GetLinearVelocity().x;
			if(velocity != 0){
				output = (velocity/Math.abs(velocity) == (this.direction)*2-1);
			}
			return output;
		};

		//checks if in the air
		this.in_air = function(){
			var body = this.body;
			var objects_beneath;
			if (body.GetFixtureList() != null){//prevent bugs on destruction
				var AABB = body.GetFixtureList().GetNext().GetNext().GetAABB();
				objects_beneath = PhysicsController.query_aabb(AABB);
			}else{
				objects_beneath = 0;
			}
			return (objects_beneath < 5);//for some mysterious reason, it counts 4 collisions even in mid air
		};

		//checks if there is a collision in current direction
		this.path_free = function(){
			var body = this.body;
			var objects_before;
			var AABB;
			if (body.GetFixtureList() != null){//prevent bugs on destruction
				if (this.direction){
					AABB = body.GetFixtureList().GetAABB();
					objects_before = PhysicsController.query_aabb(AABB);
				}else{
					AABB = body.GetFixtureList().GetNext().GetAABB();
					objects_before = PhysicsController.query_aabb(AABB);
				}
			}else{
				objects_before = 0;
			}
			return (objects_before < 4);//assumes contact with bottom sensor, top sensor, and main shape 
		};

		//setter for animation variable, ensures the animation is only reset on actual change
		this.change_animation = function(new_animation){
			if(this.animation != new_animation){
				this.animation = new_animation;
				this.needs_graphics_update = true;
			}else{ 
				this.needs_graphics_update = false;
			}
		};
	}; // end AbstractEntity
	
	var sync_hero = function(){
		/**
		* send synchronization information for the hero,
		* if needed (if something important changed)
		*/

		var my_hero = EntityModel.heroes[NetworkController.get_network_id()];

		if(my_hero){
			var velocity = my_hero.body.GetLinearVelocity();
			var old_velocity = EntityModel.hero_last_velocity;

			var difference = Math.sqrt(Math.pow(velocity.x - old_velocity.x, 2) + Math.pow(velocity.y - old_velocity.y, 2))

			if(difference != 0){
				// if different
				var position = my_hero.body.GetWorldCenter();
		
				MultiplayerSyncController.route_outcoming_packet({
					op: "hero_sync",
					velocity: {x: velocity.x, y: velocity.y},
					position: {x: position.x, y: position.y}
				});
			}

			EntityModel.hero_last_velocity = {x: velocity.x, y: velocity.y};
		}


		// check velocity change
		
		// send if needed
		
	};
	
	var handle_hero_sync = function(packet){
		/**
		* handle the sync request for the hero
		* synchronize velocity and the position
		*/
		
		if(packet.player_id == NetworkController.get_network_id()){
			return;
		}
		
		var player_id = packet.player_id;

		var hero = EntityModel.heroes[player_id];

		if(hero == null){
			console.warn("hero is not defined for the player_id", String(player_id));
		}else{

			var vel = new B2d.b2Vec2(packet.velocity.x, packet.velocity.y);
			var pos = new B2d.b2Vec2(packet.position.x, packet.position.y);
			
			hero.body.SetLinearVelocity(vel);
			hero.body.SetPosition(pos);
		}
		
	};

	var get_all_heroes = function(){
		/**
		* return table with network ids associated with corresponging hero instances
		*/
		
		return EntityModel.heroes;
	};

	var get_my_hero = function(){
		/**
		* get the hero for this player
		*/

		return get_all_heroes()[NetworkController.get_network_id()];
		
	};
	
	
	
	
	
	
	return {
		// declare public
		init: init, 
		update: update,
		//get_operation: get_operation,
		reg_for_logic_update: reg_for_logic_update,
		spawn: spawn,
		delete_entity: delete_entity,
		//fulfill_delete_request: fulfill_delete_request,
		handle_spawn: handle_spawn,
		handle_delete: handle_delete,
		handle_hero_sync: handle_hero_sync,

		get_all_heroes: get_all_heroes,
		get_my_hero: get_my_hero,
		create_abstract_entity: create_abstract_entity,
    };
})();

module.exports = EntityController;

var Includes = require("../Includes.js"); var include_data = Includes.get_include_data({
    current_module: "EntityController",
    include_options: Includes.choices.DEFAULT | Includes.choices.LOGIC
}); eval(include_data.name_statements); var include = function () { eval(include_data.module_statements); }

},{"../Includes.js":"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Includes.js"}],"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Controllers/GameController.js":[function(require,module,exports){


var GameController = (function(){

	var init = function(){
		include();
	};
		

	var update_all = function(event){
		/*
		 * main function pretty much
		 * everyghing else is called from here every tick
		 */
		KeyboardController.update(delta);

	    var cmds = KeyboardController.pause_commands();
	    if (cmds("pause") && GameModel.pauseCounter > 10 && GraphicsController.get_health() > 0) {
	        createjs.Ticker.paused = !createjs.Ticker.paused;
	        GameModel.pauseCounter = 0;
	        console.log("pause");
	    }
	    GameModel.pauseCounter += 1;
		
		if (!createjs.Ticker.paused){
			var delta = event.delta;

			// !!!! world simulation step goes somewhere right here
			// as per current design, will take delta as an argument
		
			//TerrainController.generate_terrain(); 
			//PlayerController.update();
		
			IdentificationController.update(delta);
			WorldController.update(delta);

			TerrainController.update(delta);
			EntityController.update(delta);

			// Should be called after all movement of objects is done:
			//HUDController.update();
			//BackgroundController.update();
			GraphicsController.update();
			GraphicsController.update(delta);

			MultiplayerSyncController.update(delta);
			NetworkController.update(delta);
		}
	};


	return {
		init: init,
		update_all: update_all,
	};

})();

module.exports = GameController;

var Includes = require("../Includes.js"); var include_data = Includes.get_include_data({
	current_module: "GameController", 
	include_options: Includes.choices.DEFAULT
}); eval(include_data.name_statements); var include = function(){eval(include_data.module_statements);}


},{"../Includes.js":"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Includes.js"}],"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Controllers/GraphicsController.js":[function(require,module,exports){
/*
GraphicsController
	Public Functions:
	-init()
		sets up the GraphicsController for the rest of the game, called once during initialization
	-update(int delta)
		common function, called each tick. performs routine graphics maintenance
		registers all instances that were marked for registration since the last tick
		renders all registered instances
	-get_stage()
		returns the stage object, an easeljs object that stores information about the game
	-get_camera()
		returns the camera object, which controls the view offset
	-get_asset(string id)
		retrieves the asset with id; an alias for the same function in AssetController
	-reg_for_render(Easeljs_obj sprite, Object entity_instance)
		links an entity with a sprite and registers it to be rendered each tick
	-set_reg_position(easeljs_obj,int offset_x,int offset_y)
		adjusts a sprites x and y offsets to conform to the box2d system
	-request_bitmap(string? id)
		retrieves a previously loaded asset as a sprite
	-request_animated(string id, string||int start_animation/start_frame)
		returns a new sprite object generated from the image id and the start frame
	-destroy_graphics_for(int id)
		destroys the graphics objects associated with the instance of the passed id
	-follow(int id)
		sets the camera to follow the object of the passed id
	-get_movement_edge()
		returns left camera bound, a.k.a, the movement edge. used for lots of things
		
*/
var GraphicsController = (function(){
	/* 
	Controls all graphics and provides an interface for common easel.js functions
	*/
	
	var get_asset; 
	var type_renderer_table;
	var PrivateGraphics; 
	var reRender = false;

	var init = function(){
		/* is ran from the InitController once when the game is loaded */
		include(); // satisfy requirements

		//All renderers must be registered here
		//Links each renderer with its object id
		type_renderer_table = {
		// type:	renderer:
			"ant": AntRenderer,
			"hero": HeroRenderer,
			"Griffin":GriffinRenderer,
			"Hyena": HyenaRenderer,
			"terrain_cell": TerrainCellRenderer,
			"terrain_slice": TerrainSliceRenderer,
			"companion": EsteemedCompanionRenderer,
            "pizza": PizzaRenderer,
		};

		get_asset = AssetController.get_asset; // for quicker access

		GraphicsModel.stage = new createjs.Stage(Config.MAIN_CANVAS_NAME);
		GraphicsModel.stage.canvas.width = Config.SCREEN_W;
		GraphicsModel.stage.canvas.height = Config.SCREEN_H;
		
		GraphicsModel.camera.offset_from_followed.x -= (1614 - GraphicsModel.stage.canvas.width) / 3;

		// init all renderers
		for(type in type_renderer_table){
			type_renderer_table[type].init();
		}

		// this object is passed to all renderers to give them access to functions
		// that no one else is supposed to be able to access
		PrivateGraphics = {
			stage: GraphicsModel.stage,
			request_bitmap: request_bitmap,
			request_animated: request_animated,
			get_asset: get_asset,
			trans_xy: trans_xy,
			reg_for_render: reg_for_render,
		};

		BackgroundRenderer.init();
		HUDRenderer.init();

	};

    
	var update = function(delta){
		/* is ran each tick from the GameController.update_all */
		
		update_camera(); // needs to be updated first

		destroy_unneeded(); // goes second, do not update any stuff before unneeded stuff is removed

		register_new_stuff();

		render_things();
		
		synchronize_to_physical_bodies();

		BackgroundRenderer.render();
		
		HUDRenderer.render();
		
		GraphicsModel.stage.update();
	};

	var destroy_unneeded = function(){
		/**
		* destroy graphics for everything that was marked
		* for destruction
		*/

		var slices = RegisterAsController.retrieve_registered_as("removed_slice");

		var entities = RegisterAsController.retrieve_registered_as("removed_entity");

		while(slices.length > 0){
			var slice = slices.pop();
			var grid = slice.grid;

			for(var i = 0; i < grid.length; i++){
				var row = grid[i]; // or is it a column?

				for(var j = 0; j < row.length; j++){
					var cell = row[j];
					if(cell.kind != 0){
						destroy_graphics_for(cell.id);
					}
				}
			}
			
		}
		
		while(entities.length > 0){
			var entity = entities.pop();
			destroy_graphics_for(entity.id);
		}
	};
	
	

	var follow = function(id){
		//order camera to follow the graphical representation
		//of an object with the given id, if it exists
		GraphicsModel.camera.following = GraphicsModel.all_physical[id];
	};
	
	
	var register_new_stuff = function(){
		//search through all instances in the queue 
		//and register them for graphics updates.

		// retrieve instances of physical things that do not have graphics yet
		var new_stuff = RegisterAsController.retrieve_registered_as("awaiting_graphics_initialization");

		var length = new_stuff.length
		for(var i = 0; i < length; i++){
			var new_obj = new_stuff.pop();
			if(type_renderer_table[new_obj.type]){
				// if renderer exists for this type, register through it
				type_renderer_table[new_obj.type].register(new_obj, PrivateGraphics);	
			}else{
				throw "No renderer found for the type " + String(new_obj.type) +
					" confirm that renderer exists and is added to the GraphicsController.type_renderer_table"
			}
		}
	};
	
	var render_things = function(){
		/**
		* call renderers for everything
		*/
		
		var to_render = GraphicsModel.special_render;

		for(var type in to_render){
			var table = to_render[type];
			var renderer = type_renderer_table[type];

			for(var id in table){
				sprite_animate(table[id], PrivateGraphics);
			}
		}
		
	};
	
	var sprite_animate = function(sprite){
		//set graphical representation based on the animation variable determined by the AI
		//set animation
		if(sprite.physical_instance.needs_graphics_update){
			var animation = sprite.physical_instance.animation;
			sprite.gotoAndPlay(animation)
		}
		
		//set direction
		if (sprite.physical_instance.direction){ //if direction == right, flip right
			sprite.scaleX = -1;
		}else{ //else flip left
			sprite.scaleX = 1;
		}

		//set alpha if blinking
		if(sprite.physical_instance.blinking && sprite.physical_instance.blink_timer%2 == 1){
			sprite.alpha = 0;
		}else{
			sprite.alpha = 1;
		}
	};

	//called from update(), maintains camera position
	var update_camera = function(){
		var camera = GraphicsModel.camera;
		var center = camera.center;
		
		center.x = Config.SCREEN_W/2 - camera.offset_from_followed.x;
		//CAMERA SHOULD NOT MOVE VERTICALLY
		//center.y = Config.SCREEN_H/2 - camera.offset_from_followed.y;
		
		if(camera.following != null){
		    camera.offset.x = center.x - camera.following.physical_instance.body.GetWorldCenter().x * Config.B2D.SCALE;
			camera.offset.y = center.y - camera.following.physical_instance.body.GetWorldCenter().y * Config.B2D.SCALE;
			// now, we do not want the camera to display what is behind the movement edge. but the camera is a relative thing
			// so we can't just limit some sort of x position or such.
			// I'll use the following technique: 
			//   1. calculate were the physical movement edge would be if drawn right now to the canvas
			//   2. if it would be displayed on-screen, offset camera so that it wouldn't be anymore

			var mov_edge_graphics_x = (WorldController.get_movement_edge() * Config.B2D.SCALE) + camera.offset.x;

			// recall that left display edge is 0 for graphics, as (0, 0) is the top-left corner
			if(mov_edge_graphics_x > 0){
				// if movement edge would be displayed
				camera.offset.x -= mov_edge_graphics_x;
			}
		}
		if (camera.offset.y < 0) {
		    camera.offset.y = 0;
		}

		adjust_debug_draw(); // goes last
	};

	


	//*************************************
	var adjust_debug_draw = function(){
		var camera = GraphicsModel.camera;
		TestController.set_debug_offset(camera.offset.x, camera.offset.y);
	};

	var request_bitmap = function(id){
		// if id is invalid, throw meaningful exception?
		var bitmap = new createjs.Bitmap(get_asset(id));
		// more complicated setting for registration position may be needed, depending on the body attached
		if (!(bitmap.image)){
			throw "Error: image wasn't correctly loaded for this bitmap";
		}
		
		bitmap.regX = bitmap.image.width/2;
		bitmap.regY = bitmap.image.height/2;

		return bitmap;
		// TODO research DisplayObject's caching. and maybe incorporate
	};
	
	
	var request_animated = function(id, start_frame){
		// this implementation is temporary
		// until I setup efficient facility for defining spritesheets
		// within GraphicsController

		if(!id || !start_frame){
			if(!id){
				throw "wrong id";
			}else{
				throw "wrong start_frame";
			}
		};

		var sprite = new createjs.Sprite(id, start_frame);

		return sprite;
	};

	
	//converts easeljs origins to box2d origins
	var synchronize_to_physical_bodies = function(){

		var tiles = GraphicsModel.all_physical;

		for(var id in tiles){
			var tile = tiles[id];
			var body = tile.physical_instance.body;
			var tile_pos = trans_xy(body.GetWorldCenter());

			tile.x = tile_pos.x;
			tile.y = tile_pos.y;
		}
	};
	

	var trans_xy = function(position_vector_unscaled){
		// takes position vector with values in meters, translates
		// it to pixel position taking the camera position into account
		var camera = GraphicsModel.camera;

		var x = (position_vector_unscaled.x * Config.B2D.SCALE) + camera.offset.x;
		var y = (position_vector_unscaled.y * Config.B2D.SCALE) + camera.offset.y;

		return {x: x, y: y};	
	};

	var set_reg_position = function(easeljs_obj, offset_x, offset_y){
		// sets registration position of the easeljs object
		// regisration position is the relative point of the object
		// that you move when you set object's x and y coordinats
		// i.e. if reg. position of the player is head, and you set their
		// position to (0, 0), their head will be at (0, 0)
		// currently the registration position is set to the middle of the body
		// to match what box2d does
		// last two arguments are optional and set PIXEL offset from the normal registration
		// position
		
		// this if statement should be temporary
		if(easeljs_obj.image){
			var w = easeljs_obj.image.width;	
			var h = easeljs_obj.image.height;	
		}else{
			var w = easeljs_obj.spriteSheet._frameWidth;
			var h = easeljs_obj.spriteSheet._frameHeight;
		};

		var offset_x = offset_x || 0;
		var offset_y = offset_y || 0;

		easeljs_obj.regX = w/2 + offset_x;
		easeljs_obj.regY = h/2 + offset_y;

	};

	var reg_for_render = function(easeljs_obj, physical_instance){
		// registeres object for rendering within graphics controller
		// if (OPTIONAL!) physical_instance is given, graphics controller will automatically
		// set the easeljs_obj's position to position of that body, each tick.
		// if the type of the physical instance is associated with some renderer
			
		
		if(physical_instance){

			if(physical_instance.body == null){
				// are you trying to do something terrible? such as registering
				// some object that doesn't need graphical representation?
				throw "Physical instance is provided, but it has no body";
			}
			var id = physical_instance.id;
			var type = physical_instance.type;

			if(id == null || type == null){
				throw "Id or type is undefined for this physical instance";
			}

			easeljs_obj.physical_instance = physical_instance;
			GraphicsModel.all_physical[id] = easeljs_obj;

			if(!GraphicsModel.special_render[type]){
				GraphicsModel.special_render[type] = {};
			}

			GraphicsModel.special_render[type][id] = easeljs_obj;
		}


		AddToStage(easeljs_obj);
	};

	var AddToStage = function(element){
		// can be updated later to manage z-index or whatever
		GraphicsModel.stage.addChild(element);
	};
	

	var get_stage = function(){
		return GraphicsModel.stage;
	};
	
	var get_camera = function(){
		return GraphicsModel.camera;
	};
	
	var destroy_graphics_for = function(id){
		/**
		* remove from the stage and destroy graphics instances for the object with the given id
		* this includes removing all references to it.
		* TODO: IMPORTANT!!! if GraphicsController was updated to store more
		* references to some graphics instances, UPDATE this function to reflect changes
		* even a single reference to the object may cause it to stay in memory
		*/
		

		if(GraphicsModel.all_physical[id] != null){
			var graphics_instance = GraphicsModel.all_physical[id];
		}else{
			// if you encounter this exception, maybe implementation changed. 
			// If that's the case, some things need rewriting. This function in
			// prticular. Or maybe there is a bug.
			throw "The graphics object with id " + String(id) + " isn't registered as having physical body";
		}

		if(graphics_instance.physical_instance.type != null){
			var type = graphics_instance.physical_instance.type;

		}else{
			// if you encounter this exception it may mean a bug, or alternatively
			// it may mean that implementation changed and this function needs an update
			throw "Physical instance with id " + String(id) + " doesn't seem to have a type";
		}
		
		// remove from the stage 
		
			/* graphics_instance.removeAllEventListeners(); 
			   could be necessary to remove attached event listeners, but it seems, at least
			   so far, that this stuff is done automatically be easeljs */

			GraphicsModel.stage.removeChild(graphics_instance);

		// remove from all_physical (responsible tracking for body position)
			delete GraphicsModel.all_physical[id];
		// remove from special_render
			delete GraphicsModel.special_render[type][id];
		// TODO: remove camera reference if following this object
			
	};

	return {
		// declare public
		init: init, 
		update: update,
		get_stage: get_stage,
		get_camera: get_camera,
		get_asset: get_asset,
		reg_for_render: reg_for_render,
		set_reg_position: set_reg_position,
		request_bitmap: request_bitmap,
		request_animated: request_animated,
		destroy_graphics_for: destroy_graphics_for,
		follow: follow,
	};
})();

module.exports = GraphicsController;

var Includes = require("../Includes.js"); var include_data = Includes.get_include_data({
	current_module: "GraphicsController", 
	include_options: Includes.choices.DEFAULT | Includes.choices.RENDERERS
}); eval(include_data.name_statements); var include = function(){eval(include_data.module_statements);}


},{"../Includes.js":"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Includes.js"}],"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Controllers/IdentificationController.js":[function(require,module,exports){

var IdentificationController = (function(){
	/* Is in charge of giving unique ID's to everything
	 * that wants them
	*/

	var init = function(){
		/* is ran from the InitController once when the game is loaded */

		include(); // satisfy requirements

		// create 100 id's
		for(var i = 0; i < 100; i++){
			var id = IdentificationModel.next_id ++;
			IdentificationModel.free_ids.push(id);
			IdentificationModel.id_matching[id] = null;
		}

	};

	var update = function(delta){
		/* is ran each tick from the GameController.update_all */
		// cleanup ids, if too many free ids (like if non-free id's < free id's/10
		
		//TODO: make function to actually be called from the GameController.update_all
		// TODO: loop through all non-free id's, and if any of them reference null,
		// remove (unregister) them;
		var cmds = KeyboardController.debug_commands();
		
		if(cmds("show_ids")){
			console.log(IdentificationModel.free_ids, IdentificationModel.next_id);
		}

	};

	var assign_id = function(obj, set_id){
		/**
		* assigns id to the object
		* sets property id on the object given. you can give OPTIONAL parameter
		* set_id which should be a function that takes object and id and assigns
		* id to the object. this can be useful if you want to store id in some unusual
		* place, or perform some extra operations before id is assigned
		*
		* return id assigned
		* IdentificationController will remember that this id has been assigned
		* this object
		*/
		var free = IdentificationModel.free_ids;
		var id;

		// get free id
		if(free.length > 0){
			id = free.pop();
		}else{
			id = IdentificationModel.next_id++;
		}

		// set id on the object. through function if provided
		if(set_id){
			set_id(obj, id);
		}else{
			obj.id = id;
		}

		// associate id with the object obj
		IdentificationModel.id_matching[id] = obj;

		return id
	};

	var reserve_id = function(){
		/**
		* returns free id and promises not to overite it
		* also allows someone to force this id
		*/
		var free = IdentificationModel.free_ids;
		// get free id
		if(free.length > 0){
			id = free.pop();
		}else{
			id = IdentificationModel.next_id++;
		}

		IdentificationModel.reserved.push(id);

		return id;

	};
	

	var force_id = function(obj, id, set_id){
		/**
		* Force object >obj< to have the given id >id<
		* If id isn't free, exception is thrown
		* This function is most likely used directly only for the multiplayer
		* purposes 
		* If OPTIONAL function >set_id< is given, it'll be called instead
		* of assigning ids directly (use this if special manipulations should be done)
		*
		*/

		var free = IdentificationModel.free_ids;
		var reserved = IdentificationModel.reserved;

		var idx = free.indexOf(id); 
		var idy = reserved.indexOf(id);

		if(idx >= 0){
			var id = free.splice(idx, 1); // extract the desired index 
		}else if (idy >= 0){
			var id = reserved.splice(idx, 1); // extract the desired index 
		}else{
			// if not found, then non-free id, then exception
			throw "The id " + String(id) + " is non-free";
		}
	
		// set id on the object. through function if provided
		if(set_id){
			set_id(obj, id);
		}else{
			obj.id = id;
		}

		// associate id with the object obj
		IdentificationModel.id_matching[id] = obj;

		return id;

	};

	var get_by_id = function(id){
		/**
		* get object associated with the given id
		*/
		return IdentificationModel.id_matching[id];
	};

	var remove_id = function(id){
		/**
		* mark id as free and no longer assiciate it with any object
		* notice that you yourself is responsible for making sure
		* that object that was associated with this id doesn't think
		* that he is still assigned this is
		*/

		// TODO: make sure that all known places that use ids (PhysicsControllers'
		// contact listener for example) are notified that id had been unregistered
		delete IdentificationModel.id_matching[id];
		IdentificationModel.free_ids.push(id);
	};
	
	var assign_type = function(obj, type){
		/**
		* assigns wanted type (string) to the given
		* model definition
		* if you try to assign same type twice, throws exception;
		* Id...Controller allows you to retrieve model
		*/

		var types = IdentificationModel.types;
		if(types[type]){
			throw "Error: type " + type + " is already registered. " +
				"You can't register the same type twice";
		}else{
			types[type] = obj;
			obj.prototype.type = type;
		}
		
	};
	
	var get_by_type = function(type){
		/**
		* gets object by it's type
		*/
		var types = IdentificationModel.types;
		if(types[type]){
			return types[type];
		}else{
			throw "Error: type " + type + " wasn't defined yet";
		}
	};
	
	
	
	
	return {
		// declare public
		init: init, 
		update: update,
		assign_id: assign_id,
		reserve_id: reserve_id,
		force_id: force_id,
		get_by_id: get_by_id,
		remove_id: remove_id,
		assign_type: assign_type,
		get_by_type: get_by_type,
	};
})();

module.exports = IdentificationController;

var Includes = require("../Includes.js"); var include_data = Includes.get_include_data({
	current_module: "IdentificationController", 
	include_options: Includes.choices.DEFAULT
}); eval(include_data.name_statements); var include = function(){eval(include_data.module_statements);}


},{"../Includes.js":"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Includes.js"}],"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Controllers/InitController.js":[function(require,module,exports){
var InitController = (function(){
	// why do you want to put initialization of everything into the InitController?
	// Because if initialization of smth depends on initialization of smth else,
	// it's easier to control here
	//
	// e.g. if you try to do var foo = $('#foo'); somewhere in other module,
	// you can get foo = null; as code of that module can execute before the html document
	// was fully loaded, but >InitController.init< is called after document was loaded, so
	// -1 potential problem. Btw, at this moment in time the the stuff is set to work that way
	// using html (<body onload=...); maybe using JS would be better? Idk;
		

	var init = function(mode, session_id, player_id){
		include();

		Config.Init.mode = mode;
		Config.Init.session_id = session_id;
		Config.Init.player_id = player_id;

		enable_arrowkey_scroll(false);
		setup_screen();
		setup_events();

		init_all_modules(mode); // call .init function of everyone. e.g. PlayerController.init(); etc.

		
		// Notice that asset dependent stuff doesn't (and mustn't) start until
		// all assets are completely loaded. That includes ticker, i.e. no ticks are processed
		// until everything is loaded. If you want something different, e.g. display some sort of loading
		// animation - let me know.
		// Look into the setup_asset_dependent function
			AssetModel.loader = new createjs.LoadQueue(false); // loading resourses using preload.js
			AssetModel.loader.addEventListener("complete", setup_asset_dependent);

		// if more stuff needs to be done for the test mode, 
		// or more types of it needs to be added
		// you can safely make the following a separate function
			var asset_path = (mode == "test") ? "./assets/art/" : "../GameCode/assets/art/";

		AssetController.init(asset_path);
		
		//setup_asset_dependent();

	};

	var init_all_modules = function(mode){
		// TODO: better way to do stuff like that (call certain function
		// of every module in the order. 
		// Also, init and update functions of each module should probably
		// accept some argument. I think to make this argument an object,
		// this way we can add more things to be passed w/o any problem and
		// we won't need to change anything
		
		B2d.init(); // goes first
		IdentificationController.init();
		RegisterAsController.init();

		//AssetController.init(); // called from the InitController.init// stuff has to change
		GameController.init();
		KeyboardController.init();
		PhysicsController.init();

		TestController.init(mode);
		

		//PlayerController.init();
		TerrainController.init();
		TerrainSliceController.init();
		WorldController.init();
		



		// WARNING!!! GraphicsController.init is called from the
		// setup_asset_dependent function as it, well, depends on assets being loaded

	};


	var enable_arrowkey_scroll = function(enable_scroll){
		if(enable_scroll == false){                                                          
			document.addEventListener('keydown', function(e){ // .getElementById("display_canvas")
				arrows = [37, 38, 39, 40];                                          
				if(arrows.indexOf(e.keyCode) > -1){                                 
					e.preventDefault();                                             
					return false;                                                   
				}else{                                                              
					return true                                                     
				}                                                                   
			})                                                                      
		}		
	};
	
	var setup_screen = function(){

		// Setting up other stuff:
		// e.g setup canvas size
		
		// TODO: allow resizes?

		Config.SCREEN_W = $('#canvas_container').width(); // is dynamically set to pixel width of the containing element

		// possible resizing technique: 
		// http://www.fabiobiondi.com/blog/2012/08/createjs-and-html5-canvas-resize-fullscreen-and-liquid-layouts/

		
		//$('#debug_canvas').width(String(SCREEN_W) + "px");
		//$('#display_canvas').width(String(SCREEN_W) + "px");

		//$('#debug_canvas').height(String(SCREEN_H) + "px");
		//$('#display_canvas').height(String(SCREEN_H) + "px");
		
	};

	var setup_ticker = function(){

		createjs.Ticker.setFPS(Config.FPS);

		// ticker: on each tick call GameController.update_all();
		createjs.Ticker.addEventListener("tick", GameController.update_all);

	
	};

	var setup_events = function(){


		// keyboard input event: on each keyboard event call appropriate KeyboardController function
		document.onkeydown = KeyboardController.keydown;
		document.onkeyup = KeyboardController.keyup;

			// on interrupt event: stop/pause ticker ?

	};

	var setup_asset_dependent = function(){
		// this may need to move to either load_game or some sort of resizing function
		MultiplayerSyncController.init();
		
		
		NetworkController.init();
		EntityController.init();
		GraphicsController.init();
		//HUDController.init();
		//BackgroundController.init();

		
		setup_ticker();

		//TerrainController.generate_terrain(); // Initial terrain generation // deprecated, generation will be called from update each tick
	};


	return {
		init: init,
	};
})();

module.exports = InitController;

var Includes = require("../Includes.js"); var include_data = Includes.get_include_data({
	current_module: "InitController", 
	include_options: Includes.choices.ALL
}); eval(include_data.name_statements); var include = function(){eval(include_data.module_statements);}


},{"../Includes.js":"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Includes.js"}],"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Controllers/KeyboardController.js":[function(require,module,exports){
var KeyboardController = (function()
{

	var init = function(){
		
		include();
	};

	var update = function(delta){
		/**
		* update called from GameController.update_all
		*/
		
		if(KeyboardModel.state_changed){
			// if keyboard state changed since the last time,
			// send the keyboard state over.
			// TODO: optimize?
			// You could send only those specific keys that changed, not whole table
			// You could send only relevant keys that might be needed there
			// Is it worth the time spent? Keep in minds, those tables are usually small,
			// unless players decide to smash their faces into the keybord repeatedly
			// (our game isn't that bad, right?)
			MultiplayerSyncController.route_outcoming_packet({
				op: "keyboard_state",
				key_table: KeyboardModel.keys,
			});

			KeyboardModel.state_changed = false;
		}
		
	};

	var handle_keyboard_change = function(packet){
		/**
		* accepts the network packet. changes the respective
		* keybord state for the given packet.player_id
		* is called from the MultiplayerSyncController
		*/
		var player_id = packet.player_id;
		
		if(player_id == null){
			throw "Error: (network) player_id is not defined";
		}

		KeyboardModel.all_keyboard_states[player_id] = packet.key_table;
	};
	
	
	var copy_object = function(obj){
		/**
		* returns (shallow) copy of the object
		*
		* @Stack Overflow:
		* With jQuery, you can shallow copy with:
		* var copiedObject = jQuery.extend({}, originalObject)
		* subsequent changes to the copiedObject will not affect the originalObject, and vice versa.
		* Or to make a deep copy:
		* var copiedObject = jQuery.extend(true, {}, originalObject)
		*/
		
		return jQuery.extend({}, obj);
	};
	
	
	
	var get_active_commands_function = function(table, player_id){
		// >player_id< is optional, and part of a dirty-ish quick implementation
		// Things should be rewritten at some point
		//
		// get all commands associated with keys that are defined in the >table<,
		// and are currently pressed
		//
		// returns: array of commands
		//
		// TODO: REFACTOR this function to work better and so people do not
		// need to call it each tick. instead they should get reference to function one time
		// and stay updated on the active commands
		
		var commands = [];
		if(player_id != null){
			var key_table = KeyboardModel.all_keyboard_states[player_id];
		}else{
			var key_table = KeyboardModel.keys;
		}
		
		$.each(KeyboardModel.translation_tables.code_to_name, function(key, cmd){
			if(key_table[key] && table[cmd]){
				commands.push(table[cmd]);
			}
		});

		var get_key = function(key){
			if(commands.indexOf(key) > -1){
				return true;
			}else{
				return false
			};
		};

		return get_key;
	};

	// public:
	
	var keydown = function(event){
		KeyboardModel.keys[event.keyCode] = true;
		KeyboardModel.state_changed = true;
	};

	var keyup = function(event){
		delete KeyboardModel.keys[event.keyCode];
		KeyboardModel.state_changed = true;
	};


	var movement_commands = function(){
		return get_active_commands_function(KeyboardModel.translation_tables.movement);
	};

	var pause_commands = function () {
	    return get_active_commands_function(KeyboardModel.translation_tables.pause);
	};

	var debug_commands = function(){
		/**
		* commands active in debug mode
		*/
		return get_active_commands_function(KeyboardModel.translation_tables.debug);
	};
	
	var get_remote_movement = function(player_id){
		/**
		* this it TEMPORARY function 
		* I throw it together so I do not have to change how keyboard controller works for now
		* if we find that we should send more keyboard stuff over the network, we should rewrite
		* the KeyboardController appropriately
		*/

		if(player_id == null){
			throw "Error: player_id undefined";
		}

		var key_fun = get_active_commands_function(KeyboardModel.translation_tables.movement, player_id);
		return key_fun;
	};
	
	

	return {
		keydown: keydown,
		keyup: keyup,
        pause_commands: pause_commands,
		movement_commands: movement_commands,
		debug_commands: debug_commands,
		init: init,
		update: update,
		handle_keyboard_change: handle_keyboard_change,
		get_remote_movement: get_remote_movement,
	};

})();

module.exports = KeyboardController;

var Includes = require("../Includes.js"); var include_data = Includes.get_include_data({
	current_module: "KeyboardController", 
	include_options: Includes.choices.DEFAULT
}); eval(include_data.name_statements); var include = function(){eval(include_data.module_statements);}


},{"../Includes.js":"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Includes.js"}],"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Controllers/MultiplayerSyncController.js":[function(require,module,exports){

var MultiplayerSyncController = (function(){
	/* Ensures that current player is synchronized with the server
	 * or with other players
	*/

	var op_table;

	var init = function(){
		/* is ran from the InitController once when the game is loaded */
		include(); // satisfy requirements

		// table that associates >op< (operation) with the specific handler
		// at some (likely external) module
		op_table = {
			spawn: EntityController.handle_spawn,
			delete_entity: EntityController.handle_delete,
			keyboard_state: KeyboardController.handle_keyboard_change,
			hero_sync: EntityController.handle_hero_sync,
			terrain_seed: sync_seed,
		}
	};


	var update = function(delta){
		/* is ran each tick from the GameController.update_all */

		var data = NetworkController.get_data(); // array of all packets

		var op_packet = MultiplayerSyncModel.op_packets_table; //op_packet is a list of objects


		// the following loop will store packets based on their op
		/*if(data != null){
			for(var i = 0; i < data.length; i++){ //for each packet in buffer
				var packet = data[i];
				var op = packet.op; //get packet op
				op_packet[op] = op_packet[op] || [];
				if(op != null){
					op_packet[op].push(packet);
				}else{
					console.log(packet);
					throw "Error, this packet has no op property"
				}
			}
		}*/
		
		//handle_packets(data); // Seans

		if(data != null){
			for(var i = 0; i < data.length; i++){
				// for each packet in incoming packets,
				// rout it
				var packet = data[i];
				route_incoming_packet(packet);
			}
		}

		NetworkController.clean_data();	// remove data that was processed
	};

	var route_outcoming_packet = function(packet){
		/**
		* route packet appropriately
		*/
		if(packet.player_id == null){
				// if packet wasn't identified before
				// identify the packet as mine
				packet.player_id = NetworkController.get_network_id();
		}

		var op = packet.op;
		var handler = op_table[op];

		if(handler == null){
			// if no handler assigned
			console.warn("No handler for op", op);
			return -1;
		}

		if(Config.Remote.connected){
			// if multiplayer
			
			
			if(Config.Remote.master){
				// if master of the network
				// route back to specific handler
				// echo to all clients

				handler(packet);

				var response = packet; // do we want to allow overriding the response?

				NetworkController.add_to_next_update(response);
			}else{
				// if one of the clients
				// route to the master
				NetworkController.add_to_next_update(packet);
			}
		}else{
			// if singlplayer
			// route back to the specific handler
			handler(packet);
			//console.log(op,handler);
			
			
		}
	};

	var route_incoming_packet = function(packet){
		/**
		* handle packet that arrived over the network
		* ! this function is called only when packets arrive remotely
		* ! so you may safely assume that you are connected to the network
		* ! and the packet didn't originate on your side (this last one is
		* ! especially important)
		*/

		apply_transforms(packet); // apply any necessary transformations before beginning

		var op = packet.op;
		var handler = op_table[op];

		if(handler == null){
			// if no handler assigned
			console.warn("No handler for op", op);
			return -1;
		}

		if(Config.Remote.master){
			// if master
			// route to specific handler
			// echo to the clients
			handler(packet);
			NetworkController.add_to_next_update(packet);
		}else{
			// if one of the clients
			// route to the handler
			handler(packet);
		}
		
	};

	var apply_transforms = function(packet){
		/**
		* if some specific transformation is supposed to be applied to the packet
		* (op should change somehow, new properties added etc.)
		* apply this transformation
		* ! notice that transforms are applied to incoming packets only
		* ! if you are confident you need something else, contact me (AK)
		*/

		switch(packet.op){
			case null:
				console.log(packet);
				throw "op for this packet is undefined";
				break;
			case "spawn":
				//if(packet.type == "companion"){
					//if(packet.player_id == NetworkController.get_network_id()){
						//// if I am receiving notification about my own hero spawned
						//// spawn hero instead of companion
						//packet.type = "hero";
					//}
				//}else if(packet.type == "hero"){
					//// someone requested hero spawn,
					//// but I should spawn companion
					//packet.type = "companion";
				//}
				break;
			//default:
		}

		return packet;
	};
	
	
	
	/*
	iterates through packets and parses them based on op (operation)
	*/
	/*var handle_packets = function(data){
		if(data != null){
			for(i = 0;i < data.length; i++){
				packet = data[i];
				switch (packet.op){
					case null:
						break;
					case "spawn":
						if (packet.is_request == Config.Remote.master){
							handle_spawn(packet);
						}
						break;
					case "delete":
						if (packet.is_request == Config.Remote.master){
							handle_delete(packet);
						}
						break;
				}
			}
		}
	};
	
	var get_packets_by_op = function(op){
		[>*
		* gets all packets with the operation >op<
		* for you
		<]
		return MultiplayerSyncModel.op_packets_table[op];
	};
	
		[>
		The handle_spawn() function takes an object as a parameter
		it handles the packet based on whether the caller is a master, slave, or single player
		and on the contents of the packet
		the packet holds the following
			required data fields:
				-string type
						string index of class to be instantiated
				-int x
						x coordinate of instance
				-int y
						y coordinate of instance
			automatically assigned data fields:
				-bool is_request
						true if request from slave
						false if notification from master
				-string op
						marks packet to be parsed as instance spawner
			additionally, the packet can be assigned any number of extra variables
			to be parsed by the class' individual spawn() function
		<]
	var handle_spawn = function(packet){
			var type;
			var object;
			var operation;
			if (packet.type == null){
				console.log(packet);
				throw "Error, this packet has no type property"
			}
			if (!Config.Remote.connected){ //if singleplayer
				packet.assign = true;
				fulfill_spawn_request(packet);
			}else if (Config.Remote.master){ //if master
				packet.assign = true;
				packet = fulfill_spawn_request(packet);
				send_spawn_notifications(packet);
			}else{ //if slave
				if (packet.entity_id != null){//if called in response to a notification
					packet.assign = false;
					fulfill_spawn_request(packet);
				}else{//if called directly from slave session
					send_spawn_request(packet);
				}
			}
	};
		
	var fulfill_spawn_request = function(packet){
			var operation;
			var object;
			var type = packet.type;
			if (type != "hero"){
				operation = EntityController.get_operation(type); //get relevant spawn() function from EntityController
			}else{
				if (typeof packet.controller_id === 'undefined' || packet.controller_id == NetworkController.get_network_id()){
					packet.controller_id = NetworkController.get_network_id();
					operation = EntityController.get_operation("hero");
				}else{
					operation = EntityController.get_operation("companion");
				}
			}
		object = new operation(packet.x,packet.y);
		if (packet.assign){
			IdentificationController.assign_id(object);
			packet.entity_id = object.id;
		}else{
			IdentificationController.force_id(object,packet.entity_id);
		}
		EntityController.reg_for_logic_update(object);
		return packet;
	}
		
	var handle_delete = function(packet){
		if (packet.id == null){
			console.log(packet);
			throw "Error, this packet has no id property"
			}
			var id = packet.id;
			var object;
			object = IdentificationController.get_by_id(id);
			if (!Config.Remote.connected){ //if singleplayer
				EntityController.fulfill_delete_request(object);
			}else if (Config.Remote.master){ //if master
				console.log("master issues death sentence");
				EntityController.fulfill_delete_request(object); 
				packet.entity_id = object.id;
				send_delete_notifications(packet);
			}else{ //if slave
				if (typeof packet.entity_id !== 'undefined'){//if called in response to a notification
					EntityController.fulfill_delete_request(object); 
					console.log("slave got its wish");
				}else{//if called directly from slave session
					send_delete_request(packet);
					console.log("slave requests death sentence");
				}
			}
		};
	
	//send spawn request to master
	var send_spawn_request = function(packet){
		packet.op = "spawn";
		packet.is_request = true;
		NetworkController.add_to_next_update(packet);
	};
	
	//var send_spawn_notifications = function(x, y, type, id, extras){
	var send_spawn_notifications = function(packet){
		//sends notifications about entity spawned, so remote people may
		//spawn their own representations of it
		packet.op = "spawn";
		packet.is_request = false;
		NetworkController.add_to_next_update(packet);
	};
	
	var send_delete_request = function(packet){
		packet.op = "delete";
		packet.is_request = true;
		NetworkController.add_to_next_update(packet);
	};
	
	//var send_spawn_notifications = function(x, y, type, id, extras){
	var send_delete_notifications = function(packet){
		//sends notifications about entity spawned, so remote people may
		//spawn their own representations of it
		packet.op = "delete";
		packet.is_request = false;
		NetworkController.add_to_next_update(packet);
	};*/

	

	var patch = function(object, func){
		/**
		* patch object with the function given
		* >object< - object whose prototype to patch 
		* >func< - NAMED function. it has to have the same name
		* as the function on the >object<'s prototype that it's meant to replace
		* this is function named bar: var hey = function bar(){};
		* this is unnamed function: var hey = function(){};
		*
		* the function that you pass will be called before the normal function body
		* when called, your function will be called on the same object (instance) that
		* old_function is called and will be passed the same arguments
		*/

		if(func.name === ""){
			throw "Function passed should be named function";
		}

		var old_func = object.prototype[func.name];
		var custom_function = func;

		var new_function = function overriden_by_multiplayer_controller(){

			custom_function.apply(this, arguments);
			return old_func.apply(this, arguments); // call old function and return what it returns
		}

		object.prototype[func.name] = new_function;
		
	};
	
	var network_event_handler = function(network_event){
		/**
		* called from the network controller when certain events occur
		*/
		
		var type = network_event.type;
		var id = network_event.network_id;
		switch (type) {
			case 'new_connection':
				if(Config.Remote.master){
					// if master, send the seed for terrain sync
					NetworkController.send_to(id, {
						op: "terrain_seed",
						seed: TerrainController.get_seed(),
					});
				}
				
				break;
			
			default:
				console.log("event_type", event_type, "doesn't have an action associated");
		}
	};

	var sync_seed = function(packet){
		/**
		* description
		*/
		
		var seed = packet.seed;
		if(seed != null){
			TerrainController.set_seed(seed);
		}else{
			throw "seed is not defined";
		}
	};

	return {
		// declare public
		init: init, 
		update: update,
		//get_packets_by_op: get_packets_by_op,
		//handle_spawn: handle_spawn,
		//handle_delete: handle_delete,
		//send_spawn_request: send_spawn_request,
		//send_spawn_notifications: send_spawn_notifications,
		//send_delete_request: send_delete_request,
		//send_delete_notifications: send_delete_notifications,
		route_outcoming_packet: route_outcoming_packet,
		route_incoming_packet: route_incoming_packet,
		network_event_handler: network_event_handler,
	};
})();

module.exports = MultiplayerSyncController;

var Includes = require("../Includes.js"); var include_data = Includes.get_include_data({
	current_module: "MultiplayerSyncController", 
	include_options: Includes.choices.DEFAULT
}); eval(include_data.name_statements); var include = function(){eval(include_data.module_statements);}


},{"../Includes.js":"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Includes.js"}],"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Controllers/NetworkController.js":[function(require,module,exports){

var NetworkController = (function(){
	/* manages p2p communication
	*/

	var peer, conn; // TEMPORARY. there will be multiple of those things
	var MEDIATOR_SERVER_KEY = 'lvgioxuj3ylm1jor'; //'l2f8f8vtbhcfecdi'; //'a7vojcpf70ysyvi';

	var init = function(){
		/* is ran from the InitController once when the game is loaded */
		include(); // satisfy requirements

		// TODO: make sure that sensitive host info (like spawn request that have not been
		// satisfied yet) are processed correctly before unloading
		// also it may make sense to handle even situations when the page was forced to unload
		// even before the function was called (power problem?)
		document.onbeforeunload = on_unload; // will be executed before user leaves page
		NetworkModel.hey = false;
	};


	var update = function(delta){
		/* is ran each tick from the GameController.update_all */

		var cmds = KeyboardController.debug_commands();

		if(!NetworkModel.block_connections && cmds("connect")){ 
			NetworkModel.block_connections = true;
			start_multiplayer_session(["player1", "player2", "player3", "player4", "player5", "player6", "player7", "player8"]);
		}

		if(Config.Remote.connected){
			if(Config.Remote.master){
				// if I am the master, distribute data
				send_out_data();
			}else{
				// if not the master, just send data to the master
				send_data_to_master();
			}
		}

	};

	var start_multiplayer_session = function(ids){
		/**
		* perform procedures to start playing with all
		* other connected people
		*/
		NetworkModel.peers_to_connect = ids;

		if(Config.Init.mode != "test"){	
			// create peer, assign id
			var peer = NetworkModel.my_peer = new_peer(Config.Init.player_id); 
			peer.on('error', handle_standart_peer_error);
			peer.on('open', on_obtaining_id_successfully);
			NetworkModel.my_peer = peer;

		}else{

			setup_network_variables_for_testing_mode();
			setup_my_peer_test(); // setup peer // also picks free idr// calls >on_obtaining_id_successfully
		}
				
	};

	var setup_network_variables_for_testing_mode = function(){
		/**
		* setup various parameters for the testing mode game
		*/
		var ids = NetworkModel.peers_to_connect;

		NetworkModel.connections = {};
		NetworkModel.free_ids = [];

		for(var i = 0; i < ids.length; i++){
			var id = ids[i];
			NetworkModel.connections[id] = null;
			NetworkModel.free_ids.push(id);
		}

		NetworkModel.non_free_ids = [];

	};
	
	
	var handle_standart_peer_error = function(error){
		/**
		* this function is for connection errors
		* in non-test mode
		*/

		console.log(error);
		throw "Peer error";
		
	};
	

	var on_obtaining_id_successfully = function(id){
		/**
		* when the player id for this client was successfully
		* found through the process in the setup_my_peer_test(); function,
		* this function is called, which should setup all necessary things for 
		* the multiplayer to work, and connect to the other player
		*/

		NetworkModel.my_id = id;
		Config.Remote.connected = true;

		var peer = NetworkModel.my_peer;

		peer.on('error', on_peer_error);

		if(NetworkModel.my_id != NetworkModel.my_peer.id){
			// not a meaningful check, terrible practices are terrible
			throw "Id's do not match. Smth went wrong" 
		}

		console.log("Obtained id sucessfully, my id is", id);

		if(Config.Init.mode != "test"){
			console.log("Playing in testing multiplayer mode");
		}else{
			console.log("Playing in normal multiplayer mode");
		}

		/* note that if other peers connect in the future, 
		 * connection with them will be handled at that time
		 * through accept_connection function
		 */
		connect_to_others();

		// allow time for connections to be established, then pick the master
		NetworkModel.timeout_id = setTimeout(pick_the_master, 5000);
	};

	var connect_to_others = function(){
		/**
		* connect to all other peers that are available at this time
		*/
		var ids = NetworkModel.peers_to_connect;
		for(var i = 0; i < ids.length; i++){

			var id = ids[i];

			if(id != NetworkModel.my_id){
				var connection = NetworkModel.my_peer.connect(id);

				connection.on('data', on_data_arrival);
				connection.on('close', on_connection_closed);
				connection.on('open', on_connection_open);
				connection.on('error', on_connection_error);
			}
		}

	};
	
	var on_peer_error = function(error){
		/**
		* called on peer error;
		* notice that this function doesn't handle
		* peer errors that arise from inability to create peer because of id conflicts,
		* as this function is attached as listener only after the peer is sucessfully
		* created
		*/
		//console.warn("Peer error", error);
	};
	
	var setup_my_peer_test = function(error){
		/**
		* setups your personal peer picking free id, and returning it
		* looking up for the free id's is a huge pain now, once we run our
		* own peer matching server, it'll be a lot easier
		*
		* >error< parameter is null on the first call, but if first id that was
		* tried was already taken, and function is called again, it'll not be null 
		*/

		if(error == null || error.type == "unavailable-id"){
			if(NetworkModel.free_ids.length > 0){
				var id = NetworkModel.free_ids.pop();
				NetworkModel.non_free_ids.push(id);
				var peer = NetworkModel.my_peer = new_peer(id); 
				peer.on('error', setup_my_peer_test);
				peer.on('open', on_obtaining_id_successfully);
			}else{
				console.warn("Couldn't establish multiplayer session, all " + String(NetworkModel.peers_to_connect.length) + " available slots taken");
				Config.Remote.connected = false;
				NetworkModel.block_connections = false;

				setup_network_variables_for_testing_mode();
			}
		}else{
			//console.warn("Peer error", error);
		}
		
	};

	var on_connection_open = function(){
		/**
		* on opening the connection
		*/

		var id = this.peer;	
		
		console.log("Successfully initiated new connection with the peer", id);

		NetworkModel.connections[id] = this;
		
	};

	var on_connection_closed = function(){
		/**
		* called when some connection closes
		*/
		var id = this.peer;
		var nfree = NetworkModel.non_free_ids;

		nfree.splice(nfree.indexOf(id), 1);

		NetworkModel.free_ids.push(id);

		delete NetworkModel.connections[id];


		if(NetworkModel.master_id === id){
			console.log("Closing connection with the master");
			NetworkModel.master_id = null;
			pick_the_master();
		}

		console.log("Connection with peer", id, "was successfully closed");
	};

	var on_connection_error = function(error){
		/**
		* when error on trying to establish connection occurs;
		* most often it will be error for peer not existing. that's part of the normal process
		*/
		
		console.log("connection error (likely not a bug)");
	};
	
	var pick_the_master = function(){
		/**
		* pick the master (one with whome everyone synchronizes)
		* for the current group of peers.
		*/

		if(NetworkModel.master_id != null){
			// if master was chosen already
			console.log("master is already chosen");
			return;
		}


		var ids = NetworkModel.peers_to_connect;

		var conns = NetworkModel.connections;

		for(var i = 0; i < ids.length; i++){
			var id = ids[i];

			if(conns[id] != null && id != NetworkModel.my_id){
				NetworkModel.master_id = id;
				console.log("The master is", id);
				return true;
			}else if(id == NetworkModel.my_id){
				// i am the best candidate for master
				Config.Remote.master = true;
				console.log("I am the law (was chosen as master)");
				NetworkModel.master_id = id;
				return true;
			}
		}

	}; // end pick_the_master
	
	var new_peer = function(id){
		/**
		* pass the id you want the peer to have
		* returns created peer
		*/
		
		var peer = new Peer(id, {key: MEDIATOR_SERVER_KEY});

		peer.on('connection', accept_connection);


		return peer;
	};

	var accept_connection = function(conn){
		/**
		* takes connection
		* is called when someone attempts to establish connection
		* with this client
		*/

		var free_ids = NetworkModel.free_ids;
		var nfree_ids = NetworkModel.non_free_ids;

		var id = conn.peer;
		NetworkModel.connections[id] = conn;

		// remove the id from list of free ids. notice that 
		// array is relatively small, and operation happends seldomly
		free_ids.splice(free_ids.indexOf(id), 1); 

		console.log("accepting connection from peer", id);
		
		nfree_ids.push(id);

		conn.on('data', on_data_arrival);

		if(Config.Remote.master){
			// If I am the master, I want to notify them about it
			setTimeout(function(){
					send_to(id, {special_communication: true, message: "I am the law!", master_id: NetworkModel.my_id});
				}
				, 2000);
		}

		MultiplayerSyncController.network_event_handler({
			type: "new_connection",
			network_id: id,
		});

	};

	var connection_unsuccessful = function(error){
		/**
		* for now, just add the peer to which was trying to connect to the
		* free peers list. Later some investigation or reconnection attempts
		* may be implemented
		*/

		console.log(error);
		
	};

	var update_player_list = function(){
		/**
		* searches for new players using standart player id's
		* this function will be called only once, when this client decides
		* to join multiplayer session, at least theoretically.
		* If you need to call it regularly, it probably should be rewritten
		*/

		var free_ids = NetworkModel.free_ids;

		var peer = NetworkModel.my_peer;
		
		for(var i = 0; i < free_ids.length; i++){
			var conn = peer.connect(free_ids[i]);
			conn.on('error', connection_unsuccessful);
		}
		
	};
	
	
	var send_to = function(peer_id, data){
		/**
		* send data to the peer with the peer_id
		* you can make decision to delay data sending, or change
		* procedure somehow right here
		* but do not try to compress the data in this function.
		* send_to will be fired multiple times per each piece of data
		* (it'll be sent to all other players) so any compression should
		* take place in the "distribute_data" function
		*/

		var conn = NetworkModel.connections[peer_id];

		if(conn != null){
			conn.send(data);
		}else{
			throw "No connection exists for the peer with id " + String(id);
		}
		
	};


	var distribute_data = function(data){
		/**
		* First, manipulate the data to properly compress it, or decide what should
		* and what shouldn't be sent (make sure to document stuff here, because people
		* will pull their hair out trying to understand why their stuff doesn't get sent)
		* Second, send the data to all the connected players in this game
		*/

		var conns = NetworkModel.connections;
		for(var id in conns){
			if(id != NetworkModel.my_id && conns[id]){
				conns[id].send(data);
			}
		}
		
	};


	var on_unload = function(arguments){
		/**
		* will be called when the user is about to leave the web page
		* will make sure connections are gracefully closed and peers are destroyed
		*/

		console.log("document is unloaded now. Destroying peer, disconnecting from others");
		NetworkModel.my_peer.destroy();	
	};
	
	
	var on_event = function(smth){
		/**
		* dummy function, delete when isn't called from anywhere
		*/
		
	};


	var on_data_arrival = function(data){
		/**
		* is called whenever new data arrives
		*/

		if(data.special_communication != null){
			// if this is network handling data,
			// not the regular multiplayer data transfer

			if(data.message == "I am the law!"){
				var m_id = data.master_id;

				NetworkModel.master_id = m_id;
				console.log("The master is", m_id);
				clearTimeout(NetworkModel.timeout_id); // will give an error if timeout passed?
			}
		}

		if(NetworkModel.recieve_array == null){
			NetworkModel.recieve_array = data;
		}else{
			for(var i = 0; i < data.length; i++){
				NetworkModel.recieve_array.push(data[i]);
			}
		}
	};


	var on_error = function(error){
		/**
		* called when error occurs with the peer
		*/
	};


	var connect_to = function(id, peer){
		/**
		* connect peer >peer< to the peer with the given >id<
		* returns connection object
		*/
		
		var conn = peer.connect(id);

		return conn;
	};
	

	var retrieve_from_backlog = function(){
		/**
		* gets packet from the linked list
		* and removes it from the list
		*/
		
		var list = NetworkModel.package_backlog;

		if(list.HEAD == null){
			return null;
		}

		var packet = list.HEAD.packet;

		list.HEAD = list.HEAD.next;
		list.HEAD.previous = null;

		return packet;

	};


	var place_to_backlog = function(packet){
		/**
		* puts packet into the linked list
		*/
		var list = NetworkModel.package_backlog;
		var packet_container = {packet: packet}; 
		if(list.HEAD == null){
			list.HEAD = packet_container;
			list.TAIL = packet_container;
		}else{
			packet_container.previous = list.TAIL;
			list.TAIL.next = packet_container;
			list.TAIL = packet_container;
		}
	};
	

	var add_to_next_update = function(data){
		/**
		* call this function to schedule the data to be passed to the master/clients.
		* note that this module will decide itself when and how to send the data,
		* so you are not guaranteed that it'll be send immediately, or with the next update
		* You should account for that. This function is meant to be intelligent and prioritize more important
		* stuff
		*/

		// TEMPORARYYYYYYYYYYYYYYYYYYYYYYYYYY	
		//NetworkModel.output_cell = NetworkModel.output_cell || {};
		//NetworkModel.output_cell[data.purpose] = data.content;
		
		
		
		NetworkModel.send_array = NetworkModel.send_array || [];

		NetworkModel.send_array.push(data);
	};

	var send_out_data = function(){
		/**
		* temp
		*/
		
		
		if(NetworkModel.send_array != null){
			
			distribute_data(NetworkModel.send_array);
			NetworkModel.send_array = null;
		}

	};

	var send_data_to_master = function(){
		/**
		* send the prepared data to the master
		*/
		var master_conn = NetworkModel.connections[NetworkModel.master_id];
		if(NetworkModel.send_array != null && master_conn != null){
			master_conn.send(NetworkModel.send_array);
			NetworkModel.send_array = null;
		}

	};
	

	var get_data = function(){
		/**
		* get the data array
		*/
		
		var data = NetworkModel.recieve_array;
		
		return data;
	};

	var clean_data = function(){
		/**
		* description
		*/
		delete NetworkModel.recieve_array;
	};
	
	var get_network_id = function(){
		// returns my network id if I am connected,
		// or "local" if not
		if(Config.Remote.connected){
			return NetworkModel.my_id;
		}else{
			return "local";
		}
	};
	
	return {
		// declare public
		init: init, 
		update: update,
		add_to_next_update: add_to_next_update,
		get_data: get_data,
		clean_data: clean_data,
		get_network_id: get_network_id,
		send_to: send_to,
	};
})();

module.exports = NetworkController;

var Includes = require("../Includes.js"); var include_data = Includes.get_include_data({
	current_module: "NetworkController", 
	include_options: Includes.choices.DEFAULT
}); eval(include_data.name_statements); var include = function(){eval(include_data.module_statements);}

},{"../Includes.js":"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Includes.js"}],"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Controllers/PhysicsController.js":[function(require,module,exports){
// Notes:
// notice that you can reuse body definitions multiple times, it makes sense to have
// collection of body definitions that are commonly use and maybe allow some sort of 
// inheritance (i.e. you can make some definition on top of the another definition)
// // bodies are allowed to have userData on them that is just reference to some object.
// may be useful in some situations
//
// Question:
// does it make sense to allow users to pass any properties as part of object definition
// and just apply those properties automatically to the userData property of body?

var B2dConfig;

var PhysicsController = (function(){

	var init = function(){
		include();

		B2dConfig = Config.B2D;

		PhysicsModel.scale = B2dConfig.SCALE;
		PhysicsModel.step_amount = 1/(B2dConfig.SPS);

		PhysicsModel.gravity = new B2d.b2Vec2(0,30); // earth gravity
		PhysicsModel.world = new B2d.b2World(PhysicsModel.gravity, true);

		init_collision_listener();

	};
	
	var step = function (delta_ms) {
		// !? should I set upper limit on delta to prevent world from
		// fast forwarding if the ticker was paused? or that is not a problem in our case?
		// investigation is needed

		var delta = delta_ms/1000;

		PhysicsModel.timeToCover += delta;

		while (PhysicsModel.timeToCover > PhysicsModel.step_amount) {
			PhysicsModel.timeToCover -= PhysicsModel.step_amount;
			PhysicsModel.world.Step(
				PhysicsModel.step_amount,
				B2dConfig.POSITION_ITR, // velocity iterations
				B2dConfig.VELOCITY_ITR // position iterations
			);
		}
	};  // end step 

	var draw_debug = function(){
		if (B2dConfig.debug_draw) {
			PhysicsModel.world.DrawDebugData();
		}
	};

	var get_parent_chain = function(template, default_def){
		var next = template;
		var ancestors = [];

		while(next != null){
			ancestors.push(next);
			next = next["parent"];
		}

		if(default_def){
			ancestors.push(default_def);
		}

		return ancestors;
		
	};

	var apply_parents = function(template_name, template_collection){
		// TODO: refactor the code so this thing is done only once
		// at the load tim
		// that could probably be done even for other things.
		// idea: store compiled body/fixture etc. together with the
		// template. this way you'll have easy access to the all defined
		// options for debugging;
		
		var default_tmplate = template_collection["default"];

		var chain = get_parent_chain(template_collection[template_name], default_tmplate);

		var final_definition = {};

		for(var i = chain.length - 1; i >= 0 ; i--){
			// may be needed to be made more efficient by moving the other way
			// and not considering options that were already encountered in children
			var current = chain[i];


			for(var prop in current){
				final_definition[prop] = current[prop];
			}
		}

		return final_definition;
	}; // end apply_parents
		
	var target_props = {
		body_def: [
			"active",
			"allowSleep",
			"angle",
			"angularDamping",
			"angularVelocity",
			"awake",
			"bullet",
			"fixedRotation",
			"inertiaScale",
			"linearDamping",
			"linearVelocity",
			"position",
			"type",
			//"userData" // doesn't seem to properly work, doing it differently
		],
		fixture_def: [
			"density",
			//"filter", implement later if needed
			"friction",
			"isSensor",
			"restitution",
			"shape",
			"userData"
		]
	};

	var apply_property_list = function(source, destination, list){
		/**
		 * takes two objects and the list of strings
		 * copies all properties with names found in the list
		 * from source to destination
		 * scips properties which are null/undefined
		 */

		for(var i = 0; i < list.length; i++){
			var prop = list[i];
			if(source[prop] != null){
				destination[prop] = source[prop];
			}
		}

		return destination;
	};

	var PropertyUndefined = function PropertyUndefined(property_name){
		this.name = "PropertyUndefined";
		this.message = "Error: " + property_name + " is not defined";
	};
	PropertyUndefined.prototype = Object.create(Error.prototype);
	PropertyUndefined.prototype.constructor = PropertyUndefined;

	var get_formal_body_def = function(non_formal_def){
		/**
		 * turn non formal definition into the formal one
		 * non-formal definition is an object that contains
		 * properties SOME of which are box2d properties or are 
		 * intended to be transformed into such. E.g. the non-formal
		 * definition may contain properties vx and vy which will be transformed
		 * into the linearVelocity vector in the formal definition
		 */

		var nfdef = non_formal_def;

		var definition = new B2d.b2BodyDef();

		if(nfdef.vx != null && nfdef.vy != null){
			// check for informal parameter specification first
			nfdef.linearVelocity = new B2d.b2Vec2(nfdef.vx, nfdef.vy);
		}else{
			// maybe the linearVelocity was specified directly as vector,
			// and not through informal parameters; checking that, and if not,
			// exception
			if(!(nfdef.linearVelocity)){
				throw new PropertyUndefined("linearVelocity");
			}
		}

		if(nfdef.x != null && nfdef.y != null){
			// same procedure as for the linear velocity
			// checking for informal specification here
			// and if present, turning into the formal
			nfdef.position = new B2d.b2Vec2(nfdef.x, nfdef.y);
		}else{
			// checking if formal was specified directly
			if(!(nfdef.position)){
				// if not, throw custom exception
				throw new PropertyUndefined("position");
			}
		}

		if(nfdef.type){
			nfdef.type = {
				"static": B2d.b2Body.b2_staticBody, 
				"dynamic": B2d.b2Body.b2_dynamicBody,
				"kinematic": B2d.b2Body.b2_kinematicBody
			}[nfdef.type]; // turn string-type into b2d type
		}else{
			throw new PropertyUndefined("type");
		}

		apply_property_list(nfdef, definition, target_props.body_def);

		return definition;

	};

	var get_formal_fixture_def = function(non_formal_def){
		/**
		 * turns non-formal definition into the formal one
		 * see get_fromal_body_def for explanation
		 */

		var nfdef = non_formal_def;
		var shape = nfdef.shape;
		var fixture_def = new B2d.b2FixtureDef();

		apply_property_list(non_formal_def, fixture_def, target_props.fixture_def);

		switch (shape) {
			case "rectangle":

				if(nfdef.width != null && nfdef.height != null){
					fixture_def.shape = new B2d.b2PolygonShape();
					if (nfdef.offset != null){
						var offset = new B2d.b2Vec2(nfdef.offset.x ,nfdef.offset.y);
						fixture_def.shape.SetAsOrientedBox(nfdef.width/2, nfdef.height/2, offset, 0);
					}else{
						fixture_def.shape.SetAsBox(nfdef.width/2, nfdef.height/2);
					}
				}else{
					throw new PropertyUndefined("width or height");
				}
				break;
			case "polygon":

				if(nfdef.points != null){
					fixture_def.shape = new B2d.b2PolygonShape();
					fixture_def.shape.SetAsArray(nfdef.points, nfdef.points.length);
				}else{
					throw new PropertyUndefined("points");
				}
				break;
			case "circle":

				if(nfdef.radius != null){
					fixture_def.shape = new B2d.b2CircleShape(nfdef.radius);
				}else{
					throw new PropertyUndefined("radius");
				}
				break;
			default:
				throw "Error: shape must be one of the following: " + 
					'"polygon", "rectangle", "circle". You specified: ' +
					String(shape);
		}

		return fixture_def;

	};
	

	var get_body = function(non_formal_def, entity_instance){
		/**
		 * takes non-formal definition
		 * returns body based on this definition
		 *
		 */
		if (entity_instance == null){
		throw new PropertyUndefined("entity_instance");
		}
		var definition = get_formal_body_def(non_formal_def);

		var body = PhysicsModel.world.CreateBody(definition);

		//if(body.userData == null){
			//body.userData = {};
		//}

		// append passed definition to the user data of the body
		// for debugging purposes, and also to allow easy specification of 
		// custom parameters during definition. If this will cause confusion,
		// I'll remove that
		//body.userData.def = non_formal_def;
		body.SetUserData({def: non_formal_def, entity_instance: entity_instance});
		
		return body;
	
	};

	var attach_fixture = function(body, non_formal_def, fixture_name){
		/**
		 * given b2d body, (non-formal) fixture definition and (OPTIONAL) fixture_name
		 * this function attaches fixture to the body
		 */

		var fixture_def = get_formal_fixture_def(non_formal_def);

		if(fixture_def.userData == null){
			fixture_def.userData = {};
		}

		fixture_def.userData.def = non_formal_def;
		fixture_def.userData.name = fixture_name;
		
		body.CreateFixture(fixture_def);
		
	};

	var attach_sensors = function(body){
		var SENSOR_THICKNESS = 0.1;
		
		// get the width and height of the body's main fixture
		// and create 4 sensor fixtures based on those parameters
		// calculate offset of sensors so that they match the main fixture
		var x = body.GetPosition().x;
		var y = body.GetPosition().y;

		// TODO: change to getting dimentions of main fixture
		var h = body.GetFixtureList().GetAABB().GetExtents().y;
		var w = body.GetFixtureList().GetAABB().GetExtents().x;
		
		//attach top fixture
		var top_sensor = {};
		top_sensor.shape = "rectangle";
		top_sensor.density = 0;
		top_sensor.isSensor = true;
		top_sensor.height = SENSOR_THICKNESS;
		top_sensor.width = (w*2 - SENSOR_THICKNESS*2) - 0.3;
		top_sensor.offset = {x:0, y: (-1*h) + SENSOR_THICKNESS/2};
		attach_fixture(body,top_sensor,"top");
		
		//attach bottom fixture
		var bottom_sensor = top_sensor;
		//bottom_sensor.width += 0.4;
		bottom_sensor.offset = {x:0, y: h - SENSOR_THICKNESS/2};
		attach_fixture(body,bottom_sensor,"bottom");
		
		//attach left fixture
		var left_sensor = top_sensor;
		left_sensor.height = (h*2 - SENSOR_THICKNESS*2) - 0.3;
		left_sensor.width = SENSOR_THICKNESS;
		left_sensor.offset = {x:(-1*w) + SENSOR_THICKNESS/2,y:0};
		attach_fixture(body,left_sensor,"left");
		
		//attach right fixture
		var right_sensor = left_sensor;
		right_sensor.offset = {x:w - SENSOR_THICKNESS/2, y:0};
		attach_fixture(body,right_sensor,"right");
	};
	
	
	

	var get_rectangular = function(def, entity_instance){
		// get appropriate template collection to draw from
		var template_name = entity_instance.type;
		var template_collection = PhysicsModel.r_templates;
		var compiled_template = apply_parents(template_name, template_collection);

		// apply custom override
		var final_def = compiled_template;
		for(var prop in def){
			final_def[prop] = def[prop];
		}

		final_def.shape = "rectangle";

		// final_def contains all final data, about body we are about to create
		// it takes into account template given and all it's parents
		// and also manually specified parameters. However, this definition is raw,
		// i.e. some data in it may not be in its final form, e.g. linear velocity is specified
		// as two parameters, vx and vy, while it whould be converted into the vector
		// for box2d. so final_def is a final description, but not in final form


		var body = get_body(final_def, entity_instance);
		 
		attach_fixture(body, final_def, "main");
		
		//If the object has directional sensors, attach sensors here
		if(final_def.border_sensors){
			attach_sensors(body);
		}

		return body;
	};

	var get_circular = function(def, template){
		var type = "circular";
		// dont' forget about refactoring some stuff into the
		// set_common function
		
		var definition = new B2d.b2BodyDef();
		
	};
		
	var get_polygonal = function(def, template){
		var type = "polygonal";
		
		var definition = new B2d.b2BodyDef();
		
	};

	var set_debug_draw = function(debug_draw){
		PhysicsModel.world.SetDebugDraw(debug_draw);
	};


	
	var listen_for_contact_with = function(what, collision_event_name, custom_function){
		/**
		 * setups custom_function to be called each time the collision event 
		 * occurs and involves >what<
		 * TAKES:
		 * 	>what<
		 * 		string 
		 * 		id of an object ("383") or it's type ("player")
		 * 	>collision_event_name<
		 * 		string. one of:
		 * 		BeginContact, EndContact, PreSolve, PostSolve
		 * 	>custom_function< 
		 * 		function
		 * 		function to be called on one of those events
		 * 		notice that function will be wrapped, so it should
		 * 		accept extra parameter >info< that will contain
		 * 		unpacked information about the collision
		 */


		if(what == null){
			throw new PropertyUndefined("what");
		}

		if(
			collision_event_name != "BeginContact" && collision_event_name != "EndContact" &&
			collision_event_name != "PreSolve" && collision_event_name != "PostSolve" 
		){
			throw "collision_event_name should be one of: PreSolve, PostSolve, EndContact, BeginContact";
		}

		if(custom_function == null || typeof(custom_function) != "function"){
			throw "Property custom_function is not defined or isn't a function"
		}

		var target_function_table = PhysicsModel.awaiting_contact[collision_event_name]; 

		if(target_function_table[what] == null){
			target_function_table[what] = [custom_function];
		}else{
			target_function_table[what].push(custom_function);
		}
		
		
	};
	
	
		
	var init_collision_listener = function(){
		
		/**
		 */
		
		var call_all = function(list, args){
			/**
			 * call all functions in list providing arguments
			 * from the array args
			 * if list give is null/undefined, do nothing
			 */

			if(list != null){
				for(var i = 0; i < list.length; i++){
					list[i].apply(this, args);
				}
			}
		};

		var get_id = function(obj){
			userData = obj.GetUserData();
			if(userData != null && userData.id != null){
				return userData.id;
			}else{
				return "[NO_ID]"
			}
			
		};

		var get_type = function(obj){
			var userData = obj.GetUserData();
			if(userData != null && userData.entity_instance.type != null){
				return userData.entity_instance.type;
			}else{
				return null;
			}
			
		};

		var unpack_contact_info = function(contact, my_type){
			/**
			 * unpacks info about the collision and 
			 * returns it
			 * >my_type< is an type of an object that will
			 * go under the >Me< parameeter inside of info
			 * (As opposed to Them, which is the other object)
			 */
			if(my_type == null){
				// >my_type< isn't supposed to be null/undefined
				throw new PropertyUndefined("my_type");
			}

			var A = {};
			var B = {};

			A.fixture = contact.m_fixtureA;
			B.fixture = contact.m_fixtureB;
			A.body = A.fixture.GetBody();
			B.body = B.fixture.GetBody();

			A.id = get_id(A.body);
			B.id = get_id(B.body);

			//A.entity = IdentificationController.get_by_id(A.id);
			//B.entity = IdentificationController.get_by_id(B.id);
			A.entity = A.body.GetUserData().entity_instance;
			B.entity = B.body.GetUserData().entity_instance;

			A.type = get_type(A.body);
			B.type = get_type(B.body);

			A.fixture_name = get_custom_property(A.fixture, "name");
			B.fixture_name = get_custom_property(B.fixture, "name");

			// TODO: unpack more info if necessary

			var info = {};

			if(A.type == my_type){
				info.Me = A;
				info.Them = B;
			}else{
				info.Me = B;
				info.Them = A;
			}

			return info;
			
		};
		
		var common_contact = function(contact, args, lists){
			// create info, call respective functions for each id. use provided arguments >args<
			// lookup ids in the provided table of lists >lists<
			
			/* next available index in the args array 
			 * it's used to determine at what index the info object should be inserted as*/
			var next_arg_index = args.length; 

			var type1 = get_type(contact.m_fixtureA.GetBody());
			var type2 = get_type(contact.m_fixtureB.GetBody());

			if(type1 != null){
				
				args[next_arg_index] = unpack_contact_info(contact, type1);
				call_all(lists[type1], args);
			}

			if(type2 != null){
				args[next_arg_index] = unpack_contact_info(contact, type2);
				call_all(lists[type2], args);
			}

		};
		
		var PreSolve = function(contact, impulse){
			
			var lists = PhysicsModel.awaiting_contact.PreSolve;

			var args = [contact, impulse];

			common_contact(contact, args, lists);
	
		};
		
		var PostSolve = function(contact, oldManifold){
			var lists = PhysicsModel.awaiting_contact.PostSolve;

			var args = [contact, oldManifold];

			common_contact(contact, args, lists);
		};

		var BeginContact = function(contact){
			var lists = PhysicsModel.awaiting_contact.BeginContact;

			var args = [contact];

			common_contact(contact, args, lists);
		};

		var EndContact = function(contact){
			var lists = PhysicsModel.awaiting_contact.EndContact;

			var args = [contact];

			common_contact(contact, args, lists);
		};
		
		
		
		var listener = new B2d.b2ContactListener;
		listener.PreSolve = PreSolve;
		listener.PostSolve = PostSolve;
		listener.BeginContact = BeginContact;
		listener.EndContact = EndContact;
		
		PhysicsModel.world.SetContactListener(listener);
	
	};

	var get_custom_property = function(b2d_obj, property_name){
		
		/**
		 * given any box2d object that has GetUserData method
		 * this function will return custom property with given
		 * property_name if this property is set on userData of the object
		 * if not, the function returns null
		 */
		var user_data = b2d_obj.GetUserData();
		if(user_data && user_data[property_name]){
			return user_data[property_name];
		}else{
			return null;
		}
	};
	
	var remove_body = function(body){
		/**
		* destroy given body (remove it from world and remove all references Physics has to it)
		*/
		
		// TODO: IMPORTANT!!! update this function if you store extra references
		// to the body within PhysicsModel/Controller.
		// Even a single reference to the body may keep it from being deleted
		// from the memory 
		PhysicsModel.world.DestroyBody(body);
	};
	
	//a very important function that I need for the hyena
	//returns the number of shapes in contact with a given bounding box
	var query_aabb = function(aabb){
		var count = 0;
		PhysicsModel.world.QueryAABB(
		function(max){
			count++;
			return true;
		},
		aabb);
		return count;
	};
	
	
	return {
		get_body: get_body,
		get_rectangular: get_rectangular,
		step: step,
		init: init,
		set_debug_draw: set_debug_draw,
		draw_debug: draw_debug,
		listen_for_contact_with: listen_for_contact_with,
		remove_body: remove_body,
		query_aabb: query_aabb,
	};
})();


module.exports = PhysicsController;

var Includes = require("../Includes.js"); var include_data = Includes.get_include_data({
	current_module: "PhysicsController", 
	include_options: Includes.choices.DEFAULT
}); eval(include_data.name_statements); var include = function(){eval(include_data.module_statements);}


},{"../Includes.js":"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Includes.js"}],"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Controllers/RegisterAsController.js":[function(require,module,exports){

var RegisterAsController = (function(){
	/* Allows you to register object as something,
	 * for other modules to access
	 * One use could be registering newly generated terrain slice from the slice controller,
	 * for the GraphicsController to notice and generate graphics for it
	*/

	var init = function(){
		/* is ran from the InitController once when the game is loaded */

		include(); // satisfy requirements

	};

	var update = function(delta){
		/* is ran each tick from the GameController.update_all */

		// TODO: automatically delete stuff depending on timeout stuff
		// calculate timeout of 
	};

	var register_as = function(what, obj){
		/**
		* simple one time lookup registering of object
		* >what< - string. e.g. "new_terrain_slice"
		* >obj< - object to register
		*/
		
		var table = RegisterAsModel.simple_one_time_lookup;

		if(table[what]){
			table[what].push(obj);
		}else{
			table[what] = [obj];
		}
	};

	var retrieve_registered_as = function(what){
		/**
		* returns reference to the object contatining
		* things currently registered as >what<
		* you are responsible for popping (or not popping) them
		* from the array to no longer consieder (or continue to consider)
		* them as registered as >what<
		*/
		var list = RegisterAsModel.simple_one_time_lookup[what];
		if(list){
			return list;
		}else{
			return [];
		}
		
	};
	
	
	return {
		// declare public
		init: init, 
		update: update,
		register_as: register_as,
		retrieve_registered_as: retrieve_registered_as
	};
})();

module.exports = RegisterAsController;

var Includes = require("../Includes.js"); var include_data = Includes.get_include_data({
	current_module: "RegisterAsController", 
	include_options: Includes.choices.DEFAULT
}); eval(include_data.name_statements); var include = function(){eval(include_data.module_statements);}


},{"../Includes.js":"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Includes.js"}],"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Controllers/TerrainController.js":[function(require,module,exports){
config = require ("../Config.js");

var TerrainController = (function(){
	/* this will be the physical representation of the terrain
	 * currently it contains graphical bits, but that will change
	 */
	

	var init = function(){
	    include();
	    TerrainModel.seed = Math.floor(Math.random()*2000) + 1000;//placeholder for seed

	};
	
	
	var update = function(){
		// check for any chunks to be unloaded/deleted will go here, for now
		// maybe it'll check for all players to be sufficiently far to the right
		// of it, maybe one chunk in advance, or smth like that
		//if (config.movement_edge.x > x)
		while(TerrainModel.terrain_slices_queue.length < 4){
			var slice = NewTerrainSlice();
			TerrainModel.terrain_slices_queue.push(slice);
		}

		var cmds = KeyboardController.debug_commands();

		if(cmds("new_slice")){
			console.log(TerrainModel.seed);
			var slice = NewTerrainSlice();
			TerrainModel.terrain_slices_queue.push(slice);
		}
		

		if(WorldController.get_movement_edge() > (TerrainModel.terrain_slices_queue.length-3)*(20)){
			var slice = NewTerrainSlice(TerrainModel.seed);
			TerrainModel.terrain_slices_queue.push(slice);
			TerrainModel.seed = (((TerrainModel.seed) * (TerrainModel.seed) - TerrainModel.seed / 2)) % 2000 + 1001;
			WorldController.set_spawn();
		};

		check_for_old_slices();
	};

	var get_seed = function(){
		return TerrainModel.seed;
	};
	
	var set_seed = function(new_seed){
		TerrainModel.seed = new_seed;
	};

	var NewTerrainSlice = function(seed){
		/* this takes care of appending new terrain slice to the generated terrain
		 * it calculates it's origin x and y positions and whatever other stuff,
		 * generates slice; sets up everything
		 */
		var x_offset = TerrainModel.slice_counter * Config.TerrainSlice.grid_columns;

		TerrainModel.slice_counter++; // TODO: change how it works when truly infinite

		if(TerrainModel.initial_generated < 3){
			TerrainModel.initial_generated++;
			var slice = new TerrainSliceController.generate_initial(x_offset);
		}else{
			var slice = new TerrainSliceController.generate_random(x_offset, seed);
		}

		IdentificationController.assign_id(slice);

		MarkAsNewTerrainSlice(slice); 

		return slice;

	};

	var check_for_old_slices = function(){
		/**
		* check for slices that are too far behind and should be removed
		*/

		var tqueue = TerrainModel.terrain_slices_queue;
		var cut_off_index = 0; // what amnt of slices should go off the queue

		// find the old slices and handle their deletion
		for(var i = 0; i < tqueue.length; i++){
			var slice = tqueue[i];
			var slice_end_x = slice.origin.x + slice.grid_columns * slice.cell_w;

			if(slice_end_x < WorldController.get_movement_edge){
				// if slice is unreachable, delete it 
				cut_off_index++;
				delete_slice(slice);
			}
		}

		// now remove all found old slices from the queue
		if(cut_off_index > 0){
			TerrainModel.terrain_slices_queue = tqueue.slice(cut_off_index);
		}
	};
	
	

	var delete_slice = function(slice){
		/**
		* assumes that slice will be popped from the terrain slice queue elsewhere
		* (or was already)
		* otherwise the slice won't be properly deleted
		*/
			
		console.log("deleting slice with origin", slice.origin);
		
		var grid = slice.grid;
		
		for(var i = 0; i < grid.length; i++){
			var row = grid[i];
			for(var j = 0; j < row.length; j++){
				var cell = row[j];
				if(cell.kind != 0){
					PhysicsController.remove_body(cell.body);
					IdentificationController.remove_id(cell.id);
				}
			}
		}

		
		// For graphics to pick up and delete unneeded graphics
		RegisterAsController.register_as("removed_slice", slice);

		// free the id (yes, terrain slice has id id
		IdentificationController.remove_id(slice.id);
	};
	
	

	
	var for_each_tile = function(f){
		// takes function >f< that takes three parameters: tile (easeljs object),
		// terrain_lvl (int), and tile_index (int)
		// calls this function for every tile of the terrain
		
		var queues = TerrainModel.terrain_queues;

		$.each(queues, function(terrain_lvl){
			$.each(queues[terrain_lvl], function(tile_index){
				f(queues[terrain_lvl][tile_index], terrain_lvl, tile_index);
			});
		});

	};

	
	var MarkAsNewTerrainSlice = function(slice){
		//TerrainModel.new_slices.push(slice);
		RegisterAsController.register_as("awaiting_graphics_initialization", slice);
	};

	//var NewSlicesAvailable = function(){
		//return (TerrainModel.new_slices.length > 0);
	//};

	//var GetNewTerrainSlices = function(){
		//return TerrainModel.new_slices;
	//};

	return {
		update: update,
		init: init,
		NewTerrainSlice: NewTerrainSlice,
		MarkAsNewTerrainSlice: MarkAsNewTerrainSlice,
		get_seed: get_seed,
		set_seed: set_seed,
		//NewSlicesAvailable: NewSlicesAvailable,
		//GetNewTerrainSlices: GetNewTerrainSlices,
	}
})();

module.exports = TerrainController;

var Includes = require("../Includes.js"); var include_data = Includes.get_include_data({
	current_module: "TerrainController", 
	include_options: Includes.choices.DEFAULT
}); eval(include_data.name_statements); var include = function(){eval(include_data.module_statements);}


},{"../Config.js":"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Config.js","../Includes.js":"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Includes.js"}],"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Controllers/TerrainSliceController.js":[function(require,module,exports){

var TerrainSliceController = (function () {

	var init = function(){
		/* is ran from the InitController once when the game is loaded */
		include(); // satisfy requirements
		IdentificationController.assign_type(TerrainSliceModel.Cell, "terrain_cell");
		IdentificationController.assign_type(TerrainSliceModel.Slice, "terrain_slice");

	};

	var update = function(slice){
		

	};

	var get_next_origin = function(){
	};
	

	
	var spawnBlock = function(x, y, kind){
		//spawn instance of this entity at the given coordinates
		var block = new TerrainSliceModel.Cell(kind%3); //kind is an int, 1 = block, 2 = platform
		IdentificationController.assign_id(block); //eventually we may want to remove this for the sake of efficiency
		block.body = PhysicsController.get_rectangular({x: x, y: y}, block);
		return block;
	};
	
	var spawnSpike = function(x, y){
		//spawn instance of this entity at the given coordinates
		var spike = new TerrainSliceModel.Cell(3); //kind = 3 means spikes
		spike.can_attack = true;
		spike.damage = 4;
		IdentificationController.assign_id(spike); //eventually we may want to remove this for the sake of efficiency
		spike.body = PhysicsController.get_rectangular({x: x, y: y}, spike);
		return spike;
	};
	
	var spawnGap = function(x,y){
		// 0 will be the id for the "air" i.e. nothing
		var gap;
		gap = new TerrainSliceModel.Cell(0);
		//IdentificationController.assign_id(gap); // DO NOT ASSIGN IDS TO EMPTY SPACES
		return gap;
	};
	
	var getRandomNumber = function (seed) {
		return (seed*seed)%2000 + 1000;
	};
	
	var buildTerrainSlice_00 = function(slice,seed){
	
	    //set variables
	    //console.log(seed);
	    var seed = seed;
		var rows = slice.grid_rows;
		var columns = slice.grid_columns;
		var i,j;
		var ground_lvl = rows - 3; //the row that is considered ground level.
		var vgap_min = 7;
		var vgap_len = 0;
		var hgap_min = 10;				//minimum size of gaps between platforms
		var hgap_len = 0; 		//current number of consecutive horizontal gaps
		var pit_max = 8;				//maximum len of pits in blocks
		var pit_len = 0; 		//current number of consecutive pits
		var has_pit = [];
		var pit_frequency = 6; 		//base percentage chance of a pit being dug
		var platform_len_max = 7;	//maximum len of a platform
		var platform_len_min = 3; //minimum len of a platform
		var platform_len = 0; 		//len of currently generated platform
		var platform_count_max = 2; //maximum number of platforms per column
		var platform_count = []; 		//keeps track of platforms per column
		var platform_frequency = 15;//base percentage chance of a platform to be generated
		var spike_frequency = 50;//base percentage chance of a platform to have spikes
		/*
		var spike frequency
		var column frequency
		etc.
		*/
		for(i=0; i<=columns;i++){
			platform_count[i] = 0;
			has_pit[i] = false;
		}

		//build the stage from the bottom up
		/*
		Build Stage from bottom up, left to right
		load blocks and gaps into slice.grid[i][j]
		
		*/
		for(i=rows-1;i>=0;i--){
			slice.grid[i] = [];
		}
		
		for(i=rows - 1;i>=0;i--){ //outer loop: generate rows bottom to top
			if (vgap_len < vgap_min){
				vgap_len++;
			}
			if (seed % 10 == 0) {
			    seed += i;
			}
			for(j=0;j<columns;j++){ //inner loop: generate from left to right within current row
				var x = slice.origin.x + j * slice.cell_w + slice.cell_w/2;
				var y = slice.origin.y + i * slice.cell_w + slice.cell_w/2;
				
				if (i >= ground_lvl){	//If on or below ground level, Generate Ground
				    if (pit_len < pit_max && (getRandomNumber(seed) % i < pit_frequency || pit_len != 0) || has_pit[j]) {
						slice.grid[i][j] = spawnGap(x,y); //create gap
						has_pit[j] = true;
						pit_len++; //the pit gets wider
						seed = getRandomNumber(seed) + 71;
					}
					else{
						slice.grid[i][j] = spawnBlock(x,y,1);//create a ground block (1 means ground)
						pit_len = 0; //any pits being spawned have been interrupted
						if (i == ground_lvl){
							slice.grid[i][j].position = "surface";
							if(getRandomNumber(seed)%100 < spike_frequency && j > 0){//check for random spike
								if(slice.grid[i-1][j-1] == null && slice.grid[i][j-1].kind != 0){
									slice.grid[i - 1][j] = spawnSpike(x, y - slice.cell_w); //create a spike above the current block
									seed = getRandomNumber(seed) + 21;
								}
							}
						}else{
						slice.grid[i][j].position = "underground";
						}
					}
				}else{ //ElSE Generate Platforms
					if((hgap_len >= hgap_min || platform_len > 0) //if there is a large gap or a platform being built
					&& (platform_len < platform_len_max) // and any platform being built is less than max len
					&& (platform_count[j] < platform_count_max) // and the current column's platform limit has not been met
					&& (vgap_len >= vgap_min) //if the vertical gap minimum has been met
					&& (platform_len > 0 || (j<columns-1 && platform_count[j+1] < platform_count_max))){ //and the platform is not going to be a singleton
						if (getRandomNumber(seed)%100 < platform_frequency || (platform_len > 0 && platform_len <= platform_len_min)){
						
							slice.grid[i][j] = spawnBlock(x,y,2);//create platform (2 means platform)
							
							//check aesthetic stuff, like platform edges
							if (platform_len == 0){
								slice.grid[i][j].position = "left";
							}
							else{
								slice.grid[i][j].position = "right";
							}
							if (j>0){if (slice.grid[i][j-1].kind != 0){
								if (slice.grid[i][j-1].position != "left"){
									slice.grid[i][j-1].position = "middle";
								}
							}}
							
							seed = getRandomNumber(seed);
							platform_len++;	//platform gets longer, and 
							platform_count[j]++;//the number of platforms in the current column increases
							hgap_len = 0; 		//reset the gap counter to 0
						}else{
							if (slice.grid[i][j] == null){
								slice.grid[i][j] = spawnGap(x,y); //create a gap
								platform_len = 0; //if there was a platform, it has been interrupted
								hgap_len++; //the gap gets wider
							}
						}
					}else{
						if (slice.grid[i][j] == null){
							slice.grid[i][j] = spawnGap(x,y); //create a gap
							platform_len = 0; //if there was a platform, it has been interrupted
							hgap_len++; //the gap gets wider
						}
					}
					seed = getRandomNumber(seed);
				}
			}
			vgap_len = vgap_len%vgap_min;
		}
		return slice;
	};
	
	//pregenerated slice
	var buildTerrainSlice_01 = function(slice,seed){
		//set variables
		var rows = slice.grid_rows;
		var columns = slice.grid_columns;
		var i,j;
		var ground_lvl = rows - 3; //the row that is considered ground level.
		var vgap_min = 7;
		var vgap_len = 0;
		var hgap_min = 10;				//minimum size of gaps between platforms
		var hgap_len = 0; 		//current number of consecutive horizontal gaps
		var pit_max = 20;				//maximum len of pits in blocks
		var pit_len = 0; 		//current number of consecutive pits
		var has_pit = [];
		var pit_frequency = 0; 		//base percentage chance of a pit being dug
		var platform_len_max = 7;	//maximum len of a platform
		var platform_len_min = 3; //minimum len of a platform
		var platform_len = 0; 		//len of currently generated platform
		var platform_count_max = 2; //maximum number of platforms per column
		var platform_count = []; 		//keeps track of platforms per column
		var platform_frequency = 5;//base percentage chance of a platform to be generated
		for(i=0; i<=columns;i++){
			platform_count[i] = 0;
			has_pit[i] = false;
		}
		for(i=rows - 1;i>=0;i--){ //outer loop: generate rows bottom to top
			slice.grid[i] = [];
			for(j=0;j<columns;j++){ //inner loop: generate from left to right within current row
				var x = slice.origin.x + j * slice.cell_w + slice.cell_w/2;
				var y = slice.origin.y + i * slice.cell_w + slice.cell_w/2;
				if (i >= ground_lvl){	//If on or below ground level, Generate Ground
					slice.grid[i][j] = spawnBlock(x,y,1);//create a ground block (1 means ground)
					if (i == ground_lvl)
						slice.grid[i][j].position = "surface";
					else{
					slice.grid[i][j].position = "underground";
					}
				}else{
					slice.grid[i][j] = spawnGap(x,y);
				}
			}
		}
		return slice;
	};
	
	var generate_initial = function(x_offset){
		var slice = new TerrainSliceModel.Slice();
		slice.origin.x = x_offset;
		slice.origin.y = 0;
		slice = buildTerrainSlice_01(slice);
		
		return slice;
	}
	
	var generate_random = function(x_offset, seed){
		var slice = new TerrainSliceModel.Slice();
		slice.origin.x = x_offset;
		slice.origin.y = 0;
		//get a random kind of slice
		if (getRandomNumber(seed)%100 < 95){
			slice = buildTerrainSlice_00(slice,seed);
		}else{
			slice = buildTerrainSlice_01(slice,seed);
		}
		
		return slice;
	};
	




	return {
		// declare public
		init: init, 
		update: update,
		generate_initial: generate_initial,
		generate_random: generate_random,
	};
})();

module.exports = TerrainSliceController;

var Includes = require("../Includes.js"); var include_data = Includes.get_include_data({
	current_module: "TerrainSliceController", 
	include_options: Includes.choices.DEFAULT
}); eval(include_data.name_statements); var include = function(){eval(include_data.module_statements);}


},{"../Includes.js":"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Includes.js"}],"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Controllers/TestController.js":[function(require,module,exports){
var TestController = (function(){
	// placeholder for implementing testing
	// may be changed/removed/upgraded depending on how we will handle our tests
	
	
	var preinit_tests = function(){
	//For tests requiring run before init is called
	
	
	};
	
	
	var test = function(){
		// if you need some sort of tests launched, this is one of the places to do it
		QUnit.test( "hello test", function( assert ) {
			assert.ok( 1 == "1", "Passed!" );
		});
		Includes.automated_tests();
	};

	var post_loading_tests = function(){
		// TODO: call when loading assets is completed if there are some tests that need
		// to be done at that moment. (Refer to InitController.init and 
		// InitController.setup_asset_dependent methods
	};

	var testMode;

	var init = function(mode){
		include();
		// Sets up the debug canvas during testing
		TestModel.d_canvas = document.getElementById(Config.DEBUG_CANVAS_NAME);
		testMode = mode;

		if(mode == "test"){
			TestModel.context = TestModel.d_canvas.getContext("2d");
			
			TestModel.debugDraw = new B2d.b2DebugDraw();
			TestModel.debugDraw.SetSprite(TestModel.context);
			TestModel.debugDraw.SetDrawScale(Config.B2D.SCALE);
			TestModel.debugDraw.SetFillAlpha(0.3);
			TestModel.debugDraw.SetLineThickness(1.0);
			TestModel.debugDraw.SetFlags(B2d.b2DebugDraw.e_shapeBit | B2d.b2DebugDraw.e_jointBit);

			PhysicsController.set_debug_draw(TestModel.debugDraw);

			Config.B2D.debug_draw = true;
			// Screen_W was setup only after this was called

			TestModel.d_canvas.width = Config.SCREEN_W;
			TestModel.d_canvas.height = Config.SCREEN_H;

			//$('#'+Config.DEBUG_CANVAS_NAME).show();

		}else{
			//d_canvas.hide();
		}
	};
	
	//this function sets the x and y offsets of the debug canvas
	var set_debug_offset = function(x_offset, y_offset){
	    if (testMode == "test"){
	        context = TestModel.context;
	        context.save();
	        context.clearRect(0, 0, Config.SCREEN_W, Config.SCREEN_H);
	        context.translate(x_offset, y_offset);
	        PhysicsController.draw_debug();
	        context.restore();
	    }
	};

	return {
		init: init, 
		test: test,
		post_loading_tests: post_loading_tests,
		preinit_tests: preinit_tests,
		set_debug_offset: set_debug_offset
	}
})();

module.exports = TestController;

var Includes = require("../Includes.js"); var include_data = Includes.get_include_data({
	current_module: "TestController", 
	include_options: Includes.choices.DEFAULT
}); eval(include_data.name_statements); var include = function(){eval(include_data.module_statements);}


},{"../Includes.js":"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Includes.js"}],"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Controllers/WorldController.js":[function(require,module,exports){
	
var WorldController = (function(){
	/* all the physics control of the whole world
	*/
    var movement_edge;
    var spawn_enemy;
    var difficulty;
		var season;
		var movement_edge_buffer;
		var body_test;
		var score;
		var progress;
	//var temp = 0;

	var init = function(){
		/* is ran from the InitController once when the game is loaded */

		include(); // satisfy requirements
		movement_edge_buffer = 20;
		movement_edge = 0;
		season = 0;
		score = 0;
		progress = 20;
		//body_test = new platform();
		//var id = IdentificationController.assign_id(body_test);
		//var body_test = PhysicsController.get_rectangular({}, body_test);

	};

	var update = function(delta){
		/* is ran each tick from the GameController.update_all */
		PhysicsController.step(delta);

		update_movement_edge();
		update_progress();

		get_spawn();
		//if(temp++ == 0){
			//TerrainController.NewTerrainSlice();
		//}

	};

	var update_progress = function(arguments){
		/**
		* 
		*/

		progress = get_movement_edge();
		
	};
	
	
	
	var update_movement_edge = function(){
		var heroes = EntityController.get_all_heroes();
		var min_x = Infinity;

		for(var net_id in heroes){
			// iterate through all connected heroes
			// and choose minimum of their x positions
			var hero_x = heroes[net_id].body.GetWorldCenter().x;
			if(hero_x < min_x){
				min_x = hero_x;
			}
		}

		if((movement_edge < min_x - movement_edge_buffer) && min_x != Infinity){
			movement_edge = min_x - movement_edge_buffer;
		}
	};
	
	var get_movement_edge = function(){
		return movement_edge;
	}

	var get_spawn = function () {
	    difficulty = Math.floor(progress / 100);

	    var spawn_num;
	    if (spawn_enemy) {
	        for (i = 0; i < Math.floor(Math.random() * 4) ; i++) {
	            spawn_num = Math.floor(Math.random() * 1000);
	            // demonstration purposes for hyena
	            if (spawn_num <= 5 * difficulty) {
	                var new_hyena = EntityController.spawn(60 + get_movement_edge(), 10, "Hyena");
	            }
	            /*    // demonstration purposes for griffin
	            else if (spawn_num <= 15 * EntityModel.difficulty && Count > 5) {
	                var new_griffin = spawn(60 + WorldController.get_movement_edge() + i, -20, "Griffin");
	                Count = 0;
	            }*/
	            else if (spawn_num <= 15 * difficulty) {
	                var new_griffin = EntityController.spawn(60 + get_movement_edge(), 10, "Griffin");
	            }
	                // demonstration purposes for ant
	            else {
	                var new_ant = EntityController.spawn(get_movement_edge() + 60, 10, "ant");
	            }
	        }
	        spawn_enemy = false;
	    }
	    return spawn_num;
	}

	var set_spawn = function () {
	    spawn_enemy = true;
	}
	
	var get_season = function(){
		return season;
	}
	
	var set_season = function(index){
		season = index;
	}
	
	var MarkAsNewTerrainSlice = function(slice){
		
	};
	
	var get_progress = function(){
		return progress;
	};
	
	var increase_progress = function(amount){
		progress += amount;
	};
	
	var get_score = function(){
		return score;
	};
	
	var increase_score = function(amount){
		if(amount != null){
			score += amount;
		}else{
			throw "Error: >amount< is not defined";
		}
	};

	return {
		// declare public
		init: init, 
		update: update,
		get_movement_edge: get_movement_edge,
		get_season: get_season,
		set_season: set_season,
		get_spawn: get_spawn,
		set_spawn: set_spawn,
		increase_score: increase_score,
		increase_progress: increase_progress,
		get_score: get_score,
		get_progress: get_progress,
	};
})();

module.exports = WorldController;

var Includes = require("../Includes.js"); var include_data = Includes.get_include_data({
	current_module: "WorldController", 
	include_options: Includes.choices.DEFAULT
}); eval(include_data.name_statements); var include = function(){eval(include_data.module_statements);}


},{"../Includes.js":"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Includes.js"}],"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/GameUtility.js":[function(require,module,exports){
var GameUtility = (function()
{
  function arrow_key_scrolling(flag) {
    // Configures arrow key scrolling for canvas
    if (flag == false) {
      document.addEventListener('keydown', function (e) { // .getElementById("display_canvas")
        arrows = [37, 38, 39, 40];
        if (arrows.indexOf(e.keyCode) > -1) {
          e.preventDefault();
          return false;
        } else {
          return true
        }
      })
    }
  }

	var lg = function()
	{
		/*
		 * shortcut to console.log()
		 * prints all arguments to console
		 * first argument is used as a label for the rest
		 *
		 * each labeled group is enclosed into the colored delimiters
		 * >>> and <<< so it's easily distinguished. I found it helpful,
		 * if you don't let me know, or use something else
		 */
		console.log("%s %c %s", arguments[0], "background: #DAF2B1", ">>>");
		
		for(var i = 1; i < arguments.length; i++)
		{
			console.log("\t", arguments[i]);
		}
		console.log("%c<<<", "background: #DAF2B1");

	};

	var random_choice = function(probabilities, choices){
		/*
		   takes 2 arrays with elements at corresponding indexes
		   being choice and it's probability. picks random one.
		   choices are anything, probability is integer a, such that
		   probability of a choice is a/10. with a < 10, of course
		   and probabilities adding up to 10. 
		   Yes, it's not very good implementation (read: terrible), 
		   and since you noticed, now it's your job to improve it.

		*/

		// array with choices duplicated a proper amount of times based on
		// their probability
		var blah = []; 

		for(var i = 0; i < choices.length; i++){
			for(var j = 0; j < probabilities[i]; j++){
				blah.push(choices[i]);
			}
		}

		var rand_index = Math.floor(Math.random() * blah.length);

		return blah[rand_index];
	};

	

	return {
		lg: lg,
		random_choice: random_choice
	};

})();

module.exports = GameUtility;

},{}],"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Includes.js":[function(require,module,exports){
var Include = function(){

	var modules;

	// simple enumerator // option codes MUST be power of 2 or sum of other options (with 0 being the only exception), and unique
	var choices = (function(){
		// simple options: numberic value must be 0 or some power of 2, name should be all caps and unique
		var result = {NONE: 0, ALL_CONTROLLERS: 1, ALL_MODELS: 2, OWN_MODEL: 4, OTHER_STUFF: 8, RENDERERS: 16, LOGIC: 32};

		// complex options: should consist of simple options, bitwise(!) OR'ed or AND'ed together in any fashion
		result.DEFAULT = (result.ALL_CONTROLLERS | result.OWN_MODEL | result.OTHER_STUFF);
		result.ALL =  (result.ALL_CONTROLLERS | result.ALL_MODELS | result.OTHER_STUFF); 
		result.RENDERER_SPECIFIC = (result.ALL_CONTROLLERS | result.OTHER_STUFF);
		result.LOGIC_SPECIFIC = (result.ALL_CONTROLLERS | result.OTHER_STUFF);

		// object is immutable
		return Object.freeze(result);
	})();

	var module_names = {
		Controllers: [
			"AssetController",
			"EntityController",
			"GameController",
			"GraphicsController",
			"InitController",
			"KeyboardController",
			"PhysicsController",
			"TerrainController",
			"TerrainSliceController",
			"TestController",
			"WorldController",
			"IdentificationController",
			"RegisterAsController",
			"NetworkController",
			"MultiplayerSyncController",
		],

		Models: [
		
			"AssetModel",
			"GameModel",
			"GraphicsModel",
			"KeyboardModel",
			"PhysicsModel",
			"TerrainModel",
			"TerrainSliceModel",
			"TestModel",
			"WorldModel",
			"EntityModel",
			"RegisterAsModel",
			"NetworkModel",
			"MultiplayerSyncModel",
		],

		Other: [
		
			"B2d",
			"Box2D",
			"Config",
			"GameUtility",
		],

		Renderers: [
			"AntRenderer",
			"HeroRenderer",
            "MedusaRenderer",
			"TerrainCellRenderer",
			"GriffinRenderer",
			"HyenaRenderer",
			"TerrainSliceRenderer",
			"BackgroundRenderer",
			"HUDRenderer",
            "PizzaRenderer",
			"EsteemedCompanionRenderer",
		],

		Logic: [
			"AntLogic",
			"HeroLogic",
			"GriffinLogic",
            "MedusaLogic",
			"HyenaLogic",
			"EsteemedCompanionLogic",
            "PizzaLogic",
		],

	};//end module_names


	var init = function(){

		modules = {
			AssetController: require("./Controllers/AssetController.js"),
			GraphicsController: require("./Controllers/GraphicsController.js"),
			KeyboardController: require("./Controllers/KeyboardController.js"),
			PhysicsController: require("./Controllers/PhysicsController.js"),
			TerrainController: require("./Controllers/TerrainController.js"),
			TerrainSliceController: require("./Controllers/TerrainSliceController.js"),
			WorldController: require("./Controllers/WorldController.js"),
			InitController: require("./Controllers/InitController.js"),
			TestController: require("./Controllers/TestController.js"),
			GameController: require("./Controllers/GameController.js"),
			EntityController: require("./Controllers/EntityController.js"),
			IdentificationController: require("./Controllers/IdentificationController.js"),
			RegisterAsController: require("./Controllers/RegisterAsController.js"),
			
			NetworkController: require("./Controllers/NetworkController.js"),
			MultiplayerSyncController: require("./Controllers/MultiplayerSyncController.js"),
			
			// Models

			GameModel: require("./Models/GameModel.js"),
			TerrainSliceModel: require("./Models/TerrainSliceModel.js"),
			AssetModel: require("./Models/AssetModel.js"),
			PhysicsModel: require("./Models/PhysicsModel.js"),
			GraphicsModel: require("./Models/GraphicsModel.js"),
			TerrainModel: require("./Models/TerrainModel.js"),
			WorldModel: require("./Models/WorldModel.js"),
			KeyboardModel: require("./Models/KeyboardModel.js"),
			TestModel: require("./Models/TestModel.js"),
			IdentificationModel: require("./Models/IdentificationModel.js"),
			EntityModel: require("./Models/EntityModel.js"),
			RegisterAsModel: require("./Models/RegisterAsModel.js"),
			NetworkModel: require("./Models/NetworkModel.js"),
			MultiplayerSyncModel: require("./Models/MultiplayerSyncModel.js"),
						
			// Other stuff
			
			Config: require("./Config.js"),
			GameUtility: require("./GameUtility.js"),
			B2d: require("./B2d.js"),
			Box2D: require("box2dweb"),
			
			// Renderers
			
			AntRenderer: require("./Renderers/AntRenderer.js"),
			GriffinRenderer: require("./Renderers/GriffinRenderer.js"),
            MedusaRenderer: require("./Renderers/MedusaRenderer.js"),
			HyenaRenderer: require("./Renderers/HyenaRenderer.js"),
			HeroRenderer: require("./Renderers/HeroRenderer.js"),
			TerrainCellRenderer: require("./Renderers/TerrainCellRenderer.js"),
			TerrainSliceRenderer: require("./Renderers/TerrainSliceRenderer.js"),
			BackgroundRenderer: require("./Renderers/BackgroundRenderer.js"),
			HUDRenderer: require("./Renderers/HUDRenderer.js"),
			PizzaRenderer: require("./Renderers/PizzaRenderer.js"),
			
			
			
			EsteemedCompanionRenderer: require("./Renderers/EsteemedCompanionRenderer.js"),
			
			// Logic
			AntLogic: require("./Logic/AntLogic.js"),
			GriffinLogic: require("./Logic/GriffinLogic.js"),
            MedusaLogic: require("./Logic/MedusaLogic.js"),
			HyenaLogic: require("./Logic/HyenaLogic.js"),
			HeroLogic: require("./Logic/HeroLogic.js"),
			EsteemedCompanionLogic: require("./Logic/EsteemedCompanionLogic.js"),
			PizzaLogic: require("./Logic/PizzaLogic.js"),

		};

	}; // end init

	var option_is_set = function(what_mods_selected, options){
		if(what_mods_selected == 0 && options == 0){
			return true;
		}
		// be mindful of bitwise operator ahead
		return (what_mods_selected & options);
	};//end option_is_set

	var get_module = function(name){
		// can be modified to throw object error instead of simple one
		// in that case it may contain list of defined modules
		// may also be modified to check whether module is missing from 
		// module_names, modules, or both, and give more accurate description
		var message = "Module " + name + 
			" is undefined. Note that you must hardcode all new modules" + 
			" into the Includes.module_names AND Includes.modules."
		
		if(modules){
			if(modules[name]){
				return modules[name];
			}else if(console.warn){ // check if console.warn is available
				console.warn(message);
			}else{
				throw message;
			}
		}else{
			throw "Error: You must run the Includes.init() before you can use any modules";
		}
	};//end get_module
	

	var get_names = function(current_module_name, options_code){
		var result = {Models: [], Controllers: [], Other: [], Renderers: [], Logic: [],};

		if(option_is_set(choices.NONE, options_code)){
			return result;
		}

		if (option_is_set(choices.ALL_CONTROLLERS, options_code)){

			var controller_names = module_names.Controllers;

			for(var i = 0; i < controller_names.length; i++){

				var ctl_name = controller_names[i];

				if(ctl_name != current_module_name){
					result.Controllers.push(ctl_name);
				}
			}
			
		}

		if (option_is_set(choices.ALL_MODELS, options_code)){
			result.Models = module_names.Models;
		}else if(option_is_set(choices.OWN_MODEL, options_code)){
			var own_model = current_module_name.replace("Controller", "Model");
			result.Models.push(own_model);
		}

		if(option_is_set(choices.OTHER_STUFF, options_code)){
			result.Other = module_names.Other;
		}

		if(option_is_set(choices.RENDERERS, options_code)){
			result.Renderers = module_names.Renderers;
		}

		if(option_is_set(choices.LOGIC, options_code)){
			result.Logic = module_names.Logic;
		}

		return result;
	};//end get_names

	var sections = ["Models", "Controllers", "Other", "Renderers", "Logic"];
	var get_name_statements = function(names){
		var result = "";
		for(var section_index = 0; section_index < sections.length; section_index++){
			var section = sections[section_index];
			for(var i = 0; i < names[section].length; i++){
				result += ("var " + names[section][i] + "; ");
			}
		}

		return result;
		
	};//end get_name_statements

	var get_module_statements = function(names){
		var result = "";
		for(var section_index = 0; section_index < sections.length; section_index++){
			var section = sections[section_index];
			for(var i = 0; i < names[section].length; i++){
				result += (names[section][i] + " = Includes.get_module(\"" + names[section][i] + "\"); ");
			}
		}

		return result;
	};//end get_module_statements

	var get_include_data = function(params){
		var current_module = params.current_module;
		var include_options = params.include_options;
		var names = get_names(current_module, include_options);

		var name_statements = get_name_statements(names);
		var module_statements = get_module_statements(names);

		return {
			imported_modules: names,
			name_statements: name_statements,
			module_statements: module_statements,
		};

	};//end get_include_data

	var automated_tests = function(){
		
		QUnit.test("option matching function", function( assert) {

			//If both are none
			assert.equal(option_is_set(choices.NONE, choices.NONE), true);

			assert.throws(option_is_set(choices.NONE, -1));

			//If both match, it returns the value of choices
			//If they don't match, it returns 0
			
			//MATCH
			assert.equal(option_is_set(choices.ALL_CONTROLLERS, choices.ALL_CONTROLLERS), 1);
			assert.equal(option_is_set(choices.ALL_MODELS, choices.ALL_MODELS), 2);
			assert.equal(option_is_set(choices.OTHER_STUFF, choices.OTHER_STUFF), 8);

			//Mismatch
			assert.equal(option_is_set(choices.NONE, choices.ALL_CONTROLLERS), 0);
			assert.equal(option_is_set(choices.OTHER_STUFF, choices.NONE), 0);
			assert.equal(option_is_set(choices.ALL_MODELS, choices.ALL_CONTROLLERS), 0);
			assert.equal(option_is_set(choices.OWN_MODEL, choices.ALL_MODELS), 0);
		});//end option matching test
		
	};//end automated_tests


	return {
		init: init,
		module_names: module_names,
		get_module: get_module,
		get_include_data: get_include_data,
		choices: choices,
		automated_tests: automated_tests
	};

};

module.exports = new Include;


},{"./B2d.js":"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/B2d.js","./Config.js":"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Config.js","./Controllers/AssetController.js":"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Controllers/AssetController.js","./Controllers/EntityController.js":"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Controllers/EntityController.js","./Controllers/GameController.js":"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Controllers/GameController.js","./Controllers/GraphicsController.js":"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Controllers/GraphicsController.js","./Controllers/IdentificationController.js":"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Controllers/IdentificationController.js","./Controllers/InitController.js":"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Controllers/InitController.js","./Controllers/KeyboardController.js":"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Controllers/KeyboardController.js","./Controllers/MultiplayerSyncController.js":"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Controllers/MultiplayerSyncController.js","./Controllers/NetworkController.js":"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Controllers/NetworkController.js","./Controllers/PhysicsController.js":"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Controllers/PhysicsController.js","./Controllers/RegisterAsController.js":"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Controllers/RegisterAsController.js","./Controllers/TerrainController.js":"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Controllers/TerrainController.js","./Controllers/TerrainSliceController.js":"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Controllers/TerrainSliceController.js","./Controllers/TestController.js":"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Controllers/TestController.js","./Controllers/WorldController.js":"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Controllers/WorldController.js","./GameUtility.js":"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/GameUtility.js","./Logic/AntLogic.js":"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Logic/AntLogic.js","./Logic/EsteemedCompanionLogic.js":"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Logic/EsteemedCompanionLogic.js","./Logic/GriffinLogic.js":"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Logic/GriffinLogic.js","./Logic/HeroLogic.js":"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Logic/HeroLogic.js","./Logic/HyenaLogic.js":"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Logic/HyenaLogic.js","./Logic/MedusaLogic.js":"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Logic/MedusaLogic.js","./Logic/PizzaLogic.js":"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Logic/PizzaLogic.js","./Models/AssetModel.js":"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Models/AssetModel.js","./Models/EntityModel.js":"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Models/EntityModel.js","./Models/GameModel.js":"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Models/GameModel.js","./Models/GraphicsModel.js":"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Models/GraphicsModel.js","./Models/IdentificationModel.js":"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Models/IdentificationModel.js","./Models/KeyboardModel.js":"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Models/KeyboardModel.js","./Models/MultiplayerSyncModel.js":"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Models/MultiplayerSyncModel.js","./Models/NetworkModel.js":"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Models/NetworkModel.js","./Models/PhysicsModel.js":"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Models/PhysicsModel.js","./Models/RegisterAsModel.js":"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Models/RegisterAsModel.js","./Models/TerrainModel.js":"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Models/TerrainModel.js","./Models/TerrainSliceModel.js":"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Models/TerrainSliceModel.js","./Models/TestModel.js":"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Models/TestModel.js","./Models/WorldModel.js":"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Models/WorldModel.js","./Renderers/AntRenderer.js":"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Renderers/AntRenderer.js","./Renderers/BackgroundRenderer.js":"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Renderers/BackgroundRenderer.js","./Renderers/EsteemedCompanionRenderer.js":"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Renderers/EsteemedCompanionRenderer.js","./Renderers/GriffinRenderer.js":"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Renderers/GriffinRenderer.js","./Renderers/HUDRenderer.js":"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Renderers/HUDRenderer.js","./Renderers/HeroRenderer.js":"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Renderers/HeroRenderer.js","./Renderers/HyenaRenderer.js":"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Renderers/HyenaRenderer.js","./Renderers/MedusaRenderer.js":"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Renderers/MedusaRenderer.js","./Renderers/PizzaRenderer.js":"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Renderers/PizzaRenderer.js","./Renderers/TerrainCellRenderer.js":"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Renderers/TerrainCellRenderer.js","./Renderers/TerrainSliceRenderer.js":"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Renderers/TerrainSliceRenderer.js","box2dweb":"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/node_modules/box2dweb/box2d.js"}],"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Logic/AntLogic.js":[function(require,module,exports){
var AntLogic = (function(){

	var Ant = function(){
		/* Will be instantiated for every created entity to hold all the information 
			about the physical (not graphical) state of the entity in question. 
			declare the properties like this:
			this.some_state_variable_initial_value = 0;
			instantiate (most likely in the spawn function) like that:
			var new_entity_instance = new Ant();
		*/
		var entity = EntityController.create_abstract_entity();
		
		entity.hero_hurt_me = false;
		entity.me_hurt_hero = false;
		entity.death_tick = 0;
		entity.hp = 3;
		entity.speed = 3;
		entity.damage = 1;
		entity.point_value = 50;
		entity.can_attack = true;
		entity.aliveflag = true;
		entity.unhurtflag = true;
		entity.start_walking = true;
		entity.pop = 40;
		entity.popup = 0;
		entity.animation = "walk";
		entity.decay_duration = 0;
		
		return entity;
	};

	var init = function(){
		/* Is run from the EntityController.init once during game loading 
		 	you should assign type to your model here using the identification controller
		 */
		include(); // satisfy requirements, GOES FIRST
		IdentificationController.assign_type(Ant, "ant");
	};

	var spawn = function(x, y){
		/* spawn instance of this entity at the given coordinates
			you will have to create new entity instance, assign it id
			using the IdentificationController.assign_id(entity_instance),
			assign it a body which you can get through PhysicsController
			do any other stuff you want to do during spawning,
			and finally you HAVE TO(!!!) return the instance you just created from this function
		*/

		var new_ant = new Ant();
		new_ant.type = "ant";
		var id = IdentificationController.assign_id(new_ant);

		new_ant.body = PhysicsController.get_rectangular({x: x, y: y, border_sensors: true}, new_ant);	

		return new_ant;

	};

	var tick_AI = function(ant){
		/* Is ran each tick from the EntityController.update for every registered
			entity of this type. I given entity_instance
		*/

	    //if enemy is dead, die
		//if (ant.body.GetWorldCenter().y > 22 || ant.body.GetWorldCenter().x < Config.Player.movement_edge - 1) {
			//EntityController.delete_entity();
			//console.log("drop of death");
		//}
		//
		if (ant.hp <= 0){
			ant.die();
		}else{
			if(ant.hp == 1){
				ant.popup++;
				if(ant.popup == ant.pop){
					ant.jump(10, -20);
					ant.hp++;
					ant.popup = 0;
					ant.can_attack = true;
					ant.unhurtflag = true;
					ant.change_animation("walk");
				}
			}else{ // hp > 1
				//do maintenance
				ant.direction_previous = ant.direction;
				ant.x_previous = ant.body.GetWorldCenter().x
				//if blocked, turn around
				if((!ant.path_free() || ant.xprevious == ant.body.GetWorldCenter().x) && !ant.in_air()){
					ant.direction = !ant.direction;
				}
				//move forward
				ant.move(ant.speed);
				ant.change_animation("walk");
			}
			if (ant.damage_taken){
				ant.change_animation("upside_down");
				ant.take_damage();
			}
		}
	};

	// // //Set up Collision handler
	
	
	var begin_contact = function(contact, info){
		//handle collisions here
		
		if(info.Them.type == "hero"){
			if(info.Them.fixture_name != "bottom" && info.Me.entity.can_attack){
				info.Me.entity.me_hurt_hero = true;
			}else{
				info.Me.entity.hit_taken = true;//take damage if enemy collides from above and distance < vulnerability radius
				info.Me.entity.damage_taken = info.Them.entity.damage;
			}
		}
	};

	var end_contact = function(contact, info) {
	
	};

	
	return {
		// declare public
		init: init, 
		spawn: spawn,
		tick_AI: tick_AI,
		begin_contact: begin_contact,
		end_contact: end_contact,
	};
})();

module.exports = AntLogic;

var Includes = require("../Includes.js"); var include_data = Includes.get_include_data({
	current_module: "AntLogic", 
	include_options: Includes.choices.LOGIC_SPECIFIC
}); eval(include_data.name_statements); var include = function(){eval(include_data.module_statements);}

},{"../Includes.js":"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Includes.js"}],"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Logic/EsteemedCompanionLogic.js":[function(require,module,exports){
var EsteemedCompanionLogic = (function(){

		
	var Companion = function(){
		/* Will be instantiated for every created entity to hold all the information 
			about the physical (not graphical) state of the entity in question. 
			declare the properties like this:
			this.some_state_variable_initial_value = 0;
			instantiate (most likely in the spawn function) like that:
			var new_entity_instance = new EsteemedCompanion();
		*/
		this.hp = 100;
		this.wound = false;
		this.jumps = 0;
		this.score = 0;
	};

	var init = function(){
		/* Is ran from the EntityController.init once during game loading 
			you should assign type to your model here using the identification controller
		*/
		include(); // satisfy requirements, GOES FIRST
		IdentificationController.assign_type(Companion, "companion");
	};

	var spawn = function(x, y){
		/* spawn instance of this entity at the given coordinates
			you will have to create new entity instance, assign it id
			using the IdentificationController.assign_id(entity_instance),
			assign it a body which you can get through PhysicsController
			do any other stuff you want to do during spawning,
			and finally you HAVE TO(!!!) return the instance you just created from this function
		*/

		var companion = new Companion();

		companion.body = PhysicsController.get_rectangular({x: x, y: y, border_sensors: true}, companion);

		//var id = IdentificationController.assign_id(companion);

		companion.hp = 100;
		companion.wound = false;
		companion.jumps = 0;
		companion.score = 0;


		return companion;
	
	};

	var tick_AI = function(companion){
		/* Is ran each tick from the EntityController.update for every registered
			entity of this type. I given entity_instance
		*/

		
		console.warn("ticking companion");

		

		var cmds = KeyboardController.movement_commands();

		var MOVEMENT_EDGE = 500; // where terrain start scrolling


		// TEMPORARYYYYYYYYYYYYYYYY

		if(companion.wound)
		{
			companion.hp--;
			console.log("Taking damage");
			GraphicsController.update_health(companion.hp);
		}
		
		if(companion.hp <= 0)
		{
			createjs.Ticker.paused = true;
			console.log("Player Is Dead");
		}
		GraphicsController.update_score(companion.score);
	};

	var begin_contact = function(contact, info){
		//console.log(info.Me.id, ":", "My fixture", "'" + info.Me.fixture_name + "'", "came into contact with fixture", 
			//"'" + info.Them.fixture_name + "'", "of", info.Them.id);
		if (info.Me.fixture_name == "bottom"){
			info.Me.entity.jumps = 0;
		}
		if (info.Me.fixture_name == "top"){
			take_hit(info.Me.entity, 1);
		}
		
		if(info.Me.fixture_name != "bottom" && info.Them.entity.can_attack)
		{
		    info.Me.entity.wound = true;
		    add_score(info.Me.entity, 100);
		}
				
	};
	
	var add_score = function (companion, amount) {
	    companion.score += amount;
	}
	

	var take_hit = function(companion, amount){
	    companion.hp -= amount;
		//GraphicsController.update_health(companion.hp);
	}

	var end_contact = function(contact, info){
			
		info.Me.entity.wound = false;
	};

	var move_right = function(companion){
		var body = companion.body;
		var velocity = body.GetLinearVelocity();
		velocity.x = 5;
		body.SetLinearVelocity(velocity); // body.SetLinearVelocity(new b2Vec2(5, 0)); would work too
		body.SetAwake(true);
		//companion.x += 10; // old
		//companion.x = (body.GetPosition().x + 1.5/2) * 30 ; 
	};

	var jump = function(companion){
	    var body = companion.body;
		if (companion.jumps == 0){
		    body.ApplyImpulse(new B2d.b2Vec2(0, -100), body.GetWorldCenter());
		    companion.jumps += 1;
		}
		else if (companion.jumps == 1 && body.GetLinearVelocity().y > -1) {
		    body.ApplyImpulse(new B2d.b2Vec2(0, -100), body.GetWorldCenter());
		    companion.jumps += 1;
		}

		//companion.y = body.GetPosition().y * 30;
	
	};

	var set_coordinates = function(position_vector, companion){
		// TODO: remove;
		// temporary/testing
		companion.x = (position_vector.x - 1.5/2) * 30 ;
		companion.y = (position_vector.y + 2.5/2) * 30 ;

	};

	var b2b_get_coordinates = function(companion){
		return companion.body.GetWorldCenter();
	};

	var move_left = function(companion){
		var velocity = companion.body.GetLinearVelocity();
		velocity.x = -5;
		companion.body.SetLinearVelocity(velocity); // companion.SetLinearVelocity(new b2Vec2(5, 0)); would work too
		companion.body.SetAwake(true);
	};

	var move_right = function(companion){
		var velocity = companion.body.GetLinearVelocity();
		velocity.x = +5;
		companion.body.SetLinearVelocity(velocity); // companion.SetLinearVelocity(new b2Vec2(5, 0)); would work too
		companion.body.SetAwake(true);
	};

	var move = function(offset_x, offset_y, companion){
		// unimplemented
		// should it hard-set position (not safe!)
		// or just allow to set any velocity/impulse vector?
	};

	return {
		// declare public
		init: init, 
		spawn: spawn,
		tick_AI: tick_AI,
		begin_contact: begin_contact,
		end_contact: end_contact,
	};
})();

module.exports = EsteemedCompanionLogic;

var Includes = require("../Includes.js"); var include_data = Includes.get_include_data({
	current_module: "EsteemedCompanionLogic", 
	include_options: Includes.choices.LOGIC_SPECIFIC
}); eval(include_data.name_statements); var include = function(){eval(include_data.module_statements);}

},{"../Includes.js":"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Includes.js"}],"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Logic/GriffinLogic.js":[function(require,module,exports){
var GriffinLogic = (function(){
   
	var Griffin = function(){
		/* Will be instantiated for every created entity to hold all the information 
			about the physical (not graphical) state of the entity in question. 
			declare the properties like entity:
			entity.some_state_variable_initial_value = 0;
			instantiate (most likely in the spawn function) like that:
			var new_entity_instance = new Griffin();
		*/
		var entity = EntityController.create_abstract_entity();
		
		entity.hero_hurt_me = false;
		entity.me_hurt_hero = false;
		entity.death_tick = 0;

		//set your game logic parameters here
		//entity.object_id = 1; //hardcode a unique identifier for each new enemy class
		entity.hp = 3;
		entity.speed = 6;
		entity.damage = 10;
		entity.point_value = 100;
		//entity.attack_cooldown = 4; //use entity for enemies who need
		entity.can_attack = true;//use entity for enemies who alternate between 
		//entity.cooldown_timer=-1;
		entity.AI_state = "fly";//use entity to keep track of the enemy's AI state
		entity.aliveflag = true;
		entity.unhurtflag = true;
		entity.needs_graphics_update = false;

		entity.direction = false;
		entity.fly_force = 100;
		
		return entity;
	};

	var init = function(){
		/* Is ran from the EntityController.init once during game loading 
		 	you should assign type to your model here using the identification controller
		 */
		include(); // satisfy requirements, GOES FIRST
		IdentificationController.assign_type(Griffin, "Griffin");
	};

	var spawn = function(x, y){
		/* spawn instance of this entity at the given coordinates
			you will have to create new entity instance, assign it id
			using the IdentificationController.assign_id(entity_instance),
			assign it a body which you can get through PhysicsController
			do any other stuff you want to do during spawning,
			and finally you HAVE TO(!!!) return the instance you just created from this function
		*/

		var new_Griffin = new Griffin();
		new_Griffin.type = "Griffin";
		var id = IdentificationController.assign_id(new_Griffin);

		new_Griffin.body = PhysicsController.get_rectangular({x: x, y: y, border_sensors: true}, new_Griffin);	

		return new_Griffin;

	};

	var tick_AI = function(Griffin){
		/* Is ran each tick from the EntityController.update for every registered
			entity of this type. I given entity_instance
		*/

		//if dead, die
		if (Griffin.hp <= 0) {
			Griffin.die();
		}else{ // Griffin.hp >= 1
			if (Griffin.in_air()){
				Griffin.change_animation("fly");
			}else{
				Griffin.change_animation("walk");
			}
			if (Griffin.animation == "walk"){
				Griffin.move(Griffin.speed);
			}
			if (Griffin.animation == "fly"){
			    Griffin.jump((2 * Griffin.fly_force * Griffin.direction) - Griffin.fly_force, Griffin.fly_force/2);
			}
			if (Griffin.hit_taken){
				Griffin.take_damage();
				Griffin.change_animation("injury");
			}
		}
	};

	// // //Set up Collision handler
	
	
	var begin_contact = function(contact, info){
		//handle collisions here
		
		if(info.Them.type == "hero"){
			if(info.Them.fixture_name != "bottom" && info.Me.entity.can_attack){
				info.Me.entity.me_hurt_hero = true;
			}else{
				info.Me.entity.hit_taken = true;//take damage if enemy collides from above and distance < vulnerability radius
				info.Me.entity.damage_taken = info.Them.entity.damage;
			}
		}
	};

	var end_contact = function(contact, info){
	
	};

	
	return {
		// declare public
		init: init, 
		spawn: spawn,
		tick_AI: tick_AI,
		begin_contact: begin_contact,
		end_contact: end_contact,
	};
})();

module.exports = GriffinLogic;

var Includes = require("../Includes.js"); var include_data = Includes.get_include_data({
	current_module: "GriffinLogic", 
	include_options: Includes.choices.LOGIC_SPECIFIC
}); eval(include_data.name_statements); var include = function(){eval(include_data.module_statements);}

},{"../Includes.js":"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Includes.js"}],"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Logic/HeroLogic.js":[function(require,module,exports){
var HeroLogic = (function(){

	var Hero = function(){
		/* Will be instantiated for every created entity to hold all the information 
			about the physical (not graphical) state of the entity in question. 
			declare the properties like this:
			this.some_state_variable_initial_value = 0;
			instantiate (most likely in the spawn function) like that:
			var new_entity_instance = new Hero();
		*/
		entity = new EntityController.create_abstract_entity();
		
		entity.hp = 100;
		entity.speed = 8;
		entity.hit_taken = false;
		entity.damage_taken = 0;
		entity.damage = 1;
		entity.is_walking = false;
		
		entity.jumps = 0;
		entity.decay_duration = 35;//time between decay animation and deletion
		entity.death_duration = 60;//time between death and deletion
		entity.jump_tick=0;

		entity.direction = 1; //default direction = left
		
		entity.needs_graphics_update = false; //accessed by renderer for animation purposes
		entity.animation = "stand"; //accessed by renderer for animation purposes
		
		return entity;
	};

	var init = function(){
		/* Is ran from the EntityController.init once during game loading 
			you should assign type to your model here using the identification controller
		*/
		include(); // satisfy requirements, GOES FIRST
		IdentificationController.assign_type(Hero, "hero");
	};

	var spawn = function(x, y){
		/* spawn instance of this entity at the given coordinates
			you will have to create new entity instance, assign it id
			using the IdentificationController.assign_id(entity_instance),
			assign it a body which you can get through PhysicsController
			do any other stuff you want to do during spawning,
			and finally you HAVE TO(!!!) return the instance you just created from this function
		*/


		var hero = new Hero();
		hero.type = "hero";
		hero.body = PhysicsController.get_rectangular({x: x, y: y, border_sensors: true}, hero);

		hero.hp = 100;
		hero.wound = false;
		hero.jumps = 0;
		hero.score = 0;

		return hero;
	
	};

	var tick_AI = function(hero){
		/* Is ran each tick from the EntityController.update for every registered
			entity of this type. I given entity_instance
		*/
		if(hero.player_id == NetworkController.get_network_id()){
			var cmds = KeyboardController.movement_commands();
		}else{
			var cmds = KeyboardController.get_remote_movement(hero.player_id);
		}

		hero.direction_previous = hero.direction;
		hero.x_previous = hero.body.GetWorldCenter().x;
		hero.y_previous = hero.body.GetWorldCenter().y;
       
		if(hero.hp <= 0){
			hero.die();
		}else{
			hero.is_walking = false;	
			
			if(cmds("right")){
				 if(hero.jumps==0){
					hero.change_animation("walk");
					hero.is_walking = true;
				}
				hero.direction = true;//direction = right
				hero.move(hero.speed);
			}
			
			if(cmds("left")){
				if(hero.jumps==0){
					hero.change_animation("walk");
					hero.is_walking = true;
				}
				hero.direction = false;//direction = left
				hero.move(hero.speed);
			}
			
			if(cmds("down")){
				slam(hero);
				stop_hero(hero);
			}
			
			if(cmds("up")){
				jump(hero);
			}
			
			if(!hero.is_walking && hero.animation != "jump" && hero.body.GetLinearVelocity().y == 0){
				hero.change_animation("stand");
				hero.jump_tick = 0;
			}
			
			if(hero.animation=="jump"){
				if(hero.jump_tick == 1){
					hero.change_animation("jump");
				}
				hero.jump_tick++;
				if(hero.jump_tick >= 20){
					hero.change_animation("finish");
					if(hero.jumps == 0){
						hero.animation = "finish";
					}
				}
			}
		
			if(hero.hit_taken){
			    hero.take_damage();
			    console.log("hold on");
			}
		
			if (hero.body.GetWorldCenter().x < WorldController.get_movement_edge() + hero.body.GetUserData().def.width/2){
				stop_hero(hero);
			}
		}
	};


	var begin_contact = function(contact, info){
		var hero = info.Me.entity;
		var other = info.Them.entity;
		if (other.type == "pizza") {
		    if (hero.hp <= 90) {
		        hero.damage_taken = other.regen;
		        hero.hit_taken = true;
		    }
		    else if (hero.hp != 100) {
		        hero.damage_taken = hero.hp - 100;
		        hero.hit_taken = true;
		    }
		}
		if (info.Me.fixture_name == "bottom"){
			if(info.Them.fixture_name == "top" || other.kind == 1 || other.kind == 2){
				hero.jumps = 0;//if colliding with surface, reset jumps
			}
			if(other.kind == 3){
				if (hero.hp > 0){
					hero.hit_taken = true;
					hero.damage_taken = other.damage;
				}
			}
		}
		if(info.Me.fixture_name != "bottom" && other.can_attack){
			if(other.kind == null){
				var my_extents = hero.get_fixture(hero,"main").GetAABB().GetExtents();
				var my_coordinates = hero.body.GetWorldCenter();
				var other_extents = hero.get_fixture(other,"main").GetAABB().GetExtents();
				var other_coordinates = other.body.GetWorldCenter();
				//prevents taking damage while on top of enemies
				if (!(my_coordinates.y <= other_coordinates.y - (my_extents.y + other_extents.y - 0.5))) {
					if (hero.hp > 0) {
						hero.hit_taken = true;
						hero.damage_taken = other.damage;
					}
				}
			}else{//if they're spikes, take damage no matter what
				hero.hit_taken = true;
				hero.damage_taken = other.damage;
			}
		}
	};

	var end_contact = function(contact, info){
			
		//info.Me.entity.hit_taken = false;
	};

	var stop_hero = function (hero) {
		//var body = hero.body;
		//var velocity = body.GetLinearVelocity();
		//velocity.x = 0;
		//body.SetLinearVelocity(velocity); // body.SetLinearVelocity(new b2Vec2(5, 0)); would work too
		//body.SetAwake(true);

		var body = hero.body;
		var w = hero.body.GetUserData().def.width/2;
		var pos = new B2d.b2Vec2(WorldController.get_movement_edge() + w, body.GetWorldCenter().y)
		var vel = body.GetLinearVelocity();
		if(vel.x < 0 || body.GetWorldCenter().x > pos.x){
			var vel = new B2d.b2Vec2(0, vel.y);
			body.SetLinearVelocity(vel);
		}

	    body.SetAwake(true);
	}

	var slam = function(hero){
	    var body = hero.body;
	    body.ApplyImpulse(new B2d.b2Vec2(0, 20), body.GetWorldCenter());
	};
	var move_left = function(hero){
		var body = hero.body;
		var velocity = body.GetLinearVelocity();
		velocity.x = -5;
		body.SetLinearVelocity(velocity); // body.SetLinearVelocity(new b2Vec2(5, 0)); would work too
		body.SetAwake(true);
		//hero.x += 10; // old
		//hero.x = (body.GetPosition().x + 1.5/2) * 30 ; 
	};

	var jump = function(hero){
	    var body = hero.body;
	    var w = hero.body.GetUserData().def.width / 2;
	    var pos = new B2d.b2Vec2(WorldController.get_movement_edge() + w, body.GetWorldCenter().y)
	    var vel = body.GetLinearVelocity();
		//console.log(hero.jumps);
		if (hero.jumps == 0){
			hero.change_animation("jump");
			var vel = new B2d.b2Vec2(vel.x, -18);
			body.SetLinearVelocity(vel);
			hero.body.SetAwake(true);
		    hero.jumps += 1;
		}
		else if (hero.jumps == 1 && body.GetLinearVelocity().y > -1){
			hero.change_animation("jump");
			var min_check = vel.y - 18;
			if (min_check > -9){
				min_check = -9;
			}
			var vel = new B2d.b2Vec2(vel.x, min_check);
			body.SetLinearVelocity(vel);
			hero.body.SetAwake(true);
			hero.jumps += 1;
		}
	};

	
	var b2b_get_coordinates = function(hero){
		return hero.body.GetWorldCenter();
	};

	//var move_left = function(hero){
		//var velocity = hero.body.GetLinearVelocity();
		//move(hero, velocity.x - 5, velocity.y)

	//};

	//var move_right = function(hero){
		//var velocity = hero.body.GetLinearVelocity();
		//move(hero, velocity.x + 5, velocity.y)
	//};

	//var move = function(hero, x, y){
		//var velocity = new B2d.b2Vec2(x, y);
		//hero.body.SetLinearVelocity(velocity); // hero.SetLinearVelocity(new b2Vec2(5, 0)); would work too
		//hero.body.SetAwake(true);
	//};

	return {
		// declare public
		init: init, 
		spawn: spawn,
		tick_AI: tick_AI,
		begin_contact: begin_contact,
		end_contact: end_contact,
	};
})();

module.exports = HeroLogic;

var Includes = require("../Includes.js"); var include_data = Includes.get_include_data({
	current_module: "HeroLogic", 
	include_options: Includes.choices.LOGIC_SPECIFIC
}); eval(include_data.name_statements); var include = function(){eval(include_data.module_statements);}

},{"../Includes.js":"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Includes.js"}],"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Logic/HyenaLogic.js":[function(require,module,exports){
/* 
	Enemy: Hyena 
	class and functions for the Hyena type enemy
	public functions:
		-init()
			initializes default class data for all instances of class Hyena
		-spawn(int x, int y)
			returns a new instance of class Hyena with unique instance ID at global coordinates(x,y)
		-tick_AI()
			runs hyena AI script, to be called for each instance on game tick
		-begin_contact()
			handles collisions, called on collision with any object
		-end_contact()
			callback function for box2d
*/

var HyenaLogic = (function(){
	//Instantiated for each instance of hyena at creation
	//call constructor through wrapper function spawn()
	var Hyena = function(){

		var entity = EntityController.create_abstract_entity();

		//Declare initial variables for the Hyena
	
		entity.hp = 2;
		entity.speed = 7;
		entity.jump_force = 125;
		entity.damage = 5;
		entity.point_value = 200;
		entity.sight_range = 16; //distance at which hyena detects heroes
		entity.attack_range = 8; //distance at which hyena leaps at the hero
		
		entity.hit_taken = false; //whether a hit has been taken since the last tick
		entity.damage_taken = 0; //the amount of damage inflicted by hits since the last tick
		
		entity.direction = false;	//false=left, true=right;
		entity.direction_previous = false;//store direction from end of previous tick
		entity.x_previous = 0;		//store x value from end of previous tick
		
		entity.is_idle = true; //determines whether hyena is aggressive or idle
		entity.idle_duration = 40; // time buffer between changing idle states
		entity.idle_timer = entity.idle_duration;
		entity.idle_counter = 0; //used to manage the number of times the hyena has changed state while idle
		entity.is_alive = true; //disables attacking and plays death animation while false
		entity.death_duration = 30;//time between death and deletion
		entity.decay_duration = 20;//time between decay animation and deletion
		entity.death_timer = -1;
		entity.running_away = false; //whether the hyena is running away
		entity.run_away_duration = 30; //set cowardice level
		entity.run_away_timer = -1;
		entity.can_attack = true;	//whether attacking is enabled
		entity.attack_cooldown = 10; //attack cooldown
		entity.attack_cooldown_timer = -1;
		entity.can_leap = true;		//leaping enabled
		entity.leap_cooldown = 40;//minimum time between leaps
		entity.leap_cooldown_timer = -1; 
		entity.charge_duration = 80;//maximum length of a charge
		entity.charge_timer = entity.charge_duration;
		entity.charge_cooldown = 20;//minimum time between charges
		entity.charge_cooldown_timer = -1;
		entity.blinking = false;	//whether hyena is blinking
		entity.blink_duration = 20;//how long the hyena blinks after taking damage
		entity.blink_timer = -1;
		entity.maintenance_frequency = 20;//ticks between routine maintenance checks
		entity.maintenance_timer = entity.maintenance_frequency;
		
		entity.barely_obstructed = false;
		entity.collision_buffer = 0.2	//the region of overlap accounted for during collision checking
		entity.path_blocked = false;	//is entity deprecated? set during collision
		entity.obstruction_tolerance = 4;//how many times the hyena can be blocked before he takes action
		entity.blocked_count = 0;			//tracks number of times blocked between maintenance checks
		
		entity.needs_graphics_update = false; //accessed by renderer for animation purposes
		entity.animation = "stand"; //accessed by renderer for animation purposes
		
		return entity;
	};

	//Initialize class variables, called once in EntityController.init() during game load
	var init = function(){
		include(); // satisfy requirements, GOES FIRST
		IdentificationController.assign_type(Hyena, "Hyena"); //assign class id
	};

	//Instantiates class Hyena
	//Wrapper for constructor, assigns unique ID
	var spawn = function(x, y){
		var new_hyena = new Hyena();
		new_hyena.type = "Hyena";
		var id = IdentificationController.assign_id(new_hyena);

		new_hyena.body = PhysicsController.get_rectangular({x: x, y: y, border_sensors: true}, new_hyena);	
		new_hyena.PhysicsController = PhysicsController;
		
		return new_hyena;
	};
	
//........................COMMENCE.........................\\
//.......................ARTIFICIAL........................\\
//.........................HYENA...........................\\
//......................INTELLIGENCE.......................\\
	
	// Is run each tick from the EntityController.update for every registered instance
	var tick_AI = function(Hyena){
		//Check if Dead........
		//If Hyena is close to the movement edge, leap away
		if (Hyena.body.GetWorldCenter().x <= WorldController.get_movement_edge() + 1.125){
			Hyena.jump(Hyena.jump_force, 0);
		}
		if (Hyena.hp <= 0){//if mortally wounded
			Hyena.die(); //die
		}else{ // Do Live Hyena Stuff
			//Maintenance....
			Hyena.direction_previous = Hyena.direction;				//remember what hyena's direction was at start of tick
			Hyena.x_previous = Hyena.body.GetWorldCenter().x; //remember what hyena's x was at start of tick
			Hyena.leap_cooldown_timer--;			//ensure the hyena is not eternally jumping
			//maintain blinking
			if(Hyena.blinking){
				Hyena.blink_timer--;
				if(Hyena.blink_timer == 0){
					Hyena.blinking = false;
				}
			}
			//maintain attack cooldown
			if(Hyena.attack_cooldown_timer > 0){ 
				Hyena.attack_cooldown_timer--;
				Hyena.can_attack = (Hyena.attack_cooldown_timer == 0);
			}
			//maintain the hyena's alternating phases of running and stopping
			if(Hyena.charge_timer <= 0){
				Hyena.charge_cooldown_timer--;
				if (Hyena.charge_cooldown_timer <= 0){
					Hyena.charge_timer = Hyena.charge_duration;
				}
			}
			//maintain the hyena's cowardly tactics
			if (Hyena.running_away){	//if hyena is deliberately running away
				Hyena.run_away_timer--;	//tickdown run_away timer
				if (Hyena.run_away_timer == 0){ //maybe stop running away
					Hyena.run_away_timer = -1;
					Hyena.direction = Hyena.direction_nearest_enemy();
					Hyena.running_away = false;
				}
			}
			//check periodically to ensure the hyena is not stuck in a corner and other routine maintenance
			Hyena.maintenance_timer--;
			if (Hyena.maintenance_timer == 0){
				if (Hyena.path_free()){
					Hyena.path_blocked = false;
				}
				if (Hyena.blocked_count > Hyena.obstruction_tolerance){	//you know he's stuck now
					if (Hyena.can_leap){
						Hyena.path_blocked = true;
						leap(Hyena);	//time to jump for it
						Hyena.path_blocked = false;
					}
				}
				Hyena.blocked_count = 0;
				Hyena.maintenance_timer = Hyena.maintenance_frequency; //reset check timer
			}
			//Run Main AI Script.....
			if(!Hyena.in_air() || Hyena.body.GetLinearVelocity().y == 0){ //if on ground OR if we suspect he's stuck on a corner
				if (Hyena.enemy_in_range(Hyena.sight_range)){ //if enemy nearby
					Hyena.idle = false;
					if (Hyena.hit_taken){	//if hyena was attacked,
						Hyena.running_away = true;	//back off
						Hyena.run_away_timer = Hyena.run_away_duration;
						Hyena.direction = !(Hyena.direction);
					}else if ((Hyena.enemy_in_range(Hyena.attack_range) || Hyena.path_blocked) && Hyena.can_leap && Hyena.leap_cooldown_timer <= 0){ //if enemy in range or path is blocked, and leaping is enabled, leap
						Hyena.direction = Hyena.direction_nearest_enemy();
						leap(Hyena);
						Hyena.can_leap = false;
						Hyena.leap_cooldown_timer = Hyena.leap_cooldown;
						Hyena.change_animation("leap");
					}else{
						if(!Hyena.running_away && !Hyena.in_air()){ //if hyena isn't cowering or in the air, face the enemy
							Hyena.direction = Hyena.direction_nearest_enemy();
						}
						if (Hyena.charge_timer > 0){ //if charge duration > 0
							run(Hyena);
							Hyena.change_animation("run"); //charge the enemy
							Hyena.charge_timer--;
							if(Hyena.charge_timer == 0){
								Hyena.charge_cooldown_timer = Hyena.charge_cooldown;
							}
							if(Hyena.x_previous == Hyena.body.GetWorldCenter().x){ //check if hyena has moved successfully
								Hyena.blocked_count++;
							}
						}else{//else stand aggressively
							Hyena.change_animation("stand");
						}
					}
				}else{
					Hyena.idle = true; //idle mode
					Hyena.idle_timer--;
					if (Hyena.idle_timer == 0){
						Hyena.idle_timer = Hyena.idle_duration;
						Hyena.idle_counter = (Hyena.idle_counter+1)%27;
						if (Hyena.idle_counter%4 == 0 && Hyena.idle_counter%5 != 0){
							Hyena.direction = !(Hyena.direction);//use weird modulos to get random looking idle behavior
						}
					}
					if (Hyena.idle_counter%2 == 0 || Hyena.idle_counter%3 == 0){ //use weird modulos to get random looking idle behavior
						walk(Hyena);
						Hyena.change_animation("walk");//pace
						if(Hyena.x_previous == Hyena.body.GetWorldCenter().x){ //check if hyena has wandered successfully
							Hyena.blocked_count++; //else check for being stuck
						}
					}else{
						Hyena.change_animation("stand");//loiter
					}
				}
			}else{//if in the air
				if(Hyena.movement_voluntary()){
					Hyena.change_animation("leap");//if voluntary, leap
				}else{
					Hyena.change_animation("fall");//else, fall
				}
			}
			if (Hyena.hit_taken){
				Hyena.take_damage(); //if hit, take damage
			}
		}
	};
//...........................END............................\\
//........................ARTIFICIAL........................\\
//.......................INTELLIGENCE.......................\\


//.....................HELPER FUNCTIONS......................
	
	
	//run
	var run = function(hyena){
		hyena.move(hyena.speed);
	};
	
	//walk
	var walk = function(hyena){
		hyena.move(hyena.speed/3);
	};
	
	//leap
	var leap = function(hyena){
		if (hyena.path_blocked){//jump out of a hole or over a wall
			hyena.jump(-10+(20*hyena.direction), -1*hyena.jump_force);
		}else{ //leap viciously at hero
			hyena.jump((2*hyena.jump_force*hyena.direction) - hyena.jump_force, -1*hyena.jump_force/2);
		}
		hyena.can_leap = false;
	};
	

//......................COLLISION HANDLERS...........................
	//called at the beginning of the collision
	var begin_contact = function(contact, info){
		var type = info.Me.type;
		var hyena = info.Me.entity;
		var hyena_x = hyena.body.GetWorldCenter().x;
		var hyena_y = hyena.body.GetWorldCenter().x;
		var hyena_w = 1.125; //half width of hyena
		var hyena_h = 0.875; //half the height of hyena
		var other_x = info.Them.entity.body.GetWorldCenter().x;
		var other_y = info.Them.entity.body.GetWorldCenter().y;
		var other_w = hyena.get_fixture(info.Them.entity,"main").GetAABB().GetExtents().x;
		var other_h = hyena.get_fixture(info.Them.entity,"main").GetAABB().GetExtents().y;
		
		/**
		(hyena_w + other_w + buffer) = minimum horizontal distance for non-vertically stacked entities
		abs(them.x - me.x) = absolute horizontal distance
		(abs_hdistance < min_hdistance) implies vertical stacking
		
		(hyena_h + other_h + buffer) = minimum vertical distance for non-adjacent entities
		(abs_vdistance < min_vdistance) implies adjacency
		
		(hyena.x - other.x) < 0 if (hyena.x < other.x)
		(hyena.x - other.x) = 0 if (hyena.x = other.x)
		(hyena.x - other.x) > 0 if (hyena.x > other.x)
		smaller x is to the left of bigger x
		smaller y is above bigger y
		0 = left;
		1 = right;
		((hyena.x - other.x) > 0) returns true if hyena is to the right of the enemy, else false
		((hyena.x - other.x) < 0) returns true if other is to the right of hyena, else false
		
		((hyena.y - other.y) > 0) returns true if hyena is below the enemy (hyena_y > other_y), else false
		((hyena.y - other.y) < 0) returns true if other is above hyena(hyena_y < other_y), else false
		*/
		
		//ultimate collision detector
		if (info.Me.fixture_name == "main"){
			//if adjacent
			if (Math.abs(hyena_y - other_y) < (hyena_h + other_h - hyena.collision_buffer)){ //if adjacent
				if ((hyena_h+other_h) - (other_y-hyena_y) < hyena.collision_buffer){//if the hyena is close enough to the top that he could almost walk over it...
					hyena.barely_obstructed = true;//call for a tiny bump
				}else{
					hyena.blocked_count++; //else call for a real jump
					hyena.path_blocked = true;
				}
				if (info.Them.type == "hero"){//if other = hero, deal damage
					if(hyena.can_attack){
						hyena.attack_cooldown_timer = hyena.attack_cooldown;//set cooldown timer
					}
				}
			}else{
				//if other is below
				if(true){}
					//reset jump
					//if hero, deal damage
				
				//if other is above:
					//if hero, take damage
			}
		}
		
		var vulnerability_radius = (1.125 + 0.45 - 0.3);// hyena_width/2 + hero_width/2 - buffer, in meters
		//if bottom colliding with the ground or top of another object, enable leap
		if (info.Me.fixture_name == "bottom" && (info.Them.fixture_name == "top" || info.Them.entity.kind == 1 || info.Them.entity.kind == 2)){
			hyena.can_leap = true;
		}
		
		//if colliding with a wall, detect blocked path
		if ((info.Me.fixture_name == "left" && !hyena.direction)||(info.Me.fixture_name == "right" && hyena.direction)){
			hyena.path_blocked = true;
			hyena.blocked_count++;
		}
		
		//if colliding with a player, check for damage
		if(info.Them.type == "hero"){
			if(info.Them.fixture_name != "bottom"){ //if can_attack and colliding with a fixture other than "bottom"
				if(hyena.can_attack){
					hyena.attack_cooldown_timer = hyena.attack_cooldown;//set cooldown timer
				}
			}else if(Math.abs(info.Them.entity.body.GetWorldCenter().x - hyena.body.GetWorldCenter().x) < vulnerability_radius && !hyena.blinking){
				hyena.hit_taken = true;//take damage if enemy collides from above and distance < vulnerability radius
				hyena.damage_taken = info.Them.entity.damage;
			}
		}
	};

	//called upon end of collision
	var end_contact = function(contact, info){
		
	};


//.................DECLARE PUBLIC FUNCTIONS.....................
	return {
		init: init, 
		spawn: spawn,
		tick_AI: tick_AI,
		begin_contact: begin_contact,
		end_contact: end_contact,
	};
})();

module.exports = HyenaLogic;

var Includes = require("../Includes.js"); var include_data = Includes.get_include_data({
	current_module: "HyenaLogic", 
	include_options: Includes.choices.LOGIC_SPECIFIC
}); eval(include_data.name_statements); var include = function(){eval(include_data.module_statements);}

},{"../Includes.js":"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Includes.js"}],"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Logic/MedusaLogic.js":[function(require,module,exports){
var MedusaLogic = (function(){
   
	var Medusa = function(){
		/* Will be instantiated for every created entity to hold all the information 
			about the physical (not graphical) state of the entity in question. 
			declare the properties like entity:
			entity.some_state_variable_initial_value = 0;
			instantiate (most likely in the spawn function) like that:
			var new_entity_instance = new Medusa();
		*/
		var entity = EntityController.create_abstract_entity();
		
		entity.hero_hurt_me = false;
		entity.me_hurt_hero = false;
		entity.death_tick = 0;

		//set your game logic parameters here
		//entity.object_id = 1; //hardcode a unique identifier for each new enemy class
		entity.hp = 3;
		entity.speed = 6;
		entity.damage = 10;
		entity.point_value = 100;
		//entity.attack_cooldown = 4; //use entity for enemies who need
		entity.can_attack = true;//use entity for enemies who alternate between 
		//entity.cooldown_timer=-1;
		entity.AI_state = "fly";//use entity to keep track of the enemy's AI state
		entity.aliveflag = true;
		entity.unhurtflag = true;
		entity.needs_graphics_update = false;

		entity.direction = false;
		entity.fly_force = 100;
		
		return entity;
	};

	var init = function(){
		/* Is ran from the EntityController.init once during game loading 
		 	you should assign type to your model here using the identification controller
		 */
		include(); // satisfy requirements, GOES FIRST
		IdentificationController.assign_type(Medusa, "Medusa");
	};

	var spawn = function(x, y){
		/* spawn instance of this entity at the given coordinates
			you will have to create new entity instance, assign it id
			using the IdentificationController.assign_id(entity_instance),
			assign it a body which you can get through PhysicsController
			do any other stuff you want to do during spawning,
			and finally you HAVE TO(!!!) return the instance you just created from this function
		*/

		var new_Medusa = new Medusa();
		new_Medusa.type = "Medusa";
		var id = IdentificationController.assign_id(new_Medusa);

		new_Medusa.body = PhysicsController.get_rectangular({x: x, y: y, border_sensors: true}, new_Medusa);	

		return new_Medusa;

	};

	var tick_AI = function(Medusa){
		/* Is ran each tick from the EntityController.update for every registered
			entity of this type. I given entity_instance
		*/

		//if dead, die
		if (Medusa.hp <= 0) {
			Medusa.die();
		}else{ // Medusa.hp >= 1
			if (Medusa.in_air()){
				Medusa.change_animation("fly");
			}else{
				Medusa.change_animation("walk");
			}
			if (Medusa.animation == "walk"){
				Medusa.move(Medusa.speed);
			}
			if (Medusa.animation == "fly"){
			    Medusa.jump((2 * Medusa.fly_force * Medusa.direction) - Medusa.fly_force, Medusa.fly_force/2);
			}
			if (Medusa.hit_taken){
				Medusa.take_damage();
				Medusa.change_animation("injury");
			}
		}
	};

	// // //Set up Collision handler
	
	
	var begin_contact = function(contact, info){
		//handle collisions here
		
		if(info.Them.type == "hero"){
			if(info.Them.fixture_name != "bottom" && info.Me.entity.can_attack){
				info.Me.entity.me_hurt_hero = true;
			}else{
				info.Me.entity.hit_taken = true;//take damage if enemy collides from above and distance < vulnerability radius
				info.Me.entity.damage_taken = info.Them.entity.damage;
			}
		}
	};

	var end_contact = function(contact, info){
	
	};

	
	return {
		// declare public
		init: init, 
		spawn: spawn,
		tick_AI: tick_AI,
		begin_contact: begin_contact,
		end_contact: end_contact,
	};
})();

module.exports = MedusaLogic;

var Includes = require("../Includes.js"); var include_data = Includes.get_include_data({
	current_module: "MedusaLogic", 
	include_options: Includes.choices.LOGIC_SPECIFIC
}); eval(include_data.name_statements); var include = function(){eval(include_data.module_statements);}

},{"../Includes.js":"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Includes.js"}],"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Logic/PizzaLogic.js":[function(require,module,exports){
var PizzaLogic = (function () {

    var Pizza = function () {
        /* Will be instPizzaiated for every created entity to hold all the information 
			about the physical (not graphical) state of the entity in question. 
			declare the properties like this:
			this.some_state_variable_initial_value = 0;
			instPizzaiate (most likely in the spawn function) like that:
			var new_entity_instance = new Pizza();
		*/
        var entity = EntityController.create_abstract_entity();

        entity.animation = "normal";
        entity.can_attack = false;
        entity.used = false;
        entity.point_value = 0;
        entity.is_alive = false;
        entity.regen = -10;

        return entity;
    };

    var init = function () {
        /* Is run from the EntityController.init once during game loading 
		 	you should assign type to your model here using the identification controller
		 */
        include(); // satisfy requirements, GOES FIRST
        IdentificationController.assign_type(Pizza, "pizza");
    };

    var spawn = function (x, y) {
        /* spawn instance of this entity at the given coordinates
			you will have to create new entity instance, assign it id
			using the IdentificationController.assign_id(entity_instance),
			assign it a body which you can get through PhysicsController
			do any other stuff you wPizza to do during spawning,
			and finally you HAVE TO(!!!) return the instance you just created from this function
		*/

        var new_Pizza = new Pizza();
        new_Pizza.type = "pizza";
        var id = IdentificationController.assign_id(new_Pizza);

        new_Pizza.body = PhysicsController.get_rectangular({ x: x, y: y, border_sensors: false }, new_Pizza);

        return new_Pizza;

    };

    var tick_AI = function (Pizza) {
        /* Is ran each tick from the EntityController.update for every registered
			entity of this type. I given entity_instance
		*/

        //if enemy is dead, die
        //if (Pizza.body.GetWorldCenter().y > 22 || Pizza.body.GetWorldCenter().x < Config.Player.movement_edge - 1) {
        //EntityController.delete_entity();
        //console.log("drop of death");
        //}
        //
        if (Pizza.used) {
            Pizza.die();
        }
    };

    // // //Set up Collision handler


    var begin_contact = function (contact, info) {
        //handle collisions here
        if (info.Them.entity.type == "hero" && info.Them.entity.hp < 100) {
            info.Me.entity.used = true;
        }

    };

    var end_contact = function (contact, info) {

    };


    return {
        // declare public
        init: init,
        spawn: spawn,
        tick_AI: tick_AI,
        begin_contact: begin_contact,
        end_contact: end_contact,
    };
})();

module.exports = PizzaLogic;

var Includes = require("../Includes.js"); var include_data = Includes.get_include_data({
    current_module: "PizzaLogic",
    include_options: Includes.choices.LOGIC_SPECIFIC
}); eval(include_data.name_statements); var include = function () { eval(include_data.module_statements); }

},{"../Includes.js":"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Includes.js"}],"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Models/AssetModel.js":[function(require,module,exports){
var AssetModel = new function(){
	// As always, almost anything is initialized in the InitController
	
	this.loader;
//mackerel
	this.manifest = [ // defining resources to be loaded in bulk with preload.js
			{src: "greek_warrior.png", id: "greek_warrior"},
			//{src:, id:},
			{src: "middle_terrain.png", id:"middle_terrain"},
			{src: "bottom_terrain.png", id: "bottom_terrain"},
			{src: "grass_summer.png", id: "grass_summer" },
			{src: "grass_winter.png", id: "grass_winter" },
			{src: "grass_fall.png", id: "grass_fall" },
			{src: "grass_spring.png", id: "grass_spring" },
			{src: "AntChompers.png", id: "Ant1"},
			{src: "AntChompers2.png", id: "Ant2"},
			{src: "AntChompersDeath.png", id: "Ant3"},
			{src: "Greek Landscape fall.png", id: "Fall"},
			{src: "Greek Landscape spring.png", id: "Spring"},
			{src: "Greek Landscape winter.png", id: "Winter"},
			{src: "Greek Landscape summer.png", id: "Summer"},
			{src: "griffinPhase1Small.png", id: "Griffin1" },
			{src: "griffinPhase2Small.png", id: "Griffin2" },
			{src: "griffinPhase3Small.png", id: "Griffin3" },
			{ src: "griffinDeathSmall.png", id: "GriffinDeath" },
            { src: "griffinDeathSmall2.png", id: "GriffinDeath2" },
            { src: "griffinDeathSmall3.png", id: "GriffinDeath3" },
			{ src: "MedusaSheet.png", id: "Medusa1" },
			{src: "platform_left.png", id: "left_platform" },
			{src: "platform_middle.png", id: "middle_platform" },
			{src: "platform_right.png", id: "right_platform" },
			{src: "HyenaPhase3.png", id: "HyenaSprite" },
			{src: "platform_spikes.png", id: "platform_spikes" },
			{src: "Hero.png", id: "Hero"},
			{src: "HeroHitRed.png", id: "HeroR"},
			{src: "HeroHitWhite.png", id: "HeroW"},
			{src: "HeroRed.png", id: "HeroRed"},
			{src: "HeroPink.png", id: "HeroPink"},
			{src: "HeroBlue.png", id: "HeroBlue"},
			{src: "HeroLPurple.png", id: "HeroLPurple"},
			{src: "HeroOrange.png", id: "HeroOrange"},
			{src: "HeroLB.png", id: "HeroLightBlue"},
			{src: "HeroLG.png", id: "HeroLightGreen"},
			{src: "HeroGreen.png", id: "HeroGreen"},
            {src: "pizza.png", id: "pizza"},

			
		]; 
		// TODO make adding resources easier? Automatic loading 
		// of everything from assets, automatic names etc.?

	this.shapes = {}; // maybe this aren't needed

	this.bitmaps = {};

	this.animations = {};

};

module.exports = AssetModel;

},{}],"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Models/EntityModel.js":[function(require,module,exports){
var EntityModel = function(){	
	// associates type with the AI
	this.type_to_AI = {};

	this.for_logic_update = {}; // key: type, value: table of objects with id for key, object for value
	
	
	this.hero_spawned = false;

	// assiciates player network id with the hero entity instance
	this.heroes = {};

	// last velocity for my hero
	// used to check how much velocity changed since the last tick
	this.hero_last_velocity = {x: 0, y: 0};
};

module.exports = new EntityModel;


},{}],"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Models/GameModel.js":[function(require,module,exports){
var GameModel = new function(){ // main model
    this.pauseCounter = 0;
};

module.exports = GameModel;

},{}],"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Models/GraphicsModel.js":[function(require,module,exports){
var GraphicsModel = function(){
	this.stage; // main stage to where everything will be drawn
	// note that every graphics object must be augmented with
	// the reference to the corresponding physics object, if any
	this.other_players = []; // array of players other then hero for multiplayer

	// all object registered for continious update to match their physical body
	// position 
	this.all_physical = {}; 
	this.special_render = {}; // matches type with array of all objects of that type to be rendered

	// all spritesheet definitions (added at the initialization stage
	// because they need assets to be loaded)
	this.spritesheets = {}; 

	this.camera = {
		// should be easeljs object or null
		following: null,

		// internal camera implementation thing to know how far to offset from the
		// initial position
		offset: {x: 0, y: 0},

		// the offset of the camera from the followed object
		// e.g. offset of {x: 100, y: 100} will center camera
		// 100 pixels to the right and 100 pixels below the followed object
		offset_from_followed: { x: 400, y: -100 },
		//offset_from_followed: {x: 330, y: -205}, //FOR GAME PAGE
		// this is center of the screen in pixels. gets dynamically recalculated 
		// during the camera update so if it's ever changed, camera still works as expected
		center: {x: 0, y: 0}

	};

};

module.exports = new GraphicsModel;


},{}],"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Models/IdentificationModel.js":[function(require,module,exports){

var IdentificationModel = function(){
	
	// next unique id to be given if not free id's remain
	this.next_id = 0;

	// array of free id's. push when freed, pop when free id is needed
	// if array is empty, get next id using >next_id<
	this.free_ids = [];

	// array matches ids to their corresponding objects
	this.id_matching = [];

	// registry of types to make sure that no type is registerd twice
	// and enable people to get the model by type name
	this.types = {}

	//list of heroes and companions spawned
	this.hero;
	this.companions = [];

	this.reserved = [];
};

module.exports = new IdentificationModel;



},{}],"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Models/KeyboardModel.js":[function(require,module,exports){
var KeyboardModel = function(){

	// own keys that are currently active
	this.keys = {
	};

	this.state_changed = false;

	// table of all keys that have
	// changed since the last tick
	// key is keycode, value is boolean
	// indicating whether key was pressed or released
	// TODO: implement;
	// idea is that only commands for relevant tables will be sent
	// overseas
	this.changed_keys = {};

	// own keys that were active previous tick
	//this.old_keys = {
	//};

	// table of network player ids associated
	// with the last registered state of their keyborads
	this.all_keyboard_states = {
	}

	this.translation_tables = {
		code_to_name: {
			8:   "backspace", //  backspace
			9:   "tab", //  tab
			13:  "enter", //  enter
			16:  "shift", //  shift
			17:  "ctrl", //  ctrl
			18:  "alt", //  alt
			19:  "pause/break", //  pause/break
			20:  "caps lock", //  caps lock
			27:  "escape", //  escape
			33:  "page up", // page up, to avoid displaying alternate character and confusing people
			34:  "page down", // page down
			35:  "end", // end
			36:  "home", // home
			37:  "left arrow", // left arrow
			38:  "up arrow", // up arrow
			39:  "right arrow", // right arrow
			40:  "down arrow", // down arrow
			45:  "insert", // insert
			46:  "delete", // delete
			48:  "0",
			49:  "1",
			50:  "2",
			51:  "3",
			52:  "4",
			53:  "5",
			54:  "6",
			55:  "7",
			56:  "8",
			57:  "9",
			65:  "a",
			66:  "b",
			67:  "c",
			68:  "d",
			69:  "e",
			70:  "f",
			71:  "g",
			72:  "h",
			73:  "i",
			74:  "j",
			75:  "k",
			76:  "l",
			77:  "m",
			78:  "n",
			79:  "o",
			80:  "p",
			81:  "q",
			82:  "r",
			83:  "s",
			84:  "t",
			85:  "u",
			86:  "v",
			87:  "w",
			88:  "x",
			89:  "y",
			90:  "z",
			91:  "left window", // left window
			92:  "right window", // right window
			93:  "select key", // select key
			96:  "numpad 0", // numpad 0
			97:  "numpad 1", // numpad 1
			98:  "numpad 2", // numpad 2
			99:  "numpad 3", // numpad 3
			100: "numpad 4", // numpad 4
			101: "numpad 5", // numpad 5
			102: "numpad 6", // numpad 6
			103: "numpad 7", // numpad 7
			104: "numpad 8", // numpad 8
			105: "numpad 9", // numpad 9
			106: "multiply", // multiply
			107: "add", // add
			109: "subtract", // subtract
			110: "decimal point", // decimal point
			111: "divide", // divide
			112: "F1", // F1
			113: "F2", // F2
			114: "F3", // F3
			115: "F4", // F4
			116: "F5", // F5
			117: "F6", // F6
			118: "F7", // F7
			119: "F8", // F8
			120: "F9", // F9
			121: "F10", // F10
			122: "F11", // F11
			123: "F12", // F12
			144: "num lock", // num lock
			145: "scroll lock", // scroll lock
			186: ";", // semi-colon
			187: "=", // equal-sign
			188: ",", // comma
			189: "-", // dash
			190: ".", // period
			191: "/", // forward slash
			192: "`", // grave accent
			219: "[", // open bracket
			220: "\\", // back slash
			221: "]", // close bracket
			222: "'", // single quote
		},

		movement: {
			"left arrow": "left",
			"up arrow": "up",
			"down arrow": "down",
			"right arrow": "right",
		},

		pause: {
		    "p": "pause",
		},
		
		debug: {
			"a": "spawn_ant",
			"m": "spawn_medusa",
			"z": "season",
			"g": "spawn_griffin",
			"s": "new_slice",
			"h": "spawn_hyena",
			"c": "connect",
			"v": "request_hero",
			"i": "show_ids",
            "k": "spawn_pizza",
		},

	}


};

module.exports = new KeyboardModel;


},{}],"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Models/MultiplayerSyncModel.js":[function(require,module,exports){
var MultiplayerSyncModel = function(){
	this.hero = null;

	this.op_packets_table = {};
	
};

module.exports = new MultiplayerSyncModel;



},{}],"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Models/NetworkModel.js":[function(require,module,exports){
var NetworkModel = function(){
	this.connected = false; // flag to indicate if already connected to the network

	// flag to indicate whether to disallow connections, useful to prevent
	// more attempts to connect when connection is already being established
	this.block_connections; 

	this.my_peer = null;
	this.my_id = null;

	this.master_id = null; // id of the master with whome everyone synces

	// this is for standart (non-test) mode
	// I plan to make test mode use this too, eventually
	this.peers_to_connect = null;
	

	// player_id associated with the connection object
	this.connections = null;

	this.send_array = null;
	this.recieve_array = null;

	this.one_packet = null; // used to store one packet, for one packet communication

	this.input_cell = null;
	this.output_cell = null;
	this.counter = 0; // temp

	// linked list to store the backlog of packets for the communication that needs that
	this.package_backlog = {HEAD: null, TAIL: null} 

	// TIME 
		this.begin_time = null; // seconds
		this.timeout_id = null;
	// END TIME
	
	// TESTING MODE STUFF. SHOULD BE MERGED WITH GENERAL STUFF IF POSSIBLE
	
	this.non_free_ids = [
	];

	this.free_ids = [
	];

	// END TESTING MODE STUFF

};

module.exports = new NetworkModel;



},{}],"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Models/PhysicsModel.js":[function(require,module,exports){

var PhysicsModel = function() {
	
	this.gravity;
	this.world;
 
	// getting context of the debug canvas, for box2d to draw debuggin boxes

	// timeToCover is the time that simulation must cover to catch up to the real world time;
	// since createjs ticker is what we use for timing, and box2d ticks
	// must be of constant length and independent from the graphics framerate,
	// we keep track of time that passed since last box2d step by adding time deltas
	// to the timeToCover. Then, when timeToCover exceeds desired box2d step length,
	// we perform the step and subtract the corresponding time from the timeToCover;
	// If anything is still unclear, ask me (AK);
		this.timeToCover = 0; 

	this.step_amount;

	this.awaiting_contact = {
		PreSolve: {},
		PostSolve: {},
		BeginContact: {},
		EndContact: {},
	};

}; 

/*
 * Parameters for b2d body definition
	active: true
	allowSleep: true
	angle: 0
	angularDamping: 0
	angularVelocity: 0
	awake: true
	bullet: false
	fixedRotation: false
	inertiaScale: 1
	linearDamping: 0
	linearVelocity: b2Vec2
	position: b2Vec2
	type: 0
	userData: null
*/

/*
 * Fixture definition parameters:
	density: 0
	filter: b2FilterData
	friction: 0.2
	isSensor: false
	restitution: 0
	shape: null
	userData: null
 */

// rectangular
PhysicsModel.prototype.r_templates = r_templates = {};
// circular
PhysicsModel.prototype.c_templates = c_templates = {};
// polygonal
PhysicsModel.prototype.p_templates = p_templates = {};



r_templates["default"] = {

	//shape: "rectangle", // implied from the template type
	x: 3,
	y: 3,
	vx: 0,
	vy: 0,

	width: 5,
	height: 5,
	density: 2,
	friction: 1,
	restitution: 0.2,
	isSensor: false,


	active: true,
	allowSleep: true,
	angle: 0,
	angularVelocity: 0,
	awake: true,
	bullet: false,
	fixedRotation: false,
	type: "dynamic",

};

r_templates.living = {
	fixedRotation: true,
	awake: true,
	isSensor: false,
	//mobexp++
};

r_templates.terrain_cell = {
	type: "static",
	width: 1,
	height: 1,
	friction: 2,
	//mobexp++
};

r_templates.hero = {
	parent: r_templates.living,
	width: 0.9,
	height: 1.7,
	density: 4.5,
	type: "dynamic",
	//mobexp++
};

r_templates.companion = {
	parent: r_templates.living,
	width: 1.5,
	height: 2.5,
	type: "dynamic",
	//mobexp++
};

r_templates.ant = {
	parent: r_templates.living,
	width: 1,
	height: 0.5,
	type: "dynamic",
	x: 40,
	y: 10,
	//mobexp++
};

r_templates.Griffin = {
	parent: r_templates.living,
	width: 4,
	height: 2.5,
	type: "dynamic",
	x: 65,
	y: 10,
	//mobexp++
};

r_templates.Hyena = {
	parent: r_templates.living,
	width: 2.25,
	height: 1.75,
	type: "dynamic",
	x: 65,
	y: 10,
	//mobexp++
};

r_templates.test = {
	width: 1,
	height: 2,
	fixedRotation: false,
	//mobexp++
}

r_templates.platform = {
    x: 10,
    y: 11,
    width: 10,
    height: .5,
    type: "static",
}

r_templates.pizza = {
    isSensor: true,
    type: "static",
    height: .5,
    width: .5,
    x: 10,
    y: 11,
}

module.exports = new PhysicsModel;

},{}],"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Models/RegisterAsModel.js":[function(require,module,exports){
var RegisterAsModel = function(){
	
	// register stuff for one time lookup
	// the one requesting stuff is supposed to pop the each examined element
	// there is no timeouts or automatic cleanup
	this.simple_one_time_lookup = {};
};

module.exports = new RegisterAsModel;


},{}],"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Models/TerrainModel.js":[function(require,module,exports){
var TerrainModel = function(){
	//This is physics, for graphics look into the GraphicsController/Model
	this.terrain_slices_queue = [];
	//this.new_slices = [];
	this.seed;

	// how many initial (non-random) terrain slices
	// were generated already?
	this.initial_generated = 0;


	// used to determine x offset of the next slice
	// TODO: update this when truly infinite terrain will be implemented
	this.slice_counter = 0;

};

module.exports = new TerrainModel;

},{}],"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Models/TerrainSliceModel.js":[function(require,module,exports){
TerrainSliceConfig = require ("../Config.js").TerrainSlice;

var TerrainSliceModel = function(){

	this.Slice = function(){
		/**
		* slice "model" to be instantiated
		*/
		
		
		this.num = TerrainSliceConfig.next_slice_id++; // automaticall assign id and increment 

		this.grid_columns = TerrainSliceConfig.grid_columns;
		this.grid_rows = TerrainSliceConfig.grid_rows;
		this.cell_w = TerrainSliceConfig.cell_w;
		this.cell_h = this.cell_w;;
		
		// grid[i][j] is the element in the i's column and j's row
		// the grid is maid to match the screen coordinates and the current box2d coordinates
		// i.e. grid[0][0] is the one in the top left corner of the terrain slice
		// do we want to change it? would it be easier to generate terrain if we start at the bottom?
		// if yes, then what makes more sense, changing coordinate systems or just switching generation
		// loops around? discuss
		//
		// notice that the grid is a terrain generation device only. once terrain slice is loaded,
		// box2d physics simulation may (and will) go nuts on it, changing whatever it wants,
		// and changes won't anyhow be reflected in the grid. to keep track of all the bodies
		// in the terrain slice, if that will be needed, other mechanisms should be used.
		// idea: have a collections of bodies by type, and setup sensor collision beams
		// at the terrain slices' boundaries to keep track of bodies flying over from one
		// terrain slice to another. Btw, Ali, I hate you for making me to type "terrain slice"
		// instead of the "chunk" 
		this.grid = [];
		
		this.origin = {x: null, y: null};

	};

	this.Cell = function(kind){
		this.kind = kind;
		this.body;
	}

	
};

TerrainSliceModel.prototype.lvl_prob = [
	[7, 2, 1],
	[0, 7, 3],
	[0, 1, 9]
]

module.exports = new TerrainSliceModel;

},{"../Config.js":"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Config.js"}],"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Models/TestModel.js":[function(require,module,exports){
var TestModel = function(){

};

module.exports = new TestModel;


},{}],"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Models/WorldModel.js":[function(require,module,exports){
var WorldModel = function(){
	
};

module.exports = new WorldModel;


},{}],"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Renderers/AntRenderer.js":[function(require,module,exports){
var AntRenderer = (function(){

	var spritesheets = {};
	var ant_animation;

	var init = function(){
		/* is ran from GraphicsController.init once during game loading
		 	use this function to create spritesheets and such
			like spritesheets.first = new createjs.Spritesheet(...);
		*/

		include(); // satisfy requirements, GOES FIRST
		var get_asset = AssetController.get_asset;

		spritesheets["ant"] = new createjs.SpriteSheet({
			"framerate": 1,
			"images": [get_asset("Ant1"), get_asset("Ant2"), get_asset("Ant3")],
			"frames": { "regX": 3, "regY": 6, "height": 25, "width": 50, "count": 6},
			"animations": {
				"walk": [0, 1, "walk"],
				"upside_down": [2, 3, "upside_down"],
				"death": [4, 5, "death"]
			}
		})

	};

	var register = function(entity_ant){
		/* is ran for every entity of this type that was just created and should
		get graphics representation. You are given the entity instance and is supposed
		to crete graphics instance, and GraphicsController.reg_for_render(graphics_instance, entity_instance); it 
		*/

		ant_animation = GraphicsController.request_animated(spritesheets["ant"], "walk");
		GraphicsController.set_reg_position(ant_animation, 0, 0); // change that to adjust sprite position relative to the body
		GraphicsController.reg_for_render(ant_animation, entity_ant); // sets ant_animation's position to track the ant's position (updates each tick)

		
	};

	var render = function(ant){
		/* 	is ran each tick from GraphicsController, for every registered object of this type
			is given >graphics_instance< parameter, which is also supposed to contain
			physical_instance property containing entity_instance, if it was attched correctly
		*/

		ant_animate(ant); 
	};
	var ant_animate = function(ant){
		//set graphical representation based on the animation variable determined by the AI
		//set animation
		if(ant.physical_instance.needs_graphics_update){
			var animation = ant.physical_instance.animation;
			ant.gotoAndPlay(animation)
		}
		
		//set direction
		if (ant.physical_instance.direction){ //if direction == right, flip right
			ant.scaleX = -1;
		}else{ //else flip left
			ant.scaleX = 1;
		}

		//set alpha if blinking
		if(ant.physical_instance.blinking && ant.physical_instance.blink_timer%2 == 1){
			ant.alpha = 0;
		}else{
			ant.alpha = 1;
		}
	};
	/*
	var ant_special_render_temp = function(ant){
		

		
		if(ant.physical_instance.AI_state == "death"&& ant.physical_instance.aliveflag){
			ant.gotoAndPlay("death");
			ant.physical_instance.aliveflag = false;
			
			
		}

		if(ant.physical_instance.AI_state == "upside_down" && ant.physical_instance.unhurtflag)
		{
			ant.gotoAndPlay("upside_down");
			ant.physical_instance.unhurtflag = false;
			
			
		}
		if(ant.physical_instance.AI_state == "walk" && ant.physical_instance.start_walking)
		{
			ant.gotoAndPlay("walk");
			//ant.physical_instance.hp += 1;
			ant.physical_instance.start_walking = false;
			
			
		}

	};
	*/

	return {
		// declare public
		init: init, 
		register: register,
		render: render,
	};
})();

module.exports = AntRenderer;

var Includes = require("../Includes.js"); var include_data = Includes.get_include_data({
	current_module: "AntRenderer", 
	include_options: Includes.choices.RENDERER_SPECIFIC
}); eval(include_data.name_statements); var include = function(){eval(include_data.module_statements);}

},{"../Includes.js":"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Includes.js"}],"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Renderers/BackgroundRenderer.js":[function(require,module,exports){
var BackgroundRenderer = (function(){

	var season_array;
	var season_image;
	var season_threshold;
	
	var season_progress;
	var season_progress_to_level;
	var hero_current_level;
		
	var init = function(){
		include(); //sets up dependencies MUST GO FIRST
		
		season_array = [];//stores season sprites
		season_image = ["Winter", "Spring", "Summer", "Fall"];
		season_threshold = 2; //So seasons only update once
		
		season_progress = 0;
		season_progress_to_level = 199;//season_image[cycle].width*2 + Config.SCREEN_W/2;
		hero_current_level = season_progress_to_level;
		
		generate_season("Winter", GraphicsController.get_stage().canvas.width, 0);
	};
	
	var render = function(){

		if(Math.round(WorldController.get_progress()) > hero_current_level){
			season_progress++;
			hero_current_level += season_progress_to_level;
			WorldController.increase_score(season_progress*500);
		}
		
		//Potentially change seasons based on hero progress
		change_seasons(season_progress);
		
		//perform parallax effect with background
		background_loop(WorldController.get_progress(),season_progress);
	};
	
	//Generates tiled background for season
	var generate_season = function(season_image, canvas_width, start){
		for(i=0; i<3; i++){//create tiles 3 at a time
			var season = GraphicsController.request_bitmap(season_image);
			season.regY -= season.image.height/2;
			//create a new tile with offset
			season.x = start + i*season.image.width;
			GraphicsController.get_stage().addChildAt(season, 0);
			season_array.push(season);
		}
	};
	
	//checks for and handles potential season change
	var change_seasons = function(progress){
		var flag = false;
		if(progress == season_threshold){ //seasons will change every even progress number
			season_threshold += 2;
			flag = true;
		}
		if(flag){
			console.log("generating season");
			delete_all_season();
			WorldController.set_season((WorldController.get_season()+1)%4);
			generate_season(season_image[WorldController.get_season()], GraphicsController.get_stage().canvas.width, WorldController.get_movement_edge() / 30);
		}
	};
	
	//scrolls the background along with the player
	var background_loop = function(hero_x, progress){
		for(i=0; i<season_array.length; i++){
			//season_array[i].x = (i * 799) + GraphicsModel.camera.offset.x;
			//season_array[i].y = GraphicsModel.camera.offset.y;
			season_array[i].x = ((i + progress) * 799) - (hero_x * 4);
			season_array[i].y = GraphicsController.get_camera().offset.y;
		}
	};

	//deletes all background objects
	var delete_all_season = function(){
		for(var i = 0; i < season_array.length; i++){
			GraphicsController.get_stage().removeChild(season_array[i]);
		}
		season_array = [];
	};
	
	var register = function(background){
		/* is ran for every entity of this type that was just created and should
		get graphics representation. You are given the entity instance and is supposed
		to crete graphics instance, and GraphicsController.reg_for_render(graphics_instance, entity_instance); it 
		*/

		
	};

	return {
		// declare public
		init: init, 
		register: register,
		render: render,
	};
})();

module.exports = BackgroundRenderer;

var Includes = require("../Includes.js"); var include_data = Includes.get_include_data({
	current_module: "BackgroundRenderer", 
	include_options: Includes.choices.RENDERER_SPECIFIC
}); eval(include_data.name_statements); var include = function(){eval(include_data.module_statements);}



},{"../Includes.js":"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Includes.js"}],"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Renderers/EsteemedCompanionRenderer.js":[function(require,module,exports){
var EsteemedCompanionRenderer = (function(){

	var spritesheets = {}; // to store spritesheets used by this entity

	var init = function(){
		/* is ran from GraphicsController.init once during game loading
			use this function to create spritesheets and such
			like spritesheets.first = new createjs.Spritesheet(...);
		*/
		include(); // satisfy requirements, GOES FIRST
	};

	var register = function(entity_companion){
		/* is ran for every entity of this type that was just created and should
		get graphics representation. You are given the entity instance and is supposed
		to crete graphics instance, and GraphicsController.reg_for_render(graphics_instance, entity_instance); it 
		*/

		var companion = GraphicsController.request_bitmap("greek_warrior");

		GraphicsController.set_reg_position(companion, -20, +10);
		GraphicsController.reg_for_render(companion, entity_companion);

	};

	var render = function(companion){
		/* 	is ran each tick from GraphicsController, for every registered object of this type
			is given >graphics_instance< parameter, which is also supposed to contain
			physical_instance property containing entity_instance, if it was attched correctly
		*/
		GraphicsController.update_health(companion.physical_instance.hp);
	};

	return {
		// declare public
		init: init, 
		register: register,
		render: render,
	};
})();

module.exports = EsteemedCompanionRenderer;

var Includes = require("../Includes.js"); var include_data = Includes.get_include_data({
	current_module: "EsteemedCompanion", 
	include_options: Includes.choices.RENDERER_SPECIFIC
}); eval(include_data.name_statements); var include = function(){eval(include_data.module_statements);}

},{"../Includes.js":"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Includes.js"}],"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Renderers/GriffinRenderer.js":[function(require,module,exports){
var GriffinRenderer = (function(){

	var spritesheets = {};
	var Griffin_animation;

	var init = function(){
		/* is ran from GraphicsController.init once during game loading
		 	use this function to create spritesheets and such
			like spritesheets.first = new createjs.Spritesheet(...);
		*/

		include(); // satisfy requirements, GOES FIRST
		var get_asset = AssetController.get_asset;

		spritesheets["Griffin"] = new createjs.SpriteSheet({
			"framerate": 1,
			"images": [get_asset("Griffin1"), get_asset("Griffin2"), get_asset("Griffin3"), get_asset("GriffinDeath")], //, get_asset("GriffinDeath2"), get_asset("GriffinDeath3")
				"frames": { "regX": 5, "regY": 14, "height": 207, "width": 210, "count": 6},
				"animations": {
				"walk": [0, 2, "walk", 0.2],
				"injury": {
				    frames: [2, 4, .25]
				},
				"death": [3, 4, "death", 0.6],
                "fly": [1, 2, "fly", .4],
			}
		})

	};

	var register = function(entity_Griffin){
		/* is ran for every entity of this type that was just created and should
		get graphics representation. You are given the entity instance and is supposed
		to crete graphics instance, and GraphicsController.reg_for_render(graphics_instance, entity_instance); it 
		*/

		Griffin_animation = GraphicsController.request_animated(spritesheets["Griffin"], "walk");
		GraphicsController.set_reg_position(Griffin_animation, 0, 0); // change that to adjust sprite position relative to the body
		GraphicsController.reg_for_render(Griffin_animation, entity_Griffin); // sets griffin_animation's position to track the griffin's position (updates each tick)

		
	};

	var render = function(Griffin){
		/* 	is ran each tick from GraphicsController, for every registered object of this type
			is given >graphics_instance< parameter, which is also supposed to contain
			physical_instance property containing entity_instance, if it was attched correctly
		*/

		Griffin_special_render_temp(Griffin); 
	};

	var Griffin_special_render_temp = function(Griffin){
		/* how to handle special render? TEMPORARY */

		//set graphical representation based on the animation variable determined by the AI
		//set animation
		if(Griffin.physical_instance.needs_graphics_update){
			var animation = Griffin.physical_instance.animation;
			Griffin.gotoAndPlay(animation)
		}
		
		//set direction
		if (Griffin.physical_instance.direction){ //if direction == right, flip right
			Griffin.scaleX = -1;
		}else{ //else flip left
			Griffin.scaleX = 1;
		}

		//set alpha if blinking
		if(Griffin.physical_instance.blinking && Griffin.physical_instance.blink_timer%2 == 1){
			Griffin.alpha = 0;
		}else{
			Griffin.alpha = 1;
		}
	};

	return {
		// declare public
		init: init, 
		register: register,
		render: render,
	};
})();

module.exports = GriffinRenderer;

var Includes = require("../Includes.js"); var include_data = Includes.get_include_data({
	current_module: "GriffinRenderer", 
	include_options: Includes.choices.RENDERER_SPECIFIC
}); eval(include_data.name_statements); var include = function(){eval(include_data.module_statements);}

},{"../Includes.js":"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Includes.js"}],"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Renderers/HUDRenderer.js":[function(require,module,exports){
var HUDRenderer = (function(){
	
	var score;
	var health;
	var score_title;
	var health_title;

	var init = function(){
		
		include();
		
		score = new createjs.Text();
		GraphicsController.reg_for_render(score);
		health = new createjs.Text();
		GraphicsController.reg_for_render(health);
		score_title = new createjs.Text();
		GraphicsController.reg_for_render(score_title);
		health_title = new createjs.Text();
		GraphicsController.reg_for_render(health_title);

		health_title.text = "Health: ";
		health_title.x = 10;
		health_title.y = 30;
		health.text = "100";
		health.x = 80;
		health.y = 30;
		health.font = "20px Arial";
		health_title.font = "20px Arial";
		health.color = "#ff0000";
		health_title.color = "#ff0000";
		score_title.text = "Score: ";
		score_title.x = 10;
		score_title.y = 10;
		score.text = "0";
		score.x = 80;
		score.y = 10;
		score.font = "20px Arial";
		score_title.font = "20px Arial";
	};
	
	var render = function(){
		var camera = GraphicsController.get_camera();
		var hero = EntityController.get_my_hero();
		
		update_score(WorldController.get_score());
		if(hero){
			update_health(hero.hp);
		}
		
	};
	
	var update_score = function(new_score){
		score.text = parseInt(new_score);
	};
	
	var update_health = function(new_health){
		health.text = parseInt(new_health);
	};
	
	return {
		// declare public
		init: init, 
		render: render,
	};
})();

module.exports = HUDRenderer;

var Includes = require("../Includes.js"); var include_data = Includes.get_include_data({
	current_module: "HUDRenderer", 
	include_options: Includes.choices.RENDERER_SPECIFIC
}); eval(include_data.name_statements); var include = function(){eval(include_data.module_statements);}


},{"../Includes.js":"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Includes.js"}],"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Renderers/HeroRenderer.js":[function(require,module,exports){
var HeroRenderer = (function(){

	var spritesheets = {}; // to store spritesheets used by this entity

	var init = function(){
		/* is ran from GraphicsController.init once during game loading
			use this function to create spritesheets and such
			like spritesheets.first = new createjs.Spritesheet(...);
		*/
		include(); // satisfy requirements, GOES FIRST
		var get_asset = AssetController.get_asset;
		spritesheets["hero"] = new createjs.SpriteSheet({
			"framerate": 1,
			"images": [get_asset("Hero")], //get_asset("HeroR"), get_asset("HeroW")
			"frames": { "regX": 25, "regY": 25, "height": 50, "width": 50, "count": 16},
			"animations": {
				"stand": {
				frames: [0]
				},
				"finish": {
					frames: [8]
				},				
				"walk": {
					 frames: [0,1, 2],
					 speed: 0.4
				 },
				"jump": {
					frames: [3, 4, 5, 6, 7, 8],
					speed: 0.3
				},
				"death": {
					frames: [9, 10, 11, 12, 13, 14, 15],
					speed: 0.3,
					next: "death"
				},
				"decay": {
					frames: [15]
				},
			}
		})
		//SpriteSheetUtils.addFlippedFrames(spriteSheets["Hero"], true, false, false);
	};

	var register = function(entity_hero){
		/* is ran for every entity of this type that was just created and should
		get graphics representation. You are given the entity instance and is supposed
		to crete graphics instance, and GraphicsController.reg_for_render(graphics_instance, entity_instance); it 
		*/

		hero_animation = GraphicsController.request_animated(spritesheets["hero"], "stand");
		hero_animation.graphics_id = "hero";
		GraphicsController.set_reg_position(hero_animation, -25, -25);
		GraphicsController.reg_for_render(hero_animation, entity_hero);
		if(entity_hero.player_id == NetworkController.get_network_id()){
			GraphicsController.follow(entity_hero.id);
		}

	};
	/*
	var render = function(hero){

		if(hero.physical_instance.state=="walk"&&hero.physical_instance.is_walk == true){
			if(hero.physical_instance.walk_tick ==1){
				hero.gotoAndPlay("walk");
			}
			hero.physical_instance.walk_tick++;
			if(hero.physical_instance.walk_tick ==10){
				hero.physical_instance.state= "stand";
				hero.physical_instance.is_walk = false;
			}
		}
		
		if(hero.physical_instance.state=="jump"){
			if(hero.physical_instance.jump_tick ==1){
				hero.gotoAndPlay("jump");
			}
			hero.physical_instance.jump_tick++;
			if(hero.physical_instance.jump_tick >= 20){
				hero.gotoAndPlay("finish");
				if(hero.physical_instance.jumps==0){
					hero.physical_instance.state="finish";
				}
				
			}
		}
		
		if(hero.physical_instance.state=="finish"){
			hero.gotoAndPlay("finish");
		}
		if(hero.physical_instance.state=="deathFinal"){
			hero.gotoAndPlay("deathFinal");
		}
		if(hero.physical_instance.state=="stand"){
			hero.gotoAndPlay("stand");
		}
		//console.log(hero.physical_instance.state);
		if (hero.physical_instance.state == "death") {
			//console.log(hero.physical_instance.death_tick);
			if(hero.physical_instance.death_tick ==1){
			    hero.gotoAndPlay("death");
			}
			else if(hero.physical_instance.death_tick >=20){
				hero.physical_instance.state="deathFinal";
			}
		}
		
		//set direction
		if (hero.physical_instance.left){ //if direction == right, flip right
			hero.scaleX = -1;
		}else{ //else flip left
			hero.scaleX = 1;
		}
	};
	*/

	return {
		// declare public
		init: init, 
		register: register,
		//render: render,
	};
})();

module.exports = HeroRenderer;

var Includes = require("../Includes.js"); var include_data = Includes.get_include_data({
	current_module: "HeroRenderer", 
	include_options: Includes.choices.RENDERER_SPECIFIC
}); eval(include_data.name_statements); var include = function(){eval(include_data.module_statements);}

},{"../Includes.js":"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Includes.js"}],"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Renderers/HyenaRenderer.js":[function(require,module,exports){
var HyenaRenderer = (function(){

	var spritesheets = {};
	var Hyena_animation;

	var init = function(){
		/* is ran from GraphicsController.init once during game loading
		 	use this function to create spritesheets and such
			like spritesheets.first = new createjs.Spritesheet(...);
		*/

		include(); // satisfy requirements, GOES FIRST
		var get_asset = AssetController.get_asset;

		spritesheets["Hyena"] = new createjs.SpriteSheet({
			"framerate": 1,
			"images": [get_asset("HyenaSprite")],
			"frames": { "regX": 0, "regY": 8, "height": 64, "width": 64, "count": 17},
			"animations": {
				"run": [0,3, "run", 0.5],
				"stand": [4,5, "stand", 0.25],
				"walk": [8,11, "walk", 0.2],
				"leap": [6],
				"fall": [7],
				"death": [12,14, "decay", 0.25],
				"decay": [15,16, "decay", 0.25],
			}
		})

	};

	var register = function(entity_hyena){
		/* is run for every entity of this type that was just created and should
		get graphics representation. You are given the entity instance and is supposed
		to create graphics instance, and GraphicsController.reg_for_render(graphics_instance, entity_instance); it 
		*/

		hyena_animation = GraphicsController.request_animated(spritesheets["Hyena"], "walk");
		GraphicsController.set_reg_position(hyena_animation, 0, 0); // change that to adjust sprite position relative to the body
		GraphicsController.reg_for_render(hyena_animation, entity_hyena); // sets hyena_animation's position to track the hyena's position (updates each tick)
		/*
		hyena_animation is the easeljs_obj passed through graphicsController
		entity_hyena is the physical object spawned in HyenaLogic
		request_animated returns an easeljs object of type Sprite
		this Sprite is the object passed to render
		*/
		
	};

	var render = function(hyena){
		/* 	is run each tick from GraphicsController, for every registered object of this type
			is given >graphics_instance< parameter, which is also supposed to contain
			physical_instance property containing entity_instance, if it was attached correctly
		*/

		hyena_animate(hyena); 
	};

	var hyena_animate = function(hyena){
		//set graphical representation based on the animation variable determined by the AI
		//set animation
		if(hyena.physical_instance.needs_graphics_update){
			var animation = hyena.physical_instance.animation;
			hyena.gotoAndPlay(animation)
		}
		
		//set direction
		if (hyena.physical_instance.direction){ //if direction == right, flip right
			hyena.scaleX = -1;
		}else{ //else flip left
			hyena.scaleX = 1;
		}

		//set alpha if blinking
		if(hyena.physical_instance.blinking && hyena.physical_instance.blink_timer%2 == 1){
			hyena.alpha = 0;
		}else{
			hyena.alpha = 1;
		}
	};
	
	return {
		// declare public
		init: init, 
		register: register,
		render: render,
	};
})();

module.exports = HyenaRenderer;

var Includes = require("../Includes.js"); var include_data = Includes.get_include_data({
	current_module: "HyenaRenderer", 
	include_options: Includes.choices.RENDERER_SPECIFIC
}); eval(include_data.name_statements); var include = function(){eval(include_data.module_statements);}

},{"../Includes.js":"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Includes.js"}],"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Renderers/MedusaRenderer.js":[function(require,module,exports){
var MedusaRenderer = (function(){

	var spritesheets = {};
	var Medusa_animation;

	var init = function(){
		/* is ran from GraphicsController.init once during game loading
		 	use this function to create spritesheets and such
			like spritesheets.first = new createjs.Spritesheet(...);
		*/

		include(); // satisfy requirements, GOES FIRST
		var get_asset = AssetController.get_asset;

		spritesheets["Medusa"] = new createjs.SpriteSheet({
			"framerate": 1,
			"images": [get_asset("Medusa1"),], //MedusaSpriteSheet
			"frames": { "regX": 5, "regY": 14, "height": 207, "width": 210, "count": 6},
				"animations": {
				"walk": [0, 2, "walk", 0.2],
				"injury": {
				    frames: [2, 3, .25]
				},
				"death": [2, 3, "death", 0.6],
                
			}
		})

	};

	var register = function(entity_Medusa){
		/* is ran for every entity of this type that was just created and should
		get graphics representation. You are given the entity instance and is supposed
		to crete graphics instance, and GraphicsController.reg_for_render(graphics_instance, entity_instance); it 
		*/

		Medusa_animation = GraphicsController.request_animated(spritesheets["Medusa"], "walk");
		GraphicsController.set_reg_position(Medusa_animation, 0, 0); // change that to adjust sprite position relative to the body
		GraphicsController.reg_for_render(Medusa_animation, entity_Medusa); // sets medusa_animation's position to track the medusa's position (updates each tick)

		
	};

	var render = function(Medusa){
		/* 	is ran each tick from GraphicsController, for every registered object of this type
			is given >graphics_instance< parameter, which is also supposed to contain
			physical_instance property containing entity_instance, if it was attched correctly
		*/

		Medusa_special_render_temp(Medusa); 
	};

	var Medusa_special_render_temp = function(Medusa){
		/* how to handle special render? TEMPORARY */

		//set graphical representation based on the animation variable determined by the AI
		//set animation
		if(Medusa.physical_instance.needs_graphics_update){
			var animation = Medusa.physical_instance.animation;
			Medusa.gotoAndPlay(animation)
		}
		
		//set direction
		if (Medusa.physical_instance.direction){ //if direction == right, flip right
			Medusa.scaleX = -1;
		}else{ //else flip left
			Medusa.scaleX = 1;
		}

		//set alpha if blinking
		if(Medusa.physical_instance.blinking && Medusa.physical_instance.blink_timer%2 == 1){
			Medusa.alpha = 0;
		}else{
			Medusa.alpha = 1;
		}
	};

	return {
		// declare public
		init: init, 
		register: register,
		render: render,
	};
})();

module.exports = MedusaRenderer;

var Includes = require("../Includes.js"); var include_data = Includes.get_include_data({
	current_module: "MedusaRenderer", 
	include_options: Includes.choices.RENDERER_SPECIFIC
}); eval(include_data.name_statements); var include = function(){eval(include_data.module_statements);}

},{"../Includes.js":"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Includes.js"}],"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Renderers/PizzaRenderer.js":[function(require,module,exports){
var PizzaRenderer = (function () {

    var spritesheets = {}; // to store spritesheets used by this entity

    var init = function () {
        include(); // satisfy requirements, GOES FIRST
        var get_asset = AssetController.get_asset;
        spritesheets["pizza"] = new createjs.SpriteSheet({
            "framerate": 1,
            "images": [get_asset("pizza")],
            "frames": { "regX": 0, "regY": 0, "height": 15, "width": 15, "count": 1 },
            "animations": {
                "normal": [1, "walk"]
            }
        })
    };

    var register = function (entity_pizza) {
        pizza_animation = GraphicsController.request_animated(spritesheets["pizza"], "normal");
        GraphicsController.set_reg_position(pizza_animation, 0, 0); // change that to adjust sprite position relative to the body
        GraphicsController.reg_for_render(pizza_animation, entity_pizza); // sets ant_animation's position to track the ant's position (updates each tick)
    };

    var render = function (cell) {

    };

    return {
        // declare public
        init: init,
        register: register,
        render: render,
    };
})();

module.exports = PizzaRenderer;

var Includes = require("../Includes.js"); var include_data = Includes.get_include_data({
    current_module: "TerrainCellRenderer",
    include_options: Includes.choices.RENDERER_SPECIFIC
}); eval(include_data.name_statements); var include = function () { eval(include_data.module_statements); }


},{"../Includes.js":"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Includes.js"}],"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Renderers/TerrainCellRenderer.js":[function(require,module,exports){
var TerrainCellRenderer = (function(){

	var spritesheets = {}; // to store spritesheets used by this entity

	var init = function(){
		/* is ran from GraphicsController.init once during game loading
			use this function to create spritesheets and such
			like spritesheets.first = new createjs.Spritesheet(...);
		*/
		include(); // satisfy requirements, GOES FIRST

	};

	var register = function(entity_cell){
		/* is ran for every entity of this type that was just created and should
		get graphics representation. You are given the entity instance and is supposed
		to crete graphics instance, and GraphicsController.reg_for_render(graphics_instance, entity_instance); it 
		*/

		
	};

	var render = function(cell){
		/* 	is ran each tick from GraphicsController, for every registered object of this type
			is given >graphics_instance< parameter, which is also supposed to contain
			physical_instance property containing entity_instance, if it was attched correctly
		*/

	};

	return {
		// declare public
		init: init, 
		register: register,
		render: render,
	};
})();

module.exports = TerrainCellRenderer;

var Includes = require("../Includes.js"); var include_data = Includes.get_include_data({
	current_module: "TerrainCellRenderer", 
	include_options: Includes.choices.RENDERER_SPECIFIC
}); eval(include_data.name_statements); var include = function(){eval(include_data.module_statements);}


},{"../Includes.js":"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Includes.js"}],"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Renderers/TerrainSliceRenderer.js":[function(require,module,exports){
var TerrainSliceRenderer = (function(){

	var spritesheets = {}; // to store spritesheets used by this entity

	var init = function(){
		/* is ran from GraphicsController.init once during game loading
			use this function to create spritesheets and such
			like spritesheets.first = new createjs.Spritesheet(...);
		*/
		include(); // satisfy requirements, GOES FIRST

	};

	var register = function(slice, PrivateGraphics){
		/* is ran for every entity of this type that was just created and should
		get graphics representation. You are given the entity instance and is supposed
		to crete graphics instance, and GraphicsController.reg_for_render(graphics_instance, entity_instance); it 
		*/

		// TODO: change that private crap to smth more useful
		// like make graphics controller special case in includes,
		// so that only interested people can get it
		var request_animated = PrivateGraphics.request_animated;
		var request_bitmap = PrivateGraphics.request_bitmap;
		var trans_xy = PrivateGraphics.trans_xy;
		var reg_for_render = PrivateGraphics.reg_for_render;

		for(var i = 0; i < slice.grid_rows; i++){
				for(var j = 0; j < slice.grid_columns; j++){
					var kind = slice.grid[i][j].kind;
					if(kind != 0){
						// TODO: should make proper terrain collection thing to pull from
						/*
						var tile_texture = ["grass", "middle_terrain", "bottom_terrain"][kind-1];
						var tile = request_bitmap(tile_texture);
						*/
						var surface_textures = ["grass_winter","grass_spring","grass_summer","grass_fall"];
						var position = slice.grid[i][j].position;
						if (kind == 1){ //if tile is part of the ground
							switch (position){
									case "surface":
										console.log(WorldController.get_season());
										var tile_texture = surface_textures[WorldController.get_season()];
									break;
								case "underground":
									var tile_texture = "bottom_terrain";
									break;
							}
						}
						if (kind == 2){ //if tile is part of a platform
							switch (position){
								case "left":
									var tile_texture = "left_platform";;
									break;
								case "middle":
									var tile_texture = "middle_platform";
									break;
								case "right":
									var tile_texture = "right_platform";
									break;
							}
						}
						if (kind == 3){//if tile is actually just spikes
							var tile_texture = "platform_spikes";
						}
						var tile = request_bitmap(tile_texture);
						var physical_instance = slice.grid[i][j];
						var body_position = physical_instance.body.GetWorldCenter();
						var trans_pos = trans_xy(body_position);
						tile.x = trans_pos.x;
						tile.y = trans_pos.y;
						reg_for_render(tile, physical_instance);
					} // end tile_texture assignment
				} // end for
			}//end for
		
	};

	var render = function(slice){
		/* 	is ran each tick from GraphicsController, for every registered object of this type
			is given >graphics_instance< parameter, which is also supposed to contain
			physical_instance property containing entity_instance, if it was attched correctly
		*/

	};

	return {
		// declare public
		init: init, 
		register: register,
		render: render,
	};
})();

module.exports = TerrainSliceRenderer;

var Includes = require("../Includes.js"); var include_data = Includes.get_include_data({
	current_module: "TerrainSliceRenderer", 
	include_options: Includes.choices.RENDERER_SPECIFIC
}); eval(include_data.name_statements); var include = function(){eval(include_data.module_statements);}


},{"../Includes.js":"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Includes.js"}],"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/main.js":[function(require,module,exports){

/*
 * Rules for working on the (client-side) game code:
 *
 * 1. If you think that one of these rules is stupid or useless, tell me, along with some better suggestions.
 *
 * 2. Model [name]Model can only be accessed through [name]Controller. If you need to do something to 
 * 		change [name]Model from [other_name]Controller, write function in the [name]Controller that does
 * 		what you need, and call it from the [other_name]Controller
 *
 * 3. Controllers are allowed to have private methods/fields. Models aren't. 
 *
 * 4. Controllers aren't allowed to have public data fields. 
 * 		Those data fields that are present must not reflect state of the game, they must be related to
 * 		some internal functionality of the controller
 *
 * 5. If you write some function that doesn't logically belong to one of the controllers,
 * 		put it in the Utility
 *
 * 6. Variables are named like that: variable_name
 * 		Except (singleton)class names, that are written like that: ClassName
 *
 * 7. And all the obvious stuff that everyone knows:
 * 		function must do one thing; don't make function public unless it needs to be that; 
 * 		comment ambigious code, for larger functions indicate their purpose (through commenting);
 */


// main namespace that is exposed to global scope (window object)
window.sidescroller_game = (function namespace(){

		var Includes = require("./Includes.js"); var include_data = Includes.get_include_data({
		current_module: "None", 
		include_options: Includes.choices.ALL_CONTROLLERS
	}); eval(include_data.name_statements); var include = function(){eval(include_data.module_statements);}

	// Game initiation section: >>>
		
	var load_game = function(mode, session_id, player_id)
	{
	
		Includes.init(); // first
		include(); // second

		InitController.init(mode, session_id, player_id); // init all the stuff

		if(mode == "test"){
			TestController.test();
		}
	};


	var run = function(mode, session_id, player_id)
	{
		// done this way to ensure that load_game's internals aren't accessible to the world:
		load_game(mode, session_id, player_id);
	}; 
	
	return {
		run: run
	}; // expose function run to the world

})(); 


},{"./Includes.js":"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/Includes.js"}],"/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/node_modules/box2dweb/box2d.js":[function(require,module,exports){
/*
* Copyright (c) 2006-2007 Erin Catto http://www.gphysics.com
*
* This software is provided 'as-is', without any express or implied
* warranty.  In no event will the authors be held liable for any damages
* arising from the use of this software.
* Permission is granted to anyone to use this software for any purpose,
* including commercial applications, and to alter it and redistribute it
* freely, subject to the following restrictions:
* 1. The origin of this software must not be misrepresented; you must not
* claim that you wrote the original software. If you use this software
* in a product, an acknowledgment in the product documentation would be
* appreciated but is not required.
* 2. Altered source versions must be plainly marked as such, and must not be
* misrepresented as being the original software.
* 3. This notice may not be removed or altered from any source distribution.
*/
"use strict"

var Box2D = {};

(function (a2j, undefined) {
   
   function emptyFn() {};
   a2j.inherit = function(cls, base) {
      var tmpCtr = cls;
      emptyFn.prototype = base.prototype;
      cls.prototype = new emptyFn;
      cls.prototype.constructor = tmpCtr;
   };
   
   a2j.generateCallback = function generateCallback(context, cb) {
      return function () {
         cb.apply(context, arguments);
      };
   };
   
   a2j.NVector = function NVector(length) {
      if (length === undefined) length = 0;
      var tmp = new Array(length || 0);
      for (var i = 0; i < length; ++i)
      tmp[i] = 0;
      return tmp;
   };
   
   a2j.is = function is(o1, o2) {
      if (o1 === null) return false;
      if ((o2 instanceof Function) && (o1 instanceof o2)) return true;
      if ((o1.constructor.__implements != undefined) && (o1.constructor.__implements[o2])) return true;
      return false;
   };
   
   a2j.parseUInt = function(v) {
      return Math.abs(parseInt(v));
   }
   
})(Box2D);

//#TODO remove assignments from global namespace
var Vector = Array;
var Vector_a2j_Number = Box2D.NVector;
//package structure
if (typeof(Box2D) === "undefined") Box2D = {};
if (typeof(Box2D.Collision) === "undefined") Box2D.Collision = {};
if (typeof(Box2D.Collision.Shapes) === "undefined") Box2D.Collision.Shapes = {};
if (typeof(Box2D.Common) === "undefined") Box2D.Common = {};
if (typeof(Box2D.Common.Math) === "undefined") Box2D.Common.Math = {};
if (typeof(Box2D.Dynamics) === "undefined") Box2D.Dynamics = {};
if (typeof(Box2D.Dynamics.Contacts) === "undefined") Box2D.Dynamics.Contacts = {};
if (typeof(Box2D.Dynamics.Controllers) === "undefined") Box2D.Dynamics.Controllers = {};
if (typeof(Box2D.Dynamics.Joints) === "undefined") Box2D.Dynamics.Joints = {};
//pre-definitions
(function () {
   Box2D.Collision.IBroadPhase = 'Box2D.Collision.IBroadPhase';

   function b2AABB() {
      b2AABB.b2AABB.apply(this, arguments);
   };
   Box2D.Collision.b2AABB = b2AABB;

   function b2Bound() {
      b2Bound.b2Bound.apply(this, arguments);
   };
   Box2D.Collision.b2Bound = b2Bound;

   function b2BoundValues() {
      b2BoundValues.b2BoundValues.apply(this, arguments);
      if (this.constructor === b2BoundValues) this.b2BoundValues.apply(this, arguments);
   };
   Box2D.Collision.b2BoundValues = b2BoundValues;

   function b2Collision() {
      b2Collision.b2Collision.apply(this, arguments);
   };
   Box2D.Collision.b2Collision = b2Collision;

   function b2ContactID() {
      b2ContactID.b2ContactID.apply(this, arguments);
      if (this.constructor === b2ContactID) this.b2ContactID.apply(this, arguments);
   };
   Box2D.Collision.b2ContactID = b2ContactID;

   function b2ContactPoint() {
      b2ContactPoint.b2ContactPoint.apply(this, arguments);
   };
   Box2D.Collision.b2ContactPoint = b2ContactPoint;

   function b2Distance() {
      b2Distance.b2Distance.apply(this, arguments);
   };
   Box2D.Collision.b2Distance = b2Distance;

   function b2DistanceInput() {
      b2DistanceInput.b2DistanceInput.apply(this, arguments);
   };
   Box2D.Collision.b2DistanceInput = b2DistanceInput;

   function b2DistanceOutput() {
      b2DistanceOutput.b2DistanceOutput.apply(this, arguments);
   };
   Box2D.Collision.b2DistanceOutput = b2DistanceOutput;

   function b2DistanceProxy() {
      b2DistanceProxy.b2DistanceProxy.apply(this, arguments);
   };
   Box2D.Collision.b2DistanceProxy = b2DistanceProxy;

   function b2DynamicTree() {
      b2DynamicTree.b2DynamicTree.apply(this, arguments);
      if (this.constructor === b2DynamicTree) this.b2DynamicTree.apply(this, arguments);
   };
   Box2D.Collision.b2DynamicTree = b2DynamicTree;

   function b2DynamicTreeBroadPhase() {
      b2DynamicTreeBroadPhase.b2DynamicTreeBroadPhase.apply(this, arguments);
   };
   Box2D.Collision.b2DynamicTreeBroadPhase = b2DynamicTreeBroadPhase;

   function b2DynamicTreeNode() {
      b2DynamicTreeNode.b2DynamicTreeNode.apply(this, arguments);
   };
   Box2D.Collision.b2DynamicTreeNode = b2DynamicTreeNode;

   function b2DynamicTreePair() {
      b2DynamicTreePair.b2DynamicTreePair.apply(this, arguments);
   };
   Box2D.Collision.b2DynamicTreePair = b2DynamicTreePair;

   function b2Manifold() {
      b2Manifold.b2Manifold.apply(this, arguments);
      if (this.constructor === b2Manifold) this.b2Manifold.apply(this, arguments);
   };
   Box2D.Collision.b2Manifold = b2Manifold;

   function b2ManifoldPoint() {
      b2ManifoldPoint.b2ManifoldPoint.apply(this, arguments);
      if (this.constructor === b2ManifoldPoint) this.b2ManifoldPoint.apply(this, arguments);
   };
   Box2D.Collision.b2ManifoldPoint = b2ManifoldPoint;

   function b2Point() {
      b2Point.b2Point.apply(this, arguments);
   };
   Box2D.Collision.b2Point = b2Point;

   function b2RayCastInput() {
      b2RayCastInput.b2RayCastInput.apply(this, arguments);
      if (this.constructor === b2RayCastInput) this.b2RayCastInput.apply(this, arguments);
   };
   Box2D.Collision.b2RayCastInput = b2RayCastInput;

   function b2RayCastOutput() {
      b2RayCastOutput.b2RayCastOutput.apply(this, arguments);
   };
   Box2D.Collision.b2RayCastOutput = b2RayCastOutput;

   function b2Segment() {
      b2Segment.b2Segment.apply(this, arguments);
   };
   Box2D.Collision.b2Segment = b2Segment;

   function b2SeparationFunction() {
      b2SeparationFunction.b2SeparationFunction.apply(this, arguments);
   };
   Box2D.Collision.b2SeparationFunction = b2SeparationFunction;

   function b2Simplex() {
      b2Simplex.b2Simplex.apply(this, arguments);
      if (this.constructor === b2Simplex) this.b2Simplex.apply(this, arguments);
   };
   Box2D.Collision.b2Simplex = b2Simplex;

   function b2SimplexCache() {
      b2SimplexCache.b2SimplexCache.apply(this, arguments);
   };
   Box2D.Collision.b2SimplexCache = b2SimplexCache;

   function b2SimplexVertex() {
      b2SimplexVertex.b2SimplexVertex.apply(this, arguments);
   };
   Box2D.Collision.b2SimplexVertex = b2SimplexVertex;

   function b2TimeOfImpact() {
      b2TimeOfImpact.b2TimeOfImpact.apply(this, arguments);
   };
   Box2D.Collision.b2TimeOfImpact = b2TimeOfImpact;

   function b2TOIInput() {
      b2TOIInput.b2TOIInput.apply(this, arguments);
   };
   Box2D.Collision.b2TOIInput = b2TOIInput;

   function b2WorldManifold() {
      b2WorldManifold.b2WorldManifold.apply(this, arguments);
      if (this.constructor === b2WorldManifold) this.b2WorldManifold.apply(this, arguments);
   };
   Box2D.Collision.b2WorldManifold = b2WorldManifold;

   function ClipVertex() {
      ClipVertex.ClipVertex.apply(this, arguments);
   };
   Box2D.Collision.ClipVertex = ClipVertex;

   function Features() {
      Features.Features.apply(this, arguments);
   };
   Box2D.Collision.Features = Features;

   function b2CircleShape() {
      b2CircleShape.b2CircleShape.apply(this, arguments);
      if (this.constructor === b2CircleShape) this.b2CircleShape.apply(this, arguments);
   };
   Box2D.Collision.Shapes.b2CircleShape = b2CircleShape;

   function b2EdgeChainDef() {
      b2EdgeChainDef.b2EdgeChainDef.apply(this, arguments);
      if (this.constructor === b2EdgeChainDef) this.b2EdgeChainDef.apply(this, arguments);
   };
   Box2D.Collision.Shapes.b2EdgeChainDef = b2EdgeChainDef;

   function b2EdgeShape() {
      b2EdgeShape.b2EdgeShape.apply(this, arguments);
      if (this.constructor === b2EdgeShape) this.b2EdgeShape.apply(this, arguments);
   };
   Box2D.Collision.Shapes.b2EdgeShape = b2EdgeShape;

   function b2MassData() {
      b2MassData.b2MassData.apply(this, arguments);
   };
   Box2D.Collision.Shapes.b2MassData = b2MassData;

   function b2PolygonShape() {
      b2PolygonShape.b2PolygonShape.apply(this, arguments);
      if (this.constructor === b2PolygonShape) this.b2PolygonShape.apply(this, arguments);
   };
   Box2D.Collision.Shapes.b2PolygonShape = b2PolygonShape;

   function b2Shape() {
      b2Shape.b2Shape.apply(this, arguments);
      if (this.constructor === b2Shape) this.b2Shape.apply(this, arguments);
   };
   Box2D.Collision.Shapes.b2Shape = b2Shape;
   Box2D.Common.b2internal = 'Box2D.Common.b2internal';

   function b2Color() {
      b2Color.b2Color.apply(this, arguments);
      if (this.constructor === b2Color) this.b2Color.apply(this, arguments);
   };
   Box2D.Common.b2Color = b2Color;

   function b2Settings() {
      b2Settings.b2Settings.apply(this, arguments);
   };
   Box2D.Common.b2Settings = b2Settings;

   function b2Mat22() {
      b2Mat22.b2Mat22.apply(this, arguments);
      if (this.constructor === b2Mat22) this.b2Mat22.apply(this, arguments);
   };
   Box2D.Common.Math.b2Mat22 = b2Mat22;

   function b2Mat33() {
      b2Mat33.b2Mat33.apply(this, arguments);
      if (this.constructor === b2Mat33) this.b2Mat33.apply(this, arguments);
   };
   Box2D.Common.Math.b2Mat33 = b2Mat33;

   function b2Math() {
      b2Math.b2Math.apply(this, arguments);
   };
   Box2D.Common.Math.b2Math = b2Math;

   function b2Sweep() {
      b2Sweep.b2Sweep.apply(this, arguments);
   };
   Box2D.Common.Math.b2Sweep = b2Sweep;

   function b2Transform() {
      b2Transform.b2Transform.apply(this, arguments);
      if (this.constructor === b2Transform) this.b2Transform.apply(this, arguments);
   };
   Box2D.Common.Math.b2Transform = b2Transform;

   function b2Vec2() {
      b2Vec2.b2Vec2.apply(this, arguments);
      if (this.constructor === b2Vec2) this.b2Vec2.apply(this, arguments);
   };
   Box2D.Common.Math.b2Vec2 = b2Vec2;

   function b2Vec3() {
      b2Vec3.b2Vec3.apply(this, arguments);
      if (this.constructor === b2Vec3) this.b2Vec3.apply(this, arguments);
   };
   Box2D.Common.Math.b2Vec3 = b2Vec3;

   function b2Body() {
      b2Body.b2Body.apply(this, arguments);
      if (this.constructor === b2Body) this.b2Body.apply(this, arguments);
   };
   Box2D.Dynamics.b2Body = b2Body;

   function b2BodyDef() {
      b2BodyDef.b2BodyDef.apply(this, arguments);
      if (this.constructor === b2BodyDef) this.b2BodyDef.apply(this, arguments);
   };
   Box2D.Dynamics.b2BodyDef = b2BodyDef;

   function b2ContactFilter() {
      b2ContactFilter.b2ContactFilter.apply(this, arguments);
   };
   Box2D.Dynamics.b2ContactFilter = b2ContactFilter;

   function b2ContactImpulse() {
      b2ContactImpulse.b2ContactImpulse.apply(this, arguments);
   };
   Box2D.Dynamics.b2ContactImpulse = b2ContactImpulse;

   function b2ContactListener() {
      b2ContactListener.b2ContactListener.apply(this, arguments);
   };
   Box2D.Dynamics.b2ContactListener = b2ContactListener;

   function b2ContactManager() {
      b2ContactManager.b2ContactManager.apply(this, arguments);
      if (this.constructor === b2ContactManager) this.b2ContactManager.apply(this, arguments);
   };
   Box2D.Dynamics.b2ContactManager = b2ContactManager;

   function b2DebugDraw() {
      b2DebugDraw.b2DebugDraw.apply(this, arguments);
      if (this.constructor === b2DebugDraw) this.b2DebugDraw.apply(this, arguments);
   };
   Box2D.Dynamics.b2DebugDraw = b2DebugDraw;

   function b2DestructionListener() {
      b2DestructionListener.b2DestructionListener.apply(this, arguments);
   };
   Box2D.Dynamics.b2DestructionListener = b2DestructionListener;

   function b2FilterData() {
      b2FilterData.b2FilterData.apply(this, arguments);
   };
   Box2D.Dynamics.b2FilterData = b2FilterData;

   function b2Fixture() {
      b2Fixture.b2Fixture.apply(this, arguments);
      if (this.constructor === b2Fixture) this.b2Fixture.apply(this, arguments);
   };
   Box2D.Dynamics.b2Fixture = b2Fixture;

   function b2FixtureDef() {
      b2FixtureDef.b2FixtureDef.apply(this, arguments);
      if (this.constructor === b2FixtureDef) this.b2FixtureDef.apply(this, arguments);
   };
   Box2D.Dynamics.b2FixtureDef = b2FixtureDef;

   function b2Island() {
      b2Island.b2Island.apply(this, arguments);
      if (this.constructor === b2Island) this.b2Island.apply(this, arguments);
   };
   Box2D.Dynamics.b2Island = b2Island;

   function b2TimeStep() {
      b2TimeStep.b2TimeStep.apply(this, arguments);
   };
   Box2D.Dynamics.b2TimeStep = b2TimeStep;

   function b2World() {
      b2World.b2World.apply(this, arguments);
      if (this.constructor === b2World) this.b2World.apply(this, arguments);
   };
   Box2D.Dynamics.b2World = b2World;

   function b2CircleContact() {
      b2CircleContact.b2CircleContact.apply(this, arguments);
   };
   Box2D.Dynamics.Contacts.b2CircleContact = b2CircleContact;

   function b2Contact() {
      b2Contact.b2Contact.apply(this, arguments);
      if (this.constructor === b2Contact) this.b2Contact.apply(this, arguments);
   };
   Box2D.Dynamics.Contacts.b2Contact = b2Contact;

   function b2ContactConstraint() {
      b2ContactConstraint.b2ContactConstraint.apply(this, arguments);
      if (this.constructor === b2ContactConstraint) this.b2ContactConstraint.apply(this, arguments);
   };
   Box2D.Dynamics.Contacts.b2ContactConstraint = b2ContactConstraint;

   function b2ContactConstraintPoint() {
      b2ContactConstraintPoint.b2ContactConstraintPoint.apply(this, arguments);
   };
   Box2D.Dynamics.Contacts.b2ContactConstraintPoint = b2ContactConstraintPoint;

   function b2ContactEdge() {
      b2ContactEdge.b2ContactEdge.apply(this, arguments);
   };
   Box2D.Dynamics.Contacts.b2ContactEdge = b2ContactEdge;

   function b2ContactFactory() {
      b2ContactFactory.b2ContactFactory.apply(this, arguments);
      if (this.constructor === b2ContactFactory) this.b2ContactFactory.apply(this, arguments);
   };
   Box2D.Dynamics.Contacts.b2ContactFactory = b2ContactFactory;

   function b2ContactRegister() {
      b2ContactRegister.b2ContactRegister.apply(this, arguments);
   };
   Box2D.Dynamics.Contacts.b2ContactRegister = b2ContactRegister;

   function b2ContactResult() {
      b2ContactResult.b2ContactResult.apply(this, arguments);
   };
   Box2D.Dynamics.Contacts.b2ContactResult = b2ContactResult;

   function b2ContactSolver() {
      b2ContactSolver.b2ContactSolver.apply(this, arguments);
      if (this.constructor === b2ContactSolver) this.b2ContactSolver.apply(this, arguments);
   };
   Box2D.Dynamics.Contacts.b2ContactSolver = b2ContactSolver;

   function b2EdgeAndCircleContact() {
      b2EdgeAndCircleContact.b2EdgeAndCircleContact.apply(this, arguments);
   };
   Box2D.Dynamics.Contacts.b2EdgeAndCircleContact = b2EdgeAndCircleContact;

   function b2NullContact() {
      b2NullContact.b2NullContact.apply(this, arguments);
      if (this.constructor === b2NullContact) this.b2NullContact.apply(this, arguments);
   };
   Box2D.Dynamics.Contacts.b2NullContact = b2NullContact;

   function b2PolyAndCircleContact() {
      b2PolyAndCircleContact.b2PolyAndCircleContact.apply(this, arguments);
   };
   Box2D.Dynamics.Contacts.b2PolyAndCircleContact = b2PolyAndCircleContact;

   function b2PolyAndEdgeContact() {
      b2PolyAndEdgeContact.b2PolyAndEdgeContact.apply(this, arguments);
   };
   Box2D.Dynamics.Contacts.b2PolyAndEdgeContact = b2PolyAndEdgeContact;

   function b2PolygonContact() {
      b2PolygonContact.b2PolygonContact.apply(this, arguments);
   };
   Box2D.Dynamics.Contacts.b2PolygonContact = b2PolygonContact;

   function b2PositionSolverManifold() {
      b2PositionSolverManifold.b2PositionSolverManifold.apply(this, arguments);
      if (this.constructor === b2PositionSolverManifold) this.b2PositionSolverManifold.apply(this, arguments);
   };
   Box2D.Dynamics.Contacts.b2PositionSolverManifold = b2PositionSolverManifold;

   function b2BuoyancyController() {
      b2BuoyancyController.b2BuoyancyController.apply(this, arguments);
   };
   Box2D.Dynamics.Controllers.b2BuoyancyController = b2BuoyancyController;

   function b2ConstantAccelController() {
      b2ConstantAccelController.b2ConstantAccelController.apply(this, arguments);
   };
   Box2D.Dynamics.Controllers.b2ConstantAccelController = b2ConstantAccelController;

   function b2ConstantForceController() {
      b2ConstantForceController.b2ConstantForceController.apply(this, arguments);
   };
   Box2D.Dynamics.Controllers.b2ConstantForceController = b2ConstantForceController;

   function b2Controller() {
      b2Controller.b2Controller.apply(this, arguments);
   };
   Box2D.Dynamics.Controllers.b2Controller = b2Controller;

   function b2ControllerEdge() {
      b2ControllerEdge.b2ControllerEdge.apply(this, arguments);
   };
   Box2D.Dynamics.Controllers.b2ControllerEdge = b2ControllerEdge;

   function b2GravityController() {
      b2GravityController.b2GravityController.apply(this, arguments);
   };
   Box2D.Dynamics.Controllers.b2GravityController = b2GravityController;

   function b2TensorDampingController() {
      b2TensorDampingController.b2TensorDampingController.apply(this, arguments);
   };
   Box2D.Dynamics.Controllers.b2TensorDampingController = b2TensorDampingController;

   function b2DistanceJoint() {
      b2DistanceJoint.b2DistanceJoint.apply(this, arguments);
      if (this.constructor === b2DistanceJoint) this.b2DistanceJoint.apply(this, arguments);
   };
   Box2D.Dynamics.Joints.b2DistanceJoint = b2DistanceJoint;

   function b2DistanceJointDef() {
      b2DistanceJointDef.b2DistanceJointDef.apply(this, arguments);
      if (this.constructor === b2DistanceJointDef) this.b2DistanceJointDef.apply(this, arguments);
   };
   Box2D.Dynamics.Joints.b2DistanceJointDef = b2DistanceJointDef;

   function b2FrictionJoint() {
      b2FrictionJoint.b2FrictionJoint.apply(this, arguments);
      if (this.constructor === b2FrictionJoint) this.b2FrictionJoint.apply(this, arguments);
   };
   Box2D.Dynamics.Joints.b2FrictionJoint = b2FrictionJoint;

   function b2FrictionJointDef() {
      b2FrictionJointDef.b2FrictionJointDef.apply(this, arguments);
      if (this.constructor === b2FrictionJointDef) this.b2FrictionJointDef.apply(this, arguments);
   };
   Box2D.Dynamics.Joints.b2FrictionJointDef = b2FrictionJointDef;

   function b2GearJoint() {
      b2GearJoint.b2GearJoint.apply(this, arguments);
      if (this.constructor === b2GearJoint) this.b2GearJoint.apply(this, arguments);
   };
   Box2D.Dynamics.Joints.b2GearJoint = b2GearJoint;

   function b2GearJointDef() {
      b2GearJointDef.b2GearJointDef.apply(this, arguments);
      if (this.constructor === b2GearJointDef) this.b2GearJointDef.apply(this, arguments);
   };
   Box2D.Dynamics.Joints.b2GearJointDef = b2GearJointDef;

   function b2Jacobian() {
      b2Jacobian.b2Jacobian.apply(this, arguments);
   };
   Box2D.Dynamics.Joints.b2Jacobian = b2Jacobian;

   function b2Joint() {
      b2Joint.b2Joint.apply(this, arguments);
      if (this.constructor === b2Joint) this.b2Joint.apply(this, arguments);
   };
   Box2D.Dynamics.Joints.b2Joint = b2Joint;

   function b2JointDef() {
      b2JointDef.b2JointDef.apply(this, arguments);
      if (this.constructor === b2JointDef) this.b2JointDef.apply(this, arguments);
   };
   Box2D.Dynamics.Joints.b2JointDef = b2JointDef;

   function b2JointEdge() {
      b2JointEdge.b2JointEdge.apply(this, arguments);
   };
   Box2D.Dynamics.Joints.b2JointEdge = b2JointEdge;

   function b2LineJoint() {
      b2LineJoint.b2LineJoint.apply(this, arguments);
      if (this.constructor === b2LineJoint) this.b2LineJoint.apply(this, arguments);
   };
   Box2D.Dynamics.Joints.b2LineJoint = b2LineJoint;

   function b2LineJointDef() {
      b2LineJointDef.b2LineJointDef.apply(this, arguments);
      if (this.constructor === b2LineJointDef) this.b2LineJointDef.apply(this, arguments);
   };
   Box2D.Dynamics.Joints.b2LineJointDef = b2LineJointDef;

   function b2MouseJoint() {
      b2MouseJoint.b2MouseJoint.apply(this, arguments);
      if (this.constructor === b2MouseJoint) this.b2MouseJoint.apply(this, arguments);
   };
   Box2D.Dynamics.Joints.b2MouseJoint = b2MouseJoint;

   function b2MouseJointDef() {
      b2MouseJointDef.b2MouseJointDef.apply(this, arguments);
      if (this.constructor === b2MouseJointDef) this.b2MouseJointDef.apply(this, arguments);
   };
   Box2D.Dynamics.Joints.b2MouseJointDef = b2MouseJointDef;

   function b2PrismaticJoint() {
      b2PrismaticJoint.b2PrismaticJoint.apply(this, arguments);
      if (this.constructor === b2PrismaticJoint) this.b2PrismaticJoint.apply(this, arguments);
   };
   Box2D.Dynamics.Joints.b2PrismaticJoint = b2PrismaticJoint;

   function b2PrismaticJointDef() {
      b2PrismaticJointDef.b2PrismaticJointDef.apply(this, arguments);
      if (this.constructor === b2PrismaticJointDef) this.b2PrismaticJointDef.apply(this, arguments);
   };
   Box2D.Dynamics.Joints.b2PrismaticJointDef = b2PrismaticJointDef;

   function b2PulleyJoint() {
      b2PulleyJoint.b2PulleyJoint.apply(this, arguments);
      if (this.constructor === b2PulleyJoint) this.b2PulleyJoint.apply(this, arguments);
   };
   Box2D.Dynamics.Joints.b2PulleyJoint = b2PulleyJoint;

   function b2PulleyJointDef() {
      b2PulleyJointDef.b2PulleyJointDef.apply(this, arguments);
      if (this.constructor === b2PulleyJointDef) this.b2PulleyJointDef.apply(this, arguments);
   };
   Box2D.Dynamics.Joints.b2PulleyJointDef = b2PulleyJointDef;

   function b2RevoluteJoint() {
      b2RevoluteJoint.b2RevoluteJoint.apply(this, arguments);
      if (this.constructor === b2RevoluteJoint) this.b2RevoluteJoint.apply(this, arguments);
   };
   Box2D.Dynamics.Joints.b2RevoluteJoint = b2RevoluteJoint;

   function b2RevoluteJointDef() {
      b2RevoluteJointDef.b2RevoluteJointDef.apply(this, arguments);
      if (this.constructor === b2RevoluteJointDef) this.b2RevoluteJointDef.apply(this, arguments);
   };
   Box2D.Dynamics.Joints.b2RevoluteJointDef = b2RevoluteJointDef;

   function b2WeldJoint() {
      b2WeldJoint.b2WeldJoint.apply(this, arguments);
      if (this.constructor === b2WeldJoint) this.b2WeldJoint.apply(this, arguments);
   };
   Box2D.Dynamics.Joints.b2WeldJoint = b2WeldJoint;

   function b2WeldJointDef() {
      b2WeldJointDef.b2WeldJointDef.apply(this, arguments);
      if (this.constructor === b2WeldJointDef) this.b2WeldJointDef.apply(this, arguments);
   };
   Box2D.Dynamics.Joints.b2WeldJointDef = b2WeldJointDef;
})(); //definitions
Box2D.postDefs = [];
(function () {
   var b2CircleShape = Box2D.Collision.Shapes.b2CircleShape,
      b2EdgeChainDef = Box2D.Collision.Shapes.b2EdgeChainDef,
      b2EdgeShape = Box2D.Collision.Shapes.b2EdgeShape,
      b2MassData = Box2D.Collision.Shapes.b2MassData,
      b2PolygonShape = Box2D.Collision.Shapes.b2PolygonShape,
      b2Shape = Box2D.Collision.Shapes.b2Shape,
      b2Color = Box2D.Common.b2Color,
      b2internal = Box2D.Common.b2internal,
      b2Settings = Box2D.Common.b2Settings,
      b2Mat22 = Box2D.Common.Math.b2Mat22,
      b2Mat33 = Box2D.Common.Math.b2Mat33,
      b2Math = Box2D.Common.Math.b2Math,
      b2Sweep = Box2D.Common.Math.b2Sweep,
      b2Transform = Box2D.Common.Math.b2Transform,
      b2Vec2 = Box2D.Common.Math.b2Vec2,
      b2Vec3 = Box2D.Common.Math.b2Vec3,
      b2AABB = Box2D.Collision.b2AABB,
      b2Bound = Box2D.Collision.b2Bound,
      b2BoundValues = Box2D.Collision.b2BoundValues,
      b2Collision = Box2D.Collision.b2Collision,
      b2ContactID = Box2D.Collision.b2ContactID,
      b2ContactPoint = Box2D.Collision.b2ContactPoint,
      b2Distance = Box2D.Collision.b2Distance,
      b2DistanceInput = Box2D.Collision.b2DistanceInput,
      b2DistanceOutput = Box2D.Collision.b2DistanceOutput,
      b2DistanceProxy = Box2D.Collision.b2DistanceProxy,
      b2DynamicTree = Box2D.Collision.b2DynamicTree,
      b2DynamicTreeBroadPhase = Box2D.Collision.b2DynamicTreeBroadPhase,
      b2DynamicTreeNode = Box2D.Collision.b2DynamicTreeNode,
      b2DynamicTreePair = Box2D.Collision.b2DynamicTreePair,
      b2Manifold = Box2D.Collision.b2Manifold,
      b2ManifoldPoint = Box2D.Collision.b2ManifoldPoint,
      b2Point = Box2D.Collision.b2Point,
      b2RayCastInput = Box2D.Collision.b2RayCastInput,
      b2RayCastOutput = Box2D.Collision.b2RayCastOutput,
      b2Segment = Box2D.Collision.b2Segment,
      b2SeparationFunction = Box2D.Collision.b2SeparationFunction,
      b2Simplex = Box2D.Collision.b2Simplex,
      b2SimplexCache = Box2D.Collision.b2SimplexCache,
      b2SimplexVertex = Box2D.Collision.b2SimplexVertex,
      b2TimeOfImpact = Box2D.Collision.b2TimeOfImpact,
      b2TOIInput = Box2D.Collision.b2TOIInput,
      b2WorldManifold = Box2D.Collision.b2WorldManifold,
      ClipVertex = Box2D.Collision.ClipVertex,
      Features = Box2D.Collision.Features,
      IBroadPhase = Box2D.Collision.IBroadPhase;

   b2AABB.b2AABB = function () {
      this.lowerBound = new b2Vec2();
      this.upperBound = new b2Vec2();
   };
   b2AABB.prototype.IsValid = function () {
      var dX = this.upperBound.x - this.lowerBound.x;
      var dY = this.upperBound.y - this.lowerBound.y;
      var valid = dX >= 0.0 && dY >= 0.0;
      valid = valid && this.lowerBound.IsValid() && this.upperBound.IsValid();
      return valid;
   }
   b2AABB.prototype.GetCenter = function () {
      return new b2Vec2((this.lowerBound.x + this.upperBound.x) / 2, (this.lowerBound.y + this.upperBound.y) / 2);
   }
   b2AABB.prototype.GetExtents = function () {
      return new b2Vec2((this.upperBound.x - this.lowerBound.x) / 2, (this.upperBound.y - this.lowerBound.y) / 2);
   }
   b2AABB.prototype.Contains = function (aabb) {
      var result = true;
      result = result && this.lowerBound.x <= aabb.lowerBound.x;
      result = result && this.lowerBound.y <= aabb.lowerBound.y;
      result = result && aabb.upperBound.x <= this.upperBound.x;
      result = result && aabb.upperBound.y <= this.upperBound.y;
      return result;
   }
   b2AABB.prototype.RayCast = function (output, input) {
      var tmin = (-Number.MAX_VALUE);
      var tmax = Number.MAX_VALUE;
      var pX = input.p1.x;
      var pY = input.p1.y;
      var dX = input.p2.x - input.p1.x;
      var dY = input.p2.y - input.p1.y;
      var absDX = Math.abs(dX);
      var absDY = Math.abs(dY);
      var normal = output.normal;
      var inv_d = 0;
      var t1 = 0;
      var t2 = 0;
      var t3 = 0;
      var s = 0; {
         if (absDX < Number.MIN_VALUE) {
            if (pX < this.lowerBound.x || this.upperBound.x < pX) return false;
         }
         else {
            inv_d = 1.0 / dX;
            t1 = (this.lowerBound.x - pX) * inv_d;
            t2 = (this.upperBound.x - pX) * inv_d;
            s = (-1.0);
            if (t1 > t2) {
               t3 = t1;
               t1 = t2;
               t2 = t3;
               s = 1.0;
            }
            if (t1 > tmin) {
               normal.x = s;
               normal.y = 0;
               tmin = t1;
            }
            tmax = Math.min(tmax, t2);
            if (tmin > tmax) return false;
         }
      } {
         if (absDY < Number.MIN_VALUE) {
            if (pY < this.lowerBound.y || this.upperBound.y < pY) return false;
         }
         else {
            inv_d = 1.0 / dY;
            t1 = (this.lowerBound.y - pY) * inv_d;
            t2 = (this.upperBound.y - pY) * inv_d;
            s = (-1.0);
            if (t1 > t2) {
               t3 = t1;
               t1 = t2;
               t2 = t3;
               s = 1.0;
            }
            if (t1 > tmin) {
               normal.y = s;
               normal.x = 0;
               tmin = t1;
            }
            tmax = Math.min(tmax, t2);
            if (tmin > tmax) return false;
         }
      }
      output.fraction = tmin;
      return true;
   }
   b2AABB.prototype.TestOverlap = function (other) {
      var d1X = other.lowerBound.x - this.upperBound.x;
      var d1Y = other.lowerBound.y - this.upperBound.y;
      var d2X = this.lowerBound.x - other.upperBound.x;
      var d2Y = this.lowerBound.y - other.upperBound.y;
      if (d1X > 0.0 || d1Y > 0.0) return false;
      if (d2X > 0.0 || d2Y > 0.0) return false;
      return true;
   }
   b2AABB.Combine = function (aabb1, aabb2) {
      var aabb = new b2AABB();
      aabb.Combine(aabb1, aabb2);
      return aabb;
   }
   b2AABB.prototype.Combine = function (aabb1, aabb2) {
      this.lowerBound.x = Math.min(aabb1.lowerBound.x, aabb2.lowerBound.x);
      this.lowerBound.y = Math.min(aabb1.lowerBound.y, aabb2.lowerBound.y);
      this.upperBound.x = Math.max(aabb1.upperBound.x, aabb2.upperBound.x);
      this.upperBound.y = Math.max(aabb1.upperBound.y, aabb2.upperBound.y);
   }
   b2Bound.b2Bound = function () {};
   b2Bound.prototype.IsLower = function () {
      return (this.value & 1) == 0;
   }
   b2Bound.prototype.IsUpper = function () {
      return (this.value & 1) == 1;
   }
   b2Bound.prototype.Swap = function (b) {
      var tempValue = this.value;
      var tempProxy = this.proxy;
      var tempStabbingCount = this.stabbingCount;
      this.value = b.value;
      this.proxy = b.proxy;
      this.stabbingCount = b.stabbingCount;
      b.value = tempValue;
      b.proxy = tempProxy;
      b.stabbingCount = tempStabbingCount;
   }
   b2BoundValues.b2BoundValues = function () {};
   b2BoundValues.prototype.b2BoundValues = function () {
      this.lowerValues = new Vector_a2j_Number();
      this.lowerValues[0] = 0.0;
      this.lowerValues[1] = 0.0;
      this.upperValues = new Vector_a2j_Number();
      this.upperValues[0] = 0.0;
      this.upperValues[1] = 0.0;
   }
   b2Collision.b2Collision = function () {};
   b2Collision.ClipSegmentToLine = function (vOut, vIn, normal, offset) {
      if (offset === undefined) offset = 0;
      var cv;
      var numOut = 0;
      cv = vIn[0];
      var vIn0 = cv.v;
      cv = vIn[1];
      var vIn1 = cv.v;
      var distance0 = normal.x * vIn0.x + normal.y * vIn0.y - offset;
      var distance1 = normal.x * vIn1.x + normal.y * vIn1.y - offset;
      if (distance0 <= 0.0) vOut[numOut++].Set(vIn[0]);
      if (distance1 <= 0.0) vOut[numOut++].Set(vIn[1]);
      if (distance0 * distance1 < 0.0) {
         var interp = distance0 / (distance0 - distance1);
         cv = vOut[numOut];
         var tVec = cv.v;
         tVec.x = vIn0.x + interp * (vIn1.x - vIn0.x);
         tVec.y = vIn0.y + interp * (vIn1.y - vIn0.y);
         cv = vOut[numOut];
         var cv2;
         if (distance0 > 0.0) {
            cv2 = vIn[0];
            cv.id = cv2.id;
         }
         else {
            cv2 = vIn[1];
            cv.id = cv2.id;
         }++numOut;
      }
      return numOut;
   }
   b2Collision.EdgeSeparation = function (poly1, xf1, edge1, poly2, xf2) {
      if (edge1 === undefined) edge1 = 0;
      var count1 = parseInt(poly1.m_vertexCount);
      var vertices1 = poly1.m_vertices;
      var normals1 = poly1.m_normals;
      var count2 = parseInt(poly2.m_vertexCount);
      var vertices2 = poly2.m_vertices;
      var tMat;
      var tVec;
      tMat = xf1.R;
      tVec = normals1[edge1];
      var normal1WorldX = (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
      var normal1WorldY = (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
      tMat = xf2.R;
      var normal1X = (tMat.col1.x * normal1WorldX + tMat.col1.y * normal1WorldY);
      var normal1Y = (tMat.col2.x * normal1WorldX + tMat.col2.y * normal1WorldY);
      var index = 0;
      var minDot = Number.MAX_VALUE;
      for (var i = 0; i < count2; ++i) {
         tVec = vertices2[i];
         var dot = tVec.x * normal1X + tVec.y * normal1Y;
         if (dot < minDot) {
            minDot = dot;
            index = i;
         }
      }
      tVec = vertices1[edge1];
      tMat = xf1.R;
      var v1X = xf1.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
      var v1Y = xf1.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
      tVec = vertices2[index];
      tMat = xf2.R;
      var v2X = xf2.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
      var v2Y = xf2.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
      v2X -= v1X;
      v2Y -= v1Y;
      var separation = v2X * normal1WorldX + v2Y * normal1WorldY;
      return separation;
   }
   b2Collision.FindMaxSeparation = function (edgeIndex, poly1, xf1, poly2, xf2) {
      var count1 = parseInt(poly1.m_vertexCount);
      var normals1 = poly1.m_normals;
      var tVec;
      var tMat;
      tMat = xf2.R;
      tVec = poly2.m_centroid;
      var dX = xf2.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
      var dY = xf2.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
      tMat = xf1.R;
      tVec = poly1.m_centroid;
      dX -= xf1.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
      dY -= xf1.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
      var dLocal1X = (dX * xf1.R.col1.x + dY * xf1.R.col1.y);
      var dLocal1Y = (dX * xf1.R.col2.x + dY * xf1.R.col2.y);
      var edge = 0;
      var maxDot = (-Number.MAX_VALUE);
      for (var i = 0; i < count1; ++i) {
         tVec = normals1[i];
         var dot = (tVec.x * dLocal1X + tVec.y * dLocal1Y);
         if (dot > maxDot) {
            maxDot = dot;
            edge = i;
         }
      }
      var s = b2Collision.EdgeSeparation(poly1, xf1, edge, poly2, xf2);
      var prevEdge = parseInt(edge - 1 >= 0 ? edge - 1 : count1 - 1);
      var sPrev = b2Collision.EdgeSeparation(poly1, xf1, prevEdge, poly2, xf2);
      var nextEdge = parseInt(edge + 1 < count1 ? edge + 1 : 0);
      var sNext = b2Collision.EdgeSeparation(poly1, xf1, nextEdge, poly2, xf2);
      var bestEdge = 0;
      var bestSeparation = 0;
      var increment = 0;
      if (sPrev > s && sPrev > sNext) {
         increment = (-1);
         bestEdge = prevEdge;
         bestSeparation = sPrev;
      }
      else if (sNext > s) {
         increment = 1;
         bestEdge = nextEdge;
         bestSeparation = sNext;
      }
      else {
         edgeIndex[0] = edge;
         return s;
      }
      while (true) {
         if (increment == (-1)) edge = bestEdge - 1 >= 0 ? bestEdge - 1 : count1 - 1;
         else edge = bestEdge + 1 < count1 ? bestEdge + 1 : 0;s = b2Collision.EdgeSeparation(poly1, xf1, edge, poly2, xf2);
         if (s > bestSeparation) {
            bestEdge = edge;
            bestSeparation = s;
         }
         else {
            break;
         }
      }
      edgeIndex[0] = bestEdge;
      return bestSeparation;
   }
   b2Collision.FindIncidentEdge = function (c, poly1, xf1, edge1, poly2, xf2) {
      if (edge1 === undefined) edge1 = 0;
      var count1 = parseInt(poly1.m_vertexCount);
      var normals1 = poly1.m_normals;
      var count2 = parseInt(poly2.m_vertexCount);
      var vertices2 = poly2.m_vertices;
      var normals2 = poly2.m_normals;
      var tMat;
      var tVec;
      tMat = xf1.R;
      tVec = normals1[edge1];
      var normal1X = (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
      var normal1Y = (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
      tMat = xf2.R;
      var tX = (tMat.col1.x * normal1X + tMat.col1.y * normal1Y);
      normal1Y = (tMat.col2.x * normal1X + tMat.col2.y * normal1Y);
      normal1X = tX;
      var index = 0;
      var minDot = Number.MAX_VALUE;
      for (var i = 0; i < count2; ++i) {
         tVec = normals2[i];
         var dot = (normal1X * tVec.x + normal1Y * tVec.y);
         if (dot < minDot) {
            minDot = dot;
            index = i;
         }
      }
      var tClip;
      var i1 = parseInt(index);
      var i2 = parseInt(i1 + 1 < count2 ? i1 + 1 : 0);
      tClip = c[0];
      tVec = vertices2[i1];
      tMat = xf2.R;
      tClip.v.x = xf2.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
      tClip.v.y = xf2.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
      tClip.id.features.referenceEdge = edge1;
      tClip.id.features.incidentEdge = i1;
      tClip.id.features.incidentVertex = 0;
      tClip = c[1];
      tVec = vertices2[i2];
      tMat = xf2.R;
      tClip.v.x = xf2.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
      tClip.v.y = xf2.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
      tClip.id.features.referenceEdge = edge1;
      tClip.id.features.incidentEdge = i2;
      tClip.id.features.incidentVertex = 1;
   }
   b2Collision.MakeClipPointVector = function () {
      var r = new Vector(2);
      r[0] = new ClipVertex();
      r[1] = new ClipVertex();
      return r;
   }
   b2Collision.CollidePolygons = function (manifold, polyA, xfA, polyB, xfB) {
      var cv;
      manifold.m_pointCount = 0;
      var totalRadius = polyA.m_radius + polyB.m_radius;
      var edgeA = 0;
      b2Collision.s_edgeAO[0] = edgeA;
      var separationA = b2Collision.FindMaxSeparation(b2Collision.s_edgeAO, polyA, xfA, polyB, xfB);
      edgeA = b2Collision.s_edgeAO[0];
      if (separationA > totalRadius) return;
      var edgeB = 0;
      b2Collision.s_edgeBO[0] = edgeB;
      var separationB = b2Collision.FindMaxSeparation(b2Collision.s_edgeBO, polyB, xfB, polyA, xfA);
      edgeB = b2Collision.s_edgeBO[0];
      if (separationB > totalRadius) return;
      var poly1;
      var poly2;
      var xf1;
      var xf2;
      var edge1 = 0;
      var flip = 0;
      var k_relativeTol = 0.98;
      var k_absoluteTol = 0.001;
      var tMat;
      if (separationB > k_relativeTol * separationA + k_absoluteTol) {
         poly1 = polyB;
         poly2 = polyA;
         xf1 = xfB;
         xf2 = xfA;
         edge1 = edgeB;
         manifold.m_type = b2Manifold.e_faceB;
         flip = 1;
      }
      else {
         poly1 = polyA;
         poly2 = polyB;
         xf1 = xfA;
         xf2 = xfB;
         edge1 = edgeA;
         manifold.m_type = b2Manifold.e_faceA;
         flip = 0;
      }
      var incidentEdge = b2Collision.s_incidentEdge;
      b2Collision.FindIncidentEdge(incidentEdge, poly1, xf1, edge1, poly2, xf2);
      var count1 = parseInt(poly1.m_vertexCount);
      var vertices1 = poly1.m_vertices;
      var local_v11 = vertices1[edge1];
      var local_v12;
      if (edge1 + 1 < count1) {
         local_v12 = vertices1[parseInt(edge1 + 1)];
      }
      else {
         local_v12 = vertices1[0];
      }
      var localTangent = b2Collision.s_localTangent;
      localTangent.Set(local_v12.x - local_v11.x, local_v12.y - local_v11.y);
      localTangent.Normalize();
      var localNormal = b2Collision.s_localNormal;
      localNormal.x = localTangent.y;
      localNormal.y = (-localTangent.x);
      var planePoint = b2Collision.s_planePoint;
      planePoint.Set(0.5 * (local_v11.x + local_v12.x), 0.5 * (local_v11.y + local_v12.y));
      var tangent = b2Collision.s_tangent;
      tMat = xf1.R;
      tangent.x = (tMat.col1.x * localTangent.x + tMat.col2.x * localTangent.y);
      tangent.y = (tMat.col1.y * localTangent.x + tMat.col2.y * localTangent.y);
      var tangent2 = b2Collision.s_tangent2;
      tangent2.x = (-tangent.x);
      tangent2.y = (-tangent.y);
      var normal = b2Collision.s_normal;
      normal.x = tangent.y;
      normal.y = (-tangent.x);
      var v11 = b2Collision.s_v11;
      var v12 = b2Collision.s_v12;
      v11.x = xf1.position.x + (tMat.col1.x * local_v11.x + tMat.col2.x * local_v11.y);
      v11.y = xf1.position.y + (tMat.col1.y * local_v11.x + tMat.col2.y * local_v11.y);
      v12.x = xf1.position.x + (tMat.col1.x * local_v12.x + tMat.col2.x * local_v12.y);
      v12.y = xf1.position.y + (tMat.col1.y * local_v12.x + tMat.col2.y * local_v12.y);
      var frontOffset = normal.x * v11.x + normal.y * v11.y;
      var sideOffset1 = (-tangent.x * v11.x) - tangent.y * v11.y + totalRadius;
      var sideOffset2 = tangent.x * v12.x + tangent.y * v12.y + totalRadius;
      var clipPoints1 = b2Collision.s_clipPoints1;
      var clipPoints2 = b2Collision.s_clipPoints2;
      var np = 0;
      np = b2Collision.ClipSegmentToLine(clipPoints1, incidentEdge, tangent2, sideOffset1);
      if (np < 2) return;
      np = b2Collision.ClipSegmentToLine(clipPoints2, clipPoints1, tangent, sideOffset2);
      if (np < 2) return;
      manifold.m_localPlaneNormal.SetV(localNormal);
      manifold.m_localPoint.SetV(planePoint);
      var pointCount = 0;
      for (var i = 0; i < b2Settings.b2_maxManifoldPoints; ++i) {
         cv = clipPoints2[i];
         var separation = normal.x * cv.v.x + normal.y * cv.v.y - frontOffset;
         if (separation <= totalRadius) {
            var cp = manifold.m_points[pointCount];
            tMat = xf2.R;
            var tX = cv.v.x - xf2.position.x;
            var tY = cv.v.y - xf2.position.y;
            cp.m_localPoint.x = (tX * tMat.col1.x + tY * tMat.col1.y);
            cp.m_localPoint.y = (tX * tMat.col2.x + tY * tMat.col2.y);
            cp.m_id.Set(cv.id);
            cp.m_id.features.flip = flip;
            ++pointCount;
         }
      }
      manifold.m_pointCount = pointCount;
   }
   b2Collision.CollideCircles = function (manifold, circle1, xf1, circle2, xf2) {
      manifold.m_pointCount = 0;
      var tMat;
      var tVec;
      tMat = xf1.R;
      tVec = circle1.m_p;
      var p1X = xf1.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
      var p1Y = xf1.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
      tMat = xf2.R;
      tVec = circle2.m_p;
      var p2X = xf2.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
      var p2Y = xf2.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
      var dX = p2X - p1X;
      var dY = p2Y - p1Y;
      var distSqr = dX * dX + dY * dY;
      var radius = circle1.m_radius + circle2.m_radius;
      if (distSqr > radius * radius) {
         return;
      }
      manifold.m_type = b2Manifold.e_circles;
      manifold.m_localPoint.SetV(circle1.m_p);
      manifold.m_localPlaneNormal.SetZero();
      manifold.m_pointCount = 1;
      manifold.m_points[0].m_localPoint.SetV(circle2.m_p);
      manifold.m_points[0].m_id.key = 0;
   }
   b2Collision.CollidePolygonAndCircle = function (manifold, polygon, xf1, circle, xf2) {
      manifold.m_pointCount = 0;
      var tPoint;
      var dX = 0;
      var dY = 0;
      var positionX = 0;
      var positionY = 0;
      var tVec;
      var tMat;
      tMat = xf2.R;
      tVec = circle.m_p;
      var cX = xf2.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
      var cY = xf2.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
      dX = cX - xf1.position.x;
      dY = cY - xf1.position.y;
      tMat = xf1.R;
      var cLocalX = (dX * tMat.col1.x + dY * tMat.col1.y);
      var cLocalY = (dX * tMat.col2.x + dY * tMat.col2.y);
      var dist = 0;
      var normalIndex = 0;
      var separation = (-Number.MAX_VALUE);
      var radius = polygon.m_radius + circle.m_radius;
      var vertexCount = parseInt(polygon.m_vertexCount);
      var vertices = polygon.m_vertices;
      var normals = polygon.m_normals;
      for (var i = 0; i < vertexCount; ++i) {
         tVec = vertices[i];
         dX = cLocalX - tVec.x;
         dY = cLocalY - tVec.y;
         tVec = normals[i];
         var s = tVec.x * dX + tVec.y * dY;
         if (s > radius) {
            return;
         }
         if (s > separation) {
            separation = s;
            normalIndex = i;
         }
      }
      var vertIndex1 = parseInt(normalIndex);
      var vertIndex2 = parseInt(vertIndex1 + 1 < vertexCount ? vertIndex1 + 1 : 0);
      var v1 = vertices[vertIndex1];
      var v2 = vertices[vertIndex2];
      if (separation < Number.MIN_VALUE) {
         manifold.m_pointCount = 1;
         manifold.m_type = b2Manifold.e_faceA;
         manifold.m_localPlaneNormal.SetV(normals[normalIndex]);
         manifold.m_localPoint.x = 0.5 * (v1.x + v2.x);
         manifold.m_localPoint.y = 0.5 * (v1.y + v2.y);
         manifold.m_points[0].m_localPoint.SetV(circle.m_p);
         manifold.m_points[0].m_id.key = 0;
         return;
      }
      var u1 = (cLocalX - v1.x) * (v2.x - v1.x) + (cLocalY - v1.y) * (v2.y - v1.y);
      var u2 = (cLocalX - v2.x) * (v1.x - v2.x) + (cLocalY - v2.y) * (v1.y - v2.y);
      if (u1 <= 0.0) {
         if ((cLocalX - v1.x) * (cLocalX - v1.x) + (cLocalY - v1.y) * (cLocalY - v1.y) > radius * radius) return;
         manifold.m_pointCount = 1;
         manifold.m_type = b2Manifold.e_faceA;
         manifold.m_localPlaneNormal.x = cLocalX - v1.x;
         manifold.m_localPlaneNormal.y = cLocalY - v1.y;
         manifold.m_localPlaneNormal.Normalize();
         manifold.m_localPoint.SetV(v1);
         manifold.m_points[0].m_localPoint.SetV(circle.m_p);
         manifold.m_points[0].m_id.key = 0;
      }
      else if (u2 <= 0) {
         if ((cLocalX - v2.x) * (cLocalX - v2.x) + (cLocalY - v2.y) * (cLocalY - v2.y) > radius * radius) return;
         manifold.m_pointCount = 1;
         manifold.m_type = b2Manifold.e_faceA;
         manifold.m_localPlaneNormal.x = cLocalX - v2.x;
         manifold.m_localPlaneNormal.y = cLocalY - v2.y;
         manifold.m_localPlaneNormal.Normalize();
         manifold.m_localPoint.SetV(v2);
         manifold.m_points[0].m_localPoint.SetV(circle.m_p);
         manifold.m_points[0].m_id.key = 0;
      }
      else {
         var faceCenterX = 0.5 * (v1.x + v2.x);
         var faceCenterY = 0.5 * (v1.y + v2.y);
         separation = (cLocalX - faceCenterX) * normals[vertIndex1].x + (cLocalY - faceCenterY) * normals[vertIndex1].y;
         if (separation > radius) return;
         manifold.m_pointCount = 1;
         manifold.m_type = b2Manifold.e_faceA;
         manifold.m_localPlaneNormal.x = normals[vertIndex1].x;
         manifold.m_localPlaneNormal.y = normals[vertIndex1].y;
         manifold.m_localPlaneNormal.Normalize();
         manifold.m_localPoint.Set(faceCenterX, faceCenterY);
         manifold.m_points[0].m_localPoint.SetV(circle.m_p);
         manifold.m_points[0].m_id.key = 0;
      }
   }
   b2Collision.TestOverlap = function (a, b) {
      var t1 = b.lowerBound;
      var t2 = a.upperBound;
      var d1X = t1.x - t2.x;
      var d1Y = t1.y - t2.y;
      t1 = a.lowerBound;
      t2 = b.upperBound;
      var d2X = t1.x - t2.x;
      var d2Y = t1.y - t2.y;
      if (d1X > 0.0 || d1Y > 0.0) return false;
      if (d2X > 0.0 || d2Y > 0.0) return false;
      return true;
   }
   Box2D.postDefs.push(function () {
      Box2D.Collision.b2Collision.s_incidentEdge = b2Collision.MakeClipPointVector();
      Box2D.Collision.b2Collision.s_clipPoints1 = b2Collision.MakeClipPointVector();
      Box2D.Collision.b2Collision.s_clipPoints2 = b2Collision.MakeClipPointVector();
      Box2D.Collision.b2Collision.s_edgeAO = new Vector_a2j_Number(1);
      Box2D.Collision.b2Collision.s_edgeBO = new Vector_a2j_Number(1);
      Box2D.Collision.b2Collision.s_localTangent = new b2Vec2();
      Box2D.Collision.b2Collision.s_localNormal = new b2Vec2();
      Box2D.Collision.b2Collision.s_planePoint = new b2Vec2();
      Box2D.Collision.b2Collision.s_normal = new b2Vec2();
      Box2D.Collision.b2Collision.s_tangent = new b2Vec2();
      Box2D.Collision.b2Collision.s_tangent2 = new b2Vec2();
      Box2D.Collision.b2Collision.s_v11 = new b2Vec2();
      Box2D.Collision.b2Collision.s_v12 = new b2Vec2();
      Box2D.Collision.b2Collision.b2CollidePolyTempVec = new b2Vec2();
      Box2D.Collision.b2Collision.b2_nullFeature = 0x000000ff;
   });
   b2ContactID.b2ContactID = function () {
      this.features = new Features();
   };
   b2ContactID.prototype.b2ContactID = function () {
      this.features._m_id = this;
   }
   b2ContactID.prototype.Set = function (id) {
      this.key = id._key;
   }
   b2ContactID.prototype.Copy = function () {
      var id = new b2ContactID();
      id.key = this.key;
      return id;
   }
   Object.defineProperty(b2ContactID.prototype, 'key', {
      enumerable: false,
      configurable: true,
      get: function () {
         return this._key;
      }
   });
   Object.defineProperty(b2ContactID.prototype, 'key', {
      enumerable: false,
      configurable: true,
      set: function (value) {
         if (value === undefined) value = 0;
         this._key = value;
         this.features._referenceEdge = this._key & 0x000000ff;
         this.features._incidentEdge = ((this._key & 0x0000ff00) >> 8) & 0x000000ff;
         this.features._incidentVertex = ((this._key & 0x00ff0000) >> 16) & 0x000000ff;
         this.features._flip = ((this._key & 0xff000000) >> 24) & 0x000000ff;
      }
   });
   b2ContactPoint.b2ContactPoint = function () {
      this.position = new b2Vec2();
      this.velocity = new b2Vec2();
      this.normal = new b2Vec2();
      this.id = new b2ContactID();
   };
   b2Distance.b2Distance = function () {};
   b2Distance.Distance = function (output, cache, input) {
      ++b2Distance.b2_gjkCalls;
      var proxyA = input.proxyA;
      var proxyB = input.proxyB;
      var transformA = input.transformA;
      var transformB = input.transformB;
      var simplex = b2Distance.s_simplex;
      simplex.ReadCache(cache, proxyA, transformA, proxyB, transformB);
      var vertices = simplex.m_vertices;
      var k_maxIters = 20;
      var saveA = b2Distance.s_saveA;
      var saveB = b2Distance.s_saveB;
      var saveCount = 0;
      var closestPoint = simplex.GetClosestPoint();
      var distanceSqr1 = closestPoint.LengthSquared();
      var distanceSqr2 = distanceSqr1;
      var i = 0;
      var p;
      var iter = 0;
      while (iter < k_maxIters) {
         saveCount = simplex.m_count;
         for (i = 0;
         i < saveCount; i++) {
            saveA[i] = vertices[i].indexA;
            saveB[i] = vertices[i].indexB;
         }
         switch (simplex.m_count) {
         case 1:
            break;
         case 2:
            simplex.Solve2();
            break;
         case 3:
            simplex.Solve3();
            break;
         default:
            b2Settings.b2Assert(false);
         }
         if (simplex.m_count == 3) {
            break;
         }
         p = simplex.GetClosestPoint();
         distanceSqr2 = p.LengthSquared();
         if (distanceSqr2 > distanceSqr1) {}
         distanceSqr1 = distanceSqr2;
         var d = simplex.GetSearchDirection();
         if (d.LengthSquared() < Number.MIN_VALUE * Number.MIN_VALUE) {
            break;
         }
         var vertex = vertices[simplex.m_count];
         vertex.indexA = proxyA.GetSupport(b2Math.MulTMV(transformA.R, d.GetNegative()));
         vertex.wA = b2Math.MulX(transformA, proxyA.GetVertex(vertex.indexA));
         vertex.indexB = proxyB.GetSupport(b2Math.MulTMV(transformB.R, d));
         vertex.wB = b2Math.MulX(transformB, proxyB.GetVertex(vertex.indexB));
         vertex.w = b2Math.SubtractVV(vertex.wB, vertex.wA);
         ++iter;
         ++b2Distance.b2_gjkIters;
         var duplicate = false;
         for (i = 0;
         i < saveCount; i++) {
            if (vertex.indexA == saveA[i] && vertex.indexB == saveB[i]) {
               duplicate = true;
               break;
            }
         }
         if (duplicate) {
            break;
         }++simplex.m_count;
      }
      b2Distance.b2_gjkMaxIters = b2Math.Max(b2Distance.b2_gjkMaxIters, iter);
      simplex.GetWitnessPoints(output.pointA, output.pointB);
      output.distance = b2Math.SubtractVV(output.pointA, output.pointB).Length();
      output.iterations = iter;
      simplex.WriteCache(cache);
      if (input.useRadii) {
         var rA = proxyA.m_radius;
         var rB = proxyB.m_radius;
         if (output.distance > rA + rB && output.distance > Number.MIN_VALUE) {
            output.distance -= rA + rB;
            var normal = b2Math.SubtractVV(output.pointB, output.pointA);
            normal.Normalize();
            output.pointA.x += rA * normal.x;
            output.pointA.y += rA * normal.y;
            output.pointB.x -= rB * normal.x;
            output.pointB.y -= rB * normal.y;
         }
         else {
            p = new b2Vec2();
            p.x = .5 * (output.pointA.x + output.pointB.x);
            p.y = .5 * (output.pointA.y + output.pointB.y);
            output.pointA.x = output.pointB.x = p.x;
            output.pointA.y = output.pointB.y = p.y;
            output.distance = 0.0;
         }
      }
   }
   Box2D.postDefs.push(function () {
      Box2D.Collision.b2Distance.s_simplex = new b2Simplex();
      Box2D.Collision.b2Distance.s_saveA = new Vector_a2j_Number(3);
      Box2D.Collision.b2Distance.s_saveB = new Vector_a2j_Number(3);
   });
   b2DistanceInput.b2DistanceInput = function () {};
   b2DistanceOutput.b2DistanceOutput = function () {
      this.pointA = new b2Vec2();
      this.pointB = new b2Vec2();
   };
   b2DistanceProxy.b2DistanceProxy = function () {};
   b2DistanceProxy.prototype.Set = function (shape) {
      switch (shape.GetType()) {
      case b2Shape.e_circleShape:
         {
            var circle = (shape instanceof b2CircleShape ? shape : null);
            this.m_vertices = new Vector(1, true);
            this.m_vertices[0] = circle.m_p;
            this.m_count = 1;
            this.m_radius = circle.m_radius;
         }
         break;
      case b2Shape.e_polygonShape:
         {
            var polygon = (shape instanceof b2PolygonShape ? shape : null);
            this.m_vertices = polygon.m_vertices;
            this.m_count = polygon.m_vertexCount;
            this.m_radius = polygon.m_radius;
         }
         break;
      default:
         b2Settings.b2Assert(false);
      }
   }
   b2DistanceProxy.prototype.GetSupport = function (d) {
      var bestIndex = 0;
      var bestValue = this.m_vertices[0].x * d.x + this.m_vertices[0].y * d.y;
      for (var i = 1; i < this.m_count; ++i) {
         var value = this.m_vertices[i].x * d.x + this.m_vertices[i].y * d.y;
         if (value > bestValue) {
            bestIndex = i;
            bestValue = value;
         }
      }
      return bestIndex;
   }
   b2DistanceProxy.prototype.GetSupportVertex = function (d) {
      var bestIndex = 0;
      var bestValue = this.m_vertices[0].x * d.x + this.m_vertices[0].y * d.y;
      for (var i = 1; i < this.m_count; ++i) {
         var value = this.m_vertices[i].x * d.x + this.m_vertices[i].y * d.y;
         if (value > bestValue) {
            bestIndex = i;
            bestValue = value;
         }
      }
      return this.m_vertices[bestIndex];
   }
   b2DistanceProxy.prototype.GetVertexCount = function () {
      return this.m_count;
   }
   b2DistanceProxy.prototype.GetVertex = function (index) {
      if (index === undefined) index = 0;
      b2Settings.b2Assert(0 <= index && index < this.m_count);
      return this.m_vertices[index];
   }
   b2DynamicTree.b2DynamicTree = function () {};
   b2DynamicTree.prototype.b2DynamicTree = function () {
      this.m_root = null;
      this.m_freeList = null;
      this.m_path = 0;
      this.m_insertionCount = 0;
   }
   b2DynamicTree.prototype.CreateProxy = function (aabb, userData) {
      var node = this.AllocateNode();
      var extendX = b2Settings.b2_aabbExtension;
      var extendY = b2Settings.b2_aabbExtension;
      node.aabb.lowerBound.x = aabb.lowerBound.x - extendX;
      node.aabb.lowerBound.y = aabb.lowerBound.y - extendY;
      node.aabb.upperBound.x = aabb.upperBound.x + extendX;
      node.aabb.upperBound.y = aabb.upperBound.y + extendY;
      node.userData = userData;
      this.InsertLeaf(node);
      return node;
   }
   b2DynamicTree.prototype.DestroyProxy = function (proxy) {
      this.RemoveLeaf(proxy);
      this.FreeNode(proxy);
   }
   b2DynamicTree.prototype.MoveProxy = function (proxy, aabb, displacement) {
      b2Settings.b2Assert(proxy.IsLeaf());
      if (proxy.aabb.Contains(aabb)) {
         return false;
      }
      this.RemoveLeaf(proxy);
      var extendX = b2Settings.b2_aabbExtension + b2Settings.b2_aabbMultiplier * (displacement.x > 0 ? displacement.x : (-displacement.x));
      var extendY = b2Settings.b2_aabbExtension + b2Settings.b2_aabbMultiplier * (displacement.y > 0 ? displacement.y : (-displacement.y));
      proxy.aabb.lowerBound.x = aabb.lowerBound.x - extendX;
      proxy.aabb.lowerBound.y = aabb.lowerBound.y - extendY;
      proxy.aabb.upperBound.x = aabb.upperBound.x + extendX;
      proxy.aabb.upperBound.y = aabb.upperBound.y + extendY;
      this.InsertLeaf(proxy);
      return true;
   }
   b2DynamicTree.prototype.Rebalance = function (iterations) {
      if (iterations === undefined) iterations = 0;
      if (this.m_root == null) return;
      for (var i = 0; i < iterations; i++) {
         var node = this.m_root;
         var bit = 0;
         while (node.IsLeaf() == false) {
            node = (this.m_path >> bit) & 1 ? node.child2 : node.child1;
            bit = (bit + 1) & 31;
         }++this.m_path;
         this.RemoveLeaf(node);
         this.InsertLeaf(node);
      }
   }
   b2DynamicTree.prototype.GetFatAABB = function (proxy) {
      return proxy.aabb;
   }
   b2DynamicTree.prototype.GetUserData = function (proxy) {
      return proxy.userData;
   }
   b2DynamicTree.prototype.Query = function (callback, aabb) {
      if (this.m_root == null) return;
      var stack = new Vector();
      var count = 0;
      stack[count++] = this.m_root;
      while (count > 0) {
         var node = stack[--count];
         if (node.aabb.TestOverlap(aabb)) {
            if (node.IsLeaf()) {
               var proceed = callback(node);
               if (!proceed) return;
            }
            else {
               stack[count++] = node.child1;
               stack[count++] = node.child2;
            }
         }
      }
   }
   b2DynamicTree.prototype.RayCast = function (callback, input) {
      if (this.m_root == null) return;
      var p1 = input.p1;
      var p2 = input.p2;
      var r = b2Math.SubtractVV(p1, p2);
      r.Normalize();
      var v = b2Math.CrossFV(1.0, r);
      var abs_v = b2Math.AbsV(v);
      var maxFraction = input.maxFraction;
      var segmentAABB = new b2AABB();
      var tX = 0;
      var tY = 0; {
         tX = p1.x + maxFraction * (p2.x - p1.x);
         tY = p1.y + maxFraction * (p2.y - p1.y);
         segmentAABB.lowerBound.x = Math.min(p1.x, tX);
         segmentAABB.lowerBound.y = Math.min(p1.y, tY);
         segmentAABB.upperBound.x = Math.max(p1.x, tX);
         segmentAABB.upperBound.y = Math.max(p1.y, tY);
      }
      var stack = new Vector();
      var count = 0;
      stack[count++] = this.m_root;
      while (count > 0) {
         var node = stack[--count];
         if (node.aabb.TestOverlap(segmentAABB) == false) {
            continue;
         }
         var c = node.aabb.GetCenter();
         var h = node.aabb.GetExtents();
         var separation = Math.abs(v.x * (p1.x - c.x) + v.y * (p1.y - c.y)) - abs_v.x * h.x - abs_v.y * h.y;
         if (separation > 0.0) continue;
         if (node.IsLeaf()) {
            var subInput = new b2RayCastInput();
            subInput.p1 = input.p1;
            subInput.p2 = input.p2;
            subInput.maxFraction = input.maxFraction;
            maxFraction = callback(subInput, node);
            if (maxFraction == 0.0) return;
            if (maxFraction > 0.0) {
               tX = p1.x + maxFraction * (p2.x - p1.x);
               tY = p1.y + maxFraction * (p2.y - p1.y);
               segmentAABB.lowerBound.x = Math.min(p1.x, tX);
               segmentAABB.lowerBound.y = Math.min(p1.y, tY);
               segmentAABB.upperBound.x = Math.max(p1.x, tX);
               segmentAABB.upperBound.y = Math.max(p1.y, tY);
            }
         }
         else {
            stack[count++] = node.child1;
            stack[count++] = node.child2;
         }
      }
   }
   b2DynamicTree.prototype.AllocateNode = function () {
      if (this.m_freeList) {
         var node = this.m_freeList;
         this.m_freeList = node.parent;
         node.parent = null;
         node.child1 = null;
         node.child2 = null;
         return node;
      }
      return new b2DynamicTreeNode();
   }
   b2DynamicTree.prototype.FreeNode = function (node) {
      node.parent = this.m_freeList;
      this.m_freeList = node;
   }
   b2DynamicTree.prototype.InsertLeaf = function (leaf) {
      ++this.m_insertionCount;
      if (this.m_root == null) {
         this.m_root = leaf;
         this.m_root.parent = null;
         return;
      }
      var center = leaf.aabb.GetCenter();
      var sibling = this.m_root;
      if (sibling.IsLeaf() == false) {
         do {
            var child1 = sibling.child1;
            var child2 = sibling.child2;
            var norm1 = Math.abs((child1.aabb.lowerBound.x + child1.aabb.upperBound.x) / 2 - center.x) + Math.abs((child1.aabb.lowerBound.y + child1.aabb.upperBound.y) / 2 - center.y);
            var norm2 = Math.abs((child2.aabb.lowerBound.x + child2.aabb.upperBound.x) / 2 - center.x) + Math.abs((child2.aabb.lowerBound.y + child2.aabb.upperBound.y) / 2 - center.y);
            if (norm1 < norm2) {
               sibling = child1;
            }
            else {
               sibling = child2;
            }
         }
         while (sibling.IsLeaf() == false)
      }
      var node1 = sibling.parent;
      var node2 = this.AllocateNode();
      node2.parent = node1;
      node2.userData = null;
      node2.aabb.Combine(leaf.aabb, sibling.aabb);
      if (node1) {
         if (sibling.parent.child1 == sibling) {
            node1.child1 = node2;
         }
         else {
            node1.child2 = node2;
         }
         node2.child1 = sibling;
         node2.child2 = leaf;
         sibling.parent = node2;
         leaf.parent = node2;
         do {
            if (node1.aabb.Contains(node2.aabb)) break;
            node1.aabb.Combine(node1.child1.aabb, node1.child2.aabb);
            node2 = node1;
            node1 = node1.parent;
         }
         while (node1)
      }
      else {
         node2.child1 = sibling;
         node2.child2 = leaf;
         sibling.parent = node2;
         leaf.parent = node2;
         this.m_root = node2;
      }
   }
   b2DynamicTree.prototype.RemoveLeaf = function (leaf) {
      if (leaf == this.m_root) {
         this.m_root = null;
         return;
      }
      var node2 = leaf.parent;
      var node1 = node2.parent;
      var sibling;
      if (node2.child1 == leaf) {
         sibling = node2.child2;
      }
      else {
         sibling = node2.child1;
      }
      if (node1) {
         if (node1.child1 == node2) {
            node1.child1 = sibling;
         }
         else {
            node1.child2 = sibling;
         }
         sibling.parent = node1;
         this.FreeNode(node2);
         while (node1) {
            var oldAABB = node1.aabb;
            node1.aabb = b2AABB.Combine(node1.child1.aabb, node1.child2.aabb);
            if (oldAABB.Contains(node1.aabb)) break;
            node1 = node1.parent;
         }
      }
      else {
         this.m_root = sibling;
         sibling.parent = null;
         this.FreeNode(node2);
      }
   }
   b2DynamicTreeBroadPhase.b2DynamicTreeBroadPhase = function () {
      this.m_tree = new b2DynamicTree();
      this.m_moveBuffer = new Vector();
      this.m_pairBuffer = new Vector();
      this.m_pairCount = 0;
   };
   b2DynamicTreeBroadPhase.prototype.CreateProxy = function (aabb, userData) {
      var proxy = this.m_tree.CreateProxy(aabb, userData);
      ++this.m_proxyCount;
      this.BufferMove(proxy);
      return proxy;
   }
   b2DynamicTreeBroadPhase.prototype.DestroyProxy = function (proxy) {
      this.UnBufferMove(proxy);
      --this.m_proxyCount;
      this.m_tree.DestroyProxy(proxy);
   }
   b2DynamicTreeBroadPhase.prototype.MoveProxy = function (proxy, aabb, displacement) {
      var buffer = this.m_tree.MoveProxy(proxy, aabb, displacement);
      if (buffer) {
         this.BufferMove(proxy);
      }
   }
   b2DynamicTreeBroadPhase.prototype.TestOverlap = function (proxyA, proxyB) {
      var aabbA = this.m_tree.GetFatAABB(proxyA);
      var aabbB = this.m_tree.GetFatAABB(proxyB);
      return aabbA.TestOverlap(aabbB);
   }
   b2DynamicTreeBroadPhase.prototype.GetUserData = function (proxy) {
      return this.m_tree.GetUserData(proxy);
   }
   b2DynamicTreeBroadPhase.prototype.GetFatAABB = function (proxy) {
      return this.m_tree.GetFatAABB(proxy);
   }
   b2DynamicTreeBroadPhase.prototype.GetProxyCount = function () {
      return this.m_proxyCount;
   }
   b2DynamicTreeBroadPhase.prototype.UpdatePairs = function (callback) {
      var __this = this;
      __this.m_pairCount = 0;
      var i = 0,
         queryProxy;
       function QueryCallback(proxy) {
          if (proxy == queryProxy) return true;
          if (__this.m_pairCount == __this.m_pairBuffer.length) {
             __this.m_pairBuffer[__this.m_pairCount] = new b2DynamicTreePair();
          }
          var pair = __this.m_pairBuffer[__this.m_pairCount];
          pair.proxyA = proxy < queryProxy ? proxy : queryProxy;
          pair.proxyB = proxy >= queryProxy ? proxy : queryProxy;++__this.m_pairCount;
          return true;
       };
      for (i = 0;
      i < __this.m_moveBuffer.length; ++i) {
         queryProxy = __this.m_moveBuffer[i];
         var fatAABB = __this.m_tree.GetFatAABB(queryProxy);
         __this.m_tree.Query(QueryCallback, fatAABB);
      }
      __this.m_moveBuffer.length = 0;
      for (var i = 0; i < __this.m_pairCount;) {
         var primaryPair = __this.m_pairBuffer[i];
         var userDataA = __this.m_tree.GetUserData(primaryPair.proxyA);
         var userDataB = __this.m_tree.GetUserData(primaryPair.proxyB);
         callback(userDataA, userDataB);
         ++i;
         while (i < __this.m_pairCount) {
            var pair = __this.m_pairBuffer[i];
            if (pair.proxyA != primaryPair.proxyA || pair.proxyB != primaryPair.proxyB) {
               break;
            }++i;
         }
      }
   }
   b2DynamicTreeBroadPhase.prototype.Query = function (callback, aabb) {
      this.m_tree.Query(callback, aabb);
   }
   b2DynamicTreeBroadPhase.prototype.RayCast = function (callback, input) {
      this.m_tree.RayCast(callback, input);
   }
   b2DynamicTreeBroadPhase.prototype.Validate = function () {}
   b2DynamicTreeBroadPhase.prototype.Rebalance = function (iterations) {
      if (iterations === undefined) iterations = 0;
      this.m_tree.Rebalance(iterations);
   }
   b2DynamicTreeBroadPhase.prototype.BufferMove = function (proxy) {
      this.m_moveBuffer[this.m_moveBuffer.length] = proxy;
   }
   b2DynamicTreeBroadPhase.prototype.UnBufferMove = function (proxy) {
      var i = parseInt(this.m_moveBuffer.indexOf(proxy));
      this.m_moveBuffer.splice(i, 1);
   }
   b2DynamicTreeBroadPhase.prototype.ComparePairs = function (pair1, pair2) {
      return 0;
   }
   b2DynamicTreeBroadPhase.__implements = {};
   b2DynamicTreeBroadPhase.__implements[IBroadPhase] = true;
   b2DynamicTreeNode.b2DynamicTreeNode = function () {
      this.aabb = new b2AABB();
   };
   b2DynamicTreeNode.prototype.IsLeaf = function () {
      return this.child1 == null;
   }
   b2DynamicTreePair.b2DynamicTreePair = function () {};
   b2Manifold.b2Manifold = function () {
      this.m_pointCount = 0;
   };
   b2Manifold.prototype.b2Manifold = function () {
      this.m_points = new Vector(b2Settings.b2_maxManifoldPoints);
      for (var i = 0; i < b2Settings.b2_maxManifoldPoints; i++) {
         this.m_points[i] = new b2ManifoldPoint();
      }
      this.m_localPlaneNormal = new b2Vec2();
      this.m_localPoint = new b2Vec2();
   }
   b2Manifold.prototype.Reset = function () {
      for (var i = 0; i < b2Settings.b2_maxManifoldPoints; i++) {
         ((this.m_points[i] instanceof b2ManifoldPoint ? this.m_points[i] : null)).Reset();
      }
      this.m_localPlaneNormal.SetZero();
      this.m_localPoint.SetZero();
      this.m_type = 0;
      this.m_pointCount = 0;
   }
   b2Manifold.prototype.Set = function (m) {
      this.m_pointCount = m.m_pointCount;
      for (var i = 0; i < b2Settings.b2_maxManifoldPoints; i++) {
         ((this.m_points[i] instanceof b2ManifoldPoint ? this.m_points[i] : null)).Set(m.m_points[i]);
      }
      this.m_localPlaneNormal.SetV(m.m_localPlaneNormal);
      this.m_localPoint.SetV(m.m_localPoint);
      this.m_type = m.m_type;
   }
   b2Manifold.prototype.Copy = function () {
      var copy = new b2Manifold();
      copy.Set(this);
      return copy;
   }
   Box2D.postDefs.push(function () {
      Box2D.Collision.b2Manifold.e_circles = 0x0001;
      Box2D.Collision.b2Manifold.e_faceA = 0x0002;
      Box2D.Collision.b2Manifold.e_faceB = 0x0004;
   });
   b2ManifoldPoint.b2ManifoldPoint = function () {
      this.m_localPoint = new b2Vec2();
      this.m_id = new b2ContactID();
   };
   b2ManifoldPoint.prototype.b2ManifoldPoint = function () {
      this.Reset();
   }
   b2ManifoldPoint.prototype.Reset = function () {
      this.m_localPoint.SetZero();
      this.m_normalImpulse = 0.0;
      this.m_tangentImpulse = 0.0;
      this.m_id.key = 0;
   }
   b2ManifoldPoint.prototype.Set = function (m) {
      this.m_localPoint.SetV(m.m_localPoint);
      this.m_normalImpulse = m.m_normalImpulse;
      this.m_tangentImpulse = m.m_tangentImpulse;
      this.m_id.Set(m.m_id);
   }
   b2Point.b2Point = function () {
      this.p = new b2Vec2();
   };
   b2Point.prototype.Support = function (xf, vX, vY) {
      if (vX === undefined) vX = 0;
      if (vY === undefined) vY = 0;
      return this.p;
   }
   b2Point.prototype.GetFirstVertex = function (xf) {
      return this.p;
   }
   b2RayCastInput.b2RayCastInput = function () {
      this.p1 = new b2Vec2();
      this.p2 = new b2Vec2();
   };
   b2RayCastInput.prototype.b2RayCastInput = function (p1, p2, maxFraction) {
      if (p1 === undefined) p1 = null;
      if (p2 === undefined) p2 = null;
      if (maxFraction === undefined) maxFraction = 1;
      if (p1) this.p1.SetV(p1);
      if (p2) this.p2.SetV(p2);
      this.maxFraction = maxFraction;
   }
   b2RayCastOutput.b2RayCastOutput = function () {
      this.normal = new b2Vec2();
   };
   b2Segment.b2Segment = function () {
      this.p1 = new b2Vec2();
      this.p2 = new b2Vec2();
   };
   b2Segment.prototype.TestSegment = function (lambda, normal, segment, maxLambda) {
      if (maxLambda === undefined) maxLambda = 0;
      var s = segment.p1;
      var rX = segment.p2.x - s.x;
      var rY = segment.p2.y - s.y;
      var dX = this.p2.x - this.p1.x;
      var dY = this.p2.y - this.p1.y;
      var nX = dY;
      var nY = (-dX);
      var k_slop = 100.0 * Number.MIN_VALUE;
      var denom = (-(rX * nX + rY * nY));
      if (denom > k_slop) {
         var bX = s.x - this.p1.x;
         var bY = s.y - this.p1.y;
         var a = (bX * nX + bY * nY);
         if (0.0 <= a && a <= maxLambda * denom) {
            var mu2 = (-rX * bY) + rY * bX;
            if ((-k_slop * denom) <= mu2 && mu2 <= denom * (1.0 + k_slop)) {
               a /= denom;
               var nLen = Math.sqrt(nX * nX + nY * nY);
               nX /= nLen;
               nY /= nLen;
               lambda[0] = a;
               normal.Set(nX, nY);
               return true;
            }
         }
      }
      return false;
   }
   b2Segment.prototype.Extend = function (aabb) {
      this.ExtendForward(aabb);
      this.ExtendBackward(aabb);
   }
   b2Segment.prototype.ExtendForward = function (aabb) {
      var dX = this.p2.x - this.p1.x;
      var dY = this.p2.y - this.p1.y;
      var lambda = Math.min(dX > 0 ? (aabb.upperBound.x - this.p1.x) / dX : dX < 0 ? (aabb.lowerBound.x - this.p1.x) / dX : Number.POSITIVE_INFINITY,
      dY > 0 ? (aabb.upperBound.y - this.p1.y) / dY : dY < 0 ? (aabb.lowerBound.y - this.p1.y) / dY : Number.POSITIVE_INFINITY);
      this.p2.x = this.p1.x + dX * lambda;
      this.p2.y = this.p1.y + dY * lambda;
   }
   b2Segment.prototype.ExtendBackward = function (aabb) {
      var dX = (-this.p2.x) + this.p1.x;
      var dY = (-this.p2.y) + this.p1.y;
      var lambda = Math.min(dX > 0 ? (aabb.upperBound.x - this.p2.x) / dX : dX < 0 ? (aabb.lowerBound.x - this.p2.x) / dX : Number.POSITIVE_INFINITY,
      dY > 0 ? (aabb.upperBound.y - this.p2.y) / dY : dY < 0 ? (aabb.lowerBound.y - this.p2.y) / dY : Number.POSITIVE_INFINITY);
      this.p1.x = this.p2.x + dX * lambda;
      this.p1.y = this.p2.y + dY * lambda;
   }
   b2SeparationFunction.b2SeparationFunction = function () {
      this.m_localPoint = new b2Vec2();
      this.m_axis = new b2Vec2();
   };
   b2SeparationFunction.prototype.Initialize = function (cache, proxyA, transformA, proxyB, transformB) {
      this.m_proxyA = proxyA;
      this.m_proxyB = proxyB;
      var count = parseInt(cache.count);
      b2Settings.b2Assert(0 < count && count < 3);
      var localPointA;
      var localPointA1;
      var localPointA2;
      var localPointB;
      var localPointB1;
      var localPointB2;
      var pointAX = 0;
      var pointAY = 0;
      var pointBX = 0;
      var pointBY = 0;
      var normalX = 0;
      var normalY = 0;
      var tMat;
      var tVec;
      var s = 0;
      var sgn = 0;
      if (count == 1) {
         this.m_type = b2SeparationFunction.e_points;
         localPointA = this.m_proxyA.GetVertex(cache.indexA[0]);
         localPointB = this.m_proxyB.GetVertex(cache.indexB[0]);
         tVec = localPointA;
         tMat = transformA.R;
         pointAX = transformA.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
         pointAY = transformA.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
         tVec = localPointB;
         tMat = transformB.R;
         pointBX = transformB.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
         pointBY = transformB.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
         this.m_axis.x = pointBX - pointAX;
         this.m_axis.y = pointBY - pointAY;
         this.m_axis.Normalize();
      }
      else if (cache.indexB[0] == cache.indexB[1]) {
         this.m_type = b2SeparationFunction.e_faceA;
         localPointA1 = this.m_proxyA.GetVertex(cache.indexA[0]);
         localPointA2 = this.m_proxyA.GetVertex(cache.indexA[1]);
         localPointB = this.m_proxyB.GetVertex(cache.indexB[0]);
         this.m_localPoint.x = 0.5 * (localPointA1.x + localPointA2.x);
         this.m_localPoint.y = 0.5 * (localPointA1.y + localPointA2.y);
         this.m_axis = b2Math.CrossVF(b2Math.SubtractVV(localPointA2, localPointA1), 1.0);
         this.m_axis.Normalize();
         tVec = this.m_axis;
         tMat = transformA.R;
         normalX = tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;
         normalY = tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;
         tVec = this.m_localPoint;
         tMat = transformA.R;
         pointAX = transformA.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
         pointAY = transformA.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
         tVec = localPointB;
         tMat = transformB.R;
         pointBX = transformB.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
         pointBY = transformB.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
         s = (pointBX - pointAX) * normalX + (pointBY - pointAY) * normalY;
         if (s < 0.0) {
            this.m_axis.NegativeSelf();
         }
      }
      else if (cache.indexA[0] == cache.indexA[0]) {
         this.m_type = b2SeparationFunction.e_faceB;
         localPointB1 = this.m_proxyB.GetVertex(cache.indexB[0]);
         localPointB2 = this.m_proxyB.GetVertex(cache.indexB[1]);
         localPointA = this.m_proxyA.GetVertex(cache.indexA[0]);
         this.m_localPoint.x = 0.5 * (localPointB1.x + localPointB2.x);
         this.m_localPoint.y = 0.5 * (localPointB1.y + localPointB2.y);
         this.m_axis = b2Math.CrossVF(b2Math.SubtractVV(localPointB2, localPointB1), 1.0);
         this.m_axis.Normalize();
         tVec = this.m_axis;
         tMat = transformB.R;
         normalX = tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;
         normalY = tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;
         tVec = this.m_localPoint;
         tMat = transformB.R;
         pointBX = transformB.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
         pointBY = transformB.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
         tVec = localPointA;
         tMat = transformA.R;
         pointAX = transformA.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
         pointAY = transformA.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
         s = (pointAX - pointBX) * normalX + (pointAY - pointBY) * normalY;
         if (s < 0.0) {
            this.m_axis.NegativeSelf();
         }
      }
      else {
         localPointA1 = this.m_proxyA.GetVertex(cache.indexA[0]);
         localPointA2 = this.m_proxyA.GetVertex(cache.indexA[1]);
         localPointB1 = this.m_proxyB.GetVertex(cache.indexB[0]);
         localPointB2 = this.m_proxyB.GetVertex(cache.indexB[1]);
         var pA = b2Math.MulX(transformA, localPointA);
         var dA = b2Math.MulMV(transformA.R, b2Math.SubtractVV(localPointA2, localPointA1));
         var pB = b2Math.MulX(transformB, localPointB);
         var dB = b2Math.MulMV(transformB.R, b2Math.SubtractVV(localPointB2, localPointB1));
         var a = dA.x * dA.x + dA.y * dA.y;
         var e = dB.x * dB.x + dB.y * dB.y;
         var r = b2Math.SubtractVV(dB, dA);
         var c = dA.x * r.x + dA.y * r.y;
         var f = dB.x * r.x + dB.y * r.y;
         var b = dA.x * dB.x + dA.y * dB.y;
         var denom = a * e - b * b;
         s = 0.0;
         if (denom != 0.0) {
            s = b2Math.Clamp((b * f - c * e) / denom, 0.0, 1.0);
         }
         var t = (b * s + f) / e;
         if (t < 0.0) {
            t = 0.0;
            s = b2Math.Clamp((b - c) / a, 0.0, 1.0);
         }
         localPointA = new b2Vec2();
         localPointA.x = localPointA1.x + s * (localPointA2.x - localPointA1.x);
         localPointA.y = localPointA1.y + s * (localPointA2.y - localPointA1.y);
         localPointB = new b2Vec2();
         localPointB.x = localPointB1.x + s * (localPointB2.x - localPointB1.x);
         localPointB.y = localPointB1.y + s * (localPointB2.y - localPointB1.y);
         if (s == 0.0 || s == 1.0) {
            this.m_type = b2SeparationFunction.e_faceB;
            this.m_axis = b2Math.CrossVF(b2Math.SubtractVV(localPointB2, localPointB1), 1.0);
            this.m_axis.Normalize();
            this.m_localPoint = localPointB;
            tVec = this.m_axis;
            tMat = transformB.R;
            normalX = tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;
            normalY = tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;
            tVec = this.m_localPoint;
            tMat = transformB.R;
            pointBX = transformB.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
            pointBY = transformB.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
            tVec = localPointA;
            tMat = transformA.R;
            pointAX = transformA.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
            pointAY = transformA.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
            sgn = (pointAX - pointBX) * normalX + (pointAY - pointBY) * normalY;
            if (s < 0.0) {
               this.m_axis.NegativeSelf();
            }
         }
         else {
            this.m_type = b2SeparationFunction.e_faceA;
            this.m_axis = b2Math.CrossVF(b2Math.SubtractVV(localPointA2, localPointA1), 1.0);
            this.m_localPoint = localPointA;
            tVec = this.m_axis;
            tMat = transformA.R;
            normalX = tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;
            normalY = tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;
            tVec = this.m_localPoint;
            tMat = transformA.R;
            pointAX = transformA.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
            pointAY = transformA.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
            tVec = localPointB;
            tMat = transformB.R;
            pointBX = transformB.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
            pointBY = transformB.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
            sgn = (pointBX - pointAX) * normalX + (pointBY - pointAY) * normalY;
            if (s < 0.0) {
               this.m_axis.NegativeSelf();
            }
         }
      }
   }
   b2SeparationFunction.prototype.Evaluate = function (transformA, transformB) {
      var axisA;
      var axisB;
      var localPointA;
      var localPointB;
      var pointA;
      var pointB;
      var seperation = 0;
      var normal;
      switch (this.m_type) {
      case b2SeparationFunction.e_points:
         {
            axisA = b2Math.MulTMV(transformA.R, this.m_axis);
            axisB = b2Math.MulTMV(transformB.R, this.m_axis.GetNegative());
            localPointA = this.m_proxyA.GetSupportVertex(axisA);
            localPointB = this.m_proxyB.GetSupportVertex(axisB);
            pointA = b2Math.MulX(transformA, localPointA);
            pointB = b2Math.MulX(transformB, localPointB);
            seperation = (pointB.x - pointA.x) * this.m_axis.x + (pointB.y - pointA.y) * this.m_axis.y;
            return seperation;
         }
      case b2SeparationFunction.e_faceA:
         {
            normal = b2Math.MulMV(transformA.R, this.m_axis);
            pointA = b2Math.MulX(transformA, this.m_localPoint);
            axisB = b2Math.MulTMV(transformB.R, normal.GetNegative());
            localPointB = this.m_proxyB.GetSupportVertex(axisB);
            pointB = b2Math.MulX(transformB, localPointB);
            seperation = (pointB.x - pointA.x) * normal.x + (pointB.y - pointA.y) * normal.y;
            return seperation;
         }
      case b2SeparationFunction.e_faceB:
         {
            normal = b2Math.MulMV(transformB.R, this.m_axis);
            pointB = b2Math.MulX(transformB, this.m_localPoint);
            axisA = b2Math.MulTMV(transformA.R, normal.GetNegative());
            localPointA = this.m_proxyA.GetSupportVertex(axisA);
            pointA = b2Math.MulX(transformA, localPointA);
            seperation = (pointA.x - pointB.x) * normal.x + (pointA.y - pointB.y) * normal.y;
            return seperation;
         }
      default:
         b2Settings.b2Assert(false);
         return 0.0;
      }
   }
   Box2D.postDefs.push(function () {
      Box2D.Collision.b2SeparationFunction.e_points = 0x01;
      Box2D.Collision.b2SeparationFunction.e_faceA = 0x02;
      Box2D.Collision.b2SeparationFunction.e_faceB = 0x04;
   });
   b2Simplex.b2Simplex = function () {
      this.m_v1 = new b2SimplexVertex();
      this.m_v2 = new b2SimplexVertex();
      this.m_v3 = new b2SimplexVertex();
      this.m_vertices = new Vector(3);
   };
   b2Simplex.prototype.b2Simplex = function () {
      this.m_vertices[0] = this.m_v1;
      this.m_vertices[1] = this.m_v2;
      this.m_vertices[2] = this.m_v3;
   }
   b2Simplex.prototype.ReadCache = function (cache, proxyA, transformA, proxyB, transformB) {
      b2Settings.b2Assert(0 <= cache.count && cache.count <= 3);
      var wALocal;
      var wBLocal;
      this.m_count = cache.count;
      var vertices = this.m_vertices;
      for (var i = 0; i < this.m_count; i++) {
         var v = vertices[i];
         v.indexA = cache.indexA[i];
         v.indexB = cache.indexB[i];
         wALocal = proxyA.GetVertex(v.indexA);
         wBLocal = proxyB.GetVertex(v.indexB);
         v.wA = b2Math.MulX(transformA, wALocal);
         v.wB = b2Math.MulX(transformB, wBLocal);
         v.w = b2Math.SubtractVV(v.wB, v.wA);
         v.a = 0;
      }
      if (this.m_count > 1) {
         var metric1 = cache.metric;
         var metric2 = this.GetMetric();
         if (metric2 < .5 * metric1 || 2.0 * metric1 < metric2 || metric2 < Number.MIN_VALUE) {
            this.m_count = 0;
         }
      }
      if (this.m_count == 0) {
         v = vertices[0];
         v.indexA = 0;
         v.indexB = 0;
         wALocal = proxyA.GetVertex(0);
         wBLocal = proxyB.GetVertex(0);
         v.wA = b2Math.MulX(transformA, wALocal);
         v.wB = b2Math.MulX(transformB, wBLocal);
         v.w = b2Math.SubtractVV(v.wB, v.wA);
         this.m_count = 1;
      }
   }
   b2Simplex.prototype.WriteCache = function (cache) {
      cache.metric = this.GetMetric();
      cache.count = Box2D.parseUInt(this.m_count);
      var vertices = this.m_vertices;
      for (var i = 0; i < this.m_count; i++) {
         cache.indexA[i] = Box2D.parseUInt(vertices[i].indexA);
         cache.indexB[i] = Box2D.parseUInt(vertices[i].indexB);
      }
   }
   b2Simplex.prototype.GetSearchDirection = function () {
      switch (this.m_count) {
      case 1:
         return this.m_v1.w.GetNegative();
      case 2:
         {
            var e12 = b2Math.SubtractVV(this.m_v2.w, this.m_v1.w);
            var sgn = b2Math.CrossVV(e12, this.m_v1.w.GetNegative());
            if (sgn > 0.0) {
               return b2Math.CrossFV(1.0, e12);
            }
            else {
               return b2Math.CrossVF(e12, 1.0);
            }
         }
      default:
         b2Settings.b2Assert(false);
         return new b2Vec2();
      }
   }
   b2Simplex.prototype.GetClosestPoint = function () {
      switch (this.m_count) {
      case 0:
         b2Settings.b2Assert(false);
         return new b2Vec2();
      case 1:
         return this.m_v1.w;
      case 2:
         return new b2Vec2(this.m_v1.a * this.m_v1.w.x + this.m_v2.a * this.m_v2.w.x, this.m_v1.a * this.m_v1.w.y + this.m_v2.a * this.m_v2.w.y);
      default:
         b2Settings.b2Assert(false);
         return new b2Vec2();
      }
   }
   b2Simplex.prototype.GetWitnessPoints = function (pA, pB) {
      switch (this.m_count) {
      case 0:
         b2Settings.b2Assert(false);
         break;
      case 1:
         pA.SetV(this.m_v1.wA);
         pB.SetV(this.m_v1.wB);
         break;
      case 2:
         pA.x = this.m_v1.a * this.m_v1.wA.x + this.m_v2.a * this.m_v2.wA.x;
         pA.y = this.m_v1.a * this.m_v1.wA.y + this.m_v2.a * this.m_v2.wA.y;
         pB.x = this.m_v1.a * this.m_v1.wB.x + this.m_v2.a * this.m_v2.wB.x;
         pB.y = this.m_v1.a * this.m_v1.wB.y + this.m_v2.a * this.m_v2.wB.y;
         break;
      case 3:
         pB.x = pA.x = this.m_v1.a * this.m_v1.wA.x + this.m_v2.a * this.m_v2.wA.x + this.m_v3.a * this.m_v3.wA.x;
         pB.y = pA.y = this.m_v1.a * this.m_v1.wA.y + this.m_v2.a * this.m_v2.wA.y + this.m_v3.a * this.m_v3.wA.y;
         break;
      default:
         b2Settings.b2Assert(false);
         break;
      }
   }
   b2Simplex.prototype.GetMetric = function () {
      switch (this.m_count) {
      case 0:
         b2Settings.b2Assert(false);
         return 0.0;
      case 1:
         return 0.0;
      case 2:
         return b2Math.SubtractVV(this.m_v1.w, this.m_v2.w).Length();
      case 3:
         return b2Math.CrossVV(b2Math.SubtractVV(this.m_v2.w, this.m_v1.w), b2Math.SubtractVV(this.m_v3.w, this.m_v1.w));
      default:
         b2Settings.b2Assert(false);
         return 0.0;
      }
   }
   b2Simplex.prototype.Solve2 = function () {
      var w1 = this.m_v1.w;
      var w2 = this.m_v2.w;
      var e12 = b2Math.SubtractVV(w2, w1);
      var d12_2 = (-(w1.x * e12.x + w1.y * e12.y));
      if (d12_2 <= 0.0) {
         this.m_v1.a = 1.0;
         this.m_count = 1;
         return;
      }
      var d12_1 = (w2.x * e12.x + w2.y * e12.y);
      if (d12_1 <= 0.0) {
         this.m_v2.a = 1.0;
         this.m_count = 1;
         this.m_v1.Set(this.m_v2);
         return;
      }
      var inv_d12 = 1.0 / (d12_1 + d12_2);
      this.m_v1.a = d12_1 * inv_d12;
      this.m_v2.a = d12_2 * inv_d12;
      this.m_count = 2;
   }
   b2Simplex.prototype.Solve3 = function () {
      var w1 = this.m_v1.w;
      var w2 = this.m_v2.w;
      var w3 = this.m_v3.w;
      var e12 = b2Math.SubtractVV(w2, w1);
      var w1e12 = b2Math.Dot(w1, e12);
      var w2e12 = b2Math.Dot(w2, e12);
      var d12_1 = w2e12;
      var d12_2 = (-w1e12);
      var e13 = b2Math.SubtractVV(w3, w1);
      var w1e13 = b2Math.Dot(w1, e13);
      var w3e13 = b2Math.Dot(w3, e13);
      var d13_1 = w3e13;
      var d13_2 = (-w1e13);
      var e23 = b2Math.SubtractVV(w3, w2);
      var w2e23 = b2Math.Dot(w2, e23);
      var w3e23 = b2Math.Dot(w3, e23);
      var d23_1 = w3e23;
      var d23_2 = (-w2e23);
      var n123 = b2Math.CrossVV(e12, e13);
      var d123_1 = n123 * b2Math.CrossVV(w2, w3);
      var d123_2 = n123 * b2Math.CrossVV(w3, w1);
      var d123_3 = n123 * b2Math.CrossVV(w1, w2);
      if (d12_2 <= 0.0 && d13_2 <= 0.0) {
         this.m_v1.a = 1.0;
         this.m_count = 1;
         return;
      }
      if (d12_1 > 0.0 && d12_2 > 0.0 && d123_3 <= 0.0) {
         var inv_d12 = 1.0 / (d12_1 + d12_2);
         this.m_v1.a = d12_1 * inv_d12;
         this.m_v2.a = d12_2 * inv_d12;
         this.m_count = 2;
         return;
      }
      if (d13_1 > 0.0 && d13_2 > 0.0 && d123_2 <= 0.0) {
         var inv_d13 = 1.0 / (d13_1 + d13_2);
         this.m_v1.a = d13_1 * inv_d13;
         this.m_v3.a = d13_2 * inv_d13;
         this.m_count = 2;
         this.m_v2.Set(this.m_v3);
         return;
      }
      if (d12_1 <= 0.0 && d23_2 <= 0.0) {
         this.m_v2.a = 1.0;
         this.m_count = 1;
         this.m_v1.Set(this.m_v2);
         return;
      }
      if (d13_1 <= 0.0 && d23_1 <= 0.0) {
         this.m_v3.a = 1.0;
         this.m_count = 1;
         this.m_v1.Set(this.m_v3);
         return;
      }
      if (d23_1 > 0.0 && d23_2 > 0.0 && d123_1 <= 0.0) {
         var inv_d23 = 1.0 / (d23_1 + d23_2);
         this.m_v2.a = d23_1 * inv_d23;
         this.m_v3.a = d23_2 * inv_d23;
         this.m_count = 2;
         this.m_v1.Set(this.m_v3);
         return;
      }
      var inv_d123 = 1.0 / (d123_1 + d123_2 + d123_3);
      this.m_v1.a = d123_1 * inv_d123;
      this.m_v2.a = d123_2 * inv_d123;
      this.m_v3.a = d123_3 * inv_d123;
      this.m_count = 3;
   }
   b2SimplexCache.b2SimplexCache = function () {
      this.indexA = new Vector_a2j_Number(3);
      this.indexB = new Vector_a2j_Number(3);
   };
   b2SimplexVertex.b2SimplexVertex = function () {};
   b2SimplexVertex.prototype.Set = function (other) {
      this.wA.SetV(other.wA);
      this.wB.SetV(other.wB);
      this.w.SetV(other.w);
      this.a = other.a;
      this.indexA = other.indexA;
      this.indexB = other.indexB;
   }
   b2TimeOfImpact.b2TimeOfImpact = function () {};
   b2TimeOfImpact.TimeOfImpact = function (input) {
      ++b2TimeOfImpact.b2_toiCalls;
      var proxyA = input.proxyA;
      var proxyB = input.proxyB;
      var sweepA = input.sweepA;
      var sweepB = input.sweepB;
      b2Settings.b2Assert(sweepA.t0 == sweepB.t0);
      b2Settings.b2Assert(1.0 - sweepA.t0 > Number.MIN_VALUE);
      var radius = proxyA.m_radius + proxyB.m_radius;
      var tolerance = input.tolerance;
      var alpha = 0.0;
      var k_maxIterations = 1000;
      var iter = 0;
      var target = 0.0;
      b2TimeOfImpact.s_cache.count = 0;
      b2TimeOfImpact.s_distanceInput.useRadii = false;
      for (;;) {
         sweepA.GetTransform(b2TimeOfImpact.s_xfA, alpha);
         sweepB.GetTransform(b2TimeOfImpact.s_xfB, alpha);
         b2TimeOfImpact.s_distanceInput.proxyA = proxyA;
         b2TimeOfImpact.s_distanceInput.proxyB = proxyB;
         b2TimeOfImpact.s_distanceInput.transformA = b2TimeOfImpact.s_xfA;
         b2TimeOfImpact.s_distanceInput.transformB = b2TimeOfImpact.s_xfB;
         b2Distance.Distance(b2TimeOfImpact.s_distanceOutput, b2TimeOfImpact.s_cache, b2TimeOfImpact.s_distanceInput);
         if (b2TimeOfImpact.s_distanceOutput.distance <= 0.0) {
            alpha = 1.0;
            break;
         }
         b2TimeOfImpact.s_fcn.Initialize(b2TimeOfImpact.s_cache, proxyA, b2TimeOfImpact.s_xfA, proxyB, b2TimeOfImpact.s_xfB);
         var separation = b2TimeOfImpact.s_fcn.Evaluate(b2TimeOfImpact.s_xfA, b2TimeOfImpact.s_xfB);
         if (separation <= 0.0) {
            alpha = 1.0;
            break;
         }
         if (iter == 0) {
            if (separation > radius) {
               target = b2Math.Max(radius - tolerance, 0.75 * radius);
            }
            else {
               target = b2Math.Max(separation - tolerance, 0.02 * radius);
            }
         }
         if (separation - target < 0.5 * tolerance) {
            if (iter == 0) {
               alpha = 1.0;
               break;
            }
            break;
         }
         var newAlpha = alpha; {
            var x1 = alpha;
            var x2 = 1.0;
            var f1 = separation;
            sweepA.GetTransform(b2TimeOfImpact.s_xfA, x2);
            sweepB.GetTransform(b2TimeOfImpact.s_xfB, x2);
            var f2 = b2TimeOfImpact.s_fcn.Evaluate(b2TimeOfImpact.s_xfA, b2TimeOfImpact.s_xfB);
            if (f2 >= target) {
               alpha = 1.0;
               break;
            }
            var rootIterCount = 0;
            for (;;) {
               var x = 0;
               if (rootIterCount & 1) {
                  x = x1 + (target - f1) * (x2 - x1) / (f2 - f1);
               }
               else {
                  x = 0.5 * (x1 + x2);
               }
               sweepA.GetTransform(b2TimeOfImpact.s_xfA, x);
               sweepB.GetTransform(b2TimeOfImpact.s_xfB, x);
               var f = b2TimeOfImpact.s_fcn.Evaluate(b2TimeOfImpact.s_xfA, b2TimeOfImpact.s_xfB);
               if (b2Math.Abs(f - target) < 0.025 * tolerance) {
                  newAlpha = x;
                  break;
               }
               if (f > target) {
                  x1 = x;
                  f1 = f;
               }
               else {
                  x2 = x;
                  f2 = f;
               }++rootIterCount;
               ++b2TimeOfImpact.b2_toiRootIters;
               if (rootIterCount == 50) {
                  break;
               }
            }
            b2TimeOfImpact.b2_toiMaxRootIters = b2Math.Max(b2TimeOfImpact.b2_toiMaxRootIters, rootIterCount);
         }
         if (newAlpha < (1.0 + 100.0 * Number.MIN_VALUE) * alpha) {
            break;
         }
         alpha = newAlpha;
         iter++;
         ++b2TimeOfImpact.b2_toiIters;
         if (iter == k_maxIterations) {
            break;
         }
      }
      b2TimeOfImpact.b2_toiMaxIters = b2Math.Max(b2TimeOfImpact.b2_toiMaxIters, iter);
      return alpha;
   }
   Box2D.postDefs.push(function () {
      Box2D.Collision.b2TimeOfImpact.b2_toiCalls = 0;
      Box2D.Collision.b2TimeOfImpact.b2_toiIters = 0;
      Box2D.Collision.b2TimeOfImpact.b2_toiMaxIters = 0;
      Box2D.Collision.b2TimeOfImpact.b2_toiRootIters = 0;
      Box2D.Collision.b2TimeOfImpact.b2_toiMaxRootIters = 0;
      Box2D.Collision.b2TimeOfImpact.s_cache = new b2SimplexCache();
      Box2D.Collision.b2TimeOfImpact.s_distanceInput = new b2DistanceInput();
      Box2D.Collision.b2TimeOfImpact.s_xfA = new b2Transform();
      Box2D.Collision.b2TimeOfImpact.s_xfB = new b2Transform();
      Box2D.Collision.b2TimeOfImpact.s_fcn = new b2SeparationFunction();
      Box2D.Collision.b2TimeOfImpact.s_distanceOutput = new b2DistanceOutput();
   });
   b2TOIInput.b2TOIInput = function () {
      this.proxyA = new b2DistanceProxy();
      this.proxyB = new b2DistanceProxy();
      this.sweepA = new b2Sweep();
      this.sweepB = new b2Sweep();
   };
   b2WorldManifold.b2WorldManifold = function () {
      this.m_normal = new b2Vec2();
   };
   b2WorldManifold.prototype.b2WorldManifold = function () {
      this.m_points = new Vector(b2Settings.b2_maxManifoldPoints);
      for (var i = 0; i < b2Settings.b2_maxManifoldPoints; i++) {
         this.m_points[i] = new b2Vec2();
      }
   }
   b2WorldManifold.prototype.Initialize = function (manifold, xfA, radiusA, xfB, radiusB) {
      if (radiusA === undefined) radiusA = 0;
      if (radiusB === undefined) radiusB = 0;
      if (manifold.m_pointCount == 0) {
         return;
      }
      var i = 0;
      var tVec;
      var tMat;
      var normalX = 0;
      var normalY = 0;
      var planePointX = 0;
      var planePointY = 0;
      var clipPointX = 0;
      var clipPointY = 0;
      switch (manifold.m_type) {
      case b2Manifold.e_circles:
         {
            tMat = xfA.R;
            tVec = manifold.m_localPoint;
            var pointAX = xfA.position.x + tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;
            var pointAY = xfA.position.y + tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;
            tMat = xfB.R;
            tVec = manifold.m_points[0].m_localPoint;
            var pointBX = xfB.position.x + tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;
            var pointBY = xfB.position.y + tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;
            var dX = pointBX - pointAX;
            var dY = pointBY - pointAY;
            var d2 = dX * dX + dY * dY;
            if (d2 > Number.MIN_VALUE * Number.MIN_VALUE) {
               var d = Math.sqrt(d2);
               this.m_normal.x = dX / d;
               this.m_normal.y = dY / d;
            }
            else {
               this.m_normal.x = 1;
               this.m_normal.y = 0;
            }
            var cAX = pointAX + radiusA * this.m_normal.x;
            var cAY = pointAY + radiusA * this.m_normal.y;
            var cBX = pointBX - radiusB * this.m_normal.x;
            var cBY = pointBY - radiusB * this.m_normal.y;
            this.m_points[0].x = 0.5 * (cAX + cBX);
            this.m_points[0].y = 0.5 * (cAY + cBY);
         }
         break;
      case b2Manifold.e_faceA:
         {
            tMat = xfA.R;
            tVec = manifold.m_localPlaneNormal;
            normalX = tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;
            normalY = tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;
            tMat = xfA.R;
            tVec = manifold.m_localPoint;
            planePointX = xfA.position.x + tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;
            planePointY = xfA.position.y + tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;
            this.m_normal.x = normalX;
            this.m_normal.y = normalY;
            for (i = 0;
            i < manifold.m_pointCount; i++) {
               tMat = xfB.R;
               tVec = manifold.m_points[i].m_localPoint;
               clipPointX = xfB.position.x + tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;
               clipPointY = xfB.position.y + tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;
               this.m_points[i].x = clipPointX + 0.5 * (radiusA - (clipPointX - planePointX) * normalX - (clipPointY - planePointY) * normalY - radiusB) * normalX;
               this.m_points[i].y = clipPointY + 0.5 * (radiusA - (clipPointX - planePointX) * normalX - (clipPointY - planePointY) * normalY - radiusB) * normalY;
            }
         }
         break;
      case b2Manifold.e_faceB:
         {
            tMat = xfB.R;
            tVec = manifold.m_localPlaneNormal;
            normalX = tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;
            normalY = tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;
            tMat = xfB.R;
            tVec = manifold.m_localPoint;
            planePointX = xfB.position.x + tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;
            planePointY = xfB.position.y + tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;
            this.m_normal.x = (-normalX);
            this.m_normal.y = (-normalY);
            for (i = 0;
            i < manifold.m_pointCount; i++) {
               tMat = xfA.R;
               tVec = manifold.m_points[i].m_localPoint;
               clipPointX = xfA.position.x + tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;
               clipPointY = xfA.position.y + tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;
               this.m_points[i].x = clipPointX + 0.5 * (radiusB - (clipPointX - planePointX) * normalX - (clipPointY - planePointY) * normalY - radiusA) * normalX;
               this.m_points[i].y = clipPointY + 0.5 * (radiusB - (clipPointX - planePointX) * normalX - (clipPointY - planePointY) * normalY - radiusA) * normalY;
            }
         }
         break;
      }
   }
   ClipVertex.ClipVertex = function () {
      this.v = new b2Vec2();
      this.id = new b2ContactID();
   };
   ClipVertex.prototype.Set = function (other) {
      this.v.SetV(other.v);
      this.id.Set(other.id);
   }
   Features.Features = function () {};
   Object.defineProperty(Features.prototype, 'referenceEdge', {
      enumerable: false,
      configurable: true,
      get: function () {
         return this._referenceEdge;
      }
   });
   Object.defineProperty(Features.prototype, 'referenceEdge', {
      enumerable: false,
      configurable: true,
      set: function (value) {
         if (value === undefined) value = 0;
         this._referenceEdge = value;
         this._m_id._key = (this._m_id._key & 0xffffff00) | (this._referenceEdge & 0x000000ff);
      }
   });
   Object.defineProperty(Features.prototype, 'incidentEdge', {
      enumerable: false,
      configurable: true,
      get: function () {
         return this._incidentEdge;
      }
   });
   Object.defineProperty(Features.prototype, 'incidentEdge', {
      enumerable: false,
      configurable: true,
      set: function (value) {
         if (value === undefined) value = 0;
         this._incidentEdge = value;
         this._m_id._key = (this._m_id._key & 0xffff00ff) | ((this._incidentEdge << 8) & 0x0000ff00);
      }
   });
   Object.defineProperty(Features.prototype, 'incidentVertex', {
      enumerable: false,
      configurable: true,
      get: function () {
         return this._incidentVertex;
      }
   });
   Object.defineProperty(Features.prototype, 'incidentVertex', {
      enumerable: false,
      configurable: true,
      set: function (value) {
         if (value === undefined) value = 0;
         this._incidentVertex = value;
         this._m_id._key = (this._m_id._key & 0xff00ffff) | ((this._incidentVertex << 16) & 0x00ff0000);
      }
   });
   Object.defineProperty(Features.prototype, 'flip', {
      enumerable: false,
      configurable: true,
      get: function () {
         return this._flip;
      }
   });
   Object.defineProperty(Features.prototype, 'flip', {
      enumerable: false,
      configurable: true,
      set: function (value) {
         if (value === undefined) value = 0;
         this._flip = value;
         this._m_id._key = (this._m_id._key & 0x00ffffff) | ((this._flip << 24) & 0xff000000);
      }
   });
})();
(function () {
   var b2Color = Box2D.Common.b2Color,
      b2internal = Box2D.Common.b2internal,
      b2Settings = Box2D.Common.b2Settings,
      b2CircleShape = Box2D.Collision.Shapes.b2CircleShape,
      b2EdgeChainDef = Box2D.Collision.Shapes.b2EdgeChainDef,
      b2EdgeShape = Box2D.Collision.Shapes.b2EdgeShape,
      b2MassData = Box2D.Collision.Shapes.b2MassData,
      b2PolygonShape = Box2D.Collision.Shapes.b2PolygonShape,
      b2Shape = Box2D.Collision.Shapes.b2Shape,
      b2Mat22 = Box2D.Common.Math.b2Mat22,
      b2Mat33 = Box2D.Common.Math.b2Mat33,
      b2Math = Box2D.Common.Math.b2Math,
      b2Sweep = Box2D.Common.Math.b2Sweep,
      b2Transform = Box2D.Common.Math.b2Transform,
      b2Vec2 = Box2D.Common.Math.b2Vec2,
      b2Vec3 = Box2D.Common.Math.b2Vec3,
      b2Body = Box2D.Dynamics.b2Body,
      b2BodyDef = Box2D.Dynamics.b2BodyDef,
      b2ContactFilter = Box2D.Dynamics.b2ContactFilter,
      b2ContactImpulse = Box2D.Dynamics.b2ContactImpulse,
      b2ContactListener = Box2D.Dynamics.b2ContactListener,
      b2ContactManager = Box2D.Dynamics.b2ContactManager,
      b2DebugDraw = Box2D.Dynamics.b2DebugDraw,
      b2DestructionListener = Box2D.Dynamics.b2DestructionListener,
      b2FilterData = Box2D.Dynamics.b2FilterData,
      b2Fixture = Box2D.Dynamics.b2Fixture,
      b2FixtureDef = Box2D.Dynamics.b2FixtureDef,
      b2Island = Box2D.Dynamics.b2Island,
      b2TimeStep = Box2D.Dynamics.b2TimeStep,
      b2World = Box2D.Dynamics.b2World,
      b2AABB = Box2D.Collision.b2AABB,
      b2Bound = Box2D.Collision.b2Bound,
      b2BoundValues = Box2D.Collision.b2BoundValues,
      b2Collision = Box2D.Collision.b2Collision,
      b2ContactID = Box2D.Collision.b2ContactID,
      b2ContactPoint = Box2D.Collision.b2ContactPoint,
      b2Distance = Box2D.Collision.b2Distance,
      b2DistanceInput = Box2D.Collision.b2DistanceInput,
      b2DistanceOutput = Box2D.Collision.b2DistanceOutput,
      b2DistanceProxy = Box2D.Collision.b2DistanceProxy,
      b2DynamicTree = Box2D.Collision.b2DynamicTree,
      b2DynamicTreeBroadPhase = Box2D.Collision.b2DynamicTreeBroadPhase,
      b2DynamicTreeNode = Box2D.Collision.b2DynamicTreeNode,
      b2DynamicTreePair = Box2D.Collision.b2DynamicTreePair,
      b2Manifold = Box2D.Collision.b2Manifold,
      b2ManifoldPoint = Box2D.Collision.b2ManifoldPoint,
      b2Point = Box2D.Collision.b2Point,
      b2RayCastInput = Box2D.Collision.b2RayCastInput,
      b2RayCastOutput = Box2D.Collision.b2RayCastOutput,
      b2Segment = Box2D.Collision.b2Segment,
      b2SeparationFunction = Box2D.Collision.b2SeparationFunction,
      b2Simplex = Box2D.Collision.b2Simplex,
      b2SimplexCache = Box2D.Collision.b2SimplexCache,
      b2SimplexVertex = Box2D.Collision.b2SimplexVertex,
      b2TimeOfImpact = Box2D.Collision.b2TimeOfImpact,
      b2TOIInput = Box2D.Collision.b2TOIInput,
      b2WorldManifold = Box2D.Collision.b2WorldManifold,
      ClipVertex = Box2D.Collision.ClipVertex,
      Features = Box2D.Collision.Features,
      IBroadPhase = Box2D.Collision.IBroadPhase;

   Box2D.inherit(b2CircleShape, Box2D.Collision.Shapes.b2Shape);
   b2CircleShape.prototype.__super = Box2D.Collision.Shapes.b2Shape.prototype;
   b2CircleShape.b2CircleShape = function () {
      Box2D.Collision.Shapes.b2Shape.b2Shape.apply(this, arguments);
      this.m_p = new b2Vec2();
   };
   b2CircleShape.prototype.Copy = function () {
      var s = new b2CircleShape();
      s.Set(this);
      return s;
   }
   b2CircleShape.prototype.Set = function (other) {
      this.__super.Set.call(this, other);
      if (Box2D.is(other, b2CircleShape)) {
         var other2 = (other instanceof b2CircleShape ? other : null);
         this.m_p.SetV(other2.m_p);
      }
   }
   b2CircleShape.prototype.TestPoint = function (transform, p) {
      var tMat = transform.R;
      var dX = transform.position.x + (tMat.col1.x * this.m_p.x + tMat.col2.x * this.m_p.y);
      var dY = transform.position.y + (tMat.col1.y * this.m_p.x + tMat.col2.y * this.m_p.y);
      dX = p.x - dX;
      dY = p.y - dY;
      return (dX * dX + dY * dY) <= this.m_radius * this.m_radius;
   }
   b2CircleShape.prototype.RayCast = function (output, input, transform) {
      var tMat = transform.R;
      var positionX = transform.position.x + (tMat.col1.x * this.m_p.x + tMat.col2.x * this.m_p.y);
      var positionY = transform.position.y + (tMat.col1.y * this.m_p.x + tMat.col2.y * this.m_p.y);
      var sX = input.p1.x - positionX;
      var sY = input.p1.y - positionY;
      var b = (sX * sX + sY * sY) - this.m_radius * this.m_radius;
      var rX = input.p2.x - input.p1.x;
      var rY = input.p2.y - input.p1.y;
      var c = (sX * rX + sY * rY);
      var rr = (rX * rX + rY * rY);
      var sigma = c * c - rr * b;
      if (sigma < 0.0 || rr < Number.MIN_VALUE) {
         return false;
      }
      var a = (-(c + Math.sqrt(sigma)));
      if (0.0 <= a && a <= input.maxFraction * rr) {
         a /= rr;
         output.fraction = a;
         output.normal.x = sX + a * rX;
         output.normal.y = sY + a * rY;
         output.normal.Normalize();
         return true;
      }
      return false;
   }
   b2CircleShape.prototype.ComputeAABB = function (aabb, transform) {
      var tMat = transform.R;
      var pX = transform.position.x + (tMat.col1.x * this.m_p.x + tMat.col2.x * this.m_p.y);
      var pY = transform.position.y + (tMat.col1.y * this.m_p.x + tMat.col2.y * this.m_p.y);
      aabb.lowerBound.Set(pX - this.m_radius, pY - this.m_radius);
      aabb.upperBound.Set(pX + this.m_radius, pY + this.m_radius);
   }
   b2CircleShape.prototype.ComputeMass = function (massData, density) {
      if (density === undefined) density = 0;
      massData.mass = density * b2Settings.b2_pi * this.m_radius * this.m_radius;
      massData.center.SetV(this.m_p);
      massData.I = massData.mass * (0.5 * this.m_radius * this.m_radius + (this.m_p.x * this.m_p.x + this.m_p.y * this.m_p.y));
   }
   b2CircleShape.prototype.ComputeSubmergedArea = function (normal, offset, xf, c) {
      if (offset === undefined) offset = 0;
      var p = b2Math.MulX(xf, this.m_p);
      var l = (-(b2Math.Dot(normal, p) - offset));
      if (l < (-this.m_radius) + Number.MIN_VALUE) {
         return 0;
      }
      if (l > this.m_radius) {
         c.SetV(p);
         return Math.PI * this.m_radius * this.m_radius;
      }
      var r2 = this.m_radius * this.m_radius;
      var l2 = l * l;
      var area = r2 * (Math.asin(l / this.m_radius) + Math.PI / 2) + l * Math.sqrt(r2 - l2);
      var com = (-2 / 3 * Math.pow(r2 - l2, 1.5) / area);
      c.x = p.x + normal.x * com;
      c.y = p.y + normal.y * com;
      return area;
   }
   b2CircleShape.prototype.GetLocalPosition = function () {
      return this.m_p;
   }
   b2CircleShape.prototype.SetLocalPosition = function (position) {
      this.m_p.SetV(position);
   }
   b2CircleShape.prototype.GetRadius = function () {
      return this.m_radius;
   }
   b2CircleShape.prototype.SetRadius = function (radius) {
      if (radius === undefined) radius = 0;
      this.m_radius = radius;
   }
   b2CircleShape.prototype.b2CircleShape = function (radius) {
      if (radius === undefined) radius = 0;
      this.__super.b2Shape.call(this);
      this.m_type = b2Shape.e_circleShape;
      this.m_radius = radius;
   }
   b2EdgeChainDef.b2EdgeChainDef = function () {};
   b2EdgeChainDef.prototype.b2EdgeChainDef = function () {
      this.vertexCount = 0;
      this.isALoop = true;
      this.vertices = [];
   }
   Box2D.inherit(b2EdgeShape, Box2D.Collision.Shapes.b2Shape);
   b2EdgeShape.prototype.__super = Box2D.Collision.Shapes.b2Shape.prototype;
   b2EdgeShape.b2EdgeShape = function () {
      Box2D.Collision.Shapes.b2Shape.b2Shape.apply(this, arguments);
      this.s_supportVec = new b2Vec2();
      this.m_v1 = new b2Vec2();
      this.m_v2 = new b2Vec2();
      this.m_coreV1 = new b2Vec2();
      this.m_coreV2 = new b2Vec2();
      this.m_normal = new b2Vec2();
      this.m_direction = new b2Vec2();
      this.m_cornerDir1 = new b2Vec2();
      this.m_cornerDir2 = new b2Vec2();
   };
   b2EdgeShape.prototype.TestPoint = function (transform, p) {
      return false;
   }
   b2EdgeShape.prototype.RayCast = function (output, input, transform) {
      var tMat;
      var rX = input.p2.x - input.p1.x;
      var rY = input.p2.y - input.p1.y;
      tMat = transform.R;
      var v1X = transform.position.x + (tMat.col1.x * this.m_v1.x + tMat.col2.x * this.m_v1.y);
      var v1Y = transform.position.y + (tMat.col1.y * this.m_v1.x + tMat.col2.y * this.m_v1.y);
      var nX = transform.position.y + (tMat.col1.y * this.m_v2.x + tMat.col2.y * this.m_v2.y) - v1Y;
      var nY = (-(transform.position.x + (tMat.col1.x * this.m_v2.x + tMat.col2.x * this.m_v2.y) - v1X));
      var k_slop = 100.0 * Number.MIN_VALUE;
      var denom = (-(rX * nX + rY * nY));
      if (denom > k_slop) {
         var bX = input.p1.x - v1X;
         var bY = input.p1.y - v1Y;
         var a = (bX * nX + bY * nY);
         if (0.0 <= a && a <= input.maxFraction * denom) {
            var mu2 = (-rX * bY) + rY * bX;
            if ((-k_slop * denom) <= mu2 && mu2 <= denom * (1.0 + k_slop)) {
               a /= denom;
               output.fraction = a;
               var nLen = Math.sqrt(nX * nX + nY * nY);
               output.normal.x = nX / nLen;
               output.normal.y = nY / nLen;
               return true;
            }
         }
      }
      return false;
   }
   b2EdgeShape.prototype.ComputeAABB = function (aabb, transform) {
      var tMat = transform.R;
      var v1X = transform.position.x + (tMat.col1.x * this.m_v1.x + tMat.col2.x * this.m_v1.y);
      var v1Y = transform.position.y + (tMat.col1.y * this.m_v1.x + tMat.col2.y * this.m_v1.y);
      var v2X = transform.position.x + (tMat.col1.x * this.m_v2.x + tMat.col2.x * this.m_v2.y);
      var v2Y = transform.position.y + (tMat.col1.y * this.m_v2.x + tMat.col2.y * this.m_v2.y);
      if (v1X < v2X) {
         aabb.lowerBound.x = v1X;
         aabb.upperBound.x = v2X;
      }
      else {
         aabb.lowerBound.x = v2X;
         aabb.upperBound.x = v1X;
      }
      if (v1Y < v2Y) {
         aabb.lowerBound.y = v1Y;
         aabb.upperBound.y = v2Y;
      }
      else {
         aabb.lowerBound.y = v2Y;
         aabb.upperBound.y = v1Y;
      }
   }
   b2EdgeShape.prototype.ComputeMass = function (massData, density) {
      if (density === undefined) density = 0;
      massData.mass = 0;
      massData.center.SetV(this.m_v1);
      massData.I = 0;
   }
   b2EdgeShape.prototype.ComputeSubmergedArea = function (normal, offset, xf, c) {
      if (offset === undefined) offset = 0;
      var v0 = new b2Vec2(normal.x * offset, normal.y * offset);
      var v1 = b2Math.MulX(xf, this.m_v1);
      var v2 = b2Math.MulX(xf, this.m_v2);
      var d1 = b2Math.Dot(normal, v1) - offset;
      var d2 = b2Math.Dot(normal, v2) - offset;
      if (d1 > 0) {
         if (d2 > 0) {
            return 0;
         }
         else {
            v1.x = (-d2 / (d1 - d2) * v1.x) + d1 / (d1 - d2) * v2.x;
            v1.y = (-d2 / (d1 - d2) * v1.y) + d1 / (d1 - d2) * v2.y;
         }
      }
      else {
         if (d2 > 0) {
            v2.x = (-d2 / (d1 - d2) * v1.x) + d1 / (d1 - d2) * v2.x;
            v2.y = (-d2 / (d1 - d2) * v1.y) + d1 / (d1 - d2) * v2.y;
         }
         else {}
      }
      c.x = (v0.x + v1.x + v2.x) / 3;
      c.y = (v0.y + v1.y + v2.y) / 3;
      return 0.5 * ((v1.x - v0.x) * (v2.y - v0.y) - (v1.y - v0.y) * (v2.x - v0.x));
   }
   b2EdgeShape.prototype.GetLength = function () {
      return this.m_length;
   }
   b2EdgeShape.prototype.GetVertex1 = function () {
      return this.m_v1;
   }
   b2EdgeShape.prototype.GetVertex2 = function () {
      return this.m_v2;
   }
   b2EdgeShape.prototype.GetCoreVertex1 = function () {
      return this.m_coreV1;
   }
   b2EdgeShape.prototype.GetCoreVertex2 = function () {
      return this.m_coreV2;
   }
   b2EdgeShape.prototype.GetNormalVector = function () {
      return this.m_normal;
   }
   b2EdgeShape.prototype.GetDirectionVector = function () {
      return this.m_direction;
   }
   b2EdgeShape.prototype.GetCorner1Vector = function () {
      return this.m_cornerDir1;
   }
   b2EdgeShape.prototype.GetCorner2Vector = function () {
      return this.m_cornerDir2;
   }
   b2EdgeShape.prototype.Corner1IsConvex = function () {
      return this.m_cornerConvex1;
   }
   b2EdgeShape.prototype.Corner2IsConvex = function () {
      return this.m_cornerConvex2;
   }
   b2EdgeShape.prototype.GetFirstVertex = function (xf) {
      var tMat = xf.R;
      return new b2Vec2(xf.position.x + (tMat.col1.x * this.m_coreV1.x + tMat.col2.x * this.m_coreV1.y), xf.position.y + (tMat.col1.y * this.m_coreV1.x + tMat.col2.y * this.m_coreV1.y));
   }
   b2EdgeShape.prototype.GetNextEdge = function () {
      return this.m_nextEdge;
   }
   b2EdgeShape.prototype.GetPrevEdge = function () {
      return this.m_prevEdge;
   }
   b2EdgeShape.prototype.Support = function (xf, dX, dY) {
      if (dX === undefined) dX = 0;
      if (dY === undefined) dY = 0;
      var tMat = xf.R;
      var v1X = xf.position.x + (tMat.col1.x * this.m_coreV1.x + tMat.col2.x * this.m_coreV1.y);
      var v1Y = xf.position.y + (tMat.col1.y * this.m_coreV1.x + tMat.col2.y * this.m_coreV1.y);
      var v2X = xf.position.x + (tMat.col1.x * this.m_coreV2.x + tMat.col2.x * this.m_coreV2.y);
      var v2Y = xf.position.y + (tMat.col1.y * this.m_coreV2.x + tMat.col2.y * this.m_coreV2.y);
      if ((v1X * dX + v1Y * dY) > (v2X * dX + v2Y * dY)) {
         this.s_supportVec.x = v1X;
         this.s_supportVec.y = v1Y;
      }
      else {
         this.s_supportVec.x = v2X;
         this.s_supportVec.y = v2Y;
      }
      return this.s_supportVec;
   }
   b2EdgeShape.prototype.b2EdgeShape = function (v1, v2) {
      this.__super.b2Shape.call(this);
      this.m_type = b2Shape.e_edgeShape;
      this.m_prevEdge = null;
      this.m_nextEdge = null;
      this.m_v1 = v1;
      this.m_v2 = v2;
      this.m_direction.Set(this.m_v2.x - this.m_v1.x, this.m_v2.y - this.m_v1.y);
      this.m_length = this.m_direction.Normalize();
      this.m_normal.Set(this.m_direction.y, (-this.m_direction.x));
      this.m_coreV1.Set((-b2Settings.b2_toiSlop * (this.m_normal.x - this.m_direction.x)) + this.m_v1.x, (-b2Settings.b2_toiSlop * (this.m_normal.y - this.m_direction.y)) + this.m_v1.y);
      this.m_coreV2.Set((-b2Settings.b2_toiSlop * (this.m_normal.x + this.m_direction.x)) + this.m_v2.x, (-b2Settings.b2_toiSlop * (this.m_normal.y + this.m_direction.y)) + this.m_v2.y);
      this.m_cornerDir1 = this.m_normal;
      this.m_cornerDir2.Set((-this.m_normal.x), (-this.m_normal.y));
   }
   b2EdgeShape.prototype.SetPrevEdge = function (edge, core, cornerDir, convex) {
      this.m_prevEdge = edge;
      this.m_coreV1 = core;
      this.m_cornerDir1 = cornerDir;
      this.m_cornerConvex1 = convex;
   }
   b2EdgeShape.prototype.SetNextEdge = function (edge, core, cornerDir, convex) {
      this.m_nextEdge = edge;
      this.m_coreV2 = core;
      this.m_cornerDir2 = cornerDir;
      this.m_cornerConvex2 = convex;
   }
   b2MassData.b2MassData = function () {
      this.mass = 0.0;
      this.center = new b2Vec2(0, 0);
      this.I = 0.0;
   };
   Box2D.inherit(b2PolygonShape, Box2D.Collision.Shapes.b2Shape);
   b2PolygonShape.prototype.__super = Box2D.Collision.Shapes.b2Shape.prototype;
   b2PolygonShape.b2PolygonShape = function () {
      Box2D.Collision.Shapes.b2Shape.b2Shape.apply(this, arguments);
   };
   b2PolygonShape.prototype.Copy = function () {
      var s = new b2PolygonShape();
      s.Set(this);
      return s;
   }
   b2PolygonShape.prototype.Set = function (other) {
      this.__super.Set.call(this, other);
      if (Box2D.is(other, b2PolygonShape)) {
         var other2 = (other instanceof b2PolygonShape ? other : null);
         this.m_centroid.SetV(other2.m_centroid);
         this.m_vertexCount = other2.m_vertexCount;
         this.Reserve(this.m_vertexCount);
         for (var i = 0; i < this.m_vertexCount; i++) {
            this.m_vertices[i].SetV(other2.m_vertices[i]);
            this.m_normals[i].SetV(other2.m_normals[i]);
         }
      }
   }
   b2PolygonShape.prototype.SetAsArray = function (vertices, vertexCount) {
      if (vertexCount === undefined) vertexCount = 0;
      var v = new Vector();
      var i = 0,
         tVec;
      for (i = 0;
      i < vertices.length; ++i) {
         tVec = vertices[i];
         v.push(tVec);
      }
      this.SetAsVector(v, vertexCount);
   }
   b2PolygonShape.AsArray = function (vertices, vertexCount) {
      if (vertexCount === undefined) vertexCount = 0;
      var polygonShape = new b2PolygonShape();
      polygonShape.SetAsArray(vertices, vertexCount);
      return polygonShape;
   }
   b2PolygonShape.prototype.SetAsVector = function (vertices, vertexCount) {
      if (vertexCount === undefined) vertexCount = 0;
      if (vertexCount == 0) vertexCount = vertices.length;
      b2Settings.b2Assert(2 <= vertexCount);
      this.m_vertexCount = vertexCount;
      this.Reserve(vertexCount);
      var i = 0;
      for (i = 0;
      i < this.m_vertexCount; i++) {
         this.m_vertices[i].SetV(vertices[i]);
      }
      for (i = 0;
      i < this.m_vertexCount; ++i) {
         var i1 = parseInt(i);
         var i2 = parseInt(i + 1 < this.m_vertexCount ? i + 1 : 0);
         var edge = b2Math.SubtractVV(this.m_vertices[i2], this.m_vertices[i1]);
         b2Settings.b2Assert(edge.LengthSquared() > Number.MIN_VALUE);
         this.m_normals[i].SetV(b2Math.CrossVF(edge, 1.0));
         this.m_normals[i].Normalize();
      }
      this.m_centroid = b2PolygonShape.ComputeCentroid(this.m_vertices, this.m_vertexCount);
   }
   b2PolygonShape.AsVector = function (vertices, vertexCount) {
      if (vertexCount === undefined) vertexCount = 0;
      var polygonShape = new b2PolygonShape();
      polygonShape.SetAsVector(vertices, vertexCount);
      return polygonShape;
   }
   b2PolygonShape.prototype.SetAsBox = function (hx, hy) {
      if (hx === undefined) hx = 0;
      if (hy === undefined) hy = 0;
      this.m_vertexCount = 4;
      this.Reserve(4);
      this.m_vertices[0].Set((-hx), (-hy));
      this.m_vertices[1].Set(hx, (-hy));
      this.m_vertices[2].Set(hx, hy);
      this.m_vertices[3].Set((-hx), hy);
      this.m_normals[0].Set(0.0, (-1.0));
      this.m_normals[1].Set(1.0, 0.0);
      this.m_normals[2].Set(0.0, 1.0);
      this.m_normals[3].Set((-1.0), 0.0);
      this.m_centroid.SetZero();
   }
   b2PolygonShape.AsBox = function (hx, hy) {
      if (hx === undefined) hx = 0;
      if (hy === undefined) hy = 0;
      var polygonShape = new b2PolygonShape();
      polygonShape.SetAsBox(hx, hy);
      return polygonShape;
   }
   b2PolygonShape.prototype.SetAsOrientedBox = function (hx, hy, center, angle) {
      if (hx === undefined) hx = 0;
      if (hy === undefined) hy = 0;
      if (center === undefined) center = null;
      if (angle === undefined) angle = 0.0;
      this.m_vertexCount = 4;
      this.Reserve(4);
      this.m_vertices[0].Set((-hx), (-hy));
      this.m_vertices[1].Set(hx, (-hy));
      this.m_vertices[2].Set(hx, hy);
      this.m_vertices[3].Set((-hx), hy);
      this.m_normals[0].Set(0.0, (-1.0));
      this.m_normals[1].Set(1.0, 0.0);
      this.m_normals[2].Set(0.0, 1.0);
      this.m_normals[3].Set((-1.0), 0.0);
      this.m_centroid = center;
      var xf = new b2Transform();
      xf.position = center;
      xf.R.Set(angle);
      for (var i = 0; i < this.m_vertexCount; ++i) {
         this.m_vertices[i] = b2Math.MulX(xf, this.m_vertices[i]);
         this.m_normals[i] = b2Math.MulMV(xf.R, this.m_normals[i]);
      }
   }
   b2PolygonShape.AsOrientedBox = function (hx, hy, center, angle) {
      if (hx === undefined) hx = 0;
      if (hy === undefined) hy = 0;
      if (center === undefined) center = null;
      if (angle === undefined) angle = 0.0;
      var polygonShape = new b2PolygonShape();
      polygonShape.SetAsOrientedBox(hx, hy, center, angle);
      return polygonShape;
   }
   b2PolygonShape.prototype.SetAsEdge = function (v1, v2) {
      this.m_vertexCount = 2;
      this.Reserve(2);
      this.m_vertices[0].SetV(v1);
      this.m_vertices[1].SetV(v2);
      this.m_centroid.x = 0.5 * (v1.x + v2.x);
      this.m_centroid.y = 0.5 * (v1.y + v2.y);
      this.m_normals[0] = b2Math.CrossVF(b2Math.SubtractVV(v2, v1), 1.0);
      this.m_normals[0].Normalize();
      this.m_normals[1].x = (-this.m_normals[0].x);
      this.m_normals[1].y = (-this.m_normals[0].y);
   }
   b2PolygonShape.AsEdge = function (v1, v2) {
      var polygonShape = new b2PolygonShape();
      polygonShape.SetAsEdge(v1, v2);
      return polygonShape;
   }
   b2PolygonShape.prototype.TestPoint = function (xf, p) {
      var tVec;
      var tMat = xf.R;
      var tX = p.x - xf.position.x;
      var tY = p.y - xf.position.y;
      var pLocalX = (tX * tMat.col1.x + tY * tMat.col1.y);
      var pLocalY = (tX * tMat.col2.x + tY * tMat.col2.y);
      for (var i = 0; i < this.m_vertexCount; ++i) {
         tVec = this.m_vertices[i];
         tX = pLocalX - tVec.x;
         tY = pLocalY - tVec.y;
         tVec = this.m_normals[i];
         var dot = (tVec.x * tX + tVec.y * tY);
         if (dot > 0.0) {
            return false;
         }
      }
      return true;
   }
   b2PolygonShape.prototype.RayCast = function (output, input, transform) {
      var lower = 0.0;
      var upper = input.maxFraction;
      var tX = 0;
      var tY = 0;
      var tMat;
      var tVec;
      tX = input.p1.x - transform.position.x;
      tY = input.p1.y - transform.position.y;
      tMat = transform.R;
      var p1X = (tX * tMat.col1.x + tY * tMat.col1.y);
      var p1Y = (tX * tMat.col2.x + tY * tMat.col2.y);
      tX = input.p2.x - transform.position.x;
      tY = input.p2.y - transform.position.y;
      tMat = transform.R;
      var p2X = (tX * tMat.col1.x + tY * tMat.col1.y);
      var p2Y = (tX * tMat.col2.x + tY * tMat.col2.y);
      var dX = p2X - p1X;
      var dY = p2Y - p1Y;
      var index = parseInt((-1));
      for (var i = 0; i < this.m_vertexCount; ++i) {
         tVec = this.m_vertices[i];
         tX = tVec.x - p1X;
         tY = tVec.y - p1Y;
         tVec = this.m_normals[i];
         var numerator = (tVec.x * tX + tVec.y * tY);
         var denominator = (tVec.x * dX + tVec.y * dY);
         if (denominator == 0.0) {
            if (numerator < 0.0) {
               return false;
            }
         }
         else {
            if (denominator < 0.0 && numerator < lower * denominator) {
               lower = numerator / denominator;
               index = i;
            }
            else if (denominator > 0.0 && numerator < upper * denominator) {
               upper = numerator / denominator;
            }
         }
         if (upper < lower - Number.MIN_VALUE) {
            return false;
         }
      }
      if (index >= 0) {
         output.fraction = lower;
         tMat = transform.R;
         tVec = this.m_normals[index];
         output.normal.x = (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
         output.normal.y = (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
         return true;
      }
      return false;
   }
   b2PolygonShape.prototype.ComputeAABB = function (aabb, xf) {
      var tMat = xf.R;
      var tVec = this.m_vertices[0];
      var lowerX = xf.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
      var lowerY = xf.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
      var upperX = lowerX;
      var upperY = lowerY;
      for (var i = 1; i < this.m_vertexCount; ++i) {
         tVec = this.m_vertices[i];
         var vX = xf.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
         var vY = xf.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
         lowerX = lowerX < vX ? lowerX : vX;
         lowerY = lowerY < vY ? lowerY : vY;
         upperX = upperX > vX ? upperX : vX;
         upperY = upperY > vY ? upperY : vY;
      }
      aabb.lowerBound.x = lowerX - this.m_radius;
      aabb.lowerBound.y = lowerY - this.m_radius;
      aabb.upperBound.x = upperX + this.m_radius;
      aabb.upperBound.y = upperY + this.m_radius;
   }
   b2PolygonShape.prototype.ComputeMass = function (massData, density) {
      if (density === undefined) density = 0;
      if (this.m_vertexCount == 2) {
         massData.center.x = 0.5 * (this.m_vertices[0].x + this.m_vertices[1].x);
         massData.center.y = 0.5 * (this.m_vertices[0].y + this.m_vertices[1].y);
         massData.mass = 0.0;
         massData.I = 0.0;
         return;
      }
      var centerX = 0.0;
      var centerY = 0.0;
      var area = 0.0;
      var I = 0.0;
      var p1X = 0.0;
      var p1Y = 0.0;
      var k_inv3 = 1.0 / 3.0;
      for (var i = 0; i < this.m_vertexCount; ++i) {
         var p2 = this.m_vertices[i];
         var p3 = i + 1 < this.m_vertexCount ? this.m_vertices[parseInt(i + 1)] : this.m_vertices[0];
         var e1X = p2.x - p1X;
         var e1Y = p2.y - p1Y;
         var e2X = p3.x - p1X;
         var e2Y = p3.y - p1Y;
         var D = e1X * e2Y - e1Y * e2X;
         var triangleArea = 0.5 * D;area += triangleArea;
         centerX += triangleArea * k_inv3 * (p1X + p2.x + p3.x);
         centerY += triangleArea * k_inv3 * (p1Y + p2.y + p3.y);
         var px = p1X;
         var py = p1Y;
         var ex1 = e1X;
         var ey1 = e1Y;
         var ex2 = e2X;
         var ey2 = e2Y;
         var intx2 = k_inv3 * (0.25 * (ex1 * ex1 + ex2 * ex1 + ex2 * ex2) + (px * ex1 + px * ex2)) + 0.5 * px * px;
         var inty2 = k_inv3 * (0.25 * (ey1 * ey1 + ey2 * ey1 + ey2 * ey2) + (py * ey1 + py * ey2)) + 0.5 * py * py;I += D * (intx2 + inty2);
      }
      massData.mass = density * area;
      centerX *= 1.0 / area;
      centerY *= 1.0 / area;
      massData.center.Set(centerX, centerY);
      massData.I = density * I;
   }
   b2PolygonShape.prototype.ComputeSubmergedArea = function (normal, offset, xf, c) {
      if (offset === undefined) offset = 0;
      var normalL = b2Math.MulTMV(xf.R, normal);
      var offsetL = offset - b2Math.Dot(normal, xf.position);
      var depths = new Vector_a2j_Number();
      var diveCount = 0;
      var intoIndex = parseInt((-1));
      var outoIndex = parseInt((-1));
      var lastSubmerged = false;
      var i = 0;
      for (i = 0;
      i < this.m_vertexCount; ++i) {
         depths[i] = b2Math.Dot(normalL, this.m_vertices[i]) - offsetL;
         var isSubmerged = depths[i] < (-Number.MIN_VALUE);
         if (i > 0) {
            if (isSubmerged) {
               if (!lastSubmerged) {
                  intoIndex = i - 1;
                  diveCount++;
               }
            }
            else {
               if (lastSubmerged) {
                  outoIndex = i - 1;
                  diveCount++;
               }
            }
         }
         lastSubmerged = isSubmerged;
      }
      switch (diveCount) {
      case 0:
         if (lastSubmerged) {
            var md = new b2MassData();
            this.ComputeMass(md, 1);
            c.SetV(b2Math.MulX(xf, md.center));
            return md.mass;
         }
         else {
            return 0;
         }
         break;
      case 1:
         if (intoIndex == (-1)) {
            intoIndex = this.m_vertexCount - 1;
         }
         else {
            outoIndex = this.m_vertexCount - 1;
         }
         break;
      }
      var intoIndex2 = parseInt((intoIndex + 1) % this.m_vertexCount);
      var outoIndex2 = parseInt((outoIndex + 1) % this.m_vertexCount);
      var intoLamdda = (0 - depths[intoIndex]) / (depths[intoIndex2] - depths[intoIndex]);
      var outoLamdda = (0 - depths[outoIndex]) / (depths[outoIndex2] - depths[outoIndex]);
      var intoVec = new b2Vec2(this.m_vertices[intoIndex].x * (1 - intoLamdda) + this.m_vertices[intoIndex2].x * intoLamdda, this.m_vertices[intoIndex].y * (1 - intoLamdda) + this.m_vertices[intoIndex2].y * intoLamdda);
      var outoVec = new b2Vec2(this.m_vertices[outoIndex].x * (1 - outoLamdda) + this.m_vertices[outoIndex2].x * outoLamdda, this.m_vertices[outoIndex].y * (1 - outoLamdda) + this.m_vertices[outoIndex2].y * outoLamdda);
      var area = 0;
      var center = new b2Vec2();
      var p2 = this.m_vertices[intoIndex2];
      var p3;
      i = intoIndex2;
      while (i != outoIndex2) {
         i = (i + 1) % this.m_vertexCount;
         if (i == outoIndex2) p3 = outoVec;
         else p3 = this.m_vertices[i];
         var triangleArea = 0.5 * ((p2.x - intoVec.x) * (p3.y - intoVec.y) - (p2.y - intoVec.y) * (p3.x - intoVec.x));
         area += triangleArea;
         center.x += triangleArea * (intoVec.x + p2.x + p3.x) / 3;
         center.y += triangleArea * (intoVec.y + p2.y + p3.y) / 3;
         p2 = p3;
      }
      center.Multiply(1 / area);
      c.SetV(b2Math.MulX(xf, center));
      return area;
   }
   b2PolygonShape.prototype.GetVertexCount = function () {
      return this.m_vertexCount;
   }
   b2PolygonShape.prototype.GetVertices = function () {
      return this.m_vertices;
   }
   b2PolygonShape.prototype.GetNormals = function () {
      return this.m_normals;
   }
   b2PolygonShape.prototype.GetSupport = function (d) {
      var bestIndex = 0;
      var bestValue = this.m_vertices[0].x * d.x + this.m_vertices[0].y * d.y;
      for (var i = 1; i < this.m_vertexCount; ++i) {
         var value = this.m_vertices[i].x * d.x + this.m_vertices[i].y * d.y;
         if (value > bestValue) {
            bestIndex = i;
            bestValue = value;
         }
      }
      return bestIndex;
   }
   b2PolygonShape.prototype.GetSupportVertex = function (d) {
      var bestIndex = 0;
      var bestValue = this.m_vertices[0].x * d.x + this.m_vertices[0].y * d.y;
      for (var i = 1; i < this.m_vertexCount; ++i) {
         var value = this.m_vertices[i].x * d.x + this.m_vertices[i].y * d.y;
         if (value > bestValue) {
            bestIndex = i;
            bestValue = value;
         }
      }
      return this.m_vertices[bestIndex];
   }
   b2PolygonShape.prototype.Validate = function () {
      return false;
   }
   b2PolygonShape.prototype.b2PolygonShape = function () {
      this.__super.b2Shape.call(this);
      this.m_type = b2Shape.e_polygonShape;
      this.m_centroid = new b2Vec2();
      this.m_vertices = new Vector();
      this.m_normals = new Vector();
   }
   b2PolygonShape.prototype.Reserve = function (count) {
      if (count === undefined) count = 0;
      for (var i = parseInt(this.m_vertices.length); i < count; i++) {
         this.m_vertices[i] = new b2Vec2();
         this.m_normals[i] = new b2Vec2();
      }
   }
   b2PolygonShape.ComputeCentroid = function (vs, count) {
      if (count === undefined) count = 0;
      var c = new b2Vec2();
      var area = 0.0;
      var p1X = 0.0;
      var p1Y = 0.0;
      var inv3 = 1.0 / 3.0;
      for (var i = 0; i < count; ++i) {
         var p2 = vs[i];
         var p3 = i + 1 < count ? vs[parseInt(i + 1)] : vs[0];
         var e1X = p2.x - p1X;
         var e1Y = p2.y - p1Y;
         var e2X = p3.x - p1X;
         var e2Y = p3.y - p1Y;
         var D = (e1X * e2Y - e1Y * e2X);
         var triangleArea = 0.5 * D;area += triangleArea;
         c.x += triangleArea * inv3 * (p1X + p2.x + p3.x);
         c.y += triangleArea * inv3 * (p1Y + p2.y + p3.y);
      }
      c.x *= 1.0 / area;
      c.y *= 1.0 / area;
      return c;
   }
   b2PolygonShape.ComputeOBB = function (obb, vs, count) {
      if (count === undefined) count = 0;
      var i = 0;
      var p = new Vector(count + 1);
      for (i = 0;
      i < count; ++i) {
         p[i] = vs[i];
      }
      p[count] = p[0];
      var minArea = Number.MAX_VALUE;
      for (i = 1;
      i <= count; ++i) {
         var root = p[parseInt(i - 1)];
         var uxX = p[i].x - root.x;
         var uxY = p[i].y - root.y;
         var length = Math.sqrt(uxX * uxX + uxY * uxY);
         uxX /= length;
         uxY /= length;
         var uyX = (-uxY);
         var uyY = uxX;
         var lowerX = Number.MAX_VALUE;
         var lowerY = Number.MAX_VALUE;
         var upperX = (-Number.MAX_VALUE);
         var upperY = (-Number.MAX_VALUE);
         for (var j = 0; j < count; ++j) {
            var dX = p[j].x - root.x;
            var dY = p[j].y - root.y;
            var rX = (uxX * dX + uxY * dY);
            var rY = (uyX * dX + uyY * dY);
            if (rX < lowerX) lowerX = rX;
            if (rY < lowerY) lowerY = rY;
            if (rX > upperX) upperX = rX;
            if (rY > upperY) upperY = rY;
         }
         var area = (upperX - lowerX) * (upperY - lowerY);
         if (area < 0.95 * minArea) {
            minArea = area;
            obb.R.col1.x = uxX;
            obb.R.col1.y = uxY;
            obb.R.col2.x = uyX;
            obb.R.col2.y = uyY;
            var centerX = 0.5 * (lowerX + upperX);
            var centerY = 0.5 * (lowerY + upperY);
            var tMat = obb.R;
            obb.center.x = root.x + (tMat.col1.x * centerX + tMat.col2.x * centerY);
            obb.center.y = root.y + (tMat.col1.y * centerX + tMat.col2.y * centerY);
            obb.extents.x = 0.5 * (upperX - lowerX);
            obb.extents.y = 0.5 * (upperY - lowerY);
         }
      }
   }
   Box2D.postDefs.push(function () {
      Box2D.Collision.Shapes.b2PolygonShape.s_mat = new b2Mat22();
   });
   b2Shape.b2Shape = function () {};
   b2Shape.prototype.Copy = function () {
      return null;
   }
   b2Shape.prototype.Set = function (other) {
      this.m_radius = other.m_radius;
   }
   b2Shape.prototype.GetType = function () {
      return this.m_type;
   }
   b2Shape.prototype.TestPoint = function (xf, p) {
      return false;
   }
   b2Shape.prototype.RayCast = function (output, input, transform) {
      return false;
   }
   b2Shape.prototype.ComputeAABB = function (aabb, xf) {}
   b2Shape.prototype.ComputeMass = function (massData, density) {
      if (density === undefined) density = 0;
   }
   b2Shape.prototype.ComputeSubmergedArea = function (normal, offset, xf, c) {
      if (offset === undefined) offset = 0;
      return 0;
   }
   b2Shape.TestOverlap = function (shape1, transform1, shape2, transform2) {
      var input = new b2DistanceInput();
      input.proxyA = new b2DistanceProxy();
      input.proxyA.Set(shape1);
      input.proxyB = new b2DistanceProxy();
      input.proxyB.Set(shape2);
      input.transformA = transform1;
      input.transformB = transform2;
      input.useRadii = true;
      var simplexCache = new b2SimplexCache();
      simplexCache.count = 0;
      var output = new b2DistanceOutput();
      b2Distance.Distance(output, simplexCache, input);
      return output.distance < 10.0 * Number.MIN_VALUE;
   }
   b2Shape.prototype.b2Shape = function () {
      this.m_type = b2Shape.e_unknownShape;
      this.m_radius = b2Settings.b2_linearSlop;
   }
   Box2D.postDefs.push(function () {
      Box2D.Collision.Shapes.b2Shape.e_unknownShape = parseInt((-1));
      Box2D.Collision.Shapes.b2Shape.e_circleShape = 0;
      Box2D.Collision.Shapes.b2Shape.e_polygonShape = 1;
      Box2D.Collision.Shapes.b2Shape.e_edgeShape = 2;
      Box2D.Collision.Shapes.b2Shape.e_shapeTypeCount = 3;
      Box2D.Collision.Shapes.b2Shape.e_hitCollide = 1;
      Box2D.Collision.Shapes.b2Shape.e_missCollide = 0;
      Box2D.Collision.Shapes.b2Shape.e_startsInsideCollide = parseInt((-1));
   });
})();
(function () {
   var b2Color = Box2D.Common.b2Color,
      b2internal = Box2D.Common.b2internal,
      b2Settings = Box2D.Common.b2Settings,
      b2Mat22 = Box2D.Common.Math.b2Mat22,
      b2Mat33 = Box2D.Common.Math.b2Mat33,
      b2Math = Box2D.Common.Math.b2Math,
      b2Sweep = Box2D.Common.Math.b2Sweep,
      b2Transform = Box2D.Common.Math.b2Transform,
      b2Vec2 = Box2D.Common.Math.b2Vec2,
      b2Vec3 = Box2D.Common.Math.b2Vec3;

   b2Color.b2Color = function () {
      this._r = 0;
      this._g = 0;
      this._b = 0;
   };
   b2Color.prototype.b2Color = function (rr, gg, bb) {
      if (rr === undefined) rr = 0;
      if (gg === undefined) gg = 0;
      if (bb === undefined) bb = 0;
      this._r = Box2D.parseUInt(255 * b2Math.Clamp(rr, 0.0, 1.0));
      this._g = Box2D.parseUInt(255 * b2Math.Clamp(gg, 0.0, 1.0));
      this._b = Box2D.parseUInt(255 * b2Math.Clamp(bb, 0.0, 1.0));
   }
   b2Color.prototype.Set = function (rr, gg, bb) {
      if (rr === undefined) rr = 0;
      if (gg === undefined) gg = 0;
      if (bb === undefined) bb = 0;
      this._r = Box2D.parseUInt(255 * b2Math.Clamp(rr, 0.0, 1.0));
      this._g = Box2D.parseUInt(255 * b2Math.Clamp(gg, 0.0, 1.0));
      this._b = Box2D.parseUInt(255 * b2Math.Clamp(bb, 0.0, 1.0));
   }
   Object.defineProperty(b2Color.prototype, 'r', {
      enumerable: false,
      configurable: true,
      set: function (rr) {
         if (rr === undefined) rr = 0;
         this._r = Box2D.parseUInt(255 * b2Math.Clamp(rr, 0.0, 1.0));
      }
   });
   Object.defineProperty(b2Color.prototype, 'g', {
      enumerable: false,
      configurable: true,
      set: function (gg) {
         if (gg === undefined) gg = 0;
         this._g = Box2D.parseUInt(255 * b2Math.Clamp(gg, 0.0, 1.0));
      }
   });
   Object.defineProperty(b2Color.prototype, 'b', {
      enumerable: false,
      configurable: true,
      set: function (bb) {
         if (bb === undefined) bb = 0;
         this._b = Box2D.parseUInt(255 * b2Math.Clamp(bb, 0.0, 1.0));
      }
   });
   Object.defineProperty(b2Color.prototype, 'color', {
      enumerable: false,
      configurable: true,
      get: function () {
         return (this._r << 16) | (this._g << 8) | (this._b);
      }
   });
   b2Settings.b2Settings = function () {};
   b2Settings.b2MixFriction = function (friction1, friction2) {
      if (friction1 === undefined) friction1 = 0;
      if (friction2 === undefined) friction2 = 0;
      return Math.sqrt(friction1 * friction2);
   }
   b2Settings.b2MixRestitution = function (restitution1, restitution2) {
      if (restitution1 === undefined) restitution1 = 0;
      if (restitution2 === undefined) restitution2 = 0;
      return restitution1 > restitution2 ? restitution1 : restitution2;
   }
   b2Settings.b2Assert = function (a) {
      if (!a) {
         throw "Assertion Failed";
      }
   }
   Box2D.postDefs.push(function () {
      Box2D.Common.b2Settings.VERSION = "2.1alpha";
      Box2D.Common.b2Settings.USHRT_MAX = 0x0000ffff;
      Box2D.Common.b2Settings.b2_pi = Math.PI;
      Box2D.Common.b2Settings.b2_maxManifoldPoints = 2;
      Box2D.Common.b2Settings.b2_aabbExtension = 0.1;
      Box2D.Common.b2Settings.b2_aabbMultiplier = 2.0;
      Box2D.Common.b2Settings.b2_polygonRadius = 2.0 * b2Settings.b2_linearSlop;
      Box2D.Common.b2Settings.b2_linearSlop = 0.005;
      Box2D.Common.b2Settings.b2_angularSlop = 2.0 / 180.0 * b2Settings.b2_pi;
      Box2D.Common.b2Settings.b2_toiSlop = 8.0 * b2Settings.b2_linearSlop;
      Box2D.Common.b2Settings.b2_maxTOIContactsPerIsland = 32;
      Box2D.Common.b2Settings.b2_maxTOIJointsPerIsland = 32;
      Box2D.Common.b2Settings.b2_velocityThreshold = 1.0;
      Box2D.Common.b2Settings.b2_maxLinearCorrection = 0.2;
      Box2D.Common.b2Settings.b2_maxAngularCorrection = 8.0 / 180.0 * b2Settings.b2_pi;
      Box2D.Common.b2Settings.b2_maxTranslation = 2.0;
      Box2D.Common.b2Settings.b2_maxTranslationSquared = b2Settings.b2_maxTranslation * b2Settings.b2_maxTranslation;
      Box2D.Common.b2Settings.b2_maxRotation = 0.5 * b2Settings.b2_pi;
      Box2D.Common.b2Settings.b2_maxRotationSquared = b2Settings.b2_maxRotation * b2Settings.b2_maxRotation;
      Box2D.Common.b2Settings.b2_contactBaumgarte = 0.2;
      Box2D.Common.b2Settings.b2_timeToSleep = 0.5;
      Box2D.Common.b2Settings.b2_linearSleepTolerance = 0.01;
      Box2D.Common.b2Settings.b2_angularSleepTolerance = 2.0 / 180.0 * b2Settings.b2_pi;
   });
})();
(function () {
   var b2AABB = Box2D.Collision.b2AABB,
      b2Color = Box2D.Common.b2Color,
      b2internal = Box2D.Common.b2internal,
      b2Settings = Box2D.Common.b2Settings,
      b2Mat22 = Box2D.Common.Math.b2Mat22,
      b2Mat33 = Box2D.Common.Math.b2Mat33,
      b2Math = Box2D.Common.Math.b2Math,
      b2Sweep = Box2D.Common.Math.b2Sweep,
      b2Transform = Box2D.Common.Math.b2Transform,
      b2Vec2 = Box2D.Common.Math.b2Vec2,
      b2Vec3 = Box2D.Common.Math.b2Vec3;

   b2Mat22.b2Mat22 = function () {
      this.col1 = new b2Vec2();
      this.col2 = new b2Vec2();
   };
   b2Mat22.prototype.b2Mat22 = function () {
      this.SetIdentity();
   }
   b2Mat22.FromAngle = function (angle) {
      if (angle === undefined) angle = 0;
      var mat = new b2Mat22();
      mat.Set(angle);
      return mat;
   }
   b2Mat22.FromVV = function (c1, c2) {
      var mat = new b2Mat22();
      mat.SetVV(c1, c2);
      return mat;
   }
   b2Mat22.prototype.Set = function (angle) {
      if (angle === undefined) angle = 0;
      var c = Math.cos(angle);
      var s = Math.sin(angle);
      this.col1.x = c;
      this.col2.x = (-s);
      this.col1.y = s;
      this.col2.y = c;
   }
   b2Mat22.prototype.SetVV = function (c1, c2) {
      this.col1.SetV(c1);
      this.col2.SetV(c2);
   }
   b2Mat22.prototype.Copy = function () {
      var mat = new b2Mat22();
      mat.SetM(this);
      return mat;
   }
   b2Mat22.prototype.SetM = function (m) {
      this.col1.SetV(m.col1);
      this.col2.SetV(m.col2);
   }
   b2Mat22.prototype.AddM = function (m) {
      this.col1.x += m.col1.x;
      this.col1.y += m.col1.y;
      this.col2.x += m.col2.x;
      this.col2.y += m.col2.y;
   }
   b2Mat22.prototype.SetIdentity = function () {
      this.col1.x = 1.0;
      this.col2.x = 0.0;
      this.col1.y = 0.0;
      this.col2.y = 1.0;
   }
   b2Mat22.prototype.SetZero = function () {
      this.col1.x = 0.0;
      this.col2.x = 0.0;
      this.col1.y = 0.0;
      this.col2.y = 0.0;
   }
   b2Mat22.prototype.GetAngle = function () {
      return Math.atan2(this.col1.y, this.col1.x);
   }
   b2Mat22.prototype.GetInverse = function (out) {
      var a = this.col1.x;
      var b = this.col2.x;
      var c = this.col1.y;
      var d = this.col2.y;
      var det = a * d - b * c;
      if (det != 0.0) {
         det = 1.0 / det;
      }
      out.col1.x = det * d;
      out.col2.x = (-det * b);
      out.col1.y = (-det * c);
      out.col2.y = det * a;
      return out;
   }
   b2Mat22.prototype.Solve = function (out, bX, bY) {
      if (bX === undefined) bX = 0;
      if (bY === undefined) bY = 0;
      var a11 = this.col1.x;
      var a12 = this.col2.x;
      var a21 = this.col1.y;
      var a22 = this.col2.y;
      var det = a11 * a22 - a12 * a21;
      if (det != 0.0) {
         det = 1.0 / det;
      }
      out.x = det * (a22 * bX - a12 * bY);
      out.y = det * (a11 * bY - a21 * bX);
      return out;
   }
   b2Mat22.prototype.Abs = function () {
      this.col1.Abs();
      this.col2.Abs();
   }
   b2Mat33.b2Mat33 = function () {
      this.col1 = new b2Vec3();
      this.col2 = new b2Vec3();
      this.col3 = new b2Vec3();
   };
   b2Mat33.prototype.b2Mat33 = function (c1, c2, c3) {
      if (c1 === undefined) c1 = null;
      if (c2 === undefined) c2 = null;
      if (c3 === undefined) c3 = null;
      if (!c1 && !c2 && !c3) {
         this.col1.SetZero();
         this.col2.SetZero();
         this.col3.SetZero();
      }
      else {
         this.col1.SetV(c1);
         this.col2.SetV(c2);
         this.col3.SetV(c3);
      }
   }
   b2Mat33.prototype.SetVVV = function (c1, c2, c3) {
      this.col1.SetV(c1);
      this.col2.SetV(c2);
      this.col3.SetV(c3);
   }
   b2Mat33.prototype.Copy = function () {
      return new b2Mat33(this.col1, this.col2, this.col3);
   }
   b2Mat33.prototype.SetM = function (m) {
      this.col1.SetV(m.col1);
      this.col2.SetV(m.col2);
      this.col3.SetV(m.col3);
   }
   b2Mat33.prototype.AddM = function (m) {
      this.col1.x += m.col1.x;
      this.col1.y += m.col1.y;
      this.col1.z += m.col1.z;
      this.col2.x += m.col2.x;
      this.col2.y += m.col2.y;
      this.col2.z += m.col2.z;
      this.col3.x += m.col3.x;
      this.col3.y += m.col3.y;
      this.col3.z += m.col3.z;
   }
   b2Mat33.prototype.SetIdentity = function () {
      this.col1.x = 1.0;
      this.col2.x = 0.0;
      this.col3.x = 0.0;
      this.col1.y = 0.0;
      this.col2.y = 1.0;
      this.col3.y = 0.0;
      this.col1.z = 0.0;
      this.col2.z = 0.0;
      this.col3.z = 1.0;
   }
   b2Mat33.prototype.SetZero = function () {
      this.col1.x = 0.0;
      this.col2.x = 0.0;
      this.col3.x = 0.0;
      this.col1.y = 0.0;
      this.col2.y = 0.0;
      this.col3.y = 0.0;
      this.col1.z = 0.0;
      this.col2.z = 0.0;
      this.col3.z = 0.0;
   }
   b2Mat33.prototype.Solve22 = function (out, bX, bY) {
      if (bX === undefined) bX = 0;
      if (bY === undefined) bY = 0;
      var a11 = this.col1.x;
      var a12 = this.col2.x;
      var a21 = this.col1.y;
      var a22 = this.col2.y;
      var det = a11 * a22 - a12 * a21;
      if (det != 0.0) {
         det = 1.0 / det;
      }
      out.x = det * (a22 * bX - a12 * bY);
      out.y = det * (a11 * bY - a21 * bX);
      return out;
   }
   b2Mat33.prototype.Solve33 = function (out, bX, bY, bZ) {
      if (bX === undefined) bX = 0;
      if (bY === undefined) bY = 0;
      if (bZ === undefined) bZ = 0;
      var a11 = this.col1.x;
      var a21 = this.col1.y;
      var a31 = this.col1.z;
      var a12 = this.col2.x;
      var a22 = this.col2.y;
      var a32 = this.col2.z;
      var a13 = this.col3.x;
      var a23 = this.col3.y;
      var a33 = this.col3.z;
      var det = a11 * (a22 * a33 - a32 * a23) + a21 * (a32 * a13 - a12 * a33) + a31 * (a12 * a23 - a22 * a13);
      if (det != 0.0) {
         det = 1.0 / det;
      }
      out.x = det * (bX * (a22 * a33 - a32 * a23) + bY * (a32 * a13 - a12 * a33) + bZ * (a12 * a23 - a22 * a13));
      out.y = det * (a11 * (bY * a33 - bZ * a23) + a21 * (bZ * a13 - bX * a33) + a31 * (bX * a23 - bY * a13));
      out.z = det * (a11 * (a22 * bZ - a32 * bY) + a21 * (a32 * bX - a12 * bZ) + a31 * (a12 * bY - a22 * bX));
      return out;
   }
   b2Math.b2Math = function () {};
   b2Math.IsValid = function (x) {
      if (x === undefined) x = 0;
      return isFinite(x);
   }
   b2Math.Dot = function (a, b) {
      return a.x * b.x + a.y * b.y;
   }
   b2Math.CrossVV = function (a, b) {
      return a.x * b.y - a.y * b.x;
   }
   b2Math.CrossVF = function (a, s) {
      if (s === undefined) s = 0;
      var v = new b2Vec2(s * a.y, (-s * a.x));
      return v;
   }
   b2Math.CrossFV = function (s, a) {
      if (s === undefined) s = 0;
      var v = new b2Vec2((-s * a.y), s * a.x);
      return v;
   }
   b2Math.MulMV = function (A, v) {
      var u = new b2Vec2(A.col1.x * v.x + A.col2.x * v.y, A.col1.y * v.x + A.col2.y * v.y);
      return u;
   }
   b2Math.MulTMV = function (A, v) {
      var u = new b2Vec2(b2Math.Dot(v, A.col1), b2Math.Dot(v, A.col2));
      return u;
   }
   b2Math.MulX = function (T, v) {
      var a = b2Math.MulMV(T.R, v);
      a.x += T.position.x;
      a.y += T.position.y;
      return a;
   }
   b2Math.MulXT = function (T, v) {
      var a = b2Math.SubtractVV(v, T.position);
      var tX = (a.x * T.R.col1.x + a.y * T.R.col1.y);
      a.y = (a.x * T.R.col2.x + a.y * T.R.col2.y);
      a.x = tX;
      return a;
   }
   b2Math.AddVV = function (a, b) {
      var v = new b2Vec2(a.x + b.x, a.y + b.y);
      return v;
   }
   b2Math.SubtractVV = function (a, b) {
      var v = new b2Vec2(a.x - b.x, a.y - b.y);
      return v;
   }
   b2Math.Distance = function (a, b) {
      var cX = a.x - b.x;
      var cY = a.y - b.y;
      return Math.sqrt(cX * cX + cY * cY);
   }
   b2Math.DistanceSquared = function (a, b) {
      var cX = a.x - b.x;
      var cY = a.y - b.y;
      return (cX * cX + cY * cY);
   }
   b2Math.MulFV = function (s, a) {
      if (s === undefined) s = 0;
      var v = new b2Vec2(s * a.x, s * a.y);
      return v;
   }
   b2Math.AddMM = function (A, B) {
      var C = b2Mat22.FromVV(b2Math.AddVV(A.col1, B.col1), b2Math.AddVV(A.col2, B.col2));
      return C;
   }
   b2Math.MulMM = function (A, B) {
      var C = b2Mat22.FromVV(b2Math.MulMV(A, B.col1), b2Math.MulMV(A, B.col2));
      return C;
   }
   b2Math.MulTMM = function (A, B) {
      var c1 = new b2Vec2(b2Math.Dot(A.col1, B.col1), b2Math.Dot(A.col2, B.col1));
      var c2 = new b2Vec2(b2Math.Dot(A.col1, B.col2), b2Math.Dot(A.col2, B.col2));
      var C = b2Mat22.FromVV(c1, c2);
      return C;
   }
   b2Math.Abs = function (a) {
      if (a === undefined) a = 0;
      return a > 0.0 ? a : (-a);
   }
   b2Math.AbsV = function (a) {
      var b = new b2Vec2(b2Math.Abs(a.x), b2Math.Abs(a.y));
      return b;
   }
   b2Math.AbsM = function (A) {
      var B = b2Mat22.FromVV(b2Math.AbsV(A.col1), b2Math.AbsV(A.col2));
      return B;
   }
   b2Math.Min = function (a, b) {
      if (a === undefined) a = 0;
      if (b === undefined) b = 0;
      return a < b ? a : b;
   }
   b2Math.MinV = function (a, b) {
      var c = new b2Vec2(b2Math.Min(a.x, b.x), b2Math.Min(a.y, b.y));
      return c;
   }
   b2Math.Max = function (a, b) {
      if (a === undefined) a = 0;
      if (b === undefined) b = 0;
      return a > b ? a : b;
   }
   b2Math.MaxV = function (a, b) {
      var c = new b2Vec2(b2Math.Max(a.x, b.x), b2Math.Max(a.y, b.y));
      return c;
   }
   b2Math.Clamp = function (a, low, high) {
      if (a === undefined) a = 0;
      if (low === undefined) low = 0;
      if (high === undefined) high = 0;
      return a < low ? low : a > high ? high : a;
   }
   b2Math.ClampV = function (a, low, high) {
      return b2Math.MaxV(low, b2Math.MinV(a, high));
   }
   b2Math.Swap = function (a, b) {
      var tmp = a[0];
      a[0] = b[0];
      b[0] = tmp;
   }
   b2Math.Random = function () {
      return Math.random() * 2 - 1;
   }
   b2Math.RandomRange = function (lo, hi) {
      if (lo === undefined) lo = 0;
      if (hi === undefined) hi = 0;
      var r = Math.random();
      r = (hi - lo) * r + lo;
      return r;
   }
   b2Math.NextPowerOfTwo = function (x) {
      if (x === undefined) x = 0;
      x |= (x >> 1) & 0x7FFFFFFF;
      x |= (x >> 2) & 0x3FFFFFFF;
      x |= (x >> 4) & 0x0FFFFFFF;
      x |= (x >> 8) & 0x00FFFFFF;
      x |= (x >> 16) & 0x0000FFFF;
      return x + 1;
   }
   b2Math.IsPowerOfTwo = function (x) {
      if (x === undefined) x = 0;
      var result = x > 0 && (x & (x - 1)) == 0;
      return result;
   }
   Box2D.postDefs.push(function () {
      Box2D.Common.Math.b2Math.b2Vec2_zero = new b2Vec2(0.0, 0.0);
      Box2D.Common.Math.b2Math.b2Mat22_identity = b2Mat22.FromVV(new b2Vec2(1.0, 0.0), new b2Vec2(0.0, 1.0));
      Box2D.Common.Math.b2Math.b2Transform_identity = new b2Transform(b2Math.b2Vec2_zero, b2Math.b2Mat22_identity);
   });
   b2Sweep.b2Sweep = function () {
      this.localCenter = new b2Vec2();
      this.c0 = new b2Vec2;
      this.c = new b2Vec2();
   };
   b2Sweep.prototype.Set = function (other) {
      this.localCenter.SetV(other.localCenter);
      this.c0.SetV(other.c0);
      this.c.SetV(other.c);
      this.a0 = other.a0;
      this.a = other.a;
      this.t0 = other.t0;
   }
   b2Sweep.prototype.Copy = function () {
      var copy = new b2Sweep();
      copy.localCenter.SetV(this.localCenter);
      copy.c0.SetV(this.c0);
      copy.c.SetV(this.c);
      copy.a0 = this.a0;
      copy.a = this.a;
      copy.t0 = this.t0;
      return copy;
   }
   b2Sweep.prototype.GetTransform = function (xf, alpha) {
      if (alpha === undefined) alpha = 0;
      xf.position.x = (1.0 - alpha) * this.c0.x + alpha * this.c.x;
      xf.position.y = (1.0 - alpha) * this.c0.y + alpha * this.c.y;
      var angle = (1.0 - alpha) * this.a0 + alpha * this.a;
      xf.R.Set(angle);
      var tMat = xf.R;
      xf.position.x -= (tMat.col1.x * this.localCenter.x + tMat.col2.x * this.localCenter.y);
      xf.position.y -= (tMat.col1.y * this.localCenter.x + tMat.col2.y * this.localCenter.y);
   }
   b2Sweep.prototype.Advance = function (t) {
      if (t === undefined) t = 0;
      if (this.t0 < t && 1.0 - this.t0 > Number.MIN_VALUE) {
         var alpha = (t - this.t0) / (1.0 - this.t0);
         this.c0.x = (1.0 - alpha) * this.c0.x + alpha * this.c.x;
         this.c0.y = (1.0 - alpha) * this.c0.y + alpha * this.c.y;
         this.a0 = (1.0 - alpha) * this.a0 + alpha * this.a;
         this.t0 = t;
      }
   }
   b2Transform.b2Transform = function () {
      this.position = new b2Vec2;
      this.R = new b2Mat22();
   };
   b2Transform.prototype.b2Transform = function (pos, r) {
      if (pos === undefined) pos = null;
      if (r === undefined) r = null;
      if (pos) {
         this.position.SetV(pos);
         this.R.SetM(r);
      }
   }
   b2Transform.prototype.Initialize = function (pos, r) {
      this.position.SetV(pos);
      this.R.SetM(r);
   }
   b2Transform.prototype.SetIdentity = function () {
      this.position.SetZero();
      this.R.SetIdentity();
   }
   b2Transform.prototype.Set = function (x) {
      this.position.SetV(x.position);
      this.R.SetM(x.R);
   }
   b2Transform.prototype.GetAngle = function () {
      return Math.atan2(this.R.col1.y, this.R.col1.x);
   }
   b2Vec2.b2Vec2 = function () {};
   b2Vec2.prototype.b2Vec2 = function (x_, y_) {
      if (x_ === undefined) x_ = 0;
      if (y_ === undefined) y_ = 0;
      this.x = x_;
      this.y = y_;
   }
   b2Vec2.prototype.SetZero = function () {
      this.x = 0.0;
      this.y = 0.0;
   }
   b2Vec2.prototype.Set = function (x_, y_) {
      if (x_ === undefined) x_ = 0;
      if (y_ === undefined) y_ = 0;
      this.x = x_;
      this.y = y_;
   }
   b2Vec2.prototype.SetV = function (v) {
      this.x = v.x;
      this.y = v.y;
   }
   b2Vec2.prototype.GetNegative = function () {
      return new b2Vec2((-this.x), (-this.y));
   }
   b2Vec2.prototype.NegativeSelf = function () {
      this.x = (-this.x);
      this.y = (-this.y);
   }
   b2Vec2.Make = function (x_, y_) {
      if (x_ === undefined) x_ = 0;
      if (y_ === undefined) y_ = 0;
      return new b2Vec2(x_, y_);
   }
   b2Vec2.prototype.Copy = function () {
      return new b2Vec2(this.x, this.y);
   }
   b2Vec2.prototype.Add = function (v) {
      this.x += v.x;
      this.y += v.y;
   }
   b2Vec2.prototype.Subtract = function (v) {
      this.x -= v.x;
      this.y -= v.y;
   }
   b2Vec2.prototype.Multiply = function (a) {
      if (a === undefined) a = 0;
      this.x *= a;
      this.y *= a;
   }
   b2Vec2.prototype.MulM = function (A) {
      var tX = this.x;
      this.x = A.col1.x * tX + A.col2.x * this.y;
      this.y = A.col1.y * tX + A.col2.y * this.y;
   }
   b2Vec2.prototype.MulTM = function (A) {
      var tX = b2Math.Dot(this, A.col1);
      this.y = b2Math.Dot(this, A.col2);
      this.x = tX;
   }
   b2Vec2.prototype.CrossVF = function (s) {
      if (s === undefined) s = 0;
      var tX = this.x;
      this.x = s * this.y;
      this.y = (-s * tX);
   }
   b2Vec2.prototype.CrossFV = function (s) {
      if (s === undefined) s = 0;
      var tX = this.x;
      this.x = (-s * this.y);
      this.y = s * tX;
   }
   b2Vec2.prototype.MinV = function (b) {
      this.x = this.x < b.x ? this.x : b.x;
      this.y = this.y < b.y ? this.y : b.y;
   }
   b2Vec2.prototype.MaxV = function (b) {
      this.x = this.x > b.x ? this.x : b.x;
      this.y = this.y > b.y ? this.y : b.y;
   }
   b2Vec2.prototype.Abs = function () {
      if (this.x < 0) this.x = (-this.x);
      if (this.y < 0) this.y = (-this.y);
   }
   b2Vec2.prototype.Length = function () {
      return Math.sqrt(this.x * this.x + this.y * this.y);
   }
   b2Vec2.prototype.LengthSquared = function () {
      return (this.x * this.x + this.y * this.y);
   }
   b2Vec2.prototype.Normalize = function () {
      var length = Math.sqrt(this.x * this.x + this.y * this.y);
      if (length < Number.MIN_VALUE) {
         return 0.0;
      }
      var invLength = 1.0 / length;
      this.x *= invLength;
      this.y *= invLength;
      return length;
   }
   b2Vec2.prototype.IsValid = function () {
      return b2Math.IsValid(this.x) && b2Math.IsValid(this.y);
   }
   b2Vec3.b2Vec3 = function () {};
   b2Vec3.prototype.b2Vec3 = function (x, y, z) {
      if (x === undefined) x = 0;
      if (y === undefined) y = 0;
      if (z === undefined) z = 0;
      this.x = x;
      this.y = y;
      this.z = z;
   }
   b2Vec3.prototype.SetZero = function () {
      this.x = this.y = this.z = 0.0;
   }
   b2Vec3.prototype.Set = function (x, y, z) {
      if (x === undefined) x = 0;
      if (y === undefined) y = 0;
      if (z === undefined) z = 0;
      this.x = x;
      this.y = y;
      this.z = z;
   }
   b2Vec3.prototype.SetV = function (v) {
      this.x = v.x;
      this.y = v.y;
      this.z = v.z;
   }
   b2Vec3.prototype.GetNegative = function () {
      return new b2Vec3((-this.x), (-this.y), (-this.z));
   }
   b2Vec3.prototype.NegativeSelf = function () {
      this.x = (-this.x);
      this.y = (-this.y);
      this.z = (-this.z);
   }
   b2Vec3.prototype.Copy = function () {
      return new b2Vec3(this.x, this.y, this.z);
   }
   b2Vec3.prototype.Add = function (v) {
      this.x += v.x;
      this.y += v.y;
      this.z += v.z;
   }
   b2Vec3.prototype.Subtract = function (v) {
      this.x -= v.x;
      this.y -= v.y;
      this.z -= v.z;
   }
   b2Vec3.prototype.Multiply = function (a) {
      if (a === undefined) a = 0;
      this.x *= a;
      this.y *= a;
      this.z *= a;
   }
})();
(function () {
   var b2ControllerEdge = Box2D.Dynamics.Controllers.b2ControllerEdge,
      b2Mat22 = Box2D.Common.Math.b2Mat22,
      b2Mat33 = Box2D.Common.Math.b2Mat33,
      b2Math = Box2D.Common.Math.b2Math,
      b2Sweep = Box2D.Common.Math.b2Sweep,
      b2Transform = Box2D.Common.Math.b2Transform,
      b2Vec2 = Box2D.Common.Math.b2Vec2,
      b2Vec3 = Box2D.Common.Math.b2Vec3,
      b2Color = Box2D.Common.b2Color,
      b2internal = Box2D.Common.b2internal,
      b2Settings = Box2D.Common.b2Settings,
      b2AABB = Box2D.Collision.b2AABB,
      b2Bound = Box2D.Collision.b2Bound,
      b2BoundValues = Box2D.Collision.b2BoundValues,
      b2Collision = Box2D.Collision.b2Collision,
      b2ContactID = Box2D.Collision.b2ContactID,
      b2ContactPoint = Box2D.Collision.b2ContactPoint,
      b2Distance = Box2D.Collision.b2Distance,
      b2DistanceInput = Box2D.Collision.b2DistanceInput,
      b2DistanceOutput = Box2D.Collision.b2DistanceOutput,
      b2DistanceProxy = Box2D.Collision.b2DistanceProxy,
      b2DynamicTree = Box2D.Collision.b2DynamicTree,
      b2DynamicTreeBroadPhase = Box2D.Collision.b2DynamicTreeBroadPhase,
      b2DynamicTreeNode = Box2D.Collision.b2DynamicTreeNode,
      b2DynamicTreePair = Box2D.Collision.b2DynamicTreePair,
      b2Manifold = Box2D.Collision.b2Manifold,
      b2ManifoldPoint = Box2D.Collision.b2ManifoldPoint,
      b2Point = Box2D.Collision.b2Point,
      b2RayCastInput = Box2D.Collision.b2RayCastInput,
      b2RayCastOutput = Box2D.Collision.b2RayCastOutput,
      b2Segment = Box2D.Collision.b2Segment,
      b2SeparationFunction = Box2D.Collision.b2SeparationFunction,
      b2Simplex = Box2D.Collision.b2Simplex,
      b2SimplexCache = Box2D.Collision.b2SimplexCache,
      b2SimplexVertex = Box2D.Collision.b2SimplexVertex,
      b2TimeOfImpact = Box2D.Collision.b2TimeOfImpact,
      b2TOIInput = Box2D.Collision.b2TOIInput,
      b2WorldManifold = Box2D.Collision.b2WorldManifold,
      ClipVertex = Box2D.Collision.ClipVertex,
      Features = Box2D.Collision.Features,
      IBroadPhase = Box2D.Collision.IBroadPhase,
      b2CircleShape = Box2D.Collision.Shapes.b2CircleShape,
      b2EdgeChainDef = Box2D.Collision.Shapes.b2EdgeChainDef,
      b2EdgeShape = Box2D.Collision.Shapes.b2EdgeShape,
      b2MassData = Box2D.Collision.Shapes.b2MassData,
      b2PolygonShape = Box2D.Collision.Shapes.b2PolygonShape,
      b2Shape = Box2D.Collision.Shapes.b2Shape,
      b2Body = Box2D.Dynamics.b2Body,
      b2BodyDef = Box2D.Dynamics.b2BodyDef,
      b2ContactFilter = Box2D.Dynamics.b2ContactFilter,
      b2ContactImpulse = Box2D.Dynamics.b2ContactImpulse,
      b2ContactListener = Box2D.Dynamics.b2ContactListener,
      b2ContactManager = Box2D.Dynamics.b2ContactManager,
      b2DebugDraw = Box2D.Dynamics.b2DebugDraw,
      b2DestructionListener = Box2D.Dynamics.b2DestructionListener,
      b2FilterData = Box2D.Dynamics.b2FilterData,
      b2Fixture = Box2D.Dynamics.b2Fixture,
      b2FixtureDef = Box2D.Dynamics.b2FixtureDef,
      b2Island = Box2D.Dynamics.b2Island,
      b2TimeStep = Box2D.Dynamics.b2TimeStep,
      b2World = Box2D.Dynamics.b2World,
      b2CircleContact = Box2D.Dynamics.Contacts.b2CircleContact,
      b2Contact = Box2D.Dynamics.Contacts.b2Contact,
      b2ContactConstraint = Box2D.Dynamics.Contacts.b2ContactConstraint,
      b2ContactConstraintPoint = Box2D.Dynamics.Contacts.b2ContactConstraintPoint,
      b2ContactEdge = Box2D.Dynamics.Contacts.b2ContactEdge,
      b2ContactFactory = Box2D.Dynamics.Contacts.b2ContactFactory,
      b2ContactRegister = Box2D.Dynamics.Contacts.b2ContactRegister,
      b2ContactResult = Box2D.Dynamics.Contacts.b2ContactResult,
      b2ContactSolver = Box2D.Dynamics.Contacts.b2ContactSolver,
      b2EdgeAndCircleContact = Box2D.Dynamics.Contacts.b2EdgeAndCircleContact,
      b2NullContact = Box2D.Dynamics.Contacts.b2NullContact,
      b2PolyAndCircleContact = Box2D.Dynamics.Contacts.b2PolyAndCircleContact,
      b2PolyAndEdgeContact = Box2D.Dynamics.Contacts.b2PolyAndEdgeContact,
      b2PolygonContact = Box2D.Dynamics.Contacts.b2PolygonContact,
      b2PositionSolverManifold = Box2D.Dynamics.Contacts.b2PositionSolverManifold,
      b2Controller = Box2D.Dynamics.Controllers.b2Controller,
      b2DistanceJoint = Box2D.Dynamics.Joints.b2DistanceJoint,
      b2DistanceJointDef = Box2D.Dynamics.Joints.b2DistanceJointDef,
      b2FrictionJoint = Box2D.Dynamics.Joints.b2FrictionJoint,
      b2FrictionJointDef = Box2D.Dynamics.Joints.b2FrictionJointDef,
      b2GearJoint = Box2D.Dynamics.Joints.b2GearJoint,
      b2GearJointDef = Box2D.Dynamics.Joints.b2GearJointDef,
      b2Jacobian = Box2D.Dynamics.Joints.b2Jacobian,
      b2Joint = Box2D.Dynamics.Joints.b2Joint,
      b2JointDef = Box2D.Dynamics.Joints.b2JointDef,
      b2JointEdge = Box2D.Dynamics.Joints.b2JointEdge,
      b2LineJoint = Box2D.Dynamics.Joints.b2LineJoint,
      b2LineJointDef = Box2D.Dynamics.Joints.b2LineJointDef,
      b2MouseJoint = Box2D.Dynamics.Joints.b2MouseJoint,
      b2MouseJointDef = Box2D.Dynamics.Joints.b2MouseJointDef,
      b2PrismaticJoint = Box2D.Dynamics.Joints.b2PrismaticJoint,
      b2PrismaticJointDef = Box2D.Dynamics.Joints.b2PrismaticJointDef,
      b2PulleyJoint = Box2D.Dynamics.Joints.b2PulleyJoint,
      b2PulleyJointDef = Box2D.Dynamics.Joints.b2PulleyJointDef,
      b2RevoluteJoint = Box2D.Dynamics.Joints.b2RevoluteJoint,
      b2RevoluteJointDef = Box2D.Dynamics.Joints.b2RevoluteJointDef,
      b2WeldJoint = Box2D.Dynamics.Joints.b2WeldJoint,
      b2WeldJointDef = Box2D.Dynamics.Joints.b2WeldJointDef;

   b2Body.b2Body = function () {
      this.m_xf = new b2Transform();
      this.m_sweep = new b2Sweep();
      this.m_linearVelocity = new b2Vec2();
      this.m_force = new b2Vec2();
   };
   b2Body.prototype.connectEdges = function (s1, s2, angle1) {
      if (angle1 === undefined) angle1 = 0;
      var angle2 = Math.atan2(s2.GetDirectionVector().y, s2.GetDirectionVector().x);
      var coreOffset = Math.tan((angle2 - angle1) * 0.5);
      var core = b2Math.MulFV(coreOffset, s2.GetDirectionVector());
      core = b2Math.SubtractVV(core, s2.GetNormalVector());
      core = b2Math.MulFV(b2Settings.b2_toiSlop, core);
      core = b2Math.AddVV(core, s2.GetVertex1());
      var cornerDir = b2Math.AddVV(s1.GetDirectionVector(), s2.GetDirectionVector());
      cornerDir.Normalize();
      var convex = b2Math.Dot(s1.GetDirectionVector(), s2.GetNormalVector()) > 0.0;
      s1.SetNextEdge(s2, core, cornerDir, convex);
      s2.SetPrevEdge(s1, core, cornerDir, convex);
      return angle2;
   }
   b2Body.prototype.CreateFixture = function (def) {
      if (this.m_world.IsLocked() == true) {
         return null;
      }
      var fixture = new b2Fixture();
      fixture.Create(this, this.m_xf, def);
      if (this.m_flags & b2Body.e_activeFlag) {
         var broadPhase = this.m_world.m_contactManager.m_broadPhase;
         fixture.CreateProxy(broadPhase, this.m_xf);
      }
      fixture.m_next = this.m_fixtureList;
      this.m_fixtureList = fixture;
      ++this.m_fixtureCount;
      fixture.m_body = this;
      if (fixture.m_density > 0.0) {
         this.ResetMassData();
      }
      this.m_world.m_flags |= b2World.e_newFixture;
      return fixture;
   }
   b2Body.prototype.CreateFixture2 = function (shape, density) {
      if (density === undefined) density = 0.0;
      var def = new b2FixtureDef();
      def.shape = shape;
      def.density = density;
      return this.CreateFixture(def);
   }
   b2Body.prototype.DestroyFixture = function (fixture) {
      if (this.m_world.IsLocked() == true) {
         return;
      }
      var node = this.m_fixtureList;
      var ppF = null;
      var found = false;
      while (node != null) {
         if (node == fixture) {
            if (ppF) ppF.m_next = fixture.m_next;
            else this.m_fixtureList = fixture.m_next;
            found = true;
            break;
         }
         ppF = node;
         node = node.m_next;
      }
      var edge = this.m_contactList;
      while (edge) {
         var c = edge.contact;
         edge = edge.next;
         var fixtureA = c.GetFixtureA();
         var fixtureB = c.GetFixtureB();
         if (fixture == fixtureA || fixture == fixtureB) {
            this.m_world.m_contactManager.Destroy(c);
         }
      }
      if (this.m_flags & b2Body.e_activeFlag) {
         var broadPhase = this.m_world.m_contactManager.m_broadPhase;
         fixture.DestroyProxy(broadPhase);
      }
      else {}
      fixture.Destroy();
      fixture.m_body = null;
      fixture.m_next = null;
      --this.m_fixtureCount;
      this.ResetMassData();
   }
   b2Body.prototype.SetPositionAndAngle = function (position, angle) {
      if (angle === undefined) angle = 0;
      var f;
      if (this.m_world.IsLocked() == true) {
         return;
      }
      this.m_xf.R.Set(angle);
      this.m_xf.position.SetV(position);
      var tMat = this.m_xf.R;
      var tVec = this.m_sweep.localCenter;
      this.m_sweep.c.x = (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
      this.m_sweep.c.y = (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
      this.m_sweep.c.x += this.m_xf.position.x;
      this.m_sweep.c.y += this.m_xf.position.y;
      this.m_sweep.c0.SetV(this.m_sweep.c);
      this.m_sweep.a0 = this.m_sweep.a = angle;
      var broadPhase = this.m_world.m_contactManager.m_broadPhase;
      for (f = this.m_fixtureList;
      f; f = f.m_next) {
         f.Synchronize(broadPhase, this.m_xf, this.m_xf);
      }
      this.m_world.m_contactManager.FindNewContacts();
   }
   b2Body.prototype.SetTransform = function (xf) {
      this.SetPositionAndAngle(xf.position, xf.GetAngle());
   }
   b2Body.prototype.GetTransform = function () {
      return this.m_xf;
   }
   b2Body.prototype.GetPosition = function () {
      return this.m_xf.position;
   }
   b2Body.prototype.SetPosition = function (position) {
      this.SetPositionAndAngle(position, this.GetAngle());
   }
   b2Body.prototype.GetAngle = function () {
      return this.m_sweep.a;
   }
   b2Body.prototype.SetAngle = function (angle) {
      if (angle === undefined) angle = 0;
      this.SetPositionAndAngle(this.GetPosition(), angle);
   }
   b2Body.prototype.GetWorldCenter = function () {
      return this.m_sweep.c;
   }
   b2Body.prototype.GetLocalCenter = function () {
      return this.m_sweep.localCenter;
   }
   b2Body.prototype.SetLinearVelocity = function (v) {
      if (this.m_type == b2Body.b2_staticBody) {
         return;
      }
      this.m_linearVelocity.SetV(v);
   }
   b2Body.prototype.GetLinearVelocity = function () {
      return this.m_linearVelocity;
   }
   b2Body.prototype.SetAngularVelocity = function (omega) {
      if (omega === undefined) omega = 0;
      if (this.m_type == b2Body.b2_staticBody) {
         return;
      }
      this.m_angularVelocity = omega;
   }
   b2Body.prototype.GetAngularVelocity = function () {
      return this.m_angularVelocity;
   }
   b2Body.prototype.GetDefinition = function () {
      var bd = new b2BodyDef();
      bd.type = this.GetType();
      bd.allowSleep = (this.m_flags & b2Body.e_allowSleepFlag) == b2Body.e_allowSleepFlag;
      bd.angle = this.GetAngle();
      bd.angularDamping = this.m_angularDamping;
      bd.angularVelocity = this.m_angularVelocity;
      bd.fixedRotation = (this.m_flags & b2Body.e_fixedRotationFlag) == b2Body.e_fixedRotationFlag;
      bd.bullet = (this.m_flags & b2Body.e_bulletFlag) == b2Body.e_bulletFlag;
      bd.awake = (this.m_flags & b2Body.e_awakeFlag) == b2Body.e_awakeFlag;
      bd.linearDamping = this.m_linearDamping;
      bd.linearVelocity.SetV(this.GetLinearVelocity());
      bd.position = this.GetPosition();
      bd.userData = this.GetUserData();
      return bd;
   }
   b2Body.prototype.ApplyForce = function (force, point) {
      if (this.m_type != b2Body.b2_dynamicBody) {
         return;
      }
      if (this.IsAwake() == false) {
         this.SetAwake(true);
      }
      this.m_force.x += force.x;
      this.m_force.y += force.y;
      this.m_torque += ((point.x - this.m_sweep.c.x) * force.y - (point.y - this.m_sweep.c.y) * force.x);
   }
   b2Body.prototype.ApplyTorque = function (torque) {
      if (torque === undefined) torque = 0;
      if (this.m_type != b2Body.b2_dynamicBody) {
         return;
      }
      if (this.IsAwake() == false) {
         this.SetAwake(true);
      }
      this.m_torque += torque;
   }
   b2Body.prototype.ApplyImpulse = function (impulse, point) {
      if (this.m_type != b2Body.b2_dynamicBody) {
         return;
      }
      if (this.IsAwake() == false) {
         this.SetAwake(true);
      }
      this.m_linearVelocity.x += this.m_invMass * impulse.x;
      this.m_linearVelocity.y += this.m_invMass * impulse.y;
      this.m_angularVelocity += this.m_invI * ((point.x - this.m_sweep.c.x) * impulse.y - (point.y - this.m_sweep.c.y) * impulse.x);
   }
   b2Body.prototype.Split = function (callback) {
      var linearVelocity = this.GetLinearVelocity().Copy();
      var angularVelocity = this.GetAngularVelocity();
      var center = this.GetWorldCenter();
      var body1 = this;
      var body2 = this.m_world.CreateBody(this.GetDefinition());
      var prev;
      for (var f = body1.m_fixtureList; f;) {
         if (callback(f)) {
            var next = f.m_next;
            if (prev) {
               prev.m_next = next;
            }
            else {
               body1.m_fixtureList = next;
            }
            body1.m_fixtureCount--;
            f.m_next = body2.m_fixtureList;
            body2.m_fixtureList = f;
            body2.m_fixtureCount++;
            f.m_body = body2;
            f = next;
         }
         else {
            prev = f;
            f = f.m_next;
         }
      }
      body1.ResetMassData();
      body2.ResetMassData();
      var center1 = body1.GetWorldCenter();
      var center2 = body2.GetWorldCenter();
      var velocity1 = b2Math.AddVV(linearVelocity, b2Math.CrossFV(angularVelocity, b2Math.SubtractVV(center1, center)));
      var velocity2 = b2Math.AddVV(linearVelocity, b2Math.CrossFV(angularVelocity, b2Math.SubtractVV(center2, center)));
      body1.SetLinearVelocity(velocity1);
      body2.SetLinearVelocity(velocity2);
      body1.SetAngularVelocity(angularVelocity);
      body2.SetAngularVelocity(angularVelocity);
      body1.SynchronizeFixtures();
      body2.SynchronizeFixtures();
      return body2;
   }
   b2Body.prototype.Merge = function (other) {
      var f;
      for (f = other.m_fixtureList;
      f;) {
         var next = f.m_next;
         other.m_fixtureCount--;
         f.m_next = this.m_fixtureList;
         this.m_fixtureList = f;
         this.m_fixtureCount++;
         f.m_body = body2;
         f = next;
      }
      body1.m_fixtureCount = 0;
      var body1 = this;
      var body2 = other;
      var center1 = body1.GetWorldCenter();
      var center2 = body2.GetWorldCenter();
      var velocity1 = body1.GetLinearVelocity().Copy();
      var velocity2 = body2.GetLinearVelocity().Copy();
      var angular1 = body1.GetAngularVelocity();
      var angular = body2.GetAngularVelocity();
      body1.ResetMassData();
      this.SynchronizeFixtures();
   }
   b2Body.prototype.GetMass = function () {
      return this.m_mass;
   }
   b2Body.prototype.GetInertia = function () {
      return this.m_I;
   }
   b2Body.prototype.GetMassData = function (data) {
      data.mass = this.m_mass;
      data.I = this.m_I;
      data.center.SetV(this.m_sweep.localCenter);
   }
   b2Body.prototype.SetMassData = function (massData) {
      b2Settings.b2Assert(this.m_world.IsLocked() == false);
      if (this.m_world.IsLocked() == true) {
         return;
      }
      if (this.m_type != b2Body.b2_dynamicBody) {
         return;
      }
      this.m_invMass = 0.0;
      this.m_I = 0.0;
      this.m_invI = 0.0;
      this.m_mass = massData.mass;
      if (this.m_mass <= 0.0) {
         this.m_mass = 1.0;
      }
      this.m_invMass = 1.0 / this.m_mass;
      if (massData.I > 0.0 && (this.m_flags & b2Body.e_fixedRotationFlag) == 0) {
         this.m_I = massData.I - this.m_mass * (massData.center.x * massData.center.x + massData.center.y * massData.center.y);
         this.m_invI = 1.0 / this.m_I;
      }
      var oldCenter = this.m_sweep.c.Copy();
      this.m_sweep.localCenter.SetV(massData.center);
      this.m_sweep.c0.SetV(b2Math.MulX(this.m_xf, this.m_sweep.localCenter));
      this.m_sweep.c.SetV(this.m_sweep.c0);
      this.m_linearVelocity.x += this.m_angularVelocity * (-(this.m_sweep.c.y - oldCenter.y));
      this.m_linearVelocity.y += this.m_angularVelocity * (+(this.m_sweep.c.x - oldCenter.x));
   }
   b2Body.prototype.ResetMassData = function () {
      this.m_mass = 0.0;
      this.m_invMass = 0.0;
      this.m_I = 0.0;
      this.m_invI = 0.0;
      this.m_sweep.localCenter.SetZero();
      if (this.m_type == b2Body.b2_staticBody || this.m_type == b2Body.b2_kinematicBody) {
         return;
      }
      var center = b2Vec2.Make(0, 0);
      for (var f = this.m_fixtureList; f; f = f.m_next) {
         if (f.m_density == 0.0) {
            continue;
         }
         var massData = f.GetMassData();
         this.m_mass += massData.mass;
         center.x += massData.center.x * massData.mass;
         center.y += massData.center.y * massData.mass;
         this.m_I += massData.I;
      }
      if (this.m_mass > 0.0) {
         this.m_invMass = 1.0 / this.m_mass;
         center.x *= this.m_invMass;
         center.y *= this.m_invMass;
      }
      else {
         this.m_mass = 1.0;
         this.m_invMass = 1.0;
      }
      if (this.m_I > 0.0 && (this.m_flags & b2Body.e_fixedRotationFlag) == 0) {
         this.m_I -= this.m_mass * (center.x * center.x + center.y * center.y);
         this.m_I *= this.m_inertiaScale;
         b2Settings.b2Assert(this.m_I > 0);
         this.m_invI = 1.0 / this.m_I;
      }
      else {
         this.m_I = 0.0;
         this.m_invI = 0.0;
      }
      var oldCenter = this.m_sweep.c.Copy();
      this.m_sweep.localCenter.SetV(center);
      this.m_sweep.c0.SetV(b2Math.MulX(this.m_xf, this.m_sweep.localCenter));
      this.m_sweep.c.SetV(this.m_sweep.c0);
      this.m_linearVelocity.x += this.m_angularVelocity * (-(this.m_sweep.c.y - oldCenter.y));
      this.m_linearVelocity.y += this.m_angularVelocity * (+(this.m_sweep.c.x - oldCenter.x));
   }
   b2Body.prototype.GetWorldPoint = function (localPoint) {
      var A = this.m_xf.R;
      var u = new b2Vec2(A.col1.x * localPoint.x + A.col2.x * localPoint.y, A.col1.y * localPoint.x + A.col2.y * localPoint.y);
      u.x += this.m_xf.position.x;
      u.y += this.m_xf.position.y;
      return u;
   }
   b2Body.prototype.GetWorldVector = function (localVector) {
      return b2Math.MulMV(this.m_xf.R, localVector);
   }
   b2Body.prototype.GetLocalPoint = function (worldPoint) {
      return b2Math.MulXT(this.m_xf, worldPoint);
   }
   b2Body.prototype.GetLocalVector = function (worldVector) {
      return b2Math.MulTMV(this.m_xf.R, worldVector);
   }
   b2Body.prototype.GetLinearVelocityFromWorldPoint = function (worldPoint) {
      return new b2Vec2(this.m_linearVelocity.x - this.m_angularVelocity * (worldPoint.y - this.m_sweep.c.y), this.m_linearVelocity.y + this.m_angularVelocity * (worldPoint.x - this.m_sweep.c.x));
   }
   b2Body.prototype.GetLinearVelocityFromLocalPoint = function (localPoint) {
      var A = this.m_xf.R;
      var worldPoint = new b2Vec2(A.col1.x * localPoint.x + A.col2.x * localPoint.y, A.col1.y * localPoint.x + A.col2.y * localPoint.y);
      worldPoint.x += this.m_xf.position.x;
      worldPoint.y += this.m_xf.position.y;
      return new b2Vec2(this.m_linearVelocity.x - this.m_angularVelocity * (worldPoint.y - this.m_sweep.c.y), this.m_linearVelocity.y + this.m_angularVelocity * (worldPoint.x - this.m_sweep.c.x));
   }
   b2Body.prototype.GetLinearDamping = function () {
      return this.m_linearDamping;
   }
   b2Body.prototype.SetLinearDamping = function (linearDamping) {
      if (linearDamping === undefined) linearDamping = 0;
      this.m_linearDamping = linearDamping;
   }
   b2Body.prototype.GetAngularDamping = function () {
      return this.m_angularDamping;
   }
   b2Body.prototype.SetAngularDamping = function (angularDamping) {
      if (angularDamping === undefined) angularDamping = 0;
      this.m_angularDamping = angularDamping;
   }
   b2Body.prototype.SetType = function (type) {
      if (type === undefined) type = 0;
      if (this.m_type == type) {
         return;
      }
      this.m_type = type;
      this.ResetMassData();
      if (this.m_type == b2Body.b2_staticBody) {
         this.m_linearVelocity.SetZero();
         this.m_angularVelocity = 0.0;
      }
      this.SetAwake(true);
      this.m_force.SetZero();
      this.m_torque = 0.0;
      for (var ce = this.m_contactList; ce; ce = ce.next) {
         ce.contact.FlagForFiltering();
      }
   }
   b2Body.prototype.GetType = function () {
      return this.m_type;
   }
   b2Body.prototype.SetBullet = function (flag) {
      if (flag) {
         this.m_flags |= b2Body.e_bulletFlag;
      }
      else {
         this.m_flags &= ~b2Body.e_bulletFlag;
      }
   }
   b2Body.prototype.IsBullet = function () {
      return (this.m_flags & b2Body.e_bulletFlag) == b2Body.e_bulletFlag;
   }
   b2Body.prototype.SetSleepingAllowed = function (flag) {
      if (flag) {
         this.m_flags |= b2Body.e_allowSleepFlag;
      }
      else {
         this.m_flags &= ~b2Body.e_allowSleepFlag;
         this.SetAwake(true);
      }
   }
   b2Body.prototype.SetAwake = function (flag) {
      if (flag) {
         this.m_flags |= b2Body.e_awakeFlag;
         this.m_sleepTime = 0.0;
      }
      else {
         this.m_flags &= ~b2Body.e_awakeFlag;
         this.m_sleepTime = 0.0;
         this.m_linearVelocity.SetZero();
         this.m_angularVelocity = 0.0;
         this.m_force.SetZero();
         this.m_torque = 0.0;
      }
   }
   b2Body.prototype.IsAwake = function () {
      return (this.m_flags & b2Body.e_awakeFlag) == b2Body.e_awakeFlag;
   }
   b2Body.prototype.SetFixedRotation = function (fixed) {
      if (fixed) {
         this.m_flags |= b2Body.e_fixedRotationFlag;
      }
      else {
         this.m_flags &= ~b2Body.e_fixedRotationFlag;
      }
      this.ResetMassData();
   }
   b2Body.prototype.IsFixedRotation = function () {
      return (this.m_flags & b2Body.e_fixedRotationFlag) == b2Body.e_fixedRotationFlag;
   }
   b2Body.prototype.SetActive = function (flag) {
      if (flag == this.IsActive()) {
         return;
      }
      var broadPhase;
      var f;
      if (flag) {
         this.m_flags |= b2Body.e_activeFlag;
         broadPhase = this.m_world.m_contactManager.m_broadPhase;
         for (f = this.m_fixtureList;
         f; f = f.m_next) {
            f.CreateProxy(broadPhase, this.m_xf);
         }
      }
      else {
         this.m_flags &= ~b2Body.e_activeFlag;
         broadPhase = this.m_world.m_contactManager.m_broadPhase;
         for (f = this.m_fixtureList;
         f; f = f.m_next) {
            f.DestroyProxy(broadPhase);
         }
         var ce = this.m_contactList;
         while (ce) {
            var ce0 = ce;
            ce = ce.next;
            this.m_world.m_contactManager.Destroy(ce0.contact);
         }
         this.m_contactList = null;
      }
   }
   b2Body.prototype.IsActive = function () {
      return (this.m_flags & b2Body.e_activeFlag) == b2Body.e_activeFlag;
   }
   b2Body.prototype.IsSleepingAllowed = function () {
      return (this.m_flags & b2Body.e_allowSleepFlag) == b2Body.e_allowSleepFlag;
   }
   b2Body.prototype.GetFixtureList = function () {
      return this.m_fixtureList;
   }
   b2Body.prototype.GetJointList = function () {
      return this.m_jointList;
   }
   b2Body.prototype.GetControllerList = function () {
      return this.m_controllerList;
   }
   b2Body.prototype.GetContactList = function () {
      return this.m_contactList;
   }
   b2Body.prototype.GetNext = function () {
      return this.m_next;
   }
   b2Body.prototype.GetUserData = function () {
      return this.m_userData;
   }
   b2Body.prototype.SetUserData = function (data) {
      this.m_userData = data;
   }
   b2Body.prototype.GetWorld = function () {
      return this.m_world;
   }
   b2Body.prototype.b2Body = function (bd, world) {
      this.m_flags = 0;
      if (bd.bullet) {
         this.m_flags |= b2Body.e_bulletFlag;
      }
      if (bd.fixedRotation) {
         this.m_flags |= b2Body.e_fixedRotationFlag;
      }
      if (bd.allowSleep) {
         this.m_flags |= b2Body.e_allowSleepFlag;
      }
      if (bd.awake) {
         this.m_flags |= b2Body.e_awakeFlag;
      }
      if (bd.active) {
         this.m_flags |= b2Body.e_activeFlag;
      }
      this.m_world = world;
      this.m_xf.position.SetV(bd.position);
      this.m_xf.R.Set(bd.angle);
      this.m_sweep.localCenter.SetZero();
      this.m_sweep.t0 = 1.0;
      this.m_sweep.a0 = this.m_sweep.a = bd.angle;
      var tMat = this.m_xf.R;
      var tVec = this.m_sweep.localCenter;
      this.m_sweep.c.x = (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
      this.m_sweep.c.y = (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
      this.m_sweep.c.x += this.m_xf.position.x;
      this.m_sweep.c.y += this.m_xf.position.y;
      this.m_sweep.c0.SetV(this.m_sweep.c);
      this.m_jointList = null;
      this.m_controllerList = null;
      this.m_contactList = null;
      this.m_controllerCount = 0;
      this.m_prev = null;
      this.m_next = null;
      this.m_linearVelocity.SetV(bd.linearVelocity);
      this.m_angularVelocity = bd.angularVelocity;
      this.m_linearDamping = bd.linearDamping;
      this.m_angularDamping = bd.angularDamping;
      this.m_force.Set(0.0, 0.0);
      this.m_torque = 0.0;
      this.m_sleepTime = 0.0;
      this.m_type = bd.type;
      if (this.m_type == b2Body.b2_dynamicBody) {
         this.m_mass = 1.0;
         this.m_invMass = 1.0;
      }
      else {
         this.m_mass = 0.0;
         this.m_invMass = 0.0;
      }
      this.m_I = 0.0;
      this.m_invI = 0.0;
      this.m_inertiaScale = bd.inertiaScale;
      this.m_userData = bd.userData;
      this.m_fixtureList = null;
      this.m_fixtureCount = 0;
   }
   b2Body.prototype.SynchronizeFixtures = function () {
      var xf1 = b2Body.s_xf1;
      xf1.R.Set(this.m_sweep.a0);
      var tMat = xf1.R;
      var tVec = this.m_sweep.localCenter;
      xf1.position.x = this.m_sweep.c0.x - (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
      xf1.position.y = this.m_sweep.c0.y - (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
      var f;
      var broadPhase = this.m_world.m_contactManager.m_broadPhase;
      for (f = this.m_fixtureList;
      f; f = f.m_next) {
         f.Synchronize(broadPhase, xf1, this.m_xf);
      }
   }
   b2Body.prototype.SynchronizeTransform = function () {
      this.m_xf.R.Set(this.m_sweep.a);
      var tMat = this.m_xf.R;
      var tVec = this.m_sweep.localCenter;
      this.m_xf.position.x = this.m_sweep.c.x - (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
      this.m_xf.position.y = this.m_sweep.c.y - (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
   }
   b2Body.prototype.ShouldCollide = function (other) {
      if (this.m_type != b2Body.b2_dynamicBody && other.m_type != b2Body.b2_dynamicBody) {
         return false;
      }
      for (var jn = this.m_jointList; jn; jn = jn.next) {
         if (jn.other == other) if (jn.joint.m_collideConnected == false) {
            return false;
         }
      }
      return true;
   }
   b2Body.prototype.Advance = function (t) {
      if (t === undefined) t = 0;
      this.m_sweep.Advance(t);
      this.m_sweep.c.SetV(this.m_sweep.c0);
      this.m_sweep.a = this.m_sweep.a0;
      this.SynchronizeTransform();
   }
   Box2D.postDefs.push(function () {
      Box2D.Dynamics.b2Body.s_xf1 = new b2Transform();
      Box2D.Dynamics.b2Body.e_islandFlag = 0x0001;
      Box2D.Dynamics.b2Body.e_awakeFlag = 0x0002;
      Box2D.Dynamics.b2Body.e_allowSleepFlag = 0x0004;
      Box2D.Dynamics.b2Body.e_bulletFlag = 0x0008;
      Box2D.Dynamics.b2Body.e_fixedRotationFlag = 0x0010;
      Box2D.Dynamics.b2Body.e_activeFlag = 0x0020;
      Box2D.Dynamics.b2Body.b2_staticBody = 0;
      Box2D.Dynamics.b2Body.b2_kinematicBody = 1;
      Box2D.Dynamics.b2Body.b2_dynamicBody = 2;
   });
   b2BodyDef.b2BodyDef = function () {
      this.position = new b2Vec2();
      this.linearVelocity = new b2Vec2();
   };
   b2BodyDef.prototype.b2BodyDef = function () {
      this.userData = null;
      this.position.Set(0.0, 0.0);
      this.angle = 0.0;
      this.linearVelocity.Set(0, 0);
      this.angularVelocity = 0.0;
      this.linearDamping = 0.0;
      this.angularDamping = 0.0;
      this.allowSleep = true;
      this.awake = true;
      this.fixedRotation = false;
      this.bullet = false;
      this.type = b2Body.b2_staticBody;
      this.active = true;
      this.inertiaScale = 1.0;
   }
   b2ContactFilter.b2ContactFilter = function () {};
   b2ContactFilter.prototype.ShouldCollide = function (fixtureA, fixtureB) {
      var filter1 = fixtureA.GetFilterData();
      var filter2 = fixtureB.GetFilterData();
      if (filter1.groupIndex == filter2.groupIndex && filter1.groupIndex != 0) {
         return filter1.groupIndex > 0;
      }
      var collide = (filter1.maskBits & filter2.categoryBits) != 0 && (filter1.categoryBits & filter2.maskBits) != 0;
      return collide;
   }
   b2ContactFilter.prototype.RayCollide = function (userData, fixture) {
      if (!userData) return true;
      return this.ShouldCollide((userData instanceof b2Fixture ? userData : null), fixture);
   }
   Box2D.postDefs.push(function () {
      Box2D.Dynamics.b2ContactFilter.b2_defaultFilter = new b2ContactFilter();
   });
   b2ContactImpulse.b2ContactImpulse = function () {
      this.normalImpulses = new Vector_a2j_Number(b2Settings.b2_maxManifoldPoints);
      this.tangentImpulses = new Vector_a2j_Number(b2Settings.b2_maxManifoldPoints);
   };
   b2ContactListener.b2ContactListener = function () {};
   b2ContactListener.prototype.BeginContact = function (contact) {}
   b2ContactListener.prototype.EndContact = function (contact) {}
   b2ContactListener.prototype.PreSolve = function (contact, oldManifold) {}
   b2ContactListener.prototype.PostSolve = function (contact, impulse) {}
   Box2D.postDefs.push(function () {
      Box2D.Dynamics.b2ContactListener.b2_defaultListener = new b2ContactListener();
   });
   b2ContactManager.b2ContactManager = function () {};
   b2ContactManager.prototype.b2ContactManager = function () {
      this.m_world = null;
      this.m_contactCount = 0;
      this.m_contactFilter = b2ContactFilter.b2_defaultFilter;
      this.m_contactListener = b2ContactListener.b2_defaultListener;
      this.m_contactFactory = new b2ContactFactory(this.m_allocator);
      this.m_broadPhase = new b2DynamicTreeBroadPhase();
   }
   b2ContactManager.prototype.AddPair = function (proxyUserDataA, proxyUserDataB) {
      var fixtureA = (proxyUserDataA instanceof b2Fixture ? proxyUserDataA : null);
      var fixtureB = (proxyUserDataB instanceof b2Fixture ? proxyUserDataB : null);
      var bodyA = fixtureA.GetBody();
      var bodyB = fixtureB.GetBody();
      if (bodyA == bodyB) return;
      var edge = bodyB.GetContactList();
      while (edge) {
         if (edge.other == bodyA) {
            var fA = edge.contact.GetFixtureA();
            var fB = edge.contact.GetFixtureB();
            if (fA == fixtureA && fB == fixtureB) return;
            if (fA == fixtureB && fB == fixtureA) return;
         }
         edge = edge.next;
      }
      if (bodyB.ShouldCollide(bodyA) == false) {
         return;
      }
      if (this.m_contactFilter.ShouldCollide(fixtureA, fixtureB) == false) {
         return;
      }
      var c = this.m_contactFactory.Create(fixtureA, fixtureB);
      fixtureA = c.GetFixtureA();
      fixtureB = c.GetFixtureB();
      bodyA = fixtureA.m_body;
      bodyB = fixtureB.m_body;
      c.m_prev = null;
      c.m_next = this.m_world.m_contactList;
      if (this.m_world.m_contactList != null) {
         this.m_world.m_contactList.m_prev = c;
      }
      this.m_world.m_contactList = c;
      c.m_nodeA.contact = c;
      c.m_nodeA.other = bodyB;
      c.m_nodeA.prev = null;
      c.m_nodeA.next = bodyA.m_contactList;
      if (bodyA.m_contactList != null) {
         bodyA.m_contactList.prev = c.m_nodeA;
      }
      bodyA.m_contactList = c.m_nodeA;
      c.m_nodeB.contact = c;
      c.m_nodeB.other = bodyA;
      c.m_nodeB.prev = null;
      c.m_nodeB.next = bodyB.m_contactList;
      if (bodyB.m_contactList != null) {
         bodyB.m_contactList.prev = c.m_nodeB;
      }
      bodyB.m_contactList = c.m_nodeB;
      ++this.m_world.m_contactCount;
      return;
   }
   b2ContactManager.prototype.FindNewContacts = function () {
      this.m_broadPhase.UpdatePairs(Box2D.generateCallback(this, this.AddPair));
   }
   b2ContactManager.prototype.Destroy = function (c) {
      var fixtureA = c.GetFixtureA();
      var fixtureB = c.GetFixtureB();
      var bodyA = fixtureA.GetBody();
      var bodyB = fixtureB.GetBody();
      if (c.IsTouching()) {
         this.m_contactListener.EndContact(c);
      }
      if (c.m_prev) {
         c.m_prev.m_next = c.m_next;
      }
      if (c.m_next) {
         c.m_next.m_prev = c.m_prev;
      }
      if (c == this.m_world.m_contactList) {
         this.m_world.m_contactList = c.m_next;
      }
      if (c.m_nodeA.prev) {
         c.m_nodeA.prev.next = c.m_nodeA.next;
      }
      if (c.m_nodeA.next) {
         c.m_nodeA.next.prev = c.m_nodeA.prev;
      }
      if (c.m_nodeA == bodyA.m_contactList) {
         bodyA.m_contactList = c.m_nodeA.next;
      }
      if (c.m_nodeB.prev) {
         c.m_nodeB.prev.next = c.m_nodeB.next;
      }
      if (c.m_nodeB.next) {
         c.m_nodeB.next.prev = c.m_nodeB.prev;
      }
      if (c.m_nodeB == bodyB.m_contactList) {
         bodyB.m_contactList = c.m_nodeB.next;
      }
      this.m_contactFactory.Destroy(c);
      --this.m_contactCount;
   }
   b2ContactManager.prototype.Collide = function () {
      var c = this.m_world.m_contactList;
      while (c) {
         var fixtureA = c.GetFixtureA();
         var fixtureB = c.GetFixtureB();
         var bodyA = fixtureA.GetBody();
         var bodyB = fixtureB.GetBody();
         if (bodyA.IsAwake() == false && bodyB.IsAwake() == false) {
            c = c.GetNext();
            continue;
         }
         if (c.m_flags & b2Contact.e_filterFlag) {
            if (bodyB.ShouldCollide(bodyA) == false) {
               var cNuke = c;
               c = cNuke.GetNext();
               this.Destroy(cNuke);
               continue;
            }
            if (this.m_contactFilter.ShouldCollide(fixtureA, fixtureB) == false) {
               cNuke = c;
               c = cNuke.GetNext();
               this.Destroy(cNuke);
               continue;
            }
            c.m_flags &= ~b2Contact.e_filterFlag;
         }
         var proxyA = fixtureA.m_proxy;
         var proxyB = fixtureB.m_proxy;
         var overlap = this.m_broadPhase.TestOverlap(proxyA, proxyB);
         if (overlap == false) {
            cNuke = c;
            c = cNuke.GetNext();
            this.Destroy(cNuke);
            continue;
         }
         c.Update(this.m_contactListener);
         c = c.GetNext();
      }
   }
   Box2D.postDefs.push(function () {
      Box2D.Dynamics.b2ContactManager.s_evalCP = new b2ContactPoint();
   });
   b2DebugDraw.b2DebugDraw = function () {};
   b2DebugDraw.prototype.b2DebugDraw = function () {}
   b2DebugDraw.prototype.SetFlags = function (flags) {
      if (flags === undefined) flags = 0;
   }
   b2DebugDraw.prototype.GetFlags = function () {}
   b2DebugDraw.prototype.AppendFlags = function (flags) {
      if (flags === undefined) flags = 0;
   }
   b2DebugDraw.prototype.ClearFlags = function (flags) {
      if (flags === undefined) flags = 0;
   }
   b2DebugDraw.prototype.SetSprite = function (sprite) {}
   b2DebugDraw.prototype.GetSprite = function () {}
   b2DebugDraw.prototype.SetDrawScale = function (drawScale) {
      if (drawScale === undefined) drawScale = 0;
   }
   b2DebugDraw.prototype.GetDrawScale = function () {}
   b2DebugDraw.prototype.SetLineThickness = function (lineThickness) {
      if (lineThickness === undefined) lineThickness = 0;
   }
   b2DebugDraw.prototype.GetLineThickness = function () {}
   b2DebugDraw.prototype.SetAlpha = function (alpha) {
      if (alpha === undefined) alpha = 0;
   }
   b2DebugDraw.prototype.GetAlpha = function () {}
   b2DebugDraw.prototype.SetFillAlpha = function (alpha) {
      if (alpha === undefined) alpha = 0;
   }
   b2DebugDraw.prototype.GetFillAlpha = function () {}
   b2DebugDraw.prototype.SetXFormScale = function (xformScale) {
      if (xformScale === undefined) xformScale = 0;
   }
   b2DebugDraw.prototype.GetXFormScale = function () {}
   b2DebugDraw.prototype.DrawPolygon = function (vertices, vertexCount, color) {
      if (vertexCount === undefined) vertexCount = 0;
   }
   b2DebugDraw.prototype.DrawSolidPolygon = function (vertices, vertexCount, color) {
      if (vertexCount === undefined) vertexCount = 0;
   }
   b2DebugDraw.prototype.DrawCircle = function (center, radius, color) {
      if (radius === undefined) radius = 0;
   }
   b2DebugDraw.prototype.DrawSolidCircle = function (center, radius, axis, color) {
      if (radius === undefined) radius = 0;
   }
   b2DebugDraw.prototype.DrawSegment = function (p1, p2, color) {}
   b2DebugDraw.prototype.DrawTransform = function (xf) {}
   Box2D.postDefs.push(function () {
      Box2D.Dynamics.b2DebugDraw.e_shapeBit = 0x0001;
      Box2D.Dynamics.b2DebugDraw.e_jointBit = 0x0002;
      Box2D.Dynamics.b2DebugDraw.e_aabbBit = 0x0004;
      Box2D.Dynamics.b2DebugDraw.e_pairBit = 0x0008;
      Box2D.Dynamics.b2DebugDraw.e_centerOfMassBit = 0x0010;
      Box2D.Dynamics.b2DebugDraw.e_controllerBit = 0x0020;
   });
   b2DestructionListener.b2DestructionListener = function () {};
   b2DestructionListener.prototype.SayGoodbyeJoint = function (joint) {}
   b2DestructionListener.prototype.SayGoodbyeFixture = function (fixture) {}
   b2FilterData.b2FilterData = function () {
      this.categoryBits = 0x0001;
      this.maskBits = 0xFFFF;
      this.groupIndex = 0;
   };
   b2FilterData.prototype.Copy = function () {
      var copy = new b2FilterData();
      copy.categoryBits = this.categoryBits;
      copy.maskBits = this.maskBits;
      copy.groupIndex = this.groupIndex;
      return copy;
   }
   b2Fixture.b2Fixture = function () {
      this.m_filter = new b2FilterData();
   };
   b2Fixture.prototype.GetType = function () {
      return this.m_shape.GetType();
   }
   b2Fixture.prototype.GetShape = function () {
      return this.m_shape;
   }
   b2Fixture.prototype.SetSensor = function (sensor) {
      if (this.m_isSensor == sensor) return;
      this.m_isSensor = sensor;
      if (this.m_body == null) return;
      var edge = this.m_body.GetContactList();
      while (edge) {
         var contact = edge.contact;
         var fixtureA = contact.GetFixtureA();
         var fixtureB = contact.GetFixtureB();
         if (fixtureA == this || fixtureB == this) contact.SetSensor(fixtureA.IsSensor() || fixtureB.IsSensor());
         edge = edge.next;
      }
   }
   b2Fixture.prototype.IsSensor = function () {
      return this.m_isSensor;
   }
   b2Fixture.prototype.SetFilterData = function (filter) {
      this.m_filter = filter.Copy();
      if (this.m_body) return;
      var edge = this.m_body.GetContactList();
      while (edge) {
         var contact = edge.contact;
         var fixtureA = contact.GetFixtureA();
         var fixtureB = contact.GetFixtureB();
         if (fixtureA == this || fixtureB == this) contact.FlagForFiltering();
         edge = edge.next;
      }
   }
   b2Fixture.prototype.GetFilterData = function () {
      return this.m_filter.Copy();
   }
   b2Fixture.prototype.GetBody = function () {
      return this.m_body;
   }
   b2Fixture.prototype.GetNext = function () {
      return this.m_next;
   }
   b2Fixture.prototype.GetUserData = function () {
      return this.m_userData;
   }
   b2Fixture.prototype.SetUserData = function (data) {
      this.m_userData = data;
   }
   b2Fixture.prototype.TestPoint = function (p) {
      return this.m_shape.TestPoint(this.m_body.GetTransform(), p);
   }
   b2Fixture.prototype.RayCast = function (output, input) {
      return this.m_shape.RayCast(output, input, this.m_body.GetTransform());
   }
   b2Fixture.prototype.GetMassData = function (massData) {
      if (massData === undefined) massData = null;
      if (massData == null) {
         massData = new b2MassData();
      }
      this.m_shape.ComputeMass(massData, this.m_density);
      return massData;
   }
   b2Fixture.prototype.SetDensity = function (density) {
      if (density === undefined) density = 0;
      this.m_density = density;
   }
   b2Fixture.prototype.GetDensity = function () {
      return this.m_density;
   }
   b2Fixture.prototype.GetFriction = function () {
      return this.m_friction;
   }
   b2Fixture.prototype.SetFriction = function (friction) {
      if (friction === undefined) friction = 0;
      this.m_friction = friction;
   }
   b2Fixture.prototype.GetRestitution = function () {
      return this.m_restitution;
   }
   b2Fixture.prototype.SetRestitution = function (restitution) {
      if (restitution === undefined) restitution = 0;
      this.m_restitution = restitution;
   }
   b2Fixture.prototype.GetAABB = function () {
      return this.m_aabb;
   }
   b2Fixture.prototype.b2Fixture = function () {
      this.m_aabb = new b2AABB();
      this.m_userData = null;
      this.m_body = null;
      this.m_next = null;
      this.m_shape = null;
      this.m_density = 0.0;
      this.m_friction = 0.0;
      this.m_restitution = 0.0;
   }
   b2Fixture.prototype.Create = function (body, xf, def) {
      this.m_userData = def.userData;
      this.m_friction = def.friction;
      this.m_restitution = def.restitution;
      this.m_body = body;
      this.m_next = null;
      this.m_filter = def.filter.Copy();
      this.m_isSensor = def.isSensor;
      this.m_shape = def.shape.Copy();
      this.m_density = def.density;
   }
   b2Fixture.prototype.Destroy = function () {
      this.m_shape = null;
   }
   b2Fixture.prototype.CreateProxy = function (broadPhase, xf) {
      this.m_shape.ComputeAABB(this.m_aabb, xf);
      this.m_proxy = broadPhase.CreateProxy(this.m_aabb, this);
   }
   b2Fixture.prototype.DestroyProxy = function (broadPhase) {
      if (this.m_proxy == null) {
         return;
      }
      broadPhase.DestroyProxy(this.m_proxy);
      this.m_proxy = null;
   }
   b2Fixture.prototype.Synchronize = function (broadPhase, transform1, transform2) {
      if (!this.m_proxy) return;
      var aabb1 = new b2AABB();
      var aabb2 = new b2AABB();
      this.m_shape.ComputeAABB(aabb1, transform1);
      this.m_shape.ComputeAABB(aabb2, transform2);
      this.m_aabb.Combine(aabb1, aabb2);
      var displacement = b2Math.SubtractVV(transform2.position, transform1.position);
      broadPhase.MoveProxy(this.m_proxy, this.m_aabb, displacement);
   }
   b2FixtureDef.b2FixtureDef = function () {
      this.filter = new b2FilterData();
   };
   b2FixtureDef.prototype.b2FixtureDef = function () {
      this.shape = null;
      this.userData = null;
      this.friction = 0.2;
      this.restitution = 0.0;
      this.density = 0.0;
      this.filter.categoryBits = 0x0001;
      this.filter.maskBits = 0xFFFF;
      this.filter.groupIndex = 0;
      this.isSensor = false;
   }
   b2Island.b2Island = function () {};
   b2Island.prototype.b2Island = function () {
      this.m_bodies = new Vector();
      this.m_contacts = new Vector();
      this.m_joints = new Vector();
   }
   b2Island.prototype.Initialize = function (bodyCapacity, contactCapacity, jointCapacity, allocator, listener, contactSolver) {
      if (bodyCapacity === undefined) bodyCapacity = 0;
      if (contactCapacity === undefined) contactCapacity = 0;
      if (jointCapacity === undefined) jointCapacity = 0;
      var i = 0;
      this.m_bodyCapacity = bodyCapacity;
      this.m_contactCapacity = contactCapacity;
      this.m_jointCapacity = jointCapacity;
      this.m_bodyCount = 0;
      this.m_contactCount = 0;
      this.m_jointCount = 0;
      this.m_allocator = allocator;
      this.m_listener = listener;
      this.m_contactSolver = contactSolver;
      for (i = this.m_bodies.length;
      i < bodyCapacity; i++)
      this.m_bodies[i] = null;
      for (i = this.m_contacts.length;
      i < contactCapacity; i++)
      this.m_contacts[i] = null;
      for (i = this.m_joints.length;
      i < jointCapacity; i++)
      this.m_joints[i] = null;
   }
   b2Island.prototype.Clear = function () {
      this.m_bodyCount = 0;
      this.m_contactCount = 0;
      this.m_jointCount = 0;
   }
   b2Island.prototype.Solve = function (step, gravity, allowSleep) {
      var i = 0;
      var j = 0;
      var b;
      var joint;
      for (i = 0;
      i < this.m_bodyCount; ++i) {
         b = this.m_bodies[i];
         if (b.GetType() != b2Body.b2_dynamicBody) continue;
         b.m_linearVelocity.x += step.dt * (gravity.x + b.m_invMass * b.m_force.x);
         b.m_linearVelocity.y += step.dt * (gravity.y + b.m_invMass * b.m_force.y);
         b.m_angularVelocity += step.dt * b.m_invI * b.m_torque;
         b.m_linearVelocity.Multiply(b2Math.Clamp(1.0 - step.dt * b.m_linearDamping, 0.0, 1.0));
         b.m_angularVelocity *= b2Math.Clamp(1.0 - step.dt * b.m_angularDamping, 0.0, 1.0);
      }
      this.m_contactSolver.Initialize(step, this.m_contacts, this.m_contactCount, this.m_allocator);
      var contactSolver = this.m_contactSolver;
      contactSolver.InitVelocityConstraints(step);
      for (i = 0;
      i < this.m_jointCount; ++i) {
         joint = this.m_joints[i];
         joint.InitVelocityConstraints(step);
      }
      for (i = 0;
      i < step.velocityIterations; ++i) {
         for (j = 0;
         j < this.m_jointCount; ++j) {
            joint = this.m_joints[j];
            joint.SolveVelocityConstraints(step);
         }
         contactSolver.SolveVelocityConstraints();
      }
      for (i = 0;
      i < this.m_jointCount; ++i) {
         joint = this.m_joints[i];
         joint.FinalizeVelocityConstraints();
      }
      contactSolver.FinalizeVelocityConstraints();
      for (i = 0;
      i < this.m_bodyCount; ++i) {
         b = this.m_bodies[i];
         if (b.GetType() == b2Body.b2_staticBody) continue;
         var translationX = step.dt * b.m_linearVelocity.x;
         var translationY = step.dt * b.m_linearVelocity.y;
         if ((translationX * translationX + translationY * translationY) > b2Settings.b2_maxTranslationSquared) {
            b.m_linearVelocity.Normalize();
            b.m_linearVelocity.x *= b2Settings.b2_maxTranslation * step.inv_dt;
            b.m_linearVelocity.y *= b2Settings.b2_maxTranslation * step.inv_dt;
         }
         var rotation = step.dt * b.m_angularVelocity;
         if (rotation * rotation > b2Settings.b2_maxRotationSquared) {
            if (b.m_angularVelocity < 0.0) {
               b.m_angularVelocity = (-b2Settings.b2_maxRotation * step.inv_dt);
            }
            else {
               b.m_angularVelocity = b2Settings.b2_maxRotation * step.inv_dt;
            }
         }
         b.m_sweep.c0.SetV(b.m_sweep.c);
         b.m_sweep.a0 = b.m_sweep.a;
         b.m_sweep.c.x += step.dt * b.m_linearVelocity.x;
         b.m_sweep.c.y += step.dt * b.m_linearVelocity.y;
         b.m_sweep.a += step.dt * b.m_angularVelocity;
         b.SynchronizeTransform();
      }
      for (i = 0;
      i < step.positionIterations; ++i) {
         var contactsOkay = contactSolver.SolvePositionConstraints(b2Settings.b2_contactBaumgarte);
         var jointsOkay = true;
         for (j = 0;
         j < this.m_jointCount; ++j) {
            joint = this.m_joints[j];
            var jointOkay = joint.SolvePositionConstraints(b2Settings.b2_contactBaumgarte);
            jointsOkay = jointsOkay && jointOkay;
         }
         if (contactsOkay && jointsOkay) {
            break;
         }
      }
      this.Report(contactSolver.m_constraints);
      if (allowSleep) {
         var minSleepTime = Number.MAX_VALUE;
         var linTolSqr = b2Settings.b2_linearSleepTolerance * b2Settings.b2_linearSleepTolerance;
         var angTolSqr = b2Settings.b2_angularSleepTolerance * b2Settings.b2_angularSleepTolerance;
         for (i = 0;
         i < this.m_bodyCount; ++i) {
            b = this.m_bodies[i];
            if (b.GetType() == b2Body.b2_staticBody) {
               continue;
            }
            if ((b.m_flags & b2Body.e_allowSleepFlag) == 0) {
               b.m_sleepTime = 0.0;
               minSleepTime = 0.0;
            }
            if ((b.m_flags & b2Body.e_allowSleepFlag) == 0 || b.m_angularVelocity * b.m_angularVelocity > angTolSqr || b2Math.Dot(b.m_linearVelocity, b.m_linearVelocity) > linTolSqr) {
               b.m_sleepTime = 0.0;
               minSleepTime = 0.0;
            }
            else {
               b.m_sleepTime += step.dt;
               minSleepTime = b2Math.Min(minSleepTime, b.m_sleepTime);
            }
         }
         if (minSleepTime >= b2Settings.b2_timeToSleep) {
            for (i = 0;
            i < this.m_bodyCount; ++i) {
               b = this.m_bodies[i];
               b.SetAwake(false);
            }
         }
      }
   }
   b2Island.prototype.SolveTOI = function (subStep) {
      var i = 0;
      var j = 0;
      this.m_contactSolver.Initialize(subStep, this.m_contacts, this.m_contactCount, this.m_allocator);
      var contactSolver = this.m_contactSolver;
      for (i = 0;
      i < this.m_jointCount; ++i) {
         this.m_joints[i].InitVelocityConstraints(subStep);
      }
      for (i = 0;
      i < subStep.velocityIterations; ++i) {
         contactSolver.SolveVelocityConstraints();
         for (j = 0;
         j < this.m_jointCount; ++j) {
            this.m_joints[j].SolveVelocityConstraints(subStep);
         }
      }
      for (i = 0;
      i < this.m_bodyCount; ++i) {
         var b = this.m_bodies[i];
         if (b.GetType() == b2Body.b2_staticBody) continue;
         var translationX = subStep.dt * b.m_linearVelocity.x;
         var translationY = subStep.dt * b.m_linearVelocity.y;
         if ((translationX * translationX + translationY * translationY) > b2Settings.b2_maxTranslationSquared) {
            b.m_linearVelocity.Normalize();
            b.m_linearVelocity.x *= b2Settings.b2_maxTranslation * subStep.inv_dt;
            b.m_linearVelocity.y *= b2Settings.b2_maxTranslation * subStep.inv_dt;
         }
         var rotation = subStep.dt * b.m_angularVelocity;
         if (rotation * rotation > b2Settings.b2_maxRotationSquared) {
            if (b.m_angularVelocity < 0.0) {
               b.m_angularVelocity = (-b2Settings.b2_maxRotation * subStep.inv_dt);
            }
            else {
               b.m_angularVelocity = b2Settings.b2_maxRotation * subStep.inv_dt;
            }
         }
         b.m_sweep.c0.SetV(b.m_sweep.c);
         b.m_sweep.a0 = b.m_sweep.a;
         b.m_sweep.c.x += subStep.dt * b.m_linearVelocity.x;
         b.m_sweep.c.y += subStep.dt * b.m_linearVelocity.y;
         b.m_sweep.a += subStep.dt * b.m_angularVelocity;
         b.SynchronizeTransform();
      }
      var k_toiBaumgarte = 0.75;
      for (i = 0;
      i < subStep.positionIterations; ++i) {
         var contactsOkay = contactSolver.SolvePositionConstraints(k_toiBaumgarte);
         var jointsOkay = true;
         for (j = 0;
         j < this.m_jointCount; ++j) {
            var jointOkay = this.m_joints[j].SolvePositionConstraints(b2Settings.b2_contactBaumgarte);
            jointsOkay = jointsOkay && jointOkay;
         }
         if (contactsOkay && jointsOkay) {
            break;
         }
      }
      this.Report(contactSolver.m_constraints);
   }
   b2Island.prototype.Report = function (constraints) {
      if (this.m_listener == null) {
         return;
      }
      for (var i = 0; i < this.m_contactCount; ++i) {
         var c = this.m_contacts[i];
         var cc = constraints[i];
         for (var j = 0; j < cc.pointCount; ++j) {
            b2Island.s_impulse.normalImpulses[j] = cc.points[j].normalImpulse;
            b2Island.s_impulse.tangentImpulses[j] = cc.points[j].tangentImpulse;
         }
         this.m_listener.PostSolve(c, b2Island.s_impulse);
      }
   }
   b2Island.prototype.AddBody = function (body) {
      body.m_islandIndex = this.m_bodyCount;
      this.m_bodies[this.m_bodyCount++] = body;
   }
   b2Island.prototype.AddContact = function (contact) {
      this.m_contacts[this.m_contactCount++] = contact;
   }
   b2Island.prototype.AddJoint = function (joint) {
      this.m_joints[this.m_jointCount++] = joint;
   }
   Box2D.postDefs.push(function () {
      Box2D.Dynamics.b2Island.s_impulse = new b2ContactImpulse();
   });
   b2TimeStep.b2TimeStep = function () {};
   b2TimeStep.prototype.Set = function (step) {
      this.dt = step.dt;
      this.inv_dt = step.inv_dt;
      this.positionIterations = step.positionIterations;
      this.velocityIterations = step.velocityIterations;
      this.warmStarting = step.warmStarting;
   }
   b2World.b2World = function () {
      this.s_stack = new Vector();
      this.m_contactManager = new b2ContactManager();
      this.m_contactSolver = new b2ContactSolver();
      this.m_island = new b2Island();
   };
   b2World.prototype.b2World = function (gravity, doSleep) {
      this.m_destructionListener = null;
      this.m_debugDraw = null;
      this.m_bodyList = null;
      this.m_contactList = null;
      this.m_jointList = null;
      this.m_controllerList = null;
      this.m_bodyCount = 0;
      this.m_contactCount = 0;
      this.m_jointCount = 0;
      this.m_controllerCount = 0;
      b2World.m_warmStarting = true;
      b2World.m_continuousPhysics = true;
      this.m_allowSleep = doSleep;
      this.m_gravity = gravity;
      this.m_inv_dt0 = 0.0;
      this.m_contactManager.m_world = this;
      var bd = new b2BodyDef();
      this.m_groundBody = this.CreateBody(bd);
   }
   b2World.prototype.SetDestructionListener = function (listener) {
      this.m_destructionListener = listener;
   }
   b2World.prototype.SetContactFilter = function (filter) {
      this.m_contactManager.m_contactFilter = filter;
   }
   b2World.prototype.SetContactListener = function (listener) {
      this.m_contactManager.m_contactListener = listener;
   }
   b2World.prototype.SetDebugDraw = function (debugDraw) {
      this.m_debugDraw = debugDraw;
   }
   b2World.prototype.SetBroadPhase = function (broadPhase) {
      var oldBroadPhase = this.m_contactManager.m_broadPhase;
      this.m_contactManager.m_broadPhase = broadPhase;
      for (var b = this.m_bodyList; b; b = b.m_next) {
         for (var f = b.m_fixtureList; f; f = f.m_next) {
            f.m_proxy = broadPhase.CreateProxy(oldBroadPhase.GetFatAABB(f.m_proxy), f);
         }
      }
   }
   b2World.prototype.Validate = function () {
      this.m_contactManager.m_broadPhase.Validate();
   }
   b2World.prototype.GetProxyCount = function () {
      return this.m_contactManager.m_broadPhase.GetProxyCount();
   }
   b2World.prototype.CreateBody = function (def) {
      if (this.IsLocked() == true) {
         return null;
      }
      var b = new b2Body(def, this);
      b.m_prev = null;
      b.m_next = this.m_bodyList;
      if (this.m_bodyList) {
         this.m_bodyList.m_prev = b;
      }
      this.m_bodyList = b;
      ++this.m_bodyCount;
      return b;
   }
   b2World.prototype.DestroyBody = function (b) {
      if (this.IsLocked() == true) {
         return;
      }
      var jn = b.m_jointList;
      while (jn) {
         var jn0 = jn;
         jn = jn.next;
         if (this.m_destructionListener) {
            this.m_destructionListener.SayGoodbyeJoint(jn0.joint);
         }
         this.DestroyJoint(jn0.joint);
      }
      var coe = b.m_controllerList;
      while (coe) {
         var coe0 = coe;
         coe = coe.nextController;
         coe0.controller.RemoveBody(b);
      }
      var ce = b.m_contactList;
      while (ce) {
         var ce0 = ce;
         ce = ce.next;
         this.m_contactManager.Destroy(ce0.contact);
      }
      b.m_contactList = null;
      var f = b.m_fixtureList;
      while (f) {
         var f0 = f;
         f = f.m_next;
         if (this.m_destructionListener) {
            this.m_destructionListener.SayGoodbyeFixture(f0);
         }
         f0.DestroyProxy(this.m_contactManager.m_broadPhase);
         f0.Destroy();
      }
      b.m_fixtureList = null;
      b.m_fixtureCount = 0;
      if (b.m_prev) {
         b.m_prev.m_next = b.m_next;
      }
      if (b.m_next) {
         b.m_next.m_prev = b.m_prev;
      }
      if (b == this.m_bodyList) {
         this.m_bodyList = b.m_next;
      }--this.m_bodyCount;
   }
   b2World.prototype.CreateJoint = function (def) {
      var j = b2Joint.Create(def, null);
      j.m_prev = null;
      j.m_next = this.m_jointList;
      if (this.m_jointList) {
         this.m_jointList.m_prev = j;
      }
      this.m_jointList = j;
      ++this.m_jointCount;
      j.m_edgeA.joint = j;
      j.m_edgeA.other = j.m_bodyB;
      j.m_edgeA.prev = null;
      j.m_edgeA.next = j.m_bodyA.m_jointList;
      if (j.m_bodyA.m_jointList) j.m_bodyA.m_jointList.prev = j.m_edgeA;
      j.m_bodyA.m_jointList = j.m_edgeA;
      j.m_edgeB.joint = j;
      j.m_edgeB.other = j.m_bodyA;
      j.m_edgeB.prev = null;
      j.m_edgeB.next = j.m_bodyB.m_jointList;
      if (j.m_bodyB.m_jointList) j.m_bodyB.m_jointList.prev = j.m_edgeB;
      j.m_bodyB.m_jointList = j.m_edgeB;
      var bodyA = def.bodyA;
      var bodyB = def.bodyB;
      if (def.collideConnected == false) {
         var edge = bodyB.GetContactList();
         while (edge) {
            if (edge.other == bodyA) {
               edge.contact.FlagForFiltering();
            }
            edge = edge.next;
         }
      }
      return j;
   }
   b2World.prototype.DestroyJoint = function (j) {
      var collideConnected = j.m_collideConnected;
      if (j.m_prev) {
         j.m_prev.m_next = j.m_next;
      }
      if (j.m_next) {
         j.m_next.m_prev = j.m_prev;
      }
      if (j == this.m_jointList) {
         this.m_jointList = j.m_next;
      }
      var bodyA = j.m_bodyA;
      var bodyB = j.m_bodyB;
      bodyA.SetAwake(true);
      bodyB.SetAwake(true);
      if (j.m_edgeA.prev) {
         j.m_edgeA.prev.next = j.m_edgeA.next;
      }
      if (j.m_edgeA.next) {
         j.m_edgeA.next.prev = j.m_edgeA.prev;
      }
      if (j.m_edgeA == bodyA.m_jointList) {
         bodyA.m_jointList = j.m_edgeA.next;
      }
      j.m_edgeA.prev = null;
      j.m_edgeA.next = null;
      if (j.m_edgeB.prev) {
         j.m_edgeB.prev.next = j.m_edgeB.next;
      }
      if (j.m_edgeB.next) {
         j.m_edgeB.next.prev = j.m_edgeB.prev;
      }
      if (j.m_edgeB == bodyB.m_jointList) {
         bodyB.m_jointList = j.m_edgeB.next;
      }
      j.m_edgeB.prev = null;
      j.m_edgeB.next = null;
      b2Joint.Destroy(j, null);
      --this.m_jointCount;
      if (collideConnected == false) {
         var edge = bodyB.GetContactList();
         while (edge) {
            if (edge.other == bodyA) {
               edge.contact.FlagForFiltering();
            }
            edge = edge.next;
         }
      }
   }
   b2World.prototype.AddController = function (c) {
      c.m_next = this.m_controllerList;
      c.m_prev = null;
      this.m_controllerList = c;
      c.m_world = this;
      this.m_controllerCount++;
      return c;
   }
   b2World.prototype.RemoveController = function (c) {
      if (c.m_prev) c.m_prev.m_next = c.m_next;
      if (c.m_next) c.m_next.m_prev = c.m_prev;
      if (this.m_controllerList == c) this.m_controllerList = c.m_next;
      this.m_controllerCount--;
   }
   b2World.prototype.CreateController = function (controller) {
      if (controller.m_world != this) throw new Error("Controller can only be a member of one world");
      controller.m_next = this.m_controllerList;
      controller.m_prev = null;
      if (this.m_controllerList) this.m_controllerList.m_prev = controller;
      this.m_controllerList = controller;
      ++this.m_controllerCount;
      controller.m_world = this;
      return controller;
   }
   b2World.prototype.DestroyController = function (controller) {
      controller.Clear();
      if (controller.m_next) controller.m_next.m_prev = controller.m_prev;
      if (controller.m_prev) controller.m_prev.m_next = controller.m_next;
      if (controller == this.m_controllerList) this.m_controllerList = controller.m_next;
      --this.m_controllerCount;
   }
   b2World.prototype.SetWarmStarting = function (flag) {
      b2World.m_warmStarting = flag;
   }
   b2World.prototype.SetContinuousPhysics = function (flag) {
      b2World.m_continuousPhysics = flag;
   }
   b2World.prototype.GetBodyCount = function () {
      return this.m_bodyCount;
   }
   b2World.prototype.GetJointCount = function () {
      return this.m_jointCount;
   }
   b2World.prototype.GetContactCount = function () {
      return this.m_contactCount;
   }
   b2World.prototype.SetGravity = function (gravity) {
      this.m_gravity = gravity;
   }
   b2World.prototype.GetGravity = function () {
      return this.m_gravity;
   }
   b2World.prototype.GetGroundBody = function () {
      return this.m_groundBody;
   }
   b2World.prototype.Step = function (dt, velocityIterations, positionIterations) {
      if (dt === undefined) dt = 0;
      if (velocityIterations === undefined) velocityIterations = 0;
      if (positionIterations === undefined) positionIterations = 0;
      if (this.m_flags & b2World.e_newFixture) {
         this.m_contactManager.FindNewContacts();
         this.m_flags &= ~b2World.e_newFixture;
      }
      this.m_flags |= b2World.e_locked;
      var step = b2World.s_timestep2;
      step.dt = dt;
      step.velocityIterations = velocityIterations;
      step.positionIterations = positionIterations;
      if (dt > 0.0) {
         step.inv_dt = 1.0 / dt;
      }
      else {
         step.inv_dt = 0.0;
      }
      step.dtRatio = this.m_inv_dt0 * dt;
      step.warmStarting = b2World.m_warmStarting;
      this.m_contactManager.Collide();
      if (step.dt > 0.0) {
         this.Solve(step);
      }
      if (b2World.m_continuousPhysics && step.dt > 0.0) {
         this.SolveTOI(step);
      }
      if (step.dt > 0.0) {
         this.m_inv_dt0 = step.inv_dt;
      }
      this.m_flags &= ~b2World.e_locked;
   }
   b2World.prototype.ClearForces = function () {
      for (var body = this.m_bodyList; body; body = body.m_next) {
         body.m_force.SetZero();
         body.m_torque = 0.0;
      }
   }
   b2World.prototype.DrawDebugData = function () {
      if (this.m_debugDraw == null) {
         return;
      }
      this.m_debugDraw.m_sprite.graphics.clear();
      var flags = this.m_debugDraw.GetFlags();
      var i = 0;
      var b;
      var f;
      var s;
      var j;
      var bp;
      var invQ = new b2Vec2;
      var x1 = new b2Vec2;
      var x2 = new b2Vec2;
      var xf;
      var b1 = new b2AABB();
      var b2 = new b2AABB();
      var vs = [new b2Vec2(), new b2Vec2(), new b2Vec2(), new b2Vec2()];
      var color = new b2Color(0, 0, 0);
      if (flags & b2DebugDraw.e_shapeBit) {
         for (b = this.m_bodyList;
         b; b = b.m_next) {
            xf = b.m_xf;
            for (f = b.GetFixtureList();
            f; f = f.m_next) {
               s = f.GetShape();
               if (b.IsActive() == false) {
                  color.Set(0.5, 0.5, 0.3);
                  this.DrawShape(s, xf, color);
               }
               else if (b.GetType() == b2Body.b2_staticBody) {
                  color.Set(0.5, 0.9, 0.5);
                  this.DrawShape(s, xf, color);
               }
               else if (b.GetType() == b2Body.b2_kinematicBody) {
                  color.Set(0.5, 0.5, 0.9);
                  this.DrawShape(s, xf, color);
               }
               else if (b.IsAwake() == false) {
                  color.Set(0.6, 0.6, 0.6);
                  this.DrawShape(s, xf, color);
               }
               else {
                  color.Set(0.9, 0.7, 0.7);
                  this.DrawShape(s, xf, color);
               }
            }
         }
      }
      if (flags & b2DebugDraw.e_jointBit) {
         for (j = this.m_jointList;
         j; j = j.m_next) {
            this.DrawJoint(j);
         }
      }
      if (flags & b2DebugDraw.e_controllerBit) {
         for (var c = this.m_controllerList; c; c = c.m_next) {
            c.Draw(this.m_debugDraw);
         }
      }
      if (flags & b2DebugDraw.e_pairBit) {
         color.Set(0.3, 0.9, 0.9);
         for (var contact = this.m_contactManager.m_contactList; contact; contact = contact.GetNext()) {
            var fixtureA = contact.GetFixtureA();
            var fixtureB = contact.GetFixtureB();
            var cA = fixtureA.GetAABB().GetCenter();
            var cB = fixtureB.GetAABB().GetCenter();
            this.m_debugDraw.DrawSegment(cA, cB, color);
         }
      }
      if (flags & b2DebugDraw.e_aabbBit) {
         bp = this.m_contactManager.m_broadPhase;
         vs = [new b2Vec2(), new b2Vec2(), new b2Vec2(), new b2Vec2()];
         for (b = this.m_bodyList;
         b; b = b.GetNext()) {
            if (b.IsActive() == false) {
               continue;
            }
            for (f = b.GetFixtureList();
            f; f = f.GetNext()) {
               var aabb = bp.GetFatAABB(f.m_proxy);
               vs[0].Set(aabb.lowerBound.x, aabb.lowerBound.y);
               vs[1].Set(aabb.upperBound.x, aabb.lowerBound.y);
               vs[2].Set(aabb.upperBound.x, aabb.upperBound.y);
               vs[3].Set(aabb.lowerBound.x, aabb.upperBound.y);
               this.m_debugDraw.DrawPolygon(vs, 4, color);
            }
         }
      }
      if (flags & b2DebugDraw.e_centerOfMassBit) {
         for (b = this.m_bodyList;
         b; b = b.m_next) {
            xf = b2World.s_xf;
            xf.R = b.m_xf.R;
            xf.position = b.GetWorldCenter();
            this.m_debugDraw.DrawTransform(xf);
         }
      }
   }
   b2World.prototype.QueryAABB = function (callback, aabb) {
      var __this = this;
      var broadPhase = __this.m_contactManager.m_broadPhase;

      function WorldQueryWrapper(proxy) {
         return callback(broadPhase.GetUserData(proxy));
      };
      broadPhase.Query(WorldQueryWrapper, aabb);
   }
   b2World.prototype.QueryShape = function (callback, shape, transform) {
      var __this = this;
      if (transform === undefined) transform = null;
      if (transform == null) {
         transform = new b2Transform();
         transform.SetIdentity();
      }
      var broadPhase = __this.m_contactManager.m_broadPhase;

      function WorldQueryWrapper(proxy) {
         var fixture = (broadPhase.GetUserData(proxy) instanceof b2Fixture ? broadPhase.GetUserData(proxy) : null);
         if (b2Shape.TestOverlap(shape, transform, fixture.GetShape(), fixture.GetBody().GetTransform())) return callback(fixture);
         return true;
      };
      var aabb = new b2AABB();
      shape.ComputeAABB(aabb, transform);
      broadPhase.Query(WorldQueryWrapper, aabb);
   }
   b2World.prototype.QueryPoint = function (callback, p) {
      var __this = this;
      var broadPhase = __this.m_contactManager.m_broadPhase;

      function WorldQueryWrapper(proxy) {
         var fixture = (broadPhase.GetUserData(proxy) instanceof b2Fixture ? broadPhase.GetUserData(proxy) : null);
         if (fixture.TestPoint(p)) return callback(fixture);
         return true;
      };
      var aabb = new b2AABB();
      aabb.lowerBound.Set(p.x - b2Settings.b2_linearSlop, p.y - b2Settings.b2_linearSlop);
      aabb.upperBound.Set(p.x + b2Settings.b2_linearSlop, p.y + b2Settings.b2_linearSlop);
      broadPhase.Query(WorldQueryWrapper, aabb);
   }
   b2World.prototype.RayCast = function (callback, point1, point2) {
      var __this = this;
      var broadPhase = __this.m_contactManager.m_broadPhase;
      var output = new b2RayCastOutput;

      function RayCastWrapper(input, proxy) {
         var userData = broadPhase.GetUserData(proxy);
         var fixture = (userData instanceof b2Fixture ? userData : null);
         var hit = fixture.RayCast(output, input);
         if (hit) {
            var fraction = output.fraction;
            var point = new b2Vec2((1.0 - fraction) * point1.x + fraction * point2.x, (1.0 - fraction) * point1.y + fraction * point2.y);
            return callback(fixture, point, output.normal, fraction);
         }
         return input.maxFraction;
      };
      var input = new b2RayCastInput(point1, point2);
      broadPhase.RayCast(RayCastWrapper, input);
   }
   b2World.prototype.RayCastOne = function (point1, point2) {
      var __this = this;
      var result;

      function RayCastOneWrapper(fixture, point, normal, fraction) {
         if (fraction === undefined) fraction = 0;
         result = fixture;
         return fraction;
      };
      __this.RayCast(RayCastOneWrapper, point1, point2);
      return result;
   }
   b2World.prototype.RayCastAll = function (point1, point2) {
      var __this = this;
      var result = new Vector();

      function RayCastAllWrapper(fixture, point, normal, fraction) {
         if (fraction === undefined) fraction = 0;
         result[result.length] = fixture;
         return 1;
      };
      __this.RayCast(RayCastAllWrapper, point1, point2);
      return result;
   }
   b2World.prototype.GetBodyList = function () {
      return this.m_bodyList;
   }
   b2World.prototype.GetJointList = function () {
      return this.m_jointList;
   }
   b2World.prototype.GetContactList = function () {
      return this.m_contactList;
   }
   b2World.prototype.IsLocked = function () {
      return (this.m_flags & b2World.e_locked) > 0;
   }
   b2World.prototype.Solve = function (step) {
      var b;
      for (var controller = this.m_controllerList; controller; controller = controller.m_next) {
         controller.Step(step);
      }
      var island = this.m_island;
      island.Initialize(this.m_bodyCount, this.m_contactCount, this.m_jointCount, null, this.m_contactManager.m_contactListener, this.m_contactSolver);
      for (b = this.m_bodyList;
      b; b = b.m_next) {
         b.m_flags &= ~b2Body.e_islandFlag;
      }
      for (var c = this.m_contactList; c; c = c.m_next) {
         c.m_flags &= ~b2Contact.e_islandFlag;
      }
      for (var j = this.m_jointList; j; j = j.m_next) {
         j.m_islandFlag = false;
      }
      var stackSize = parseInt(this.m_bodyCount);
      var stack = this.s_stack;
      for (var seed = this.m_bodyList; seed; seed = seed.m_next) {
         if (seed.m_flags & b2Body.e_islandFlag) {
            continue;
         }
         if (seed.IsAwake() == false || seed.IsActive() == false) {
            continue;
         }
         if (seed.GetType() == b2Body.b2_staticBody) {
            continue;
         }
         island.Clear();
         var stackCount = 0;
         stack[stackCount++] = seed;
         seed.m_flags |= b2Body.e_islandFlag;
         while (stackCount > 0) {
            b = stack[--stackCount];
            island.AddBody(b);
            if (b.IsAwake() == false) {
               b.SetAwake(true);
            }
            if (b.GetType() == b2Body.b2_staticBody) {
               continue;
            }
            var other;
            for (var ce = b.m_contactList; ce; ce = ce.next) {
               if (ce.contact.m_flags & b2Contact.e_islandFlag) {
                  continue;
               }
               if (ce.contact.IsSensor() == true || ce.contact.IsEnabled() == false || ce.contact.IsTouching() == false) {
                  continue;
               }
               island.AddContact(ce.contact);
               ce.contact.m_flags |= b2Contact.e_islandFlag;
               other = ce.other;
               if (other.m_flags & b2Body.e_islandFlag) {
                  continue;
               }
               stack[stackCount++] = other;
               other.m_flags |= b2Body.e_islandFlag;
            }
            for (var jn = b.m_jointList; jn; jn = jn.next) {
               if (jn.joint.m_islandFlag == true) {
                  continue;
               }
               other = jn.other;
               if (other.IsActive() == false) {
                  continue;
               }
               island.AddJoint(jn.joint);
               jn.joint.m_islandFlag = true;
               if (other.m_flags & b2Body.e_islandFlag) {
                  continue;
               }
               stack[stackCount++] = other;
               other.m_flags |= b2Body.e_islandFlag;
            }
         }
         island.Solve(step, this.m_gravity, this.m_allowSleep);
         for (var i = 0; i < island.m_bodyCount; ++i) {
            b = island.m_bodies[i];
            if (b.GetType() == b2Body.b2_staticBody) {
               b.m_flags &= ~b2Body.e_islandFlag;
            }
         }
      }
      for (i = 0;
      i < stack.length; ++i) {
         if (!stack[i]) break;
         stack[i] = null;
      }
      for (b = this.m_bodyList;
      b; b = b.m_next) {
         if (b.IsAwake() == false || b.IsActive() == false) {
            continue;
         }
         if (b.GetType() == b2Body.b2_staticBody) {
            continue;
         }
         b.SynchronizeFixtures();
      }
      this.m_contactManager.FindNewContacts();
   }
   b2World.prototype.SolveTOI = function (step) {
      var b;
      var fA;
      var fB;
      var bA;
      var bB;
      var cEdge;
      var j;
      var island = this.m_island;
      island.Initialize(this.m_bodyCount, b2Settings.b2_maxTOIContactsPerIsland, b2Settings.b2_maxTOIJointsPerIsland, null, this.m_contactManager.m_contactListener, this.m_contactSolver);
      var queue = b2World.s_queue;
      for (b = this.m_bodyList;
      b; b = b.m_next) {
         b.m_flags &= ~b2Body.e_islandFlag;
         b.m_sweep.t0 = 0.0;
      }
      var c;
      for (c = this.m_contactList;
      c; c = c.m_next) {
         c.m_flags &= ~ (b2Contact.e_toiFlag | b2Contact.e_islandFlag);
      }
      for (j = this.m_jointList;
      j; j = j.m_next) {
         j.m_islandFlag = false;
      }
      for (;;) {
         var minContact = null;
         var minTOI = 1.0;
         for (c = this.m_contactList;
         c; c = c.m_next) {
            if (c.IsSensor() == true || c.IsEnabled() == false || c.IsContinuous() == false) {
               continue;
            }
            var toi = 1.0;
            if (c.m_flags & b2Contact.e_toiFlag) {
               toi = c.m_toi;
            }
            else {
               fA = c.m_fixtureA;
               fB = c.m_fixtureB;
               bA = fA.m_body;
               bB = fB.m_body;
               if ((bA.GetType() != b2Body.b2_dynamicBody || bA.IsAwake() == false) && (bB.GetType() != b2Body.b2_dynamicBody || bB.IsAwake() == false)) {
                  continue;
               }
               var t0 = bA.m_sweep.t0;
               if (bA.m_sweep.t0 < bB.m_sweep.t0) {
                  t0 = bB.m_sweep.t0;
                  bA.m_sweep.Advance(t0);
               }
               else if (bB.m_sweep.t0 < bA.m_sweep.t0) {
                  t0 = bA.m_sweep.t0;
                  bB.m_sweep.Advance(t0);
               }
               toi = c.ComputeTOI(bA.m_sweep, bB.m_sweep);
               b2Settings.b2Assert(0.0 <= toi && toi <= 1.0);
               if (toi > 0.0 && toi < 1.0) {
                  toi = (1.0 - toi) * t0 + toi;
                  if (toi > 1) toi = 1;
               }
               c.m_toi = toi;
               c.m_flags |= b2Contact.e_toiFlag;
            }
            if (Number.MIN_VALUE < toi && toi < minTOI) {
               minContact = c;
               minTOI = toi;
            }
         }
         if (minContact == null || 1.0 - 100.0 * Number.MIN_VALUE < minTOI) {
            break;
         }
         fA = minContact.m_fixtureA;
         fB = minContact.m_fixtureB;
         bA = fA.m_body;
         bB = fB.m_body;
         b2World.s_backupA.Set(bA.m_sweep);
         b2World.s_backupB.Set(bB.m_sweep);
         bA.Advance(minTOI);
         bB.Advance(minTOI);
         minContact.Update(this.m_contactManager.m_contactListener);
         minContact.m_flags &= ~b2Contact.e_toiFlag;
         if (minContact.IsSensor() == true || minContact.IsEnabled() == false) {
            bA.m_sweep.Set(b2World.s_backupA);
            bB.m_sweep.Set(b2World.s_backupB);
            bA.SynchronizeTransform();
            bB.SynchronizeTransform();
            continue;
         }
         if (minContact.IsTouching() == false) {
            continue;
         }
         var seed = bA;
         if (seed.GetType() != b2Body.b2_dynamicBody) {
            seed = bB;
         }
         island.Clear();
         var queueStart = 0;
         var queueSize = 0;
         queue[queueStart + queueSize++] = seed;
         seed.m_flags |= b2Body.e_islandFlag;
         while (queueSize > 0) {
            b = queue[queueStart++];
            --queueSize;
            island.AddBody(b);
            if (b.IsAwake() == false) {
               b.SetAwake(true);
            }
            if (b.GetType() != b2Body.b2_dynamicBody) {
               continue;
            }
            for (cEdge = b.m_contactList;
            cEdge; cEdge = cEdge.next) {
               if (island.m_contactCount == island.m_contactCapacity) {
                  break;
               }
               if (cEdge.contact.m_flags & b2Contact.e_islandFlag) {
                  continue;
               }
               if (cEdge.contact.IsSensor() == true || cEdge.contact.IsEnabled() == false || cEdge.contact.IsTouching() == false) {
                  continue;
               }
               island.AddContact(cEdge.contact);
               cEdge.contact.m_flags |= b2Contact.e_islandFlag;
               var other = cEdge.other;
               if (other.m_flags & b2Body.e_islandFlag) {
                  continue;
               }
               if (other.GetType() != b2Body.b2_staticBody) {
                  other.Advance(minTOI);
                  other.SetAwake(true);
               }
               queue[queueStart + queueSize] = other;
               ++queueSize;
               other.m_flags |= b2Body.e_islandFlag;
            }
            for (var jEdge = b.m_jointList; jEdge; jEdge = jEdge.next) {
               if (island.m_jointCount == island.m_jointCapacity) continue;
               if (jEdge.joint.m_islandFlag == true) continue;
               other = jEdge.other;
               if (other.IsActive() == false) {
                  continue;
               }
               island.AddJoint(jEdge.joint);
               jEdge.joint.m_islandFlag = true;
               if (other.m_flags & b2Body.e_islandFlag) continue;
               if (other.GetType() != b2Body.b2_staticBody) {
                  other.Advance(minTOI);
                  other.SetAwake(true);
               }
               queue[queueStart + queueSize] = other;
               ++queueSize;
               other.m_flags |= b2Body.e_islandFlag;
            }
         }
         var subStep = b2World.s_timestep;
         subStep.warmStarting = false;
         subStep.dt = (1.0 - minTOI) * step.dt;
         subStep.inv_dt = 1.0 / subStep.dt;
         subStep.dtRatio = 0.0;
         subStep.velocityIterations = step.velocityIterations;
         subStep.positionIterations = step.positionIterations;
         island.SolveTOI(subStep);
         var i = 0;
         for (i = 0;
         i < island.m_bodyCount; ++i) {
            b = island.m_bodies[i];
            b.m_flags &= ~b2Body.e_islandFlag;
            if (b.IsAwake() == false) {
               continue;
            }
            if (b.GetType() != b2Body.b2_dynamicBody) {
               continue;
            }
            b.SynchronizeFixtures();
            for (cEdge = b.m_contactList;
            cEdge; cEdge = cEdge.next) {
               cEdge.contact.m_flags &= ~b2Contact.e_toiFlag;
            }
         }
         for (i = 0;
         i < island.m_contactCount; ++i) {
            c = island.m_contacts[i];
            c.m_flags &= ~ (b2Contact.e_toiFlag | b2Contact.e_islandFlag);
         }
         for (i = 0;
         i < island.m_jointCount; ++i) {
            j = island.m_joints[i];
            j.m_islandFlag = false;
         }
         this.m_contactManager.FindNewContacts();
      }
   }
   b2World.prototype.DrawJoint = function (joint) {
      var b1 = joint.GetBodyA();
      var b2 = joint.GetBodyB();
      var xf1 = b1.m_xf;
      var xf2 = b2.m_xf;
      var x1 = xf1.position;
      var x2 = xf2.position;
      var p1 = joint.GetAnchorA();
      var p2 = joint.GetAnchorB();
      var color = b2World.s_jointColor;
      switch (joint.m_type) {
      case b2Joint.e_distanceJoint:
         this.m_debugDraw.DrawSegment(p1, p2, color);
         break;
      case b2Joint.e_pulleyJoint:
         {
            var pulley = ((joint instanceof b2PulleyJoint ? joint : null));
            var s1 = pulley.GetGroundAnchorA();
            var s2 = pulley.GetGroundAnchorB();
            this.m_debugDraw.DrawSegment(s1, p1, color);
            this.m_debugDraw.DrawSegment(s2, p2, color);
            this.m_debugDraw.DrawSegment(s1, s2, color);
         }
         break;
      case b2Joint.e_mouseJoint:
         this.m_debugDraw.DrawSegment(p1, p2, color);
         break;
      default:
         if (b1 != this.m_groundBody) this.m_debugDraw.DrawSegment(x1, p1, color);
         this.m_debugDraw.DrawSegment(p1, p2, color);
         if (b2 != this.m_groundBody) this.m_debugDraw.DrawSegment(x2, p2, color);
      }
   }
   b2World.prototype.DrawShape = function (shape, xf, color) {
      switch (shape.m_type) {
      case b2Shape.e_circleShape:
         {
            var circle = ((shape instanceof b2CircleShape ? shape : null));
            var center = b2Math.MulX(xf, circle.m_p);
            var radius = circle.m_radius;
            var axis = xf.R.col1;
            this.m_debugDraw.DrawSolidCircle(center, radius, axis, color);
         }
         break;
      case b2Shape.e_polygonShape:
         {
            var i = 0;
            var poly = ((shape instanceof b2PolygonShape ? shape : null));
            var vertexCount = parseInt(poly.GetVertexCount());
            var localVertices = poly.GetVertices();
            var vertices = new Vector(vertexCount);
            for (i = 0;
            i < vertexCount; ++i) {
               vertices[i] = b2Math.MulX(xf, localVertices[i]);
            }
            this.m_debugDraw.DrawSolidPolygon(vertices, vertexCount, color);
         }
         break;
      case b2Shape.e_edgeShape:
         {
            var edge = (shape instanceof b2EdgeShape ? shape : null);
            this.m_debugDraw.DrawSegment(b2Math.MulX(xf, edge.GetVertex1()), b2Math.MulX(xf, edge.GetVertex2()), color);
         }
         break;
      }
   }
   Box2D.postDefs.push(function () {
      Box2D.Dynamics.b2World.s_timestep2 = new b2TimeStep();
      Box2D.Dynamics.b2World.s_xf = new b2Transform();
      Box2D.Dynamics.b2World.s_backupA = new b2Sweep();
      Box2D.Dynamics.b2World.s_backupB = new b2Sweep();
      Box2D.Dynamics.b2World.s_timestep = new b2TimeStep();
      Box2D.Dynamics.b2World.s_queue = new Vector();
      Box2D.Dynamics.b2World.s_jointColor = new b2Color(0.5, 0.8, 0.8);
      Box2D.Dynamics.b2World.e_newFixture = 0x0001;
      Box2D.Dynamics.b2World.e_locked = 0x0002;
   });
})();
(function () {
   var b2CircleShape = Box2D.Collision.Shapes.b2CircleShape,
      b2EdgeChainDef = Box2D.Collision.Shapes.b2EdgeChainDef,
      b2EdgeShape = Box2D.Collision.Shapes.b2EdgeShape,
      b2MassData = Box2D.Collision.Shapes.b2MassData,
      b2PolygonShape = Box2D.Collision.Shapes.b2PolygonShape,
      b2Shape = Box2D.Collision.Shapes.b2Shape,
      b2CircleContact = Box2D.Dynamics.Contacts.b2CircleContact,
      b2Contact = Box2D.Dynamics.Contacts.b2Contact,
      b2ContactConstraint = Box2D.Dynamics.Contacts.b2ContactConstraint,
      b2ContactConstraintPoint = Box2D.Dynamics.Contacts.b2ContactConstraintPoint,
      b2ContactEdge = Box2D.Dynamics.Contacts.b2ContactEdge,
      b2ContactFactory = Box2D.Dynamics.Contacts.b2ContactFactory,
      b2ContactRegister = Box2D.Dynamics.Contacts.b2ContactRegister,
      b2ContactResult = Box2D.Dynamics.Contacts.b2ContactResult,
      b2ContactSolver = Box2D.Dynamics.Contacts.b2ContactSolver,
      b2EdgeAndCircleContact = Box2D.Dynamics.Contacts.b2EdgeAndCircleContact,
      b2NullContact = Box2D.Dynamics.Contacts.b2NullContact,
      b2PolyAndCircleContact = Box2D.Dynamics.Contacts.b2PolyAndCircleContact,
      b2PolyAndEdgeContact = Box2D.Dynamics.Contacts.b2PolyAndEdgeContact,
      b2PolygonContact = Box2D.Dynamics.Contacts.b2PolygonContact,
      b2PositionSolverManifold = Box2D.Dynamics.Contacts.b2PositionSolverManifold,
      b2Body = Box2D.Dynamics.b2Body,
      b2BodyDef = Box2D.Dynamics.b2BodyDef,
      b2ContactFilter = Box2D.Dynamics.b2ContactFilter,
      b2ContactImpulse = Box2D.Dynamics.b2ContactImpulse,
      b2ContactListener = Box2D.Dynamics.b2ContactListener,
      b2ContactManager = Box2D.Dynamics.b2ContactManager,
      b2DebugDraw = Box2D.Dynamics.b2DebugDraw,
      b2DestructionListener = Box2D.Dynamics.b2DestructionListener,
      b2FilterData = Box2D.Dynamics.b2FilterData,
      b2Fixture = Box2D.Dynamics.b2Fixture,
      b2FixtureDef = Box2D.Dynamics.b2FixtureDef,
      b2Island = Box2D.Dynamics.b2Island,
      b2TimeStep = Box2D.Dynamics.b2TimeStep,
      b2World = Box2D.Dynamics.b2World,
      b2Color = Box2D.Common.b2Color,
      b2internal = Box2D.Common.b2internal,
      b2Settings = Box2D.Common.b2Settings,
      b2Mat22 = Box2D.Common.Math.b2Mat22,
      b2Mat33 = Box2D.Common.Math.b2Mat33,
      b2Math = Box2D.Common.Math.b2Math,
      b2Sweep = Box2D.Common.Math.b2Sweep,
      b2Transform = Box2D.Common.Math.b2Transform,
      b2Vec2 = Box2D.Common.Math.b2Vec2,
      b2Vec3 = Box2D.Common.Math.b2Vec3,
      b2AABB = Box2D.Collision.b2AABB,
      b2Bound = Box2D.Collision.b2Bound,
      b2BoundValues = Box2D.Collision.b2BoundValues,
      b2Collision = Box2D.Collision.b2Collision,
      b2ContactID = Box2D.Collision.b2ContactID,
      b2ContactPoint = Box2D.Collision.b2ContactPoint,
      b2Distance = Box2D.Collision.b2Distance,
      b2DistanceInput = Box2D.Collision.b2DistanceInput,
      b2DistanceOutput = Box2D.Collision.b2DistanceOutput,
      b2DistanceProxy = Box2D.Collision.b2DistanceProxy,
      b2DynamicTree = Box2D.Collision.b2DynamicTree,
      b2DynamicTreeBroadPhase = Box2D.Collision.b2DynamicTreeBroadPhase,
      b2DynamicTreeNode = Box2D.Collision.b2DynamicTreeNode,
      b2DynamicTreePair = Box2D.Collision.b2DynamicTreePair,
      b2Manifold = Box2D.Collision.b2Manifold,
      b2ManifoldPoint = Box2D.Collision.b2ManifoldPoint,
      b2Point = Box2D.Collision.b2Point,
      b2RayCastInput = Box2D.Collision.b2RayCastInput,
      b2RayCastOutput = Box2D.Collision.b2RayCastOutput,
      b2Segment = Box2D.Collision.b2Segment,
      b2SeparationFunction = Box2D.Collision.b2SeparationFunction,
      b2Simplex = Box2D.Collision.b2Simplex,
      b2SimplexCache = Box2D.Collision.b2SimplexCache,
      b2SimplexVertex = Box2D.Collision.b2SimplexVertex,
      b2TimeOfImpact = Box2D.Collision.b2TimeOfImpact,
      b2TOIInput = Box2D.Collision.b2TOIInput,
      b2WorldManifold = Box2D.Collision.b2WorldManifold,
      ClipVertex = Box2D.Collision.ClipVertex,
      Features = Box2D.Collision.Features,
      IBroadPhase = Box2D.Collision.IBroadPhase;

   Box2D.inherit(b2CircleContact, Box2D.Dynamics.Contacts.b2Contact);
   b2CircleContact.prototype.__super = Box2D.Dynamics.Contacts.b2Contact.prototype;
   b2CircleContact.b2CircleContact = function () {
      Box2D.Dynamics.Contacts.b2Contact.b2Contact.apply(this, arguments);
   };
   b2CircleContact.Create = function (allocator) {
      return new b2CircleContact();
   }
   b2CircleContact.Destroy = function (contact, allocator) {}
   b2CircleContact.prototype.Reset = function (fixtureA, fixtureB) {
      this.__super.Reset.call(this, fixtureA, fixtureB);
   }
   b2CircleContact.prototype.Evaluate = function () {
      var bA = this.m_fixtureA.GetBody();
      var bB = this.m_fixtureB.GetBody();
      b2Collision.CollideCircles(this.m_manifold, (this.m_fixtureA.GetShape() instanceof b2CircleShape ? this.m_fixtureA.GetShape() : null), bA.m_xf, (this.m_fixtureB.GetShape() instanceof b2CircleShape ? this.m_fixtureB.GetShape() : null), bB.m_xf);
   }
   b2Contact.b2Contact = function () {
      this.m_nodeA = new b2ContactEdge();
      this.m_nodeB = new b2ContactEdge();
      this.m_manifold = new b2Manifold();
      this.m_oldManifold = new b2Manifold();
   };
   b2Contact.prototype.GetManifold = function () {
      return this.m_manifold;
   }
   b2Contact.prototype.GetWorldManifold = function (worldManifold) {
      var bodyA = this.m_fixtureA.GetBody();
      var bodyB = this.m_fixtureB.GetBody();
      var shapeA = this.m_fixtureA.GetShape();
      var shapeB = this.m_fixtureB.GetShape();
      worldManifold.Initialize(this.m_manifold, bodyA.GetTransform(), shapeA.m_radius, bodyB.GetTransform(), shapeB.m_radius);
   }
   b2Contact.prototype.IsTouching = function () {
      return (this.m_flags & b2Contact.e_touchingFlag) == b2Contact.e_touchingFlag;
   }
   b2Contact.prototype.IsContinuous = function () {
      return (this.m_flags & b2Contact.e_continuousFlag) == b2Contact.e_continuousFlag;
   }
   b2Contact.prototype.SetSensor = function (sensor) {
      if (sensor) {
         this.m_flags |= b2Contact.e_sensorFlag;
      }
      else {
         this.m_flags &= ~b2Contact.e_sensorFlag;
      }
   }
   b2Contact.prototype.IsSensor = function () {
      return (this.m_flags & b2Contact.e_sensorFlag) == b2Contact.e_sensorFlag;
   }
   b2Contact.prototype.SetEnabled = function (flag) {
      if (flag) {
         this.m_flags |= b2Contact.e_enabledFlag;
      }
      else {
         this.m_flags &= ~b2Contact.e_enabledFlag;
      }
   }
   b2Contact.prototype.IsEnabled = function () {
      return (this.m_flags & b2Contact.e_enabledFlag) == b2Contact.e_enabledFlag;
   }
   b2Contact.prototype.GetNext = function () {
      return this.m_next;
   }
   b2Contact.prototype.GetFixtureA = function () {
      return this.m_fixtureA;
   }
   b2Contact.prototype.GetFixtureB = function () {
      return this.m_fixtureB;
   }
   b2Contact.prototype.FlagForFiltering = function () {
      this.m_flags |= b2Contact.e_filterFlag;
   }
   b2Contact.prototype.b2Contact = function () {}
   b2Contact.prototype.Reset = function (fixtureA, fixtureB) {
      if (fixtureA === undefined) fixtureA = null;
      if (fixtureB === undefined) fixtureB = null;
      this.m_flags = b2Contact.e_enabledFlag;
      if (!fixtureA || !fixtureB) {
         this.m_fixtureA = null;
         this.m_fixtureB = null;
         return;
      }
      if (fixtureA.IsSensor() || fixtureB.IsSensor()) {
         this.m_flags |= b2Contact.e_sensorFlag;
      }
      var bodyA = fixtureA.GetBody();
      var bodyB = fixtureB.GetBody();
      if (bodyA.GetType() != b2Body.b2_dynamicBody || bodyA.IsBullet() || bodyB.GetType() != b2Body.b2_dynamicBody || bodyB.IsBullet()) {
         this.m_flags |= b2Contact.e_continuousFlag;
      }
      this.m_fixtureA = fixtureA;
      this.m_fixtureB = fixtureB;
      this.m_manifold.m_pointCount = 0;
      this.m_prev = null;
      this.m_next = null;
      this.m_nodeA.contact = null;
      this.m_nodeA.prev = null;
      this.m_nodeA.next = null;
      this.m_nodeA.other = null;
      this.m_nodeB.contact = null;
      this.m_nodeB.prev = null;
      this.m_nodeB.next = null;
      this.m_nodeB.other = null;
   }
   b2Contact.prototype.Update = function (listener) {
      var tManifold = this.m_oldManifold;
      this.m_oldManifold = this.m_manifold;
      this.m_manifold = tManifold;
      this.m_flags |= b2Contact.e_enabledFlag;
      var touching = false;
      var wasTouching = (this.m_flags & b2Contact.e_touchingFlag) == b2Contact.e_touchingFlag;
      var bodyA = this.m_fixtureA.m_body;
      var bodyB = this.m_fixtureB.m_body;
      var aabbOverlap = this.m_fixtureA.m_aabb.TestOverlap(this.m_fixtureB.m_aabb);
      if (this.m_flags & b2Contact.e_sensorFlag) {
         if (aabbOverlap) {
            var shapeA = this.m_fixtureA.GetShape();
            var shapeB = this.m_fixtureB.GetShape();
            var xfA = bodyA.GetTransform();
            var xfB = bodyB.GetTransform();
            touching = b2Shape.TestOverlap(shapeA, xfA, shapeB, xfB);
         }
         this.m_manifold.m_pointCount = 0;
      }
      else {
         if (bodyA.GetType() != b2Body.b2_dynamicBody || bodyA.IsBullet() || bodyB.GetType() != b2Body.b2_dynamicBody || bodyB.IsBullet()) {
            this.m_flags |= b2Contact.e_continuousFlag;
         }
         else {
            this.m_flags &= ~b2Contact.e_continuousFlag;
         }
         if (aabbOverlap) {
            this.Evaluate();
            touching = this.m_manifold.m_pointCount > 0;
            for (var i = 0; i < this.m_manifold.m_pointCount; ++i) {
               var mp2 = this.m_manifold.m_points[i];
               mp2.m_normalImpulse = 0.0;
               mp2.m_tangentImpulse = 0.0;
               var id2 = mp2.m_id;
               for (var j = 0; j < this.m_oldManifold.m_pointCount; ++j) {
                  var mp1 = this.m_oldManifold.m_points[j];
                  if (mp1.m_id.key == id2.key) {
                     mp2.m_normalImpulse = mp1.m_normalImpulse;
                     mp2.m_tangentImpulse = mp1.m_tangentImpulse;
                     break;
                  }
               }
            }
         }
         else {
            this.m_manifold.m_pointCount = 0;
         }
         if (touching != wasTouching) {
            bodyA.SetAwake(true);
            bodyB.SetAwake(true);
         }
      }
      if (touching) {
         this.m_flags |= b2Contact.e_touchingFlag;
      }
      else {
         this.m_flags &= ~b2Contact.e_touchingFlag;
      }
      if (wasTouching == false && touching == true) {
         listener.BeginContact(this);
      }
      if (wasTouching == true && touching == false) {
         listener.EndContact(this);
      }
      if ((this.m_flags & b2Contact.e_sensorFlag) == 0) {
         listener.PreSolve(this, this.m_oldManifold);
      }
   }
   b2Contact.prototype.Evaluate = function () {}
   b2Contact.prototype.ComputeTOI = function (sweepA, sweepB) {
      b2Contact.s_input.proxyA.Set(this.m_fixtureA.GetShape());
      b2Contact.s_input.proxyB.Set(this.m_fixtureB.GetShape());
      b2Contact.s_input.sweepA = sweepA;
      b2Contact.s_input.sweepB = sweepB;
      b2Contact.s_input.tolerance = b2Settings.b2_linearSlop;
      return b2TimeOfImpact.TimeOfImpact(b2Contact.s_input);
   }
   Box2D.postDefs.push(function () {
      Box2D.Dynamics.Contacts.b2Contact.e_sensorFlag = 0x0001;
      Box2D.Dynamics.Contacts.b2Contact.e_continuousFlag = 0x0002;
      Box2D.Dynamics.Contacts.b2Contact.e_islandFlag = 0x0004;
      Box2D.Dynamics.Contacts.b2Contact.e_toiFlag = 0x0008;
      Box2D.Dynamics.Contacts.b2Contact.e_touchingFlag = 0x0010;
      Box2D.Dynamics.Contacts.b2Contact.e_enabledFlag = 0x0020;
      Box2D.Dynamics.Contacts.b2Contact.e_filterFlag = 0x0040;
      Box2D.Dynamics.Contacts.b2Contact.s_input = new b2TOIInput();
   });
   b2ContactConstraint.b2ContactConstraint = function () {
      this.localPlaneNormal = new b2Vec2();
      this.localPoint = new b2Vec2();
      this.normal = new b2Vec2();
      this.normalMass = new b2Mat22();
      this.K = new b2Mat22();
   };
   b2ContactConstraint.prototype.b2ContactConstraint = function () {
      this.points = new Vector(b2Settings.b2_maxManifoldPoints);
      for (var i = 0; i < b2Settings.b2_maxManifoldPoints; i++) {
         this.points[i] = new b2ContactConstraintPoint();
      }
   }
   b2ContactConstraintPoint.b2ContactConstraintPoint = function () {
      this.localPoint = new b2Vec2();
      this.rA = new b2Vec2();
      this.rB = new b2Vec2();
   };
   b2ContactEdge.b2ContactEdge = function () {};
   b2ContactFactory.b2ContactFactory = function () {};
   b2ContactFactory.prototype.b2ContactFactory = function (allocator) {
      this.m_allocator = allocator;
      this.InitializeRegisters();
   }
   b2ContactFactory.prototype.AddType = function (createFcn, destroyFcn, type1, type2) {
      if (type1 === undefined) type1 = 0;
      if (type2 === undefined) type2 = 0;
      this.m_registers[type1][type2].createFcn = createFcn;
      this.m_registers[type1][type2].destroyFcn = destroyFcn;
      this.m_registers[type1][type2].primary = true;
      if (type1 != type2) {
         this.m_registers[type2][type1].createFcn = createFcn;
         this.m_registers[type2][type1].destroyFcn = destroyFcn;
         this.m_registers[type2][type1].primary = false;
      }
   }
   b2ContactFactory.prototype.InitializeRegisters = function () {
      this.m_registers = new Vector(b2Shape.e_shapeTypeCount);
      for (var i = 0; i < b2Shape.e_shapeTypeCount; i++) {
         this.m_registers[i] = new Vector(b2Shape.e_shapeTypeCount);
         for (var j = 0; j < b2Shape.e_shapeTypeCount; j++) {
            this.m_registers[i][j] = new b2ContactRegister();
         }
      }
      this.AddType(b2CircleContact.Create, b2CircleContact.Destroy, b2Shape.e_circleShape, b2Shape.e_circleShape);
      this.AddType(b2PolyAndCircleContact.Create, b2PolyAndCircleContact.Destroy, b2Shape.e_polygonShape, b2Shape.e_circleShape);
      this.AddType(b2PolygonContact.Create, b2PolygonContact.Destroy, b2Shape.e_polygonShape, b2Shape.e_polygonShape);
      this.AddType(b2EdgeAndCircleContact.Create, b2EdgeAndCircleContact.Destroy, b2Shape.e_edgeShape, b2Shape.e_circleShape);
      this.AddType(b2PolyAndEdgeContact.Create, b2PolyAndEdgeContact.Destroy, b2Shape.e_polygonShape, b2Shape.e_edgeShape);
   }
   b2ContactFactory.prototype.Create = function (fixtureA, fixtureB) {
      var type1 = parseInt(fixtureA.GetType());
      var type2 = parseInt(fixtureB.GetType());
      var reg = this.m_registers[type1][type2];
      var c;
      if (reg.pool) {
         c = reg.pool;
         reg.pool = c.m_next;
         reg.poolCount--;
         c.Reset(fixtureA, fixtureB);
         return c;
      }
      var createFcn = reg.createFcn;
      if (createFcn != null) {
         if (reg.primary) {
            c = createFcn(this.m_allocator);
            c.Reset(fixtureA, fixtureB);
            return c;
         }
         else {
            c = createFcn(this.m_allocator);
            c.Reset(fixtureB, fixtureA);
            return c;
         }
      }
      else {
         return null;
      }
   }
   b2ContactFactory.prototype.Destroy = function (contact) {
      if (contact.m_manifold.m_pointCount > 0) {
         contact.m_fixtureA.m_body.SetAwake(true);
         contact.m_fixtureB.m_body.SetAwake(true);
      }
      var type1 = parseInt(contact.m_fixtureA.GetType());
      var type2 = parseInt(contact.m_fixtureB.GetType());
      var reg = this.m_registers[type1][type2];
      if (true) {
         reg.poolCount++;
         contact.m_next = reg.pool;
         reg.pool = contact;
      }
      var destroyFcn = reg.destroyFcn;
      destroyFcn(contact, this.m_allocator);
   }
   b2ContactRegister.b2ContactRegister = function () {};
   b2ContactResult.b2ContactResult = function () {
      this.position = new b2Vec2();
      this.normal = new b2Vec2();
      this.id = new b2ContactID();
   };
   b2ContactSolver.b2ContactSolver = function () {
      this.m_step = new b2TimeStep();
      this.m_constraints = new Vector();
   };
   b2ContactSolver.prototype.b2ContactSolver = function () {}
   b2ContactSolver.prototype.Initialize = function (step, contacts, contactCount, allocator) {
      if (contactCount === undefined) contactCount = 0;
      var contact;
      this.m_step.Set(step);
      this.m_allocator = allocator;
      var i = 0;
      var tVec;
      var tMat;
      this.m_constraintCount = contactCount;
      while (this.m_constraints.length < this.m_constraintCount) {
         this.m_constraints[this.m_constraints.length] = new b2ContactConstraint();
      }
      for (i = 0;
      i < contactCount; ++i) {
         contact = contacts[i];
         var fixtureA = contact.m_fixtureA;
         var fixtureB = contact.m_fixtureB;
         var shapeA = fixtureA.m_shape;
         var shapeB = fixtureB.m_shape;
         var radiusA = shapeA.m_radius;
         var radiusB = shapeB.m_radius;
         var bodyA = fixtureA.m_body;
         var bodyB = fixtureB.m_body;
         var manifold = contact.GetManifold();
         var friction = b2Settings.b2MixFriction(fixtureA.GetFriction(), fixtureB.GetFriction());
         var restitution = b2Settings.b2MixRestitution(fixtureA.GetRestitution(), fixtureB.GetRestitution());
         var vAX = bodyA.m_linearVelocity.x;
         var vAY = bodyA.m_linearVelocity.y;
         var vBX = bodyB.m_linearVelocity.x;
         var vBY = bodyB.m_linearVelocity.y;
         var wA = bodyA.m_angularVelocity;
         var wB = bodyB.m_angularVelocity;
         b2Settings.b2Assert(manifold.m_pointCount > 0);
         b2ContactSolver.s_worldManifold.Initialize(manifold, bodyA.m_xf, radiusA, bodyB.m_xf, radiusB);
         var normalX = b2ContactSolver.s_worldManifold.m_normal.x;
         var normalY = b2ContactSolver.s_worldManifold.m_normal.y;
         var cc = this.m_constraints[i];
         cc.bodyA = bodyA;
         cc.bodyB = bodyB;
         cc.manifold = manifold;
         cc.normal.x = normalX;
         cc.normal.y = normalY;
         cc.pointCount = manifold.m_pointCount;
         cc.friction = friction;
         cc.restitution = restitution;
         cc.localPlaneNormal.x = manifold.m_localPlaneNormal.x;
         cc.localPlaneNormal.y = manifold.m_localPlaneNormal.y;
         cc.localPoint.x = manifold.m_localPoint.x;
         cc.localPoint.y = manifold.m_localPoint.y;
         cc.radius = radiusA + radiusB;
         cc.type = manifold.m_type;
         for (var k = 0; k < cc.pointCount; ++k) {
            var cp = manifold.m_points[k];
            var ccp = cc.points[k];
            ccp.normalImpulse = cp.m_normalImpulse;
            ccp.tangentImpulse = cp.m_tangentImpulse;
            ccp.localPoint.SetV(cp.m_localPoint);
            var rAX = ccp.rA.x = b2ContactSolver.s_worldManifold.m_points[k].x - bodyA.m_sweep.c.x;
            var rAY = ccp.rA.y = b2ContactSolver.s_worldManifold.m_points[k].y - bodyA.m_sweep.c.y;
            var rBX = ccp.rB.x = b2ContactSolver.s_worldManifold.m_points[k].x - bodyB.m_sweep.c.x;
            var rBY = ccp.rB.y = b2ContactSolver.s_worldManifold.m_points[k].y - bodyB.m_sweep.c.y;
            var rnA = rAX * normalY - rAY * normalX;
            var rnB = rBX * normalY - rBY * normalX;
            rnA *= rnA;
            rnB *= rnB;
            var kNormal = bodyA.m_invMass + bodyB.m_invMass + bodyA.m_invI * rnA + bodyB.m_invI * rnB;
            ccp.normalMass = 1.0 / kNormal;
            var kEqualized = bodyA.m_mass * bodyA.m_invMass + bodyB.m_mass * bodyB.m_invMass;
            kEqualized += bodyA.m_mass * bodyA.m_invI * rnA + bodyB.m_mass * bodyB.m_invI * rnB;
            ccp.equalizedMass = 1.0 / kEqualized;
            var tangentX = normalY;
            var tangentY = (-normalX);
            var rtA = rAX * tangentY - rAY * tangentX;
            var rtB = rBX * tangentY - rBY * tangentX;
            rtA *= rtA;
            rtB *= rtB;
            var kTangent = bodyA.m_invMass + bodyB.m_invMass + bodyA.m_invI * rtA + bodyB.m_invI * rtB;
            ccp.tangentMass = 1.0 / kTangent;
            ccp.velocityBias = 0.0;
            var tX = vBX + ((-wB * rBY)) - vAX - ((-wA * rAY));
            var tY = vBY + (wB * rBX) - vAY - (wA * rAX);
            var vRel = cc.normal.x * tX + cc.normal.y * tY;
            if (vRel < (-b2Settings.b2_velocityThreshold)) {
               ccp.velocityBias += (-cc.restitution * vRel);
            }
         }
         if (cc.pointCount == 2) {
            var ccp1 = cc.points[0];
            var ccp2 = cc.points[1];
            var invMassA = bodyA.m_invMass;
            var invIA = bodyA.m_invI;
            var invMassB = bodyB.m_invMass;
            var invIB = bodyB.m_invI;
            var rn1A = ccp1.rA.x * normalY - ccp1.rA.y * normalX;
            var rn1B = ccp1.rB.x * normalY - ccp1.rB.y * normalX;
            var rn2A = ccp2.rA.x * normalY - ccp2.rA.y * normalX;
            var rn2B = ccp2.rB.x * normalY - ccp2.rB.y * normalX;
            var k11 = invMassA + invMassB + invIA * rn1A * rn1A + invIB * rn1B * rn1B;
            var k22 = invMassA + invMassB + invIA * rn2A * rn2A + invIB * rn2B * rn2B;
            var k12 = invMassA + invMassB + invIA * rn1A * rn2A + invIB * rn1B * rn2B;
            var k_maxConditionNumber = 100.0;
            if (k11 * k11 < k_maxConditionNumber * (k11 * k22 - k12 * k12)) {
               cc.K.col1.Set(k11, k12);
               cc.K.col2.Set(k12, k22);
               cc.K.GetInverse(cc.normalMass);
            }
            else {
               cc.pointCount = 1;
            }
         }
      }
   }
   b2ContactSolver.prototype.InitVelocityConstraints = function (step) {
      var tVec;
      var tVec2;
      var tMat;
      for (var i = 0; i < this.m_constraintCount; ++i) {
         var c = this.m_constraints[i];
         var bodyA = c.bodyA;
         var bodyB = c.bodyB;
         var invMassA = bodyA.m_invMass;
         var invIA = bodyA.m_invI;
         var invMassB = bodyB.m_invMass;
         var invIB = bodyB.m_invI;
         var normalX = c.normal.x;
         var normalY = c.normal.y;
         var tangentX = normalY;
         var tangentY = (-normalX);
         var tX = 0;
         var j = 0;
         var tCount = 0;
         if (step.warmStarting) {
            tCount = c.pointCount;
            for (j = 0;
            j < tCount; ++j) {
               var ccp = c.points[j];
               ccp.normalImpulse *= step.dtRatio;
               ccp.tangentImpulse *= step.dtRatio;
               var PX = ccp.normalImpulse * normalX + ccp.tangentImpulse * tangentX;
               var PY = ccp.normalImpulse * normalY + ccp.tangentImpulse * tangentY;
               bodyA.m_angularVelocity -= invIA * (ccp.rA.x * PY - ccp.rA.y * PX);
               bodyA.m_linearVelocity.x -= invMassA * PX;
               bodyA.m_linearVelocity.y -= invMassA * PY;
               bodyB.m_angularVelocity += invIB * (ccp.rB.x * PY - ccp.rB.y * PX);
               bodyB.m_linearVelocity.x += invMassB * PX;
               bodyB.m_linearVelocity.y += invMassB * PY;
            }
         }
         else {
            tCount = c.pointCount;
            for (j = 0;
            j < tCount; ++j) {
               var ccp2 = c.points[j];
               ccp2.normalImpulse = 0.0;
               ccp2.tangentImpulse = 0.0;
            }
         }
      }
   }
   b2ContactSolver.prototype.SolveVelocityConstraints = function () {
      var j = 0;
      var ccp;
      var rAX = 0;
      var rAY = 0;
      var rBX = 0;
      var rBY = 0;
      var dvX = 0;
      var dvY = 0;
      var vn = 0;
      var vt = 0;
      var lambda = 0;
      var maxFriction = 0;
      var newImpulse = 0;
      var PX = 0;
      var PY = 0;
      var dX = 0;
      var dY = 0;
      var P1X = 0;
      var P1Y = 0;
      var P2X = 0;
      var P2Y = 0;
      var tMat;
      var tVec;
      for (var i = 0; i < this.m_constraintCount; ++i) {
         var c = this.m_constraints[i];
         var bodyA = c.bodyA;
         var bodyB = c.bodyB;
         var wA = bodyA.m_angularVelocity;
         var wB = bodyB.m_angularVelocity;
         var vA = bodyA.m_linearVelocity;
         var vB = bodyB.m_linearVelocity;
         var invMassA = bodyA.m_invMass;
         var invIA = bodyA.m_invI;
         var invMassB = bodyB.m_invMass;
         var invIB = bodyB.m_invI;
         var normalX = c.normal.x;
         var normalY = c.normal.y;
         var tangentX = normalY;
         var tangentY = (-normalX);
         var friction = c.friction;
         var tX = 0;
         for (j = 0;
         j < c.pointCount; j++) {
            ccp = c.points[j];
            dvX = vB.x - wB * ccp.rB.y - vA.x + wA * ccp.rA.y;
            dvY = vB.y + wB * ccp.rB.x - vA.y - wA * ccp.rA.x;
            vt = dvX * tangentX + dvY * tangentY;
            lambda = ccp.tangentMass * (-vt);
            maxFriction = friction * ccp.normalImpulse;
            newImpulse = b2Math.Clamp(ccp.tangentImpulse + lambda, (-maxFriction), maxFriction);
            lambda = newImpulse - ccp.tangentImpulse;
            PX = lambda * tangentX;
            PY = lambda * tangentY;
            vA.x -= invMassA * PX;
            vA.y -= invMassA * PY;
            wA -= invIA * (ccp.rA.x * PY - ccp.rA.y * PX);
            vB.x += invMassB * PX;
            vB.y += invMassB * PY;
            wB += invIB * (ccp.rB.x * PY - ccp.rB.y * PX);
            ccp.tangentImpulse = newImpulse;
         }
         var tCount = parseInt(c.pointCount);
         if (c.pointCount == 1) {
            ccp = c.points[0];
            dvX = vB.x + ((-wB * ccp.rB.y)) - vA.x - ((-wA * ccp.rA.y));
            dvY = vB.y + (wB * ccp.rB.x) - vA.y - (wA * ccp.rA.x);
            vn = dvX * normalX + dvY * normalY;
            lambda = (-ccp.normalMass * (vn - ccp.velocityBias));
            newImpulse = ccp.normalImpulse + lambda;
            newImpulse = newImpulse > 0 ? newImpulse : 0.0;
            lambda = newImpulse - ccp.normalImpulse;
            PX = lambda * normalX;
            PY = lambda * normalY;
            vA.x -= invMassA * PX;
            vA.y -= invMassA * PY;
            wA -= invIA * (ccp.rA.x * PY - ccp.rA.y * PX);
            vB.x += invMassB * PX;
            vB.y += invMassB * PY;
            wB += invIB * (ccp.rB.x * PY - ccp.rB.y * PX);
            ccp.normalImpulse = newImpulse;
         }
         else {
            var cp1 = c.points[0];
            var cp2 = c.points[1];
            var aX = cp1.normalImpulse;
            var aY = cp2.normalImpulse;
            var dv1X = vB.x - wB * cp1.rB.y - vA.x + wA * cp1.rA.y;
            var dv1Y = vB.y + wB * cp1.rB.x - vA.y - wA * cp1.rA.x;
            var dv2X = vB.x - wB * cp2.rB.y - vA.x + wA * cp2.rA.y;
            var dv2Y = vB.y + wB * cp2.rB.x - vA.y - wA * cp2.rA.x;
            var vn1 = dv1X * normalX + dv1Y * normalY;
            var vn2 = dv2X * normalX + dv2Y * normalY;
            var bX = vn1 - cp1.velocityBias;
            var bY = vn2 - cp2.velocityBias;
            tMat = c.K;
            bX -= tMat.col1.x * aX + tMat.col2.x * aY;
            bY -= tMat.col1.y * aX + tMat.col2.y * aY;
            var k_errorTol = 0.001;
            for (;;) {
               tMat = c.normalMass;
               var xX = (-(tMat.col1.x * bX + tMat.col2.x * bY));
               var xY = (-(tMat.col1.y * bX + tMat.col2.y * bY));
               if (xX >= 0.0 && xY >= 0.0) {
                  dX = xX - aX;
                  dY = xY - aY;
                  P1X = dX * normalX;
                  P1Y = dX * normalY;
                  P2X = dY * normalX;
                  P2Y = dY * normalY;
                  vA.x -= invMassA * (P1X + P2X);
                  vA.y -= invMassA * (P1Y + P2Y);
                  wA -= invIA * (cp1.rA.x * P1Y - cp1.rA.y * P1X + cp2.rA.x * P2Y - cp2.rA.y * P2X);
                  vB.x += invMassB * (P1X + P2X);
                  vB.y += invMassB * (P1Y + P2Y);
                  wB += invIB * (cp1.rB.x * P1Y - cp1.rB.y * P1X + cp2.rB.x * P2Y - cp2.rB.y * P2X);
                  cp1.normalImpulse = xX;
                  cp2.normalImpulse = xY;
                  break;
               }
               xX = (-cp1.normalMass * bX);
               xY = 0.0;
               vn1 = 0.0;
               vn2 = c.K.col1.y * xX + bY;
               if (xX >= 0.0 && vn2 >= 0.0) {
                  dX = xX - aX;
                  dY = xY - aY;
                  P1X = dX * normalX;
                  P1Y = dX * normalY;
                  P2X = dY * normalX;
                  P2Y = dY * normalY;
                  vA.x -= invMassA * (P1X + P2X);
                  vA.y -= invMassA * (P1Y + P2Y);
                  wA -= invIA * (cp1.rA.x * P1Y - cp1.rA.y * P1X + cp2.rA.x * P2Y - cp2.rA.y * P2X);
                  vB.x += invMassB * (P1X + P2X);
                  vB.y += invMassB * (P1Y + P2Y);
                  wB += invIB * (cp1.rB.x * P1Y - cp1.rB.y * P1X + cp2.rB.x * P2Y - cp2.rB.y * P2X);
                  cp1.normalImpulse = xX;
                  cp2.normalImpulse = xY;
                  break;
               }
               xX = 0.0;
               xY = (-cp2.normalMass * bY);
               vn1 = c.K.col2.x * xY + bX;
               vn2 = 0.0;
               if (xY >= 0.0 && vn1 >= 0.0) {
                  dX = xX - aX;
                  dY = xY - aY;
                  P1X = dX * normalX;
                  P1Y = dX * normalY;
                  P2X = dY * normalX;
                  P2Y = dY * normalY;
                  vA.x -= invMassA * (P1X + P2X);
                  vA.y -= invMassA * (P1Y + P2Y);
                  wA -= invIA * (cp1.rA.x * P1Y - cp1.rA.y * P1X + cp2.rA.x * P2Y - cp2.rA.y * P2X);
                  vB.x += invMassB * (P1X + P2X);
                  vB.y += invMassB * (P1Y + P2Y);
                  wB += invIB * (cp1.rB.x * P1Y - cp1.rB.y * P1X + cp2.rB.x * P2Y - cp2.rB.y * P2X);
                  cp1.normalImpulse = xX;
                  cp2.normalImpulse = xY;
                  break;
               }
               xX = 0.0;
               xY = 0.0;
               vn1 = bX;
               vn2 = bY;
               if (vn1 >= 0.0 && vn2 >= 0.0) {
                  dX = xX - aX;
                  dY = xY - aY;
                  P1X = dX * normalX;
                  P1Y = dX * normalY;
                  P2X = dY * normalX;
                  P2Y = dY * normalY;
                  vA.x -= invMassA * (P1X + P2X);
                  vA.y -= invMassA * (P1Y + P2Y);
                  wA -= invIA * (cp1.rA.x * P1Y - cp1.rA.y * P1X + cp2.rA.x * P2Y - cp2.rA.y * P2X);
                  vB.x += invMassB * (P1X + P2X);
                  vB.y += invMassB * (P1Y + P2Y);
                  wB += invIB * (cp1.rB.x * P1Y - cp1.rB.y * P1X + cp2.rB.x * P2Y - cp2.rB.y * P2X);
                  cp1.normalImpulse = xX;
                  cp2.normalImpulse = xY;
                  break;
               }
               break;
            }
         }
         bodyA.m_angularVelocity = wA;
         bodyB.m_angularVelocity = wB;
      }
   }
   b2ContactSolver.prototype.FinalizeVelocityConstraints = function () {
      for (var i = 0; i < this.m_constraintCount; ++i) {
         var c = this.m_constraints[i];
         var m = c.manifold;
         for (var j = 0; j < c.pointCount; ++j) {
            var point1 = m.m_points[j];
            var point2 = c.points[j];
            point1.m_normalImpulse = point2.normalImpulse;
            point1.m_tangentImpulse = point2.tangentImpulse;
         }
      }
   }
   b2ContactSolver.prototype.SolvePositionConstraints = function (baumgarte) {
      if (baumgarte === undefined) baumgarte = 0;
      var minSeparation = 0.0;
      for (var i = 0; i < this.m_constraintCount; i++) {
         var c = this.m_constraints[i];
         var bodyA = c.bodyA;
         var bodyB = c.bodyB;
         var invMassA = bodyA.m_mass * bodyA.m_invMass;
         var invIA = bodyA.m_mass * bodyA.m_invI;
         var invMassB = bodyB.m_mass * bodyB.m_invMass;
         var invIB = bodyB.m_mass * bodyB.m_invI;
         b2ContactSolver.s_psm.Initialize(c);
         var normal = b2ContactSolver.s_psm.m_normal;
         for (var j = 0; j < c.pointCount; j++) {
            var ccp = c.points[j];
            var point = b2ContactSolver.s_psm.m_points[j];
            var separation = b2ContactSolver.s_psm.m_separations[j];
            var rAX = point.x - bodyA.m_sweep.c.x;
            var rAY = point.y - bodyA.m_sweep.c.y;
            var rBX = point.x - bodyB.m_sweep.c.x;
            var rBY = point.y - bodyB.m_sweep.c.y;
            minSeparation = minSeparation < separation ? minSeparation : separation;
            var C = b2Math.Clamp(baumgarte * (separation + b2Settings.b2_linearSlop), (-b2Settings.b2_maxLinearCorrection), 0.0);
            var impulse = (-ccp.equalizedMass * C);
            var PX = impulse * normal.x;
            var PY = impulse * normal.y;bodyA.m_sweep.c.x -= invMassA * PX;
            bodyA.m_sweep.c.y -= invMassA * PY;
            bodyA.m_sweep.a -= invIA * (rAX * PY - rAY * PX);
            bodyA.SynchronizeTransform();
            bodyB.m_sweep.c.x += invMassB * PX;
            bodyB.m_sweep.c.y += invMassB * PY;
            bodyB.m_sweep.a += invIB * (rBX * PY - rBY * PX);
            bodyB.SynchronizeTransform();
         }
      }
      return minSeparation > (-1.5 * b2Settings.b2_linearSlop);
   }
   Box2D.postDefs.push(function () {
      Box2D.Dynamics.Contacts.b2ContactSolver.s_worldManifold = new b2WorldManifold();
      Box2D.Dynamics.Contacts.b2ContactSolver.s_psm = new b2PositionSolverManifold();
   });
   Box2D.inherit(b2EdgeAndCircleContact, Box2D.Dynamics.Contacts.b2Contact);
   b2EdgeAndCircleContact.prototype.__super = Box2D.Dynamics.Contacts.b2Contact.prototype;
   b2EdgeAndCircleContact.b2EdgeAndCircleContact = function () {
      Box2D.Dynamics.Contacts.b2Contact.b2Contact.apply(this, arguments);
   };
   b2EdgeAndCircleContact.Create = function (allocator) {
      return new b2EdgeAndCircleContact();
   }
   b2EdgeAndCircleContact.Destroy = function (contact, allocator) {}
   b2EdgeAndCircleContact.prototype.Reset = function (fixtureA, fixtureB) {
      this.__super.Reset.call(this, fixtureA, fixtureB);
   }
   b2EdgeAndCircleContact.prototype.Evaluate = function () {
      var bA = this.m_fixtureA.GetBody();
      var bB = this.m_fixtureB.GetBody();
      this.b2CollideEdgeAndCircle(this.m_manifold, (this.m_fixtureA.GetShape() instanceof b2EdgeShape ? this.m_fixtureA.GetShape() : null), bA.m_xf, (this.m_fixtureB.GetShape() instanceof b2CircleShape ? this.m_fixtureB.GetShape() : null), bB.m_xf);
   }
   b2EdgeAndCircleContact.prototype.b2CollideEdgeAndCircle = function (manifold, edge, xf1, circle, xf2) {}
   Box2D.inherit(b2NullContact, Box2D.Dynamics.Contacts.b2Contact);
   b2NullContact.prototype.__super = Box2D.Dynamics.Contacts.b2Contact.prototype;
   b2NullContact.b2NullContact = function () {
      Box2D.Dynamics.Contacts.b2Contact.b2Contact.apply(this, arguments);
   };
   b2NullContact.prototype.b2NullContact = function () {
      this.__super.b2Contact.call(this);
   }
   b2NullContact.prototype.Evaluate = function () {}
   Box2D.inherit(b2PolyAndCircleContact, Box2D.Dynamics.Contacts.b2Contact);
   b2PolyAndCircleContact.prototype.__super = Box2D.Dynamics.Contacts.b2Contact.prototype;
   b2PolyAndCircleContact.b2PolyAndCircleContact = function () {
      Box2D.Dynamics.Contacts.b2Contact.b2Contact.apply(this, arguments);
   };
   b2PolyAndCircleContact.Create = function (allocator) {
      return new b2PolyAndCircleContact();
   }
   b2PolyAndCircleContact.Destroy = function (contact, allocator) {}
   b2PolyAndCircleContact.prototype.Reset = function (fixtureA, fixtureB) {
      this.__super.Reset.call(this, fixtureA, fixtureB);
      b2Settings.b2Assert(fixtureA.GetType() == b2Shape.e_polygonShape);
      b2Settings.b2Assert(fixtureB.GetType() == b2Shape.e_circleShape);
   }
   b2PolyAndCircleContact.prototype.Evaluate = function () {
      var bA = this.m_fixtureA.m_body;
      var bB = this.m_fixtureB.m_body;
      b2Collision.CollidePolygonAndCircle(this.m_manifold, (this.m_fixtureA.GetShape() instanceof b2PolygonShape ? this.m_fixtureA.GetShape() : null), bA.m_xf, (this.m_fixtureB.GetShape() instanceof b2CircleShape ? this.m_fixtureB.GetShape() : null), bB.m_xf);
   }
   Box2D.inherit(b2PolyAndEdgeContact, Box2D.Dynamics.Contacts.b2Contact);
   b2PolyAndEdgeContact.prototype.__super = Box2D.Dynamics.Contacts.b2Contact.prototype;
   b2PolyAndEdgeContact.b2PolyAndEdgeContact = function () {
      Box2D.Dynamics.Contacts.b2Contact.b2Contact.apply(this, arguments);
   };
   b2PolyAndEdgeContact.Create = function (allocator) {
      return new b2PolyAndEdgeContact();
   }
   b2PolyAndEdgeContact.Destroy = function (contact, allocator) {}
   b2PolyAndEdgeContact.prototype.Reset = function (fixtureA, fixtureB) {
      this.__super.Reset.call(this, fixtureA, fixtureB);
      b2Settings.b2Assert(fixtureA.GetType() == b2Shape.e_polygonShape);
      b2Settings.b2Assert(fixtureB.GetType() == b2Shape.e_edgeShape);
   }
   b2PolyAndEdgeContact.prototype.Evaluate = function () {
      var bA = this.m_fixtureA.GetBody();
      var bB = this.m_fixtureB.GetBody();
      this.b2CollidePolyAndEdge(this.m_manifold, (this.m_fixtureA.GetShape() instanceof b2PolygonShape ? this.m_fixtureA.GetShape() : null), bA.m_xf, (this.m_fixtureB.GetShape() instanceof b2EdgeShape ? this.m_fixtureB.GetShape() : null), bB.m_xf);
   }
   b2PolyAndEdgeContact.prototype.b2CollidePolyAndEdge = function (manifold, polygon, xf1, edge, xf2) {}
   Box2D.inherit(b2PolygonContact, Box2D.Dynamics.Contacts.b2Contact);
   b2PolygonContact.prototype.__super = Box2D.Dynamics.Contacts.b2Contact.prototype;
   b2PolygonContact.b2PolygonContact = function () {
      Box2D.Dynamics.Contacts.b2Contact.b2Contact.apply(this, arguments);
   };
   b2PolygonContact.Create = function (allocator) {
      return new b2PolygonContact();
   }
   b2PolygonContact.Destroy = function (contact, allocator) {}
   b2PolygonContact.prototype.Reset = function (fixtureA, fixtureB) {
      this.__super.Reset.call(this, fixtureA, fixtureB);
   }
   b2PolygonContact.prototype.Evaluate = function () {
      var bA = this.m_fixtureA.GetBody();
      var bB = this.m_fixtureB.GetBody();
      b2Collision.CollidePolygons(this.m_manifold, (this.m_fixtureA.GetShape() instanceof b2PolygonShape ? this.m_fixtureA.GetShape() : null), bA.m_xf, (this.m_fixtureB.GetShape() instanceof b2PolygonShape ? this.m_fixtureB.GetShape() : null), bB.m_xf);
   }
   b2PositionSolverManifold.b2PositionSolverManifold = function () {};
   b2PositionSolverManifold.prototype.b2PositionSolverManifold = function () {
      this.m_normal = new b2Vec2();
      this.m_separations = new Vector_a2j_Number(b2Settings.b2_maxManifoldPoints);
      this.m_points = new Vector(b2Settings.b2_maxManifoldPoints);
      for (var i = 0; i < b2Settings.b2_maxManifoldPoints; i++) {
         this.m_points[i] = new b2Vec2();
      }
   }
   b2PositionSolverManifold.prototype.Initialize = function (cc) {
      b2Settings.b2Assert(cc.pointCount > 0);
      var i = 0;
      var clipPointX = 0;
      var clipPointY = 0;
      var tMat;
      var tVec;
      var planePointX = 0;
      var planePointY = 0;
      switch (cc.type) {
      case b2Manifold.e_circles:
         {
            tMat = cc.bodyA.m_xf.R;
            tVec = cc.localPoint;
            var pointAX = cc.bodyA.m_xf.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
            var pointAY = cc.bodyA.m_xf.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
            tMat = cc.bodyB.m_xf.R;
            tVec = cc.points[0].localPoint;
            var pointBX = cc.bodyB.m_xf.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
            var pointBY = cc.bodyB.m_xf.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
            var dX = pointBX - pointAX;
            var dY = pointBY - pointAY;
            var d2 = dX * dX + dY * dY;
            if (d2 > Number.MIN_VALUE * Number.MIN_VALUE) {
               var d = Math.sqrt(d2);
               this.m_normal.x = dX / d;
               this.m_normal.y = dY / d;
            }
            else {
               this.m_normal.x = 1.0;
               this.m_normal.y = 0.0;
            }
            this.m_points[0].x = 0.5 * (pointAX + pointBX);
            this.m_points[0].y = 0.5 * (pointAY + pointBY);
            this.m_separations[0] = dX * this.m_normal.x + dY * this.m_normal.y - cc.radius;
         }
         break;
      case b2Manifold.e_faceA:
         {
            tMat = cc.bodyA.m_xf.R;
            tVec = cc.localPlaneNormal;
            this.m_normal.x = tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;
            this.m_normal.y = tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;
            tMat = cc.bodyA.m_xf.R;
            tVec = cc.localPoint;
            planePointX = cc.bodyA.m_xf.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
            planePointY = cc.bodyA.m_xf.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
            tMat = cc.bodyB.m_xf.R;
            for (i = 0;
            i < cc.pointCount; ++i) {
               tVec = cc.points[i].localPoint;
               clipPointX = cc.bodyB.m_xf.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
               clipPointY = cc.bodyB.m_xf.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
               this.m_separations[i] = (clipPointX - planePointX) * this.m_normal.x + (clipPointY - planePointY) * this.m_normal.y - cc.radius;
               this.m_points[i].x = clipPointX;
               this.m_points[i].y = clipPointY;
            }
         }
         break;
      case b2Manifold.e_faceB:
         {
            tMat = cc.bodyB.m_xf.R;
            tVec = cc.localPlaneNormal;
            this.m_normal.x = tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;
            this.m_normal.y = tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;
            tMat = cc.bodyB.m_xf.R;
            tVec = cc.localPoint;
            planePointX = cc.bodyB.m_xf.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
            planePointY = cc.bodyB.m_xf.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
            tMat = cc.bodyA.m_xf.R;
            for (i = 0;
            i < cc.pointCount; ++i) {
               tVec = cc.points[i].localPoint;
               clipPointX = cc.bodyA.m_xf.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
               clipPointY = cc.bodyA.m_xf.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
               this.m_separations[i] = (clipPointX - planePointX) * this.m_normal.x + (clipPointY - planePointY) * this.m_normal.y - cc.radius;
               this.m_points[i].Set(clipPointX, clipPointY);
            }
            this.m_normal.x *= (-1);
            this.m_normal.y *= (-1);
         }
         break;
      }
   }
   Box2D.postDefs.push(function () {
      Box2D.Dynamics.Contacts.b2PositionSolverManifold.circlePointA = new b2Vec2();
      Box2D.Dynamics.Contacts.b2PositionSolverManifold.circlePointB = new b2Vec2();
   });
})();
(function () {
   var b2Body = Box2D.Dynamics.b2Body,
      b2BodyDef = Box2D.Dynamics.b2BodyDef,
      b2ContactFilter = Box2D.Dynamics.b2ContactFilter,
      b2ContactImpulse = Box2D.Dynamics.b2ContactImpulse,
      b2ContactListener = Box2D.Dynamics.b2ContactListener,
      b2ContactManager = Box2D.Dynamics.b2ContactManager,
      b2DebugDraw = Box2D.Dynamics.b2DebugDraw,
      b2DestructionListener = Box2D.Dynamics.b2DestructionListener,
      b2FilterData = Box2D.Dynamics.b2FilterData,
      b2Fixture = Box2D.Dynamics.b2Fixture,
      b2FixtureDef = Box2D.Dynamics.b2FixtureDef,
      b2Island = Box2D.Dynamics.b2Island,
      b2TimeStep = Box2D.Dynamics.b2TimeStep,
      b2World = Box2D.Dynamics.b2World,
      b2Mat22 = Box2D.Common.Math.b2Mat22,
      b2Mat33 = Box2D.Common.Math.b2Mat33,
      b2Math = Box2D.Common.Math.b2Math,
      b2Sweep = Box2D.Common.Math.b2Sweep,
      b2Transform = Box2D.Common.Math.b2Transform,
      b2Vec2 = Box2D.Common.Math.b2Vec2,
      b2Vec3 = Box2D.Common.Math.b2Vec3,
      b2Color = Box2D.Common.b2Color,
      b2internal = Box2D.Common.b2internal,
      b2Settings = Box2D.Common.b2Settings,
      b2CircleShape = Box2D.Collision.Shapes.b2CircleShape,
      b2EdgeChainDef = Box2D.Collision.Shapes.b2EdgeChainDef,
      b2EdgeShape = Box2D.Collision.Shapes.b2EdgeShape,
      b2MassData = Box2D.Collision.Shapes.b2MassData,
      b2PolygonShape = Box2D.Collision.Shapes.b2PolygonShape,
      b2Shape = Box2D.Collision.Shapes.b2Shape,
      b2BuoyancyController = Box2D.Dynamics.Controllers.b2BuoyancyController,
      b2ConstantAccelController = Box2D.Dynamics.Controllers.b2ConstantAccelController,
      b2ConstantForceController = Box2D.Dynamics.Controllers.b2ConstantForceController,
      b2Controller = Box2D.Dynamics.Controllers.b2Controller,
      b2ControllerEdge = Box2D.Dynamics.Controllers.b2ControllerEdge,
      b2GravityController = Box2D.Dynamics.Controllers.b2GravityController,
      b2TensorDampingController = Box2D.Dynamics.Controllers.b2TensorDampingController;

   Box2D.inherit(b2BuoyancyController, Box2D.Dynamics.Controllers.b2Controller);
   b2BuoyancyController.prototype.__super = Box2D.Dynamics.Controllers.b2Controller.prototype;
   b2BuoyancyController.b2BuoyancyController = function () {
      Box2D.Dynamics.Controllers.b2Controller.b2Controller.apply(this, arguments);
      this.normal = new b2Vec2(0, (-1));
      this.offset = 0;
      this.density = 0;
      this.velocity = new b2Vec2(0, 0);
      this.linearDrag = 2;
      this.angularDrag = 1;
      this.useDensity = false;
      this.useWorldGravity = true;
      this.gravity = null;
   };
   b2BuoyancyController.prototype.Step = function (step) {
      if (!this.m_bodyList) return;
      if (this.useWorldGravity) {
         this.gravity = this.GetWorld().GetGravity().Copy();
      }
      for (var i = this.m_bodyList; i; i = i.nextBody) {
         var body = i.body;
         if (body.IsAwake() == false) {
            continue;
         }
         var areac = new b2Vec2();
         var massc = new b2Vec2();
         var area = 0.0;
         var mass = 0.0;
         for (var fixture = body.GetFixtureList(); fixture; fixture = fixture.GetNext()) {
            var sc = new b2Vec2();
            var sarea = fixture.GetShape().ComputeSubmergedArea(this.normal, this.offset, body.GetTransform(), sc);
            area += sarea;
            areac.x += sarea * sc.x;
            areac.y += sarea * sc.y;
            var shapeDensity = 0;
            if (this.useDensity) {
               shapeDensity = 1;
            }
            else {
               shapeDensity = 1;
            }
            mass += sarea * shapeDensity;
            massc.x += sarea * sc.x * shapeDensity;
            massc.y += sarea * sc.y * shapeDensity;
         }
         areac.x /= area;
         areac.y /= area;
         massc.x /= mass;
         massc.y /= mass;
         if (area < Number.MIN_VALUE) continue;
         var buoyancyForce = this.gravity.GetNegative();
         buoyancyForce.Multiply(this.density * area);
         body.ApplyForce(buoyancyForce, massc);
         var dragForce = body.GetLinearVelocityFromWorldPoint(areac);
         dragForce.Subtract(this.velocity);
         dragForce.Multiply((-this.linearDrag * area));
         body.ApplyForce(dragForce, areac);
         body.ApplyTorque((-body.GetInertia() / body.GetMass() * area * body.GetAngularVelocity() * this.angularDrag));
      }
   }
   b2BuoyancyController.prototype.Draw = function (debugDraw) {
      var r = 1000;
      var p1 = new b2Vec2();
      var p2 = new b2Vec2();
      p1.x = this.normal.x * this.offset + this.normal.y * r;
      p1.y = this.normal.y * this.offset - this.normal.x * r;
      p2.x = this.normal.x * this.offset - this.normal.y * r;
      p2.y = this.normal.y * this.offset + this.normal.x * r;
      var color = new b2Color(0, 0, 1);
      debugDraw.DrawSegment(p1, p2, color);
   }
   Box2D.inherit(b2ConstantAccelController, Box2D.Dynamics.Controllers.b2Controller);
   b2ConstantAccelController.prototype.__super = Box2D.Dynamics.Controllers.b2Controller.prototype;
   b2ConstantAccelController.b2ConstantAccelController = function () {
      Box2D.Dynamics.Controllers.b2Controller.b2Controller.apply(this, arguments);
      this.A = new b2Vec2(0, 0);
   };
   b2ConstantAccelController.prototype.Step = function (step) {
      var smallA = new b2Vec2(this.A.x * step.dt, this.A.y * step.dt);
      for (var i = this.m_bodyList; i; i = i.nextBody) {
         var body = i.body;
         if (!body.IsAwake()) continue;
         body.SetLinearVelocity(new b2Vec2(body.GetLinearVelocity().x + smallA.x, body.GetLinearVelocity().y + smallA.y));
      }
   }
   Box2D.inherit(b2ConstantForceController, Box2D.Dynamics.Controllers.b2Controller);
   b2ConstantForceController.prototype.__super = Box2D.Dynamics.Controllers.b2Controller.prototype;
   b2ConstantForceController.b2ConstantForceController = function () {
      Box2D.Dynamics.Controllers.b2Controller.b2Controller.apply(this, arguments);
      this.F = new b2Vec2(0, 0);
   };
   b2ConstantForceController.prototype.Step = function (step) {
      for (var i = this.m_bodyList; i; i = i.nextBody) {
         var body = i.body;
         if (!body.IsAwake()) continue;
         body.ApplyForce(this.F, body.GetWorldCenter());
      }
   }
   b2Controller.b2Controller = function () {};
   b2Controller.prototype.Step = function (step) {}
   b2Controller.prototype.Draw = function (debugDraw) {}
   b2Controller.prototype.AddBody = function (body) {
      var edge = new b2ControllerEdge();
      edge.controller = this;
      edge.body = body;
      edge.nextBody = this.m_bodyList;
      edge.prevBody = null;
      this.m_bodyList = edge;
      if (edge.nextBody) edge.nextBody.prevBody = edge;
      this.m_bodyCount++;
      edge.nextController = body.m_controllerList;
      edge.prevController = null;
      body.m_controllerList = edge;
      if (edge.nextController) edge.nextController.prevController = edge;
      body.m_controllerCount++;
   }
   b2Controller.prototype.RemoveBody = function (body) {
      var edge = body.m_controllerList;
      while (edge && edge.controller != this)
      edge = edge.nextController;
      if (edge.prevBody) edge.prevBody.nextBody = edge.nextBody;
      if (edge.nextBody) edge.nextBody.prevBody = edge.prevBody;
      if (edge.nextController) edge.nextController.prevController = edge.prevController;
      if (edge.prevController) edge.prevController.nextController = edge.nextController;
      if (this.m_bodyList == edge) this.m_bodyList = edge.nextBody;
      if (body.m_controllerList == edge) body.m_controllerList = edge.nextController;
      body.m_controllerCount--;
      this.m_bodyCount--;
   }
   b2Controller.prototype.Clear = function () {
      while (this.m_bodyList)
      this.RemoveBody(this.m_bodyList.body);
   }
   b2Controller.prototype.GetNext = function () {
      return this.m_next;
   }
   b2Controller.prototype.GetWorld = function () {
      return this.m_world;
   }
   b2Controller.prototype.GetBodyList = function () {
      return this.m_bodyList;
   }
   b2ControllerEdge.b2ControllerEdge = function () {};
   Box2D.inherit(b2GravityController, Box2D.Dynamics.Controllers.b2Controller);
   b2GravityController.prototype.__super = Box2D.Dynamics.Controllers.b2Controller.prototype;
   b2GravityController.b2GravityController = function () {
      Box2D.Dynamics.Controllers.b2Controller.b2Controller.apply(this, arguments);
      this.G = 1;
      this.invSqr = true;
   };
   b2GravityController.prototype.Step = function (step) {
      var i = null;
      var body1 = null;
      var p1 = null;
      var mass1 = 0;
      var j = null;
      var body2 = null;
      var p2 = null;
      var dx = 0;
      var dy = 0;
      var r2 = 0;
      var f = null;
      if (this.invSqr) {
         for (i = this.m_bodyList;
         i; i = i.nextBody) {
            body1 = i.body;
            p1 = body1.GetWorldCenter();
            mass1 = body1.GetMass();
            for (j = this.m_bodyList;
            j != i; j = j.nextBody) {
               body2 = j.body;
               p2 = body2.GetWorldCenter();
               dx = p2.x - p1.x;
               dy = p2.y - p1.y;
               r2 = dx * dx + dy * dy;
               if (r2 < Number.MIN_VALUE) continue;
               f = new b2Vec2(dx, dy);
               f.Multiply(this.G / r2 / Math.sqrt(r2) * mass1 * body2.GetMass());
               if (body1.IsAwake()) body1.ApplyForce(f, p1);
               f.Multiply((-1));
               if (body2.IsAwake()) body2.ApplyForce(f, p2);
            }
         }
      }
      else {
         for (i = this.m_bodyList;
         i; i = i.nextBody) {
            body1 = i.body;
            p1 = body1.GetWorldCenter();
            mass1 = body1.GetMass();
            for (j = this.m_bodyList;
            j != i; j = j.nextBody) {
               body2 = j.body;
               p2 = body2.GetWorldCenter();
               dx = p2.x - p1.x;
               dy = p2.y - p1.y;
               r2 = dx * dx + dy * dy;
               if (r2 < Number.MIN_VALUE) continue;
               f = new b2Vec2(dx, dy);
               f.Multiply(this.G / r2 * mass1 * body2.GetMass());
               if (body1.IsAwake()) body1.ApplyForce(f, p1);
               f.Multiply((-1));
               if (body2.IsAwake()) body2.ApplyForce(f, p2);
            }
         }
      }
   }
   Box2D.inherit(b2TensorDampingController, Box2D.Dynamics.Controllers.b2Controller);
   b2TensorDampingController.prototype.__super = Box2D.Dynamics.Controllers.b2Controller.prototype;
   b2TensorDampingController.b2TensorDampingController = function () {
      Box2D.Dynamics.Controllers.b2Controller.b2Controller.apply(this, arguments);
      this.T = new b2Mat22();
      this.maxTimestep = 0;
   };
   b2TensorDampingController.prototype.SetAxisAligned = function (xDamping, yDamping) {
      if (xDamping === undefined) xDamping = 0;
      if (yDamping === undefined) yDamping = 0;
      this.T.col1.x = (-xDamping);
      this.T.col1.y = 0;
      this.T.col2.x = 0;
      this.T.col2.y = (-yDamping);
      if (xDamping > 0 || yDamping > 0) {
         this.maxTimestep = 1 / Math.max(xDamping, yDamping);
      }
      else {
         this.maxTimestep = 0;
      }
   }
   b2TensorDampingController.prototype.Step = function (step) {
      var timestep = step.dt;
      if (timestep <= Number.MIN_VALUE) return;
      if (timestep > this.maxTimestep && this.maxTimestep > 0) timestep = this.maxTimestep;
      for (var i = this.m_bodyList; i; i = i.nextBody) {
         var body = i.body;
         if (!body.IsAwake()) {
            continue;
         }
         var damping = body.GetWorldVector(b2Math.MulMV(this.T, body.GetLocalVector(body.GetLinearVelocity())));
         body.SetLinearVelocity(new b2Vec2(body.GetLinearVelocity().x + damping.x * timestep, body.GetLinearVelocity().y + damping.y * timestep));
      }
   }
})();
(function () {
   var b2Color = Box2D.Common.b2Color,
      b2internal = Box2D.Common.b2internal,
      b2Settings = Box2D.Common.b2Settings,
      b2Mat22 = Box2D.Common.Math.b2Mat22,
      b2Mat33 = Box2D.Common.Math.b2Mat33,
      b2Math = Box2D.Common.Math.b2Math,
      b2Sweep = Box2D.Common.Math.b2Sweep,
      b2Transform = Box2D.Common.Math.b2Transform,
      b2Vec2 = Box2D.Common.Math.b2Vec2,
      b2Vec3 = Box2D.Common.Math.b2Vec3,
      b2DistanceJoint = Box2D.Dynamics.Joints.b2DistanceJoint,
      b2DistanceJointDef = Box2D.Dynamics.Joints.b2DistanceJointDef,
      b2FrictionJoint = Box2D.Dynamics.Joints.b2FrictionJoint,
      b2FrictionJointDef = Box2D.Dynamics.Joints.b2FrictionJointDef,
      b2GearJoint = Box2D.Dynamics.Joints.b2GearJoint,
      b2GearJointDef = Box2D.Dynamics.Joints.b2GearJointDef,
      b2Jacobian = Box2D.Dynamics.Joints.b2Jacobian,
      b2Joint = Box2D.Dynamics.Joints.b2Joint,
      b2JointDef = Box2D.Dynamics.Joints.b2JointDef,
      b2JointEdge = Box2D.Dynamics.Joints.b2JointEdge,
      b2LineJoint = Box2D.Dynamics.Joints.b2LineJoint,
      b2LineJointDef = Box2D.Dynamics.Joints.b2LineJointDef,
      b2MouseJoint = Box2D.Dynamics.Joints.b2MouseJoint,
      b2MouseJointDef = Box2D.Dynamics.Joints.b2MouseJointDef,
      b2PrismaticJoint = Box2D.Dynamics.Joints.b2PrismaticJoint,
      b2PrismaticJointDef = Box2D.Dynamics.Joints.b2PrismaticJointDef,
      b2PulleyJoint = Box2D.Dynamics.Joints.b2PulleyJoint,
      b2PulleyJointDef = Box2D.Dynamics.Joints.b2PulleyJointDef,
      b2RevoluteJoint = Box2D.Dynamics.Joints.b2RevoluteJoint,
      b2RevoluteJointDef = Box2D.Dynamics.Joints.b2RevoluteJointDef,
      b2WeldJoint = Box2D.Dynamics.Joints.b2WeldJoint,
      b2WeldJointDef = Box2D.Dynamics.Joints.b2WeldJointDef,
      b2Body = Box2D.Dynamics.b2Body,
      b2BodyDef = Box2D.Dynamics.b2BodyDef,
      b2ContactFilter = Box2D.Dynamics.b2ContactFilter,
      b2ContactImpulse = Box2D.Dynamics.b2ContactImpulse,
      b2ContactListener = Box2D.Dynamics.b2ContactListener,
      b2ContactManager = Box2D.Dynamics.b2ContactManager,
      b2DebugDraw = Box2D.Dynamics.b2DebugDraw,
      b2DestructionListener = Box2D.Dynamics.b2DestructionListener,
      b2FilterData = Box2D.Dynamics.b2FilterData,
      b2Fixture = Box2D.Dynamics.b2Fixture,
      b2FixtureDef = Box2D.Dynamics.b2FixtureDef,
      b2Island = Box2D.Dynamics.b2Island,
      b2TimeStep = Box2D.Dynamics.b2TimeStep,
      b2World = Box2D.Dynamics.b2World;

   Box2D.inherit(b2DistanceJoint, Box2D.Dynamics.Joints.b2Joint);
   b2DistanceJoint.prototype.__super = Box2D.Dynamics.Joints.b2Joint.prototype;
   b2DistanceJoint.b2DistanceJoint = function () {
      Box2D.Dynamics.Joints.b2Joint.b2Joint.apply(this, arguments);
      this.m_localAnchor1 = new b2Vec2();
      this.m_localAnchor2 = new b2Vec2();
      this.m_u = new b2Vec2();
   };
   b2DistanceJoint.prototype.GetAnchorA = function () {
      return this.m_bodyA.GetWorldPoint(this.m_localAnchor1);
   }
   b2DistanceJoint.prototype.GetAnchorB = function () {
      return this.m_bodyB.GetWorldPoint(this.m_localAnchor2);
   }
   b2DistanceJoint.prototype.GetReactionForce = function (inv_dt) {
      if (inv_dt === undefined) inv_dt = 0;
      return new b2Vec2(inv_dt * this.m_impulse * this.m_u.x, inv_dt * this.m_impulse * this.m_u.y);
   }
   b2DistanceJoint.prototype.GetReactionTorque = function (inv_dt) {
      if (inv_dt === undefined) inv_dt = 0;
      return 0.0;
   }
   b2DistanceJoint.prototype.GetLength = function () {
      return this.m_length;
   }
   b2DistanceJoint.prototype.SetLength = function (length) {
      if (length === undefined) length = 0;
      this.m_length = length;
   }
   b2DistanceJoint.prototype.GetFrequency = function () {
      return this.m_frequencyHz;
   }
   b2DistanceJoint.prototype.SetFrequency = function (hz) {
      if (hz === undefined) hz = 0;
      this.m_frequencyHz = hz;
   }
   b2DistanceJoint.prototype.GetDampingRatio = function () {
      return this.m_dampingRatio;
   }
   b2DistanceJoint.prototype.SetDampingRatio = function (ratio) {
      if (ratio === undefined) ratio = 0;
      this.m_dampingRatio = ratio;
   }
   b2DistanceJoint.prototype.b2DistanceJoint = function (def) {
      this.__super.b2Joint.call(this, def);
      var tMat;
      var tX = 0;
      var tY = 0;
      this.m_localAnchor1.SetV(def.localAnchorA);
      this.m_localAnchor2.SetV(def.localAnchorB);
      this.m_length = def.length;
      this.m_frequencyHz = def.frequencyHz;
      this.m_dampingRatio = def.dampingRatio;
      this.m_impulse = 0.0;
      this.m_gamma = 0.0;
      this.m_bias = 0.0;
   }
   b2DistanceJoint.prototype.InitVelocityConstraints = function (step) {
      var tMat;
      var tX = 0;
      var bA = this.m_bodyA;
      var bB = this.m_bodyB;
      tMat = bA.m_xf.R;
      var r1X = this.m_localAnchor1.x - bA.m_sweep.localCenter.x;
      var r1Y = this.m_localAnchor1.y - bA.m_sweep.localCenter.y;
      tX = (tMat.col1.x * r1X + tMat.col2.x * r1Y);
      r1Y = (tMat.col1.y * r1X + tMat.col2.y * r1Y);
      r1X = tX;
      tMat = bB.m_xf.R;
      var r2X = this.m_localAnchor2.x - bB.m_sweep.localCenter.x;
      var r2Y = this.m_localAnchor2.y - bB.m_sweep.localCenter.y;
      tX = (tMat.col1.x * r2X + tMat.col2.x * r2Y);
      r2Y = (tMat.col1.y * r2X + tMat.col2.y * r2Y);
      r2X = tX;
      this.m_u.x = bB.m_sweep.c.x + r2X - bA.m_sweep.c.x - r1X;
      this.m_u.y = bB.m_sweep.c.y + r2Y - bA.m_sweep.c.y - r1Y;
      var length = Math.sqrt(this.m_u.x * this.m_u.x + this.m_u.y * this.m_u.y);
      if (length > b2Settings.b2_linearSlop) {
         this.m_u.Multiply(1.0 / length);
      }
      else {
         this.m_u.SetZero();
      }
      var cr1u = (r1X * this.m_u.y - r1Y * this.m_u.x);
      var cr2u = (r2X * this.m_u.y - r2Y * this.m_u.x);
      var invMass = bA.m_invMass + bA.m_invI * cr1u * cr1u + bB.m_invMass + bB.m_invI * cr2u * cr2u;
      this.m_mass = invMass != 0.0 ? 1.0 / invMass : 0.0;
      if (this.m_frequencyHz > 0.0) {
         var C = length - this.m_length;
         var omega = 2.0 * Math.PI * this.m_frequencyHz;
         var d = 2.0 * this.m_mass * this.m_dampingRatio * omega;
         var k = this.m_mass * omega * omega;
         this.m_gamma = step.dt * (d + step.dt * k);
         this.m_gamma = this.m_gamma != 0.0 ? 1 / this.m_gamma : 0.0;
         this.m_bias = C * step.dt * k * this.m_gamma;
         this.m_mass = invMass + this.m_gamma;
         this.m_mass = this.m_mass != 0.0 ? 1.0 / this.m_mass : 0.0;
      }
      if (step.warmStarting) {
         this.m_impulse *= step.dtRatio;
         var PX = this.m_impulse * this.m_u.x;
         var PY = this.m_impulse * this.m_u.y;
         bA.m_linearVelocity.x -= bA.m_invMass * PX;
         bA.m_linearVelocity.y -= bA.m_invMass * PY;
         bA.m_angularVelocity -= bA.m_invI * (r1X * PY - r1Y * PX);
         bB.m_linearVelocity.x += bB.m_invMass * PX;
         bB.m_linearVelocity.y += bB.m_invMass * PY;
         bB.m_angularVelocity += bB.m_invI * (r2X * PY - r2Y * PX);
      }
      else {
         this.m_impulse = 0.0;
      }
   }
   b2DistanceJoint.prototype.SolveVelocityConstraints = function (step) {
      var tMat;
      var bA = this.m_bodyA;
      var bB = this.m_bodyB;
      tMat = bA.m_xf.R;
      var r1X = this.m_localAnchor1.x - bA.m_sweep.localCenter.x;
      var r1Y = this.m_localAnchor1.y - bA.m_sweep.localCenter.y;
      var tX = (tMat.col1.x * r1X + tMat.col2.x * r1Y);
      r1Y = (tMat.col1.y * r1X + tMat.col2.y * r1Y);
      r1X = tX;
      tMat = bB.m_xf.R;
      var r2X = this.m_localAnchor2.x - bB.m_sweep.localCenter.x;
      var r2Y = this.m_localAnchor2.y - bB.m_sweep.localCenter.y;
      tX = (tMat.col1.x * r2X + tMat.col2.x * r2Y);
      r2Y = (tMat.col1.y * r2X + tMat.col2.y * r2Y);
      r2X = tX;
      var v1X = bA.m_linearVelocity.x + ((-bA.m_angularVelocity * r1Y));
      var v1Y = bA.m_linearVelocity.y + (bA.m_angularVelocity * r1X);
      var v2X = bB.m_linearVelocity.x + ((-bB.m_angularVelocity * r2Y));
      var v2Y = bB.m_linearVelocity.y + (bB.m_angularVelocity * r2X);
      var Cdot = (this.m_u.x * (v2X - v1X) + this.m_u.y * (v2Y - v1Y));
      var impulse = (-this.m_mass * (Cdot + this.m_bias + this.m_gamma * this.m_impulse));
      this.m_impulse += impulse;
      var PX = impulse * this.m_u.x;
      var PY = impulse * this.m_u.y;
      bA.m_linearVelocity.x -= bA.m_invMass * PX;
      bA.m_linearVelocity.y -= bA.m_invMass * PY;
      bA.m_angularVelocity -= bA.m_invI * (r1X * PY - r1Y * PX);
      bB.m_linearVelocity.x += bB.m_invMass * PX;
      bB.m_linearVelocity.y += bB.m_invMass * PY;
      bB.m_angularVelocity += bB.m_invI * (r2X * PY - r2Y * PX);
   }
   b2DistanceJoint.prototype.SolvePositionConstraints = function (baumgarte) {
      if (baumgarte === undefined) baumgarte = 0;
      var tMat;
      if (this.m_frequencyHz > 0.0) {
         return true;
      }
      var bA = this.m_bodyA;
      var bB = this.m_bodyB;
      tMat = bA.m_xf.R;
      var r1X = this.m_localAnchor1.x - bA.m_sweep.localCenter.x;
      var r1Y = this.m_localAnchor1.y - bA.m_sweep.localCenter.y;
      var tX = (tMat.col1.x * r1X + tMat.col2.x * r1Y);
      r1Y = (tMat.col1.y * r1X + tMat.col2.y * r1Y);
      r1X = tX;
      tMat = bB.m_xf.R;
      var r2X = this.m_localAnchor2.x - bB.m_sweep.localCenter.x;
      var r2Y = this.m_localAnchor2.y - bB.m_sweep.localCenter.y;
      tX = (tMat.col1.x * r2X + tMat.col2.x * r2Y);
      r2Y = (tMat.col1.y * r2X + tMat.col2.y * r2Y);
      r2X = tX;
      var dX = bB.m_sweep.c.x + r2X - bA.m_sweep.c.x - r1X;
      var dY = bB.m_sweep.c.y + r2Y - bA.m_sweep.c.y - r1Y;
      var length = Math.sqrt(dX * dX + dY * dY);
      dX /= length;
      dY /= length;
      var C = length - this.m_length;
      C = b2Math.Clamp(C, (-b2Settings.b2_maxLinearCorrection), b2Settings.b2_maxLinearCorrection);
      var impulse = (-this.m_mass * C);
      this.m_u.Set(dX, dY);
      var PX = impulse * this.m_u.x;
      var PY = impulse * this.m_u.y;
      bA.m_sweep.c.x -= bA.m_invMass * PX;
      bA.m_sweep.c.y -= bA.m_invMass * PY;
      bA.m_sweep.a -= bA.m_invI * (r1X * PY - r1Y * PX);
      bB.m_sweep.c.x += bB.m_invMass * PX;
      bB.m_sweep.c.y += bB.m_invMass * PY;
      bB.m_sweep.a += bB.m_invI * (r2X * PY - r2Y * PX);
      bA.SynchronizeTransform();
      bB.SynchronizeTransform();
      return b2Math.Abs(C) < b2Settings.b2_linearSlop;
   }
   Box2D.inherit(b2DistanceJointDef, Box2D.Dynamics.Joints.b2JointDef);
   b2DistanceJointDef.prototype.__super = Box2D.Dynamics.Joints.b2JointDef.prototype;
   b2DistanceJointDef.b2DistanceJointDef = function () {
      Box2D.Dynamics.Joints.b2JointDef.b2JointDef.apply(this, arguments);
      this.localAnchorA = new b2Vec2();
      this.localAnchorB = new b2Vec2();
   };
   b2DistanceJointDef.prototype.b2DistanceJointDef = function () {
      this.__super.b2JointDef.call(this);
      this.type = b2Joint.e_distanceJoint;
      this.length = 1.0;
      this.frequencyHz = 0.0;
      this.dampingRatio = 0.0;
   }
   b2DistanceJointDef.prototype.Initialize = function (bA, bB, anchorA, anchorB) {
      this.bodyA = bA;
      this.bodyB = bB;
      this.localAnchorA.SetV(this.bodyA.GetLocalPoint(anchorA));
      this.localAnchorB.SetV(this.bodyB.GetLocalPoint(anchorB));
      var dX = anchorB.x - anchorA.x;
      var dY = anchorB.y - anchorA.y;
      this.length = Math.sqrt(dX * dX + dY * dY);
      this.frequencyHz = 0.0;
      this.dampingRatio = 0.0;
   }
   Box2D.inherit(b2FrictionJoint, Box2D.Dynamics.Joints.b2Joint);
   b2FrictionJoint.prototype.__super = Box2D.Dynamics.Joints.b2Joint.prototype;
   b2FrictionJoint.b2FrictionJoint = function () {
      Box2D.Dynamics.Joints.b2Joint.b2Joint.apply(this, arguments);
      this.m_localAnchorA = new b2Vec2();
      this.m_localAnchorB = new b2Vec2();
      this.m_linearMass = new b2Mat22();
      this.m_linearImpulse = new b2Vec2();
   };
   b2FrictionJoint.prototype.GetAnchorA = function () {
      return this.m_bodyA.GetWorldPoint(this.m_localAnchorA);
   }
   b2FrictionJoint.prototype.GetAnchorB = function () {
      return this.m_bodyB.GetWorldPoint(this.m_localAnchorB);
   }
   b2FrictionJoint.prototype.GetReactionForce = function (inv_dt) {
      if (inv_dt === undefined) inv_dt = 0;
      return new b2Vec2(inv_dt * this.m_linearImpulse.x, inv_dt * this.m_linearImpulse.y);
   }
   b2FrictionJoint.prototype.GetReactionTorque = function (inv_dt) {
      if (inv_dt === undefined) inv_dt = 0;
      return inv_dt * this.m_angularImpulse;
   }
   b2FrictionJoint.prototype.SetMaxForce = function (force) {
      if (force === undefined) force = 0;
      this.m_maxForce = force;
   }
   b2FrictionJoint.prototype.GetMaxForce = function () {
      return this.m_maxForce;
   }
   b2FrictionJoint.prototype.SetMaxTorque = function (torque) {
      if (torque === undefined) torque = 0;
      this.m_maxTorque = torque;
   }
   b2FrictionJoint.prototype.GetMaxTorque = function () {
      return this.m_maxTorque;
   }
   b2FrictionJoint.prototype.b2FrictionJoint = function (def) {
      this.__super.b2Joint.call(this, def);
      this.m_localAnchorA.SetV(def.localAnchorA);
      this.m_localAnchorB.SetV(def.localAnchorB);
      this.m_linearMass.SetZero();
      this.m_angularMass = 0.0;
      this.m_linearImpulse.SetZero();
      this.m_angularImpulse = 0.0;
      this.m_maxForce = def.maxForce;
      this.m_maxTorque = def.maxTorque;
   }
   b2FrictionJoint.prototype.InitVelocityConstraints = function (step) {
      var tMat;
      var tX = 0;
      var bA = this.m_bodyA;
      var bB = this.m_bodyB;
      tMat = bA.m_xf.R;
      var rAX = this.m_localAnchorA.x - bA.m_sweep.localCenter.x;
      var rAY = this.m_localAnchorA.y - bA.m_sweep.localCenter.y;
      tX = (tMat.col1.x * rAX + tMat.col2.x * rAY);
      rAY = (tMat.col1.y * rAX + tMat.col2.y * rAY);
      rAX = tX;
      tMat = bB.m_xf.R;
      var rBX = this.m_localAnchorB.x - bB.m_sweep.localCenter.x;
      var rBY = this.m_localAnchorB.y - bB.m_sweep.localCenter.y;
      tX = (tMat.col1.x * rBX + tMat.col2.x * rBY);
      rBY = (tMat.col1.y * rBX + tMat.col2.y * rBY);
      rBX = tX;
      var mA = bA.m_invMass;
      var mB = bB.m_invMass;
      var iA = bA.m_invI;
      var iB = bB.m_invI;
      var K = new b2Mat22();
      K.col1.x = mA + mB;
      K.col2.x = 0.0;
      K.col1.y = 0.0;
      K.col2.y = mA + mB;
      K.col1.x += iA * rAY * rAY;
      K.col2.x += (-iA * rAX * rAY);
      K.col1.y += (-iA * rAX * rAY);
      K.col2.y += iA * rAX * rAX;
      K.col1.x += iB * rBY * rBY;
      K.col2.x += (-iB * rBX * rBY);
      K.col1.y += (-iB * rBX * rBY);
      K.col2.y += iB * rBX * rBX;
      K.GetInverse(this.m_linearMass);
      this.m_angularMass = iA + iB;
      if (this.m_angularMass > 0.0) {
         this.m_angularMass = 1.0 / this.m_angularMass;
      }
      if (step.warmStarting) {
         this.m_linearImpulse.x *= step.dtRatio;
         this.m_linearImpulse.y *= step.dtRatio;
         this.m_angularImpulse *= step.dtRatio;
         var P = this.m_linearImpulse;
         bA.m_linearVelocity.x -= mA * P.x;
         bA.m_linearVelocity.y -= mA * P.y;
         bA.m_angularVelocity -= iA * (rAX * P.y - rAY * P.x + this.m_angularImpulse);
         bB.m_linearVelocity.x += mB * P.x;
         bB.m_linearVelocity.y += mB * P.y;
         bB.m_angularVelocity += iB * (rBX * P.y - rBY * P.x + this.m_angularImpulse);
      }
      else {
         this.m_linearImpulse.SetZero();
         this.m_angularImpulse = 0.0;
      }
   }
   b2FrictionJoint.prototype.SolveVelocityConstraints = function (step) {
      var tMat;
      var tX = 0;
      var bA = this.m_bodyA;
      var bB = this.m_bodyB;
      var vA = bA.m_linearVelocity;
      var wA = bA.m_angularVelocity;
      var vB = bB.m_linearVelocity;
      var wB = bB.m_angularVelocity;
      var mA = bA.m_invMass;
      var mB = bB.m_invMass;
      var iA = bA.m_invI;
      var iB = bB.m_invI;
      tMat = bA.m_xf.R;
      var rAX = this.m_localAnchorA.x - bA.m_sweep.localCenter.x;
      var rAY = this.m_localAnchorA.y - bA.m_sweep.localCenter.y;
      tX = (tMat.col1.x * rAX + tMat.col2.x * rAY);
      rAY = (tMat.col1.y * rAX + tMat.col2.y * rAY);
      rAX = tX;
      tMat = bB.m_xf.R;
      var rBX = this.m_localAnchorB.x - bB.m_sweep.localCenter.x;
      var rBY = this.m_localAnchorB.y - bB.m_sweep.localCenter.y;
      tX = (tMat.col1.x * rBX + tMat.col2.x * rBY);
      rBY = (tMat.col1.y * rBX + tMat.col2.y * rBY);
      rBX = tX;
      var maxImpulse = 0; {
         var Cdot = wB - wA;
         var impulse = (-this.m_angularMass * Cdot);
         var oldImpulse = this.m_angularImpulse;
         maxImpulse = step.dt * this.m_maxTorque;
         this.m_angularImpulse = b2Math.Clamp(this.m_angularImpulse + impulse, (-maxImpulse), maxImpulse);
         impulse = this.m_angularImpulse - oldImpulse;
         wA -= iA * impulse;
         wB += iB * impulse;
      } {
         var CdotX = vB.x - wB * rBY - vA.x + wA * rAY;
         var CdotY = vB.y + wB * rBX - vA.y - wA * rAX;
         var impulseV = b2Math.MulMV(this.m_linearMass, new b2Vec2((-CdotX), (-CdotY)));
         var oldImpulseV = this.m_linearImpulse.Copy();
         this.m_linearImpulse.Add(impulseV);
         maxImpulse = step.dt * this.m_maxForce;
         if (this.m_linearImpulse.LengthSquared() > maxImpulse * maxImpulse) {
            this.m_linearImpulse.Normalize();
            this.m_linearImpulse.Multiply(maxImpulse);
         }
         impulseV = b2Math.SubtractVV(this.m_linearImpulse, oldImpulseV);
         vA.x -= mA * impulseV.x;
         vA.y -= mA * impulseV.y;
         wA -= iA * (rAX * impulseV.y - rAY * impulseV.x);
         vB.x += mB * impulseV.x;
         vB.y += mB * impulseV.y;
         wB += iB * (rBX * impulseV.y - rBY * impulseV.x);
      }
      bA.m_angularVelocity = wA;
      bB.m_angularVelocity = wB;
   }
   b2FrictionJoint.prototype.SolvePositionConstraints = function (baumgarte) {
      if (baumgarte === undefined) baumgarte = 0;
      return true;
   }
   Box2D.inherit(b2FrictionJointDef, Box2D.Dynamics.Joints.b2JointDef);
   b2FrictionJointDef.prototype.__super = Box2D.Dynamics.Joints.b2JointDef.prototype;
   b2FrictionJointDef.b2FrictionJointDef = function () {
      Box2D.Dynamics.Joints.b2JointDef.b2JointDef.apply(this, arguments);
      this.localAnchorA = new b2Vec2();
      this.localAnchorB = new b2Vec2();
   };
   b2FrictionJointDef.prototype.b2FrictionJointDef = function () {
      this.__super.b2JointDef.call(this);
      this.type = b2Joint.e_frictionJoint;
      this.maxForce = 0.0;
      this.maxTorque = 0.0;
   }
   b2FrictionJointDef.prototype.Initialize = function (bA, bB, anchor) {
      this.bodyA = bA;
      this.bodyB = bB;
      this.localAnchorA.SetV(this.bodyA.GetLocalPoint(anchor));
      this.localAnchorB.SetV(this.bodyB.GetLocalPoint(anchor));
   }
   Box2D.inherit(b2GearJoint, Box2D.Dynamics.Joints.b2Joint);
   b2GearJoint.prototype.__super = Box2D.Dynamics.Joints.b2Joint.prototype;
   b2GearJoint.b2GearJoint = function () {
      Box2D.Dynamics.Joints.b2Joint.b2Joint.apply(this, arguments);
      this.m_groundAnchor1 = new b2Vec2();
      this.m_groundAnchor2 = new b2Vec2();
      this.m_localAnchor1 = new b2Vec2();
      this.m_localAnchor2 = new b2Vec2();
      this.m_J = new b2Jacobian();
   };
   b2GearJoint.prototype.GetAnchorA = function () {
      return this.m_bodyA.GetWorldPoint(this.m_localAnchor1);
   }
   b2GearJoint.prototype.GetAnchorB = function () {
      return this.m_bodyB.GetWorldPoint(this.m_localAnchor2);
   }
   b2GearJoint.prototype.GetReactionForce = function (inv_dt) {
      if (inv_dt === undefined) inv_dt = 0;
      return new b2Vec2(inv_dt * this.m_impulse * this.m_J.linearB.x, inv_dt * this.m_impulse * this.m_J.linearB.y);
   }
   b2GearJoint.prototype.GetReactionTorque = function (inv_dt) {
      if (inv_dt === undefined) inv_dt = 0;
      var tMat = this.m_bodyB.m_xf.R;
      var rX = this.m_localAnchor1.x - this.m_bodyB.m_sweep.localCenter.x;
      var rY = this.m_localAnchor1.y - this.m_bodyB.m_sweep.localCenter.y;
      var tX = tMat.col1.x * rX + tMat.col2.x * rY;
      rY = tMat.col1.y * rX + tMat.col2.y * rY;
      rX = tX;
      var PX = this.m_impulse * this.m_J.linearB.x;
      var PY = this.m_impulse * this.m_J.linearB.y;
      return inv_dt * (this.m_impulse * this.m_J.angularB - rX * PY + rY * PX);
   }
   b2GearJoint.prototype.GetRatio = function () {
      return this.m_ratio;
   }
   b2GearJoint.prototype.SetRatio = function (ratio) {
      if (ratio === undefined) ratio = 0;
      this.m_ratio = ratio;
   }
   b2GearJoint.prototype.b2GearJoint = function (def) {
      this.__super.b2Joint.call(this, def);
      var type1 = parseInt(def.joint1.m_type);
      var type2 = parseInt(def.joint2.m_type);
      this.m_revolute1 = null;
      this.m_prismatic1 = null;
      this.m_revolute2 = null;
      this.m_prismatic2 = null;
      var coordinate1 = 0;
      var coordinate2 = 0;
      this.m_ground1 = def.joint1.GetBodyA();
      this.m_bodyA = def.joint1.GetBodyB();
      if (type1 == b2Joint.e_revoluteJoint) {
         this.m_revolute1 = (def.joint1 instanceof b2RevoluteJoint ? def.joint1 : null);
         this.m_groundAnchor1.SetV(this.m_revolute1.m_localAnchor1);
         this.m_localAnchor1.SetV(this.m_revolute1.m_localAnchor2);
         coordinate1 = this.m_revolute1.GetJointAngle();
      }
      else {
         this.m_prismatic1 = (def.joint1 instanceof b2PrismaticJoint ? def.joint1 : null);
         this.m_groundAnchor1.SetV(this.m_prismatic1.m_localAnchor1);
         this.m_localAnchor1.SetV(this.m_prismatic1.m_localAnchor2);
         coordinate1 = this.m_prismatic1.GetJointTranslation();
      }
      this.m_ground2 = def.joint2.GetBodyA();
      this.m_bodyB = def.joint2.GetBodyB();
      if (type2 == b2Joint.e_revoluteJoint) {
         this.m_revolute2 = (def.joint2 instanceof b2RevoluteJoint ? def.joint2 : null);
         this.m_groundAnchor2.SetV(this.m_revolute2.m_localAnchor1);
         this.m_localAnchor2.SetV(this.m_revolute2.m_localAnchor2);
         coordinate2 = this.m_revolute2.GetJointAngle();
      }
      else {
         this.m_prismatic2 = (def.joint2 instanceof b2PrismaticJoint ? def.joint2 : null);
         this.m_groundAnchor2.SetV(this.m_prismatic2.m_localAnchor1);
         this.m_localAnchor2.SetV(this.m_prismatic2.m_localAnchor2);
         coordinate2 = this.m_prismatic2.GetJointTranslation();
      }
      this.m_ratio = def.ratio;
      this.m_constant = coordinate1 + this.m_ratio * coordinate2;
      this.m_impulse = 0.0;
   }
   b2GearJoint.prototype.InitVelocityConstraints = function (step) {
      var g1 = this.m_ground1;
      var g2 = this.m_ground2;
      var bA = this.m_bodyA;
      var bB = this.m_bodyB;
      var ugX = 0;
      var ugY = 0;
      var rX = 0;
      var rY = 0;
      var tMat;
      var tVec;
      var crug = 0;
      var tX = 0;
      var K = 0.0;
      this.m_J.SetZero();
      if (this.m_revolute1) {
         this.m_J.angularA = (-1.0);
         K += bA.m_invI;
      }
      else {
         tMat = g1.m_xf.R;
         tVec = this.m_prismatic1.m_localXAxis1;
         ugX = tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;
         ugY = tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;
         tMat = bA.m_xf.R;
         rX = this.m_localAnchor1.x - bA.m_sweep.localCenter.x;
         rY = this.m_localAnchor1.y - bA.m_sweep.localCenter.y;
         tX = tMat.col1.x * rX + tMat.col2.x * rY;
         rY = tMat.col1.y * rX + tMat.col2.y * rY;
         rX = tX;
         crug = rX * ugY - rY * ugX;
         this.m_J.linearA.Set((-ugX), (-ugY));
         this.m_J.angularA = (-crug);
         K += bA.m_invMass + bA.m_invI * crug * crug;
      }
      if (this.m_revolute2) {
         this.m_J.angularB = (-this.m_ratio);
         K += this.m_ratio * this.m_ratio * bB.m_invI;
      }
      else {
         tMat = g2.m_xf.R;
         tVec = this.m_prismatic2.m_localXAxis1;
         ugX = tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;
         ugY = tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;
         tMat = bB.m_xf.R;
         rX = this.m_localAnchor2.x - bB.m_sweep.localCenter.x;
         rY = this.m_localAnchor2.y - bB.m_sweep.localCenter.y;
         tX = tMat.col1.x * rX + tMat.col2.x * rY;
         rY = tMat.col1.y * rX + tMat.col2.y * rY;
         rX = tX;
         crug = rX * ugY - rY * ugX;
         this.m_J.linearB.Set((-this.m_ratio * ugX), (-this.m_ratio * ugY));
         this.m_J.angularB = (-this.m_ratio * crug);
         K += this.m_ratio * this.m_ratio * (bB.m_invMass + bB.m_invI * crug * crug);
      }
      this.m_mass = K > 0.0 ? 1.0 / K : 0.0;
      if (step.warmStarting) {
         bA.m_linearVelocity.x += bA.m_invMass * this.m_impulse * this.m_J.linearA.x;
         bA.m_linearVelocity.y += bA.m_invMass * this.m_impulse * this.m_J.linearA.y;
         bA.m_angularVelocity += bA.m_invI * this.m_impulse * this.m_J.angularA;
         bB.m_linearVelocity.x += bB.m_invMass * this.m_impulse * this.m_J.linearB.x;
         bB.m_linearVelocity.y += bB.m_invMass * this.m_impulse * this.m_J.linearB.y;
         bB.m_angularVelocity += bB.m_invI * this.m_impulse * this.m_J.angularB;
      }
      else {
         this.m_impulse = 0.0;
      }
   }
   b2GearJoint.prototype.SolveVelocityConstraints = function (step) {
      var bA = this.m_bodyA;
      var bB = this.m_bodyB;
      var Cdot = this.m_J.Compute(bA.m_linearVelocity, bA.m_angularVelocity, bB.m_linearVelocity, bB.m_angularVelocity);
      var impulse = (-this.m_mass * Cdot);
      this.m_impulse += impulse;
      bA.m_linearVelocity.x += bA.m_invMass * impulse * this.m_J.linearA.x;
      bA.m_linearVelocity.y += bA.m_invMass * impulse * this.m_J.linearA.y;
      bA.m_angularVelocity += bA.m_invI * impulse * this.m_J.angularA;
      bB.m_linearVelocity.x += bB.m_invMass * impulse * this.m_J.linearB.x;
      bB.m_linearVelocity.y += bB.m_invMass * impulse * this.m_J.linearB.y;
      bB.m_angularVelocity += bB.m_invI * impulse * this.m_J.angularB;
   }
   b2GearJoint.prototype.SolvePositionConstraints = function (baumgarte) {
      if (baumgarte === undefined) baumgarte = 0;
      var linearError = 0.0;
      var bA = this.m_bodyA;
      var bB = this.m_bodyB;
      var coordinate1 = 0;
      var coordinate2 = 0;
      if (this.m_revolute1) {
         coordinate1 = this.m_revolute1.GetJointAngle();
      }
      else {
         coordinate1 = this.m_prismatic1.GetJointTranslation();
      }
      if (this.m_revolute2) {
         coordinate2 = this.m_revolute2.GetJointAngle();
      }
      else {
         coordinate2 = this.m_prismatic2.GetJointTranslation();
      }
      var C = this.m_constant - (coordinate1 + this.m_ratio * coordinate2);
      var impulse = (-this.m_mass * C);
      bA.m_sweep.c.x += bA.m_invMass * impulse * this.m_J.linearA.x;
      bA.m_sweep.c.y += bA.m_invMass * impulse * this.m_J.linearA.y;
      bA.m_sweep.a += bA.m_invI * impulse * this.m_J.angularA;
      bB.m_sweep.c.x += bB.m_invMass * impulse * this.m_J.linearB.x;
      bB.m_sweep.c.y += bB.m_invMass * impulse * this.m_J.linearB.y;
      bB.m_sweep.a += bB.m_invI * impulse * this.m_J.angularB;
      bA.SynchronizeTransform();
      bB.SynchronizeTransform();
      return linearError < b2Settings.b2_linearSlop;
   }
   Box2D.inherit(b2GearJointDef, Box2D.Dynamics.Joints.b2JointDef);
   b2GearJointDef.prototype.__super = Box2D.Dynamics.Joints.b2JointDef.prototype;
   b2GearJointDef.b2GearJointDef = function () {
      Box2D.Dynamics.Joints.b2JointDef.b2JointDef.apply(this, arguments);
   };
   b2GearJointDef.prototype.b2GearJointDef = function () {
      this.__super.b2JointDef.call(this);
      this.type = b2Joint.e_gearJoint;
      this.joint1 = null;
      this.joint2 = null;
      this.ratio = 1.0;
   }
   b2Jacobian.b2Jacobian = function () {
      this.linearA = new b2Vec2();
      this.linearB = new b2Vec2();
   };
   b2Jacobian.prototype.SetZero = function () {
      this.linearA.SetZero();
      this.angularA = 0.0;
      this.linearB.SetZero();
      this.angularB = 0.0;
   }
   b2Jacobian.prototype.Set = function (x1, a1, x2, a2) {
      if (a1 === undefined) a1 = 0;
      if (a2 === undefined) a2 = 0;
      this.linearA.SetV(x1);
      this.angularA = a1;
      this.linearB.SetV(x2);
      this.angularB = a2;
   }
   b2Jacobian.prototype.Compute = function (x1, a1, x2, a2) {
      if (a1 === undefined) a1 = 0;
      if (a2 === undefined) a2 = 0;
      return (this.linearA.x * x1.x + this.linearA.y * x1.y) + this.angularA * a1 + (this.linearB.x * x2.x + this.linearB.y * x2.y) + this.angularB * a2;
   }
   b2Joint.b2Joint = function () {
      this.m_edgeA = new b2JointEdge();
      this.m_edgeB = new b2JointEdge();
      this.m_localCenterA = new b2Vec2();
      this.m_localCenterB = new b2Vec2();
   };
   b2Joint.prototype.GetType = function () {
      return this.m_type;
   }
   b2Joint.prototype.GetAnchorA = function () {
      return null;
   }
   b2Joint.prototype.GetAnchorB = function () {
      return null;
   }
   b2Joint.prototype.GetReactionForce = function (inv_dt) {
      if (inv_dt === undefined) inv_dt = 0;
      return null;
   }
   b2Joint.prototype.GetReactionTorque = function (inv_dt) {
      if (inv_dt === undefined) inv_dt = 0;
      return 0.0;
   }
   b2Joint.prototype.GetBodyA = function () {
      return this.m_bodyA;
   }
   b2Joint.prototype.GetBodyB = function () {
      return this.m_bodyB;
   }
   b2Joint.prototype.GetNext = function () {
      return this.m_next;
   }
   b2Joint.prototype.GetUserData = function () {
      return this.m_userData;
   }
   b2Joint.prototype.SetUserData = function (data) {
      this.m_userData = data;
   }
   b2Joint.prototype.IsActive = function () {
      return this.m_bodyA.IsActive() && this.m_bodyB.IsActive();
   }
   b2Joint.Create = function (def, allocator) {
      var joint = null;
      switch (def.type) {
      case b2Joint.e_distanceJoint:
         {
            joint = new b2DistanceJoint((def instanceof b2DistanceJointDef ? def : null));
         }
         break;
      case b2Joint.e_mouseJoint:
         {
            joint = new b2MouseJoint((def instanceof b2MouseJointDef ? def : null));
         }
         break;
      case b2Joint.e_prismaticJoint:
         {
            joint = new b2PrismaticJoint((def instanceof b2PrismaticJointDef ? def : null));
         }
         break;
      case b2Joint.e_revoluteJoint:
         {
            joint = new b2RevoluteJoint((def instanceof b2RevoluteJointDef ? def : null));
         }
         break;
      case b2Joint.e_pulleyJoint:
         {
            joint = new b2PulleyJoint((def instanceof b2PulleyJointDef ? def : null));
         }
         break;
      case b2Joint.e_gearJoint:
         {
            joint = new b2GearJoint((def instanceof b2GearJointDef ? def : null));
         }
         break;
      case b2Joint.e_lineJoint:
         {
            joint = new b2LineJoint((def instanceof b2LineJointDef ? def : null));
         }
         break;
      case b2Joint.e_weldJoint:
         {
            joint = new b2WeldJoint((def instanceof b2WeldJointDef ? def : null));
         }
         break;
      case b2Joint.e_frictionJoint:
         {
            joint = new b2FrictionJoint((def instanceof b2FrictionJointDef ? def : null));
         }
         break;
      default:
         break;
      }
      return joint;
   }
   b2Joint.Destroy = function (joint, allocator) {}
   b2Joint.prototype.b2Joint = function (def) {
      b2Settings.b2Assert(def.bodyA != def.bodyB);
      this.m_type = def.type;
      this.m_prev = null;
      this.m_next = null;
      this.m_bodyA = def.bodyA;
      this.m_bodyB = def.bodyB;
      this.m_collideConnected = def.collideConnected;
      this.m_islandFlag = false;
      this.m_userData = def.userData;
   }
   b2Joint.prototype.InitVelocityConstraints = function (step) {}
   b2Joint.prototype.SolveVelocityConstraints = function (step) {}
   b2Joint.prototype.FinalizeVelocityConstraints = function () {}
   b2Joint.prototype.SolvePositionConstraints = function (baumgarte) {
      if (baumgarte === undefined) baumgarte = 0;
      return false;
   }
   Box2D.postDefs.push(function () {
      Box2D.Dynamics.Joints.b2Joint.e_unknownJoint = 0;
      Box2D.Dynamics.Joints.b2Joint.e_revoluteJoint = 1;
      Box2D.Dynamics.Joints.b2Joint.e_prismaticJoint = 2;
      Box2D.Dynamics.Joints.b2Joint.e_distanceJoint = 3;
      Box2D.Dynamics.Joints.b2Joint.e_pulleyJoint = 4;
      Box2D.Dynamics.Joints.b2Joint.e_mouseJoint = 5;
      Box2D.Dynamics.Joints.b2Joint.e_gearJoint = 6;
      Box2D.Dynamics.Joints.b2Joint.e_lineJoint = 7;
      Box2D.Dynamics.Joints.b2Joint.e_weldJoint = 8;
      Box2D.Dynamics.Joints.b2Joint.e_frictionJoint = 9;
      Box2D.Dynamics.Joints.b2Joint.e_inactiveLimit = 0;
      Box2D.Dynamics.Joints.b2Joint.e_atLowerLimit = 1;
      Box2D.Dynamics.Joints.b2Joint.e_atUpperLimit = 2;
      Box2D.Dynamics.Joints.b2Joint.e_equalLimits = 3;
   });
   b2JointDef.b2JointDef = function () {};
   b2JointDef.prototype.b2JointDef = function () {
      this.type = b2Joint.e_unknownJoint;
      this.userData = null;
      this.bodyA = null;
      this.bodyB = null;
      this.collideConnected = false;
   }
   b2JointEdge.b2JointEdge = function () {};
   Box2D.inherit(b2LineJoint, Box2D.Dynamics.Joints.b2Joint);
   b2LineJoint.prototype.__super = Box2D.Dynamics.Joints.b2Joint.prototype;
   b2LineJoint.b2LineJoint = function () {
      Box2D.Dynamics.Joints.b2Joint.b2Joint.apply(this, arguments);
      this.m_localAnchor1 = new b2Vec2();
      this.m_localAnchor2 = new b2Vec2();
      this.m_localXAxis1 = new b2Vec2();
      this.m_localYAxis1 = new b2Vec2();
      this.m_axis = new b2Vec2();
      this.m_perp = new b2Vec2();
      this.m_K = new b2Mat22();
      this.m_impulse = new b2Vec2();
   };
   b2LineJoint.prototype.GetAnchorA = function () {
      return this.m_bodyA.GetWorldPoint(this.m_localAnchor1);
   }
   b2LineJoint.prototype.GetAnchorB = function () {
      return this.m_bodyB.GetWorldPoint(this.m_localAnchor2);
   }
   b2LineJoint.prototype.GetReactionForce = function (inv_dt) {
      if (inv_dt === undefined) inv_dt = 0;
      return new b2Vec2(inv_dt * (this.m_impulse.x * this.m_perp.x + (this.m_motorImpulse + this.m_impulse.y) * this.m_axis.x), inv_dt * (this.m_impulse.x * this.m_perp.y + (this.m_motorImpulse + this.m_impulse.y) * this.m_axis.y));
   }
   b2LineJoint.prototype.GetReactionTorque = function (inv_dt) {
      if (inv_dt === undefined) inv_dt = 0;
      return inv_dt * this.m_impulse.y;
   }
   b2LineJoint.prototype.GetJointTranslation = function () {
      var bA = this.m_bodyA;
      var bB = this.m_bodyB;
      var tMat;
      var p1 = bA.GetWorldPoint(this.m_localAnchor1);
      var p2 = bB.GetWorldPoint(this.m_localAnchor2);
      var dX = p2.x - p1.x;
      var dY = p2.y - p1.y;
      var axis = bA.GetWorldVector(this.m_localXAxis1);
      var translation = axis.x * dX + axis.y * dY;
      return translation;
   }
   b2LineJoint.prototype.GetJointSpeed = function () {
      var bA = this.m_bodyA;
      var bB = this.m_bodyB;
      var tMat;
      tMat = bA.m_xf.R;
      var r1X = this.m_localAnchor1.x - bA.m_sweep.localCenter.x;
      var r1Y = this.m_localAnchor1.y - bA.m_sweep.localCenter.y;
      var tX = (tMat.col1.x * r1X + tMat.col2.x * r1Y);
      r1Y = (tMat.col1.y * r1X + tMat.col2.y * r1Y);
      r1X = tX;
      tMat = bB.m_xf.R;
      var r2X = this.m_localAnchor2.x - bB.m_sweep.localCenter.x;
      var r2Y = this.m_localAnchor2.y - bB.m_sweep.localCenter.y;
      tX = (tMat.col1.x * r2X + tMat.col2.x * r2Y);
      r2Y = (tMat.col1.y * r2X + tMat.col2.y * r2Y);
      r2X = tX;
      var p1X = bA.m_sweep.c.x + r1X;
      var p1Y = bA.m_sweep.c.y + r1Y;
      var p2X = bB.m_sweep.c.x + r2X;
      var p2Y = bB.m_sweep.c.y + r2Y;
      var dX = p2X - p1X;
      var dY = p2Y - p1Y;
      var axis = bA.GetWorldVector(this.m_localXAxis1);
      var v1 = bA.m_linearVelocity;
      var v2 = bB.m_linearVelocity;
      var w1 = bA.m_angularVelocity;
      var w2 = bB.m_angularVelocity;
      var speed = (dX * ((-w1 * axis.y)) + dY * (w1 * axis.x)) + (axis.x * (((v2.x + ((-w2 * r2Y))) - v1.x) - ((-w1 * r1Y))) + axis.y * (((v2.y + (w2 * r2X)) - v1.y) - (w1 * r1X)));
      return speed;
   }
   b2LineJoint.prototype.IsLimitEnabled = function () {
      return this.m_enableLimit;
   }
   b2LineJoint.prototype.EnableLimit = function (flag) {
      this.m_bodyA.SetAwake(true);
      this.m_bodyB.SetAwake(true);
      this.m_enableLimit = flag;
   }
   b2LineJoint.prototype.GetLowerLimit = function () {
      return this.m_lowerTranslation;
   }
   b2LineJoint.prototype.GetUpperLimit = function () {
      return this.m_upperTranslation;
   }
   b2LineJoint.prototype.SetLimits = function (lower, upper) {
      if (lower === undefined) lower = 0;
      if (upper === undefined) upper = 0;
      this.m_bodyA.SetAwake(true);
      this.m_bodyB.SetAwake(true);
      this.m_lowerTranslation = lower;
      this.m_upperTranslation = upper;
   }
   b2LineJoint.prototype.IsMotorEnabled = function () {
      return this.m_enableMotor;
   }
   b2LineJoint.prototype.EnableMotor = function (flag) {
      this.m_bodyA.SetAwake(true);
      this.m_bodyB.SetAwake(true);
      this.m_enableMotor = flag;
   }
   b2LineJoint.prototype.SetMotorSpeed = function (speed) {
      if (speed === undefined) speed = 0;
      this.m_bodyA.SetAwake(true);
      this.m_bodyB.SetAwake(true);
      this.m_motorSpeed = speed;
   }
   b2LineJoint.prototype.GetMotorSpeed = function () {
      return this.m_motorSpeed;
   }
   b2LineJoint.prototype.SetMaxMotorForce = function (force) {
      if (force === undefined) force = 0;
      this.m_bodyA.SetAwake(true);
      this.m_bodyB.SetAwake(true);
      this.m_maxMotorForce = force;
   }
   b2LineJoint.prototype.GetMaxMotorForce = function () {
      return this.m_maxMotorForce;
   }
   b2LineJoint.prototype.GetMotorForce = function () {
      return this.m_motorImpulse;
   }
   b2LineJoint.prototype.b2LineJoint = function (def) {
      this.__super.b2Joint.call(this, def);
      var tMat;
      var tX = 0;
      var tY = 0;
      this.m_localAnchor1.SetV(def.localAnchorA);
      this.m_localAnchor2.SetV(def.localAnchorB);
      this.m_localXAxis1.SetV(def.localAxisA);
      this.m_localYAxis1.x = (-this.m_localXAxis1.y);
      this.m_localYAxis1.y = this.m_localXAxis1.x;
      this.m_impulse.SetZero();
      this.m_motorMass = 0.0;
      this.m_motorImpulse = 0.0;
      this.m_lowerTranslation = def.lowerTranslation;
      this.m_upperTranslation = def.upperTranslation;
      this.m_maxMotorForce = def.maxMotorForce;
      this.m_motorSpeed = def.motorSpeed;
      this.m_enableLimit = def.enableLimit;
      this.m_enableMotor = def.enableMotor;
      this.m_limitState = b2Joint.e_inactiveLimit;
      this.m_axis.SetZero();
      this.m_perp.SetZero();
   }
   b2LineJoint.prototype.InitVelocityConstraints = function (step) {
      var bA = this.m_bodyA;
      var bB = this.m_bodyB;
      var tMat;
      var tX = 0;
      this.m_localCenterA.SetV(bA.GetLocalCenter());
      this.m_localCenterB.SetV(bB.GetLocalCenter());
      var xf1 = bA.GetTransform();
      var xf2 = bB.GetTransform();
      tMat = bA.m_xf.R;
      var r1X = this.m_localAnchor1.x - this.m_localCenterA.x;
      var r1Y = this.m_localAnchor1.y - this.m_localCenterA.y;
      tX = (tMat.col1.x * r1X + tMat.col2.x * r1Y);
      r1Y = (tMat.col1.y * r1X + tMat.col2.y * r1Y);
      r1X = tX;
      tMat = bB.m_xf.R;
      var r2X = this.m_localAnchor2.x - this.m_localCenterB.x;
      var r2Y = this.m_localAnchor2.y - this.m_localCenterB.y;
      tX = (tMat.col1.x * r2X + tMat.col2.x * r2Y);
      r2Y = (tMat.col1.y * r2X + tMat.col2.y * r2Y);
      r2X = tX;
      var dX = bB.m_sweep.c.x + r2X - bA.m_sweep.c.x - r1X;
      var dY = bB.m_sweep.c.y + r2Y - bA.m_sweep.c.y - r1Y;
      this.m_invMassA = bA.m_invMass;
      this.m_invMassB = bB.m_invMass;
      this.m_invIA = bA.m_invI;
      this.m_invIB = bB.m_invI; {
         this.m_axis.SetV(b2Math.MulMV(xf1.R, this.m_localXAxis1));
         this.m_a1 = (dX + r1X) * this.m_axis.y - (dY + r1Y) * this.m_axis.x;
         this.m_a2 = r2X * this.m_axis.y - r2Y * this.m_axis.x;
         this.m_motorMass = this.m_invMassA + this.m_invMassB + this.m_invIA * this.m_a1 * this.m_a1 + this.m_invIB * this.m_a2 * this.m_a2;
         this.m_motorMass = this.m_motorMass > Number.MIN_VALUE ? 1.0 / this.m_motorMass : 0.0;
      } {
         this.m_perp.SetV(b2Math.MulMV(xf1.R, this.m_localYAxis1));
         this.m_s1 = (dX + r1X) * this.m_perp.y - (dY + r1Y) * this.m_perp.x;
         this.m_s2 = r2X * this.m_perp.y - r2Y * this.m_perp.x;
         var m1 = this.m_invMassA;
         var m2 = this.m_invMassB;
         var i1 = this.m_invIA;
         var i2 = this.m_invIB;
         this.m_K.col1.x = m1 + m2 + i1 * this.m_s1 * this.m_s1 + i2 * this.m_s2 * this.m_s2;
         this.m_K.col1.y = i1 * this.m_s1 * this.m_a1 + i2 * this.m_s2 * this.m_a2;
         this.m_K.col2.x = this.m_K.col1.y;
         this.m_K.col2.y = m1 + m2 + i1 * this.m_a1 * this.m_a1 + i2 * this.m_a2 * this.m_a2;
      }
      if (this.m_enableLimit) {
         var jointTransition = this.m_axis.x * dX + this.m_axis.y * dY;
         if (b2Math.Abs(this.m_upperTranslation - this.m_lowerTranslation) < 2.0 * b2Settings.b2_linearSlop) {
            this.m_limitState = b2Joint.e_equalLimits;
         }
         else if (jointTransition <= this.m_lowerTranslation) {
            if (this.m_limitState != b2Joint.e_atLowerLimit) {
               this.m_limitState = b2Joint.e_atLowerLimit;
               this.m_impulse.y = 0.0;
            }
         }
         else if (jointTransition >= this.m_upperTranslation) {
            if (this.m_limitState != b2Joint.e_atUpperLimit) {
               this.m_limitState = b2Joint.e_atUpperLimit;
               this.m_impulse.y = 0.0;
            }
         }
         else {
            this.m_limitState = b2Joint.e_inactiveLimit;
            this.m_impulse.y = 0.0;
         }
      }
      else {
         this.m_limitState = b2Joint.e_inactiveLimit;
      }
      if (this.m_enableMotor == false) {
         this.m_motorImpulse = 0.0;
      }
      if (step.warmStarting) {
         this.m_impulse.x *= step.dtRatio;
         this.m_impulse.y *= step.dtRatio;
         this.m_motorImpulse *= step.dtRatio;
         var PX = this.m_impulse.x * this.m_perp.x + (this.m_motorImpulse + this.m_impulse.y) * this.m_axis.x;
         var PY = this.m_impulse.x * this.m_perp.y + (this.m_motorImpulse + this.m_impulse.y) * this.m_axis.y;
         var L1 = this.m_impulse.x * this.m_s1 + (this.m_motorImpulse + this.m_impulse.y) * this.m_a1;
         var L2 = this.m_impulse.x * this.m_s2 + (this.m_motorImpulse + this.m_impulse.y) * this.m_a2;
         bA.m_linearVelocity.x -= this.m_invMassA * PX;
         bA.m_linearVelocity.y -= this.m_invMassA * PY;
         bA.m_angularVelocity -= this.m_invIA * L1;
         bB.m_linearVelocity.x += this.m_invMassB * PX;
         bB.m_linearVelocity.y += this.m_invMassB * PY;
         bB.m_angularVelocity += this.m_invIB * L2;
      }
      else {
         this.m_impulse.SetZero();
         this.m_motorImpulse = 0.0;
      }
   }
   b2LineJoint.prototype.SolveVelocityConstraints = function (step) {
      var bA = this.m_bodyA;
      var bB = this.m_bodyB;
      var v1 = bA.m_linearVelocity;
      var w1 = bA.m_angularVelocity;
      var v2 = bB.m_linearVelocity;
      var w2 = bB.m_angularVelocity;
      var PX = 0;
      var PY = 0;
      var L1 = 0;
      var L2 = 0;
      if (this.m_enableMotor && this.m_limitState != b2Joint.e_equalLimits) {
         var Cdot = this.m_axis.x * (v2.x - v1.x) + this.m_axis.y * (v2.y - v1.y) + this.m_a2 * w2 - this.m_a1 * w1;
         var impulse = this.m_motorMass * (this.m_motorSpeed - Cdot);
         var oldImpulse = this.m_motorImpulse;
         var maxImpulse = step.dt * this.m_maxMotorForce;
         this.m_motorImpulse = b2Math.Clamp(this.m_motorImpulse + impulse, (-maxImpulse), maxImpulse);
         impulse = this.m_motorImpulse - oldImpulse;
         PX = impulse * this.m_axis.x;
         PY = impulse * this.m_axis.y;
         L1 = impulse * this.m_a1;
         L2 = impulse * this.m_a2;
         v1.x -= this.m_invMassA * PX;
         v1.y -= this.m_invMassA * PY;
         w1 -= this.m_invIA * L1;
         v2.x += this.m_invMassB * PX;
         v2.y += this.m_invMassB * PY;
         w2 += this.m_invIB * L2;
      }
      var Cdot1 = this.m_perp.x * (v2.x - v1.x) + this.m_perp.y * (v2.y - v1.y) + this.m_s2 * w2 - this.m_s1 * w1;
      if (this.m_enableLimit && this.m_limitState != b2Joint.e_inactiveLimit) {
         var Cdot2 = this.m_axis.x * (v2.x - v1.x) + this.m_axis.y * (v2.y - v1.y) + this.m_a2 * w2 - this.m_a1 * w1;
         var f1 = this.m_impulse.Copy();
         var df = this.m_K.Solve(new b2Vec2(), (-Cdot1), (-Cdot2));
         this.m_impulse.Add(df);
         if (this.m_limitState == b2Joint.e_atLowerLimit) {
            this.m_impulse.y = b2Math.Max(this.m_impulse.y, 0.0);
         }
         else if (this.m_limitState == b2Joint.e_atUpperLimit) {
            this.m_impulse.y = b2Math.Min(this.m_impulse.y, 0.0);
         }
         var b = (-Cdot1) - (this.m_impulse.y - f1.y) * this.m_K.col2.x;
         var f2r = 0;
         if (this.m_K.col1.x != 0.0) {
            f2r = b / this.m_K.col1.x + f1.x;
         }
         else {
            f2r = f1.x;
         }
         this.m_impulse.x = f2r;
         df.x = this.m_impulse.x - f1.x;
         df.y = this.m_impulse.y - f1.y;
         PX = df.x * this.m_perp.x + df.y * this.m_axis.x;
         PY = df.x * this.m_perp.y + df.y * this.m_axis.y;
         L1 = df.x * this.m_s1 + df.y * this.m_a1;
         L2 = df.x * this.m_s2 + df.y * this.m_a2;
         v1.x -= this.m_invMassA * PX;
         v1.y -= this.m_invMassA * PY;
         w1 -= this.m_invIA * L1;
         v2.x += this.m_invMassB * PX;
         v2.y += this.m_invMassB * PY;
         w2 += this.m_invIB * L2;
      }
      else {
         var df2 = 0;
         if (this.m_K.col1.x != 0.0) {
            df2 = ((-Cdot1)) / this.m_K.col1.x;
         }
         else {
            df2 = 0.0;
         }
         this.m_impulse.x += df2;
         PX = df2 * this.m_perp.x;
         PY = df2 * this.m_perp.y;
         L1 = df2 * this.m_s1;
         L2 = df2 * this.m_s2;
         v1.x -= this.m_invMassA * PX;
         v1.y -= this.m_invMassA * PY;
         w1 -= this.m_invIA * L1;
         v2.x += this.m_invMassB * PX;
         v2.y += this.m_invMassB * PY;
         w2 += this.m_invIB * L2;
      }
      bA.m_linearVelocity.SetV(v1);
      bA.m_angularVelocity = w1;
      bB.m_linearVelocity.SetV(v2);
      bB.m_angularVelocity = w2;
   }
   b2LineJoint.prototype.SolvePositionConstraints = function (baumgarte) {
      if (baumgarte === undefined) baumgarte = 0;
      var limitC = 0;
      var oldLimitImpulse = 0;
      var bA = this.m_bodyA;
      var bB = this.m_bodyB;
      var c1 = bA.m_sweep.c;
      var a1 = bA.m_sweep.a;
      var c2 = bB.m_sweep.c;
      var a2 = bB.m_sweep.a;
      var tMat;
      var tX = 0;
      var m1 = 0;
      var m2 = 0;
      var i1 = 0;
      var i2 = 0;
      var linearError = 0.0;
      var angularError = 0.0;
      var active = false;
      var C2 = 0.0;
      var R1 = b2Mat22.FromAngle(a1);
      var R2 = b2Mat22.FromAngle(a2);
      tMat = R1;
      var r1X = this.m_localAnchor1.x - this.m_localCenterA.x;
      var r1Y = this.m_localAnchor1.y - this.m_localCenterA.y;
      tX = (tMat.col1.x * r1X + tMat.col2.x * r1Y);
      r1Y = (tMat.col1.y * r1X + tMat.col2.y * r1Y);
      r1X = tX;
      tMat = R2;
      var r2X = this.m_localAnchor2.x - this.m_localCenterB.x;
      var r2Y = this.m_localAnchor2.y - this.m_localCenterB.y;
      tX = (tMat.col1.x * r2X + tMat.col2.x * r2Y);
      r2Y = (tMat.col1.y * r2X + tMat.col2.y * r2Y);
      r2X = tX;
      var dX = c2.x + r2X - c1.x - r1X;
      var dY = c2.y + r2Y - c1.y - r1Y;
      if (this.m_enableLimit) {
         this.m_axis = b2Math.MulMV(R1, this.m_localXAxis1);
         this.m_a1 = (dX + r1X) * this.m_axis.y - (dY + r1Y) * this.m_axis.x;
         this.m_a2 = r2X * this.m_axis.y - r2Y * this.m_axis.x;
         var translation = this.m_axis.x * dX + this.m_axis.y * dY;
         if (b2Math.Abs(this.m_upperTranslation - this.m_lowerTranslation) < 2.0 * b2Settings.b2_linearSlop) {
            C2 = b2Math.Clamp(translation, (-b2Settings.b2_maxLinearCorrection), b2Settings.b2_maxLinearCorrection);
            linearError = b2Math.Abs(translation);
            active = true;
         }
         else if (translation <= this.m_lowerTranslation) {
            C2 = b2Math.Clamp(translation - this.m_lowerTranslation + b2Settings.b2_linearSlop, (-b2Settings.b2_maxLinearCorrection), 0.0);
            linearError = this.m_lowerTranslation - translation;
            active = true;
         }
         else if (translation >= this.m_upperTranslation) {
            C2 = b2Math.Clamp(translation - this.m_upperTranslation + b2Settings.b2_linearSlop, 0.0, b2Settings.b2_maxLinearCorrection);
            linearError = translation - this.m_upperTranslation;
            active = true;
         }
      }
      this.m_perp = b2Math.MulMV(R1, this.m_localYAxis1);
      this.m_s1 = (dX + r1X) * this.m_perp.y - (dY + r1Y) * this.m_perp.x;
      this.m_s2 = r2X * this.m_perp.y - r2Y * this.m_perp.x;
      var impulse = new b2Vec2();
      var C1 = this.m_perp.x * dX + this.m_perp.y * dY;
      linearError = b2Math.Max(linearError, b2Math.Abs(C1));
      angularError = 0.0;
      if (active) {
         m1 = this.m_invMassA;
         m2 = this.m_invMassB;
         i1 = this.m_invIA;
         i2 = this.m_invIB;
         this.m_K.col1.x = m1 + m2 + i1 * this.m_s1 * this.m_s1 + i2 * this.m_s2 * this.m_s2;
         this.m_K.col1.y = i1 * this.m_s1 * this.m_a1 + i2 * this.m_s2 * this.m_a2;
         this.m_K.col2.x = this.m_K.col1.y;
         this.m_K.col2.y = m1 + m2 + i1 * this.m_a1 * this.m_a1 + i2 * this.m_a2 * this.m_a2;
         this.m_K.Solve(impulse, (-C1), (-C2));
      }
      else {
         m1 = this.m_invMassA;
         m2 = this.m_invMassB;
         i1 = this.m_invIA;
         i2 = this.m_invIB;
         var k11 = m1 + m2 + i1 * this.m_s1 * this.m_s1 + i2 * this.m_s2 * this.m_s2;
         var impulse1 = 0;
         if (k11 != 0.0) {
            impulse1 = ((-C1)) / k11;
         }
         else {
            impulse1 = 0.0;
         }
         impulse.x = impulse1;
         impulse.y = 0.0;
      }
      var PX = impulse.x * this.m_perp.x + impulse.y * this.m_axis.x;
      var PY = impulse.x * this.m_perp.y + impulse.y * this.m_axis.y;
      var L1 = impulse.x * this.m_s1 + impulse.y * this.m_a1;
      var L2 = impulse.x * this.m_s2 + impulse.y * this.m_a2;
      c1.x -= this.m_invMassA * PX;
      c1.y -= this.m_invMassA * PY;
      a1 -= this.m_invIA * L1;
      c2.x += this.m_invMassB * PX;
      c2.y += this.m_invMassB * PY;
      a2 += this.m_invIB * L2;
      bA.m_sweep.a = a1;
      bB.m_sweep.a = a2;
      bA.SynchronizeTransform();
      bB.SynchronizeTransform();
      return linearError <= b2Settings.b2_linearSlop && angularError <= b2Settings.b2_angularSlop;
   }
   Box2D.inherit(b2LineJointDef, Box2D.Dynamics.Joints.b2JointDef);
   b2LineJointDef.prototype.__super = Box2D.Dynamics.Joints.b2JointDef.prototype;
   b2LineJointDef.b2LineJointDef = function () {
      Box2D.Dynamics.Joints.b2JointDef.b2JointDef.apply(this, arguments);
      this.localAnchorA = new b2Vec2();
      this.localAnchorB = new b2Vec2();
      this.localAxisA = new b2Vec2();
   };
   b2LineJointDef.prototype.b2LineJointDef = function () {
      this.__super.b2JointDef.call(this);
      this.type = b2Joint.e_lineJoint;
      this.localAxisA.Set(1.0, 0.0);
      this.enableLimit = false;
      this.lowerTranslation = 0.0;
      this.upperTranslation = 0.0;
      this.enableMotor = false;
      this.maxMotorForce = 0.0;
      this.motorSpeed = 0.0;
   }
   b2LineJointDef.prototype.Initialize = function (bA, bB, anchor, axis) {
      this.bodyA = bA;
      this.bodyB = bB;
      this.localAnchorA = this.bodyA.GetLocalPoint(anchor);
      this.localAnchorB = this.bodyB.GetLocalPoint(anchor);
      this.localAxisA = this.bodyA.GetLocalVector(axis);
   }
   Box2D.inherit(b2MouseJoint, Box2D.Dynamics.Joints.b2Joint);
   b2MouseJoint.prototype.__super = Box2D.Dynamics.Joints.b2Joint.prototype;
   b2MouseJoint.b2MouseJoint = function () {
      Box2D.Dynamics.Joints.b2Joint.b2Joint.apply(this, arguments);
      this.K = new b2Mat22();
      this.K1 = new b2Mat22();
      this.K2 = new b2Mat22();
      this.m_localAnchor = new b2Vec2();
      this.m_target = new b2Vec2();
      this.m_impulse = new b2Vec2();
      this.m_mass = new b2Mat22();
      this.m_C = new b2Vec2();
   };
   b2MouseJoint.prototype.GetAnchorA = function () {
      return this.m_target;
   }
   b2MouseJoint.prototype.GetAnchorB = function () {
      return this.m_bodyB.GetWorldPoint(this.m_localAnchor);
   }
   b2MouseJoint.prototype.GetReactionForce = function (inv_dt) {
      if (inv_dt === undefined) inv_dt = 0;
      return new b2Vec2(inv_dt * this.m_impulse.x, inv_dt * this.m_impulse.y);
   }
   b2MouseJoint.prototype.GetReactionTorque = function (inv_dt) {
      if (inv_dt === undefined) inv_dt = 0;
      return 0.0;
   }
   b2MouseJoint.prototype.GetTarget = function () {
      return this.m_target;
   }
   b2MouseJoint.prototype.SetTarget = function (target) {
      if (this.m_bodyB.IsAwake() == false) {
         this.m_bodyB.SetAwake(true);
      }
      this.m_target = target;
   }
   b2MouseJoint.prototype.GetMaxForce = function () {
      return this.m_maxForce;
   }
   b2MouseJoint.prototype.SetMaxForce = function (maxForce) {
      if (maxForce === undefined) maxForce = 0;
      this.m_maxForce = maxForce;
   }
   b2MouseJoint.prototype.GetFrequency = function () {
      return this.m_frequencyHz;
   }
   b2MouseJoint.prototype.SetFrequency = function (hz) {
      if (hz === undefined) hz = 0;
      this.m_frequencyHz = hz;
   }
   b2MouseJoint.prototype.GetDampingRatio = function () {
      return this.m_dampingRatio;
   }
   b2MouseJoint.prototype.SetDampingRatio = function (ratio) {
      if (ratio === undefined) ratio = 0;
      this.m_dampingRatio = ratio;
   }
   b2MouseJoint.prototype.b2MouseJoint = function (def) {
      this.__super.b2Joint.call(this, def);
      this.m_target.SetV(def.target);
      var tX = this.m_target.x - this.m_bodyB.m_xf.position.x;
      var tY = this.m_target.y - this.m_bodyB.m_xf.position.y;
      var tMat = this.m_bodyB.m_xf.R;
      this.m_localAnchor.x = (tX * tMat.col1.x + tY * tMat.col1.y);
      this.m_localAnchor.y = (tX * tMat.col2.x + tY * tMat.col2.y);
      this.m_maxForce = def.maxForce;
      this.m_impulse.SetZero();
      this.m_frequencyHz = def.frequencyHz;
      this.m_dampingRatio = def.dampingRatio;
      this.m_beta = 0.0;
      this.m_gamma = 0.0;
   }
   b2MouseJoint.prototype.InitVelocityConstraints = function (step) {
      var b = this.m_bodyB;
      var mass = b.GetMass();
      var omega = 2.0 * Math.PI * this.m_frequencyHz;
      var d = 2.0 * mass * this.m_dampingRatio * omega;
      var k = mass * omega * omega;
      this.m_gamma = step.dt * (d + step.dt * k);
      this.m_gamma = this.m_gamma != 0 ? 1 / this.m_gamma : 0.0;
      this.m_beta = step.dt * k * this.m_gamma;
      var tMat;tMat = b.m_xf.R;
      var rX = this.m_localAnchor.x - b.m_sweep.localCenter.x;
      var rY = this.m_localAnchor.y - b.m_sweep.localCenter.y;
      var tX = (tMat.col1.x * rX + tMat.col2.x * rY);rY = (tMat.col1.y * rX + tMat.col2.y * rY);
      rX = tX;
      var invMass = b.m_invMass;
      var invI = b.m_invI;this.K1.col1.x = invMass;
      this.K1.col2.x = 0.0;
      this.K1.col1.y = 0.0;
      this.K1.col2.y = invMass;
      this.K2.col1.x = invI * rY * rY;
      this.K2.col2.x = (-invI * rX * rY);
      this.K2.col1.y = (-invI * rX * rY);
      this.K2.col2.y = invI * rX * rX;
      this.K.SetM(this.K1);
      this.K.AddM(this.K2);
      this.K.col1.x += this.m_gamma;
      this.K.col2.y += this.m_gamma;
      this.K.GetInverse(this.m_mass);
      this.m_C.x = b.m_sweep.c.x + rX - this.m_target.x;
      this.m_C.y = b.m_sweep.c.y + rY - this.m_target.y;
      b.m_angularVelocity *= 0.98;
      this.m_impulse.x *= step.dtRatio;
      this.m_impulse.y *= step.dtRatio;
      b.m_linearVelocity.x += invMass * this.m_impulse.x;
      b.m_linearVelocity.y += invMass * this.m_impulse.y;
      b.m_angularVelocity += invI * (rX * this.m_impulse.y - rY * this.m_impulse.x);
   }
   b2MouseJoint.prototype.SolveVelocityConstraints = function (step) {
      var b = this.m_bodyB;
      var tMat;
      var tX = 0;
      var tY = 0;
      tMat = b.m_xf.R;
      var rX = this.m_localAnchor.x - b.m_sweep.localCenter.x;
      var rY = this.m_localAnchor.y - b.m_sweep.localCenter.y;
      tX = (tMat.col1.x * rX + tMat.col2.x * rY);
      rY = (tMat.col1.y * rX + tMat.col2.y * rY);
      rX = tX;
      var CdotX = b.m_linearVelocity.x + ((-b.m_angularVelocity * rY));
      var CdotY = b.m_linearVelocity.y + (b.m_angularVelocity * rX);
      tMat = this.m_mass;
      tX = CdotX + this.m_beta * this.m_C.x + this.m_gamma * this.m_impulse.x;
      tY = CdotY + this.m_beta * this.m_C.y + this.m_gamma * this.m_impulse.y;
      var impulseX = (-(tMat.col1.x * tX + tMat.col2.x * tY));
      var impulseY = (-(tMat.col1.y * tX + tMat.col2.y * tY));
      var oldImpulseX = this.m_impulse.x;
      var oldImpulseY = this.m_impulse.y;
      this.m_impulse.x += impulseX;
      this.m_impulse.y += impulseY;
      var maxImpulse = step.dt * this.m_maxForce;
      if (this.m_impulse.LengthSquared() > maxImpulse * maxImpulse) {
         this.m_impulse.Multiply(maxImpulse / this.m_impulse.Length());
      }
      impulseX = this.m_impulse.x - oldImpulseX;
      impulseY = this.m_impulse.y - oldImpulseY;
      b.m_linearVelocity.x += b.m_invMass * impulseX;
      b.m_linearVelocity.y += b.m_invMass * impulseY;
      b.m_angularVelocity += b.m_invI * (rX * impulseY - rY * impulseX);
   }
   b2MouseJoint.prototype.SolvePositionConstraints = function (baumgarte) {
      if (baumgarte === undefined) baumgarte = 0;
      return true;
   }
   Box2D.inherit(b2MouseJointDef, Box2D.Dynamics.Joints.b2JointDef);
   b2MouseJointDef.prototype.__super = Box2D.Dynamics.Joints.b2JointDef.prototype;
   b2MouseJointDef.b2MouseJointDef = function () {
      Box2D.Dynamics.Joints.b2JointDef.b2JointDef.apply(this, arguments);
      this.target = new b2Vec2();
   };
   b2MouseJointDef.prototype.b2MouseJointDef = function () {
      this.__super.b2JointDef.call(this);
      this.type = b2Joint.e_mouseJoint;
      this.maxForce = 0.0;
      this.frequencyHz = 5.0;
      this.dampingRatio = 0.7;
   }
   Box2D.inherit(b2PrismaticJoint, Box2D.Dynamics.Joints.b2Joint);
   b2PrismaticJoint.prototype.__super = Box2D.Dynamics.Joints.b2Joint.prototype;
   b2PrismaticJoint.b2PrismaticJoint = function () {
      Box2D.Dynamics.Joints.b2Joint.b2Joint.apply(this, arguments);
      this.m_localAnchor1 = new b2Vec2();
      this.m_localAnchor2 = new b2Vec2();
      this.m_localXAxis1 = new b2Vec2();
      this.m_localYAxis1 = new b2Vec2();
      this.m_axis = new b2Vec2();
      this.m_perp = new b2Vec2();
      this.m_K = new b2Mat33();
      this.m_impulse = new b2Vec3();
   };
   b2PrismaticJoint.prototype.GetAnchorA = function () {
      return this.m_bodyA.GetWorldPoint(this.m_localAnchor1);
   }
   b2PrismaticJoint.prototype.GetAnchorB = function () {
      return this.m_bodyB.GetWorldPoint(this.m_localAnchor2);
   }
   b2PrismaticJoint.prototype.GetReactionForce = function (inv_dt) {
      if (inv_dt === undefined) inv_dt = 0;
      return new b2Vec2(inv_dt * (this.m_impulse.x * this.m_perp.x + (this.m_motorImpulse + this.m_impulse.z) * this.m_axis.x), inv_dt * (this.m_impulse.x * this.m_perp.y + (this.m_motorImpulse + this.m_impulse.z) * this.m_axis.y));
   }
   b2PrismaticJoint.prototype.GetReactionTorque = function (inv_dt) {
      if (inv_dt === undefined) inv_dt = 0;
      return inv_dt * this.m_impulse.y;
   }
   b2PrismaticJoint.prototype.GetJointTranslation = function () {
      var bA = this.m_bodyA;
      var bB = this.m_bodyB;
      var tMat;
      var p1 = bA.GetWorldPoint(this.m_localAnchor1);
      var p2 = bB.GetWorldPoint(this.m_localAnchor2);
      var dX = p2.x - p1.x;
      var dY = p2.y - p1.y;
      var axis = bA.GetWorldVector(this.m_localXAxis1);
      var translation = axis.x * dX + axis.y * dY;
      return translation;
   }
   b2PrismaticJoint.prototype.GetJointSpeed = function () {
      var bA = this.m_bodyA;
      var bB = this.m_bodyB;
      var tMat;
      tMat = bA.m_xf.R;
      var r1X = this.m_localAnchor1.x - bA.m_sweep.localCenter.x;
      var r1Y = this.m_localAnchor1.y - bA.m_sweep.localCenter.y;
      var tX = (tMat.col1.x * r1X + tMat.col2.x * r1Y);
      r1Y = (tMat.col1.y * r1X + tMat.col2.y * r1Y);
      r1X = tX;
      tMat = bB.m_xf.R;
      var r2X = this.m_localAnchor2.x - bB.m_sweep.localCenter.x;
      var r2Y = this.m_localAnchor2.y - bB.m_sweep.localCenter.y;
      tX = (tMat.col1.x * r2X + tMat.col2.x * r2Y);
      r2Y = (tMat.col1.y * r2X + tMat.col2.y * r2Y);
      r2X = tX;
      var p1X = bA.m_sweep.c.x + r1X;
      var p1Y = bA.m_sweep.c.y + r1Y;
      var p2X = bB.m_sweep.c.x + r2X;
      var p2Y = bB.m_sweep.c.y + r2Y;
      var dX = p2X - p1X;
      var dY = p2Y - p1Y;
      var axis = bA.GetWorldVector(this.m_localXAxis1);
      var v1 = bA.m_linearVelocity;
      var v2 = bB.m_linearVelocity;
      var w1 = bA.m_angularVelocity;
      var w2 = bB.m_angularVelocity;
      var speed = (dX * ((-w1 * axis.y)) + dY * (w1 * axis.x)) + (axis.x * (((v2.x + ((-w2 * r2Y))) - v1.x) - ((-w1 * r1Y))) + axis.y * (((v2.y + (w2 * r2X)) - v1.y) - (w1 * r1X)));
      return speed;
   }
   b2PrismaticJoint.prototype.IsLimitEnabled = function () {
      return this.m_enableLimit;
   }
   b2PrismaticJoint.prototype.EnableLimit = function (flag) {
      this.m_bodyA.SetAwake(true);
      this.m_bodyB.SetAwake(true);
      this.m_enableLimit = flag;
   }
   b2PrismaticJoint.prototype.GetLowerLimit = function () {
      return this.m_lowerTranslation;
   }
   b2PrismaticJoint.prototype.GetUpperLimit = function () {
      return this.m_upperTranslation;
   }
   b2PrismaticJoint.prototype.SetLimits = function (lower, upper) {
      if (lower === undefined) lower = 0;
      if (upper === undefined) upper = 0;
      this.m_bodyA.SetAwake(true);
      this.m_bodyB.SetAwake(true);
      this.m_lowerTranslation = lower;
      this.m_upperTranslation = upper;
   }
   b2PrismaticJoint.prototype.IsMotorEnabled = function () {
      return this.m_enableMotor;
   }
   b2PrismaticJoint.prototype.EnableMotor = function (flag) {
      this.m_bodyA.SetAwake(true);
      this.m_bodyB.SetAwake(true);
      this.m_enableMotor = flag;
   }
   b2PrismaticJoint.prototype.SetMotorSpeed = function (speed) {
      if (speed === undefined) speed = 0;
      this.m_bodyA.SetAwake(true);
      this.m_bodyB.SetAwake(true);
      this.m_motorSpeed = speed;
   }
   b2PrismaticJoint.prototype.GetMotorSpeed = function () {
      return this.m_motorSpeed;
   }
   b2PrismaticJoint.prototype.SetMaxMotorForce = function (force) {
      if (force === undefined) force = 0;
      this.m_bodyA.SetAwake(true);
      this.m_bodyB.SetAwake(true);
      this.m_maxMotorForce = force;
   }
   b2PrismaticJoint.prototype.GetMotorForce = function () {
      return this.m_motorImpulse;
   }
   b2PrismaticJoint.prototype.b2PrismaticJoint = function (def) {
      this.__super.b2Joint.call(this, def);
      var tMat;
      var tX = 0;
      var tY = 0;
      this.m_localAnchor1.SetV(def.localAnchorA);
      this.m_localAnchor2.SetV(def.localAnchorB);
      this.m_localXAxis1.SetV(def.localAxisA);
      this.m_localYAxis1.x = (-this.m_localXAxis1.y);
      this.m_localYAxis1.y = this.m_localXAxis1.x;
      this.m_refAngle = def.referenceAngle;
      this.m_impulse.SetZero();
      this.m_motorMass = 0.0;
      this.m_motorImpulse = 0.0;
      this.m_lowerTranslation = def.lowerTranslation;
      this.m_upperTranslation = def.upperTranslation;
      this.m_maxMotorForce = def.maxMotorForce;
      this.m_motorSpeed = def.motorSpeed;
      this.m_enableLimit = def.enableLimit;
      this.m_enableMotor = def.enableMotor;
      this.m_limitState = b2Joint.e_inactiveLimit;
      this.m_axis.SetZero();
      this.m_perp.SetZero();
   }
   b2PrismaticJoint.prototype.InitVelocityConstraints = function (step) {
      var bA = this.m_bodyA;
      var bB = this.m_bodyB;
      var tMat;
      var tX = 0;
      this.m_localCenterA.SetV(bA.GetLocalCenter());
      this.m_localCenterB.SetV(bB.GetLocalCenter());
      var xf1 = bA.GetTransform();
      var xf2 = bB.GetTransform();
      tMat = bA.m_xf.R;
      var r1X = this.m_localAnchor1.x - this.m_localCenterA.x;
      var r1Y = this.m_localAnchor1.y - this.m_localCenterA.y;
      tX = (tMat.col1.x * r1X + tMat.col2.x * r1Y);
      r1Y = (tMat.col1.y * r1X + tMat.col2.y * r1Y);
      r1X = tX;
      tMat = bB.m_xf.R;
      var r2X = this.m_localAnchor2.x - this.m_localCenterB.x;
      var r2Y = this.m_localAnchor2.y - this.m_localCenterB.y;
      tX = (tMat.col1.x * r2X + tMat.col2.x * r2Y);
      r2Y = (tMat.col1.y * r2X + tMat.col2.y * r2Y);
      r2X = tX;
      var dX = bB.m_sweep.c.x + r2X - bA.m_sweep.c.x - r1X;
      var dY = bB.m_sweep.c.y + r2Y - bA.m_sweep.c.y - r1Y;
      this.m_invMassA = bA.m_invMass;
      this.m_invMassB = bB.m_invMass;
      this.m_invIA = bA.m_invI;
      this.m_invIB = bB.m_invI; {
         this.m_axis.SetV(b2Math.MulMV(xf1.R, this.m_localXAxis1));
         this.m_a1 = (dX + r1X) * this.m_axis.y - (dY + r1Y) * this.m_axis.x;
         this.m_a2 = r2X * this.m_axis.y - r2Y * this.m_axis.x;
         this.m_motorMass = this.m_invMassA + this.m_invMassB + this.m_invIA * this.m_a1 * this.m_a1 + this.m_invIB * this.m_a2 * this.m_a2;
         if (this.m_motorMass > Number.MIN_VALUE) this.m_motorMass = 1.0 / this.m_motorMass;
      } {
         this.m_perp.SetV(b2Math.MulMV(xf1.R, this.m_localYAxis1));
         this.m_s1 = (dX + r1X) * this.m_perp.y - (dY + r1Y) * this.m_perp.x;
         this.m_s2 = r2X * this.m_perp.y - r2Y * this.m_perp.x;
         var m1 = this.m_invMassA;
         var m2 = this.m_invMassB;
         var i1 = this.m_invIA;
         var i2 = this.m_invIB;
         this.m_K.col1.x = m1 + m2 + i1 * this.m_s1 * this.m_s1 + i2 * this.m_s2 * this.m_s2;
         this.m_K.col1.y = i1 * this.m_s1 + i2 * this.m_s2;
         this.m_K.col1.z = i1 * this.m_s1 * this.m_a1 + i2 * this.m_s2 * this.m_a2;
         this.m_K.col2.x = this.m_K.col1.y;
         this.m_K.col2.y = i1 + i2;
         this.m_K.col2.z = i1 * this.m_a1 + i2 * this.m_a2;
         this.m_K.col3.x = this.m_K.col1.z;
         this.m_K.col3.y = this.m_K.col2.z;
         this.m_K.col3.z = m1 + m2 + i1 * this.m_a1 * this.m_a1 + i2 * this.m_a2 * this.m_a2;
      }
      if (this.m_enableLimit) {
         var jointTransition = this.m_axis.x * dX + this.m_axis.y * dY;
         if (b2Math.Abs(this.m_upperTranslation - this.m_lowerTranslation) < 2.0 * b2Settings.b2_linearSlop) {
            this.m_limitState = b2Joint.e_equalLimits;
         }
         else if (jointTransition <= this.m_lowerTranslation) {
            if (this.m_limitState != b2Joint.e_atLowerLimit) {
               this.m_limitState = b2Joint.e_atLowerLimit;
               this.m_impulse.z = 0.0;
            }
         }
         else if (jointTransition >= this.m_upperTranslation) {
            if (this.m_limitState != b2Joint.e_atUpperLimit) {
               this.m_limitState = b2Joint.e_atUpperLimit;
               this.m_impulse.z = 0.0;
            }
         }
         else {
            this.m_limitState = b2Joint.e_inactiveLimit;
            this.m_impulse.z = 0.0;
         }
      }
      else {
         this.m_limitState = b2Joint.e_inactiveLimit;
      }
      if (this.m_enableMotor == false) {
         this.m_motorImpulse = 0.0;
      }
      if (step.warmStarting) {
         this.m_impulse.x *= step.dtRatio;
         this.m_impulse.y *= step.dtRatio;
         this.m_motorImpulse *= step.dtRatio;
         var PX = this.m_impulse.x * this.m_perp.x + (this.m_motorImpulse + this.m_impulse.z) * this.m_axis.x;
         var PY = this.m_impulse.x * this.m_perp.y + (this.m_motorImpulse + this.m_impulse.z) * this.m_axis.y;
         var L1 = this.m_impulse.x * this.m_s1 + this.m_impulse.y + (this.m_motorImpulse + this.m_impulse.z) * this.m_a1;
         var L2 = this.m_impulse.x * this.m_s2 + this.m_impulse.y + (this.m_motorImpulse + this.m_impulse.z) * this.m_a2;
         bA.m_linearVelocity.x -= this.m_invMassA * PX;
         bA.m_linearVelocity.y -= this.m_invMassA * PY;
         bA.m_angularVelocity -= this.m_invIA * L1;
         bB.m_linearVelocity.x += this.m_invMassB * PX;
         bB.m_linearVelocity.y += this.m_invMassB * PY;
         bB.m_angularVelocity += this.m_invIB * L2;
      }
      else {
         this.m_impulse.SetZero();
         this.m_motorImpulse = 0.0;
      }
   }
   b2PrismaticJoint.prototype.SolveVelocityConstraints = function (step) {
      var bA = this.m_bodyA;
      var bB = this.m_bodyB;
      var v1 = bA.m_linearVelocity;
      var w1 = bA.m_angularVelocity;
      var v2 = bB.m_linearVelocity;
      var w2 = bB.m_angularVelocity;
      var PX = 0;
      var PY = 0;
      var L1 = 0;
      var L2 = 0;
      if (this.m_enableMotor && this.m_limitState != b2Joint.e_equalLimits) {
         var Cdot = this.m_axis.x * (v2.x - v1.x) + this.m_axis.y * (v2.y - v1.y) + this.m_a2 * w2 - this.m_a1 * w1;
         var impulse = this.m_motorMass * (this.m_motorSpeed - Cdot);
         var oldImpulse = this.m_motorImpulse;
         var maxImpulse = step.dt * this.m_maxMotorForce;
         this.m_motorImpulse = b2Math.Clamp(this.m_motorImpulse + impulse, (-maxImpulse), maxImpulse);
         impulse = this.m_motorImpulse - oldImpulse;
         PX = impulse * this.m_axis.x;
         PY = impulse * this.m_axis.y;
         L1 = impulse * this.m_a1;
         L2 = impulse * this.m_a2;
         v1.x -= this.m_invMassA * PX;
         v1.y -= this.m_invMassA * PY;
         w1 -= this.m_invIA * L1;
         v2.x += this.m_invMassB * PX;
         v2.y += this.m_invMassB * PY;
         w2 += this.m_invIB * L2;
      }
      var Cdot1X = this.m_perp.x * (v2.x - v1.x) + this.m_perp.y * (v2.y - v1.y) + this.m_s2 * w2 - this.m_s1 * w1;
      var Cdot1Y = w2 - w1;
      if (this.m_enableLimit && this.m_limitState != b2Joint.e_inactiveLimit) {
         var Cdot2 = this.m_axis.x * (v2.x - v1.x) + this.m_axis.y * (v2.y - v1.y) + this.m_a2 * w2 - this.m_a1 * w1;
         var f1 = this.m_impulse.Copy();
         var df = this.m_K.Solve33(new b2Vec3(), (-Cdot1X), (-Cdot1Y), (-Cdot2));
         this.m_impulse.Add(df);
         if (this.m_limitState == b2Joint.e_atLowerLimit) {
            this.m_impulse.z = b2Math.Max(this.m_impulse.z, 0.0);
         }
         else if (this.m_limitState == b2Joint.e_atUpperLimit) {
            this.m_impulse.z = b2Math.Min(this.m_impulse.z, 0.0);
         }
         var bX = (-Cdot1X) - (this.m_impulse.z - f1.z) * this.m_K.col3.x;
         var bY = (-Cdot1Y) - (this.m_impulse.z - f1.z) * this.m_K.col3.y;
         var f2r = this.m_K.Solve22(new b2Vec2(), bX, bY);
         f2r.x += f1.x;
         f2r.y += f1.y;
         this.m_impulse.x = f2r.x;
         this.m_impulse.y = f2r.y;
         df.x = this.m_impulse.x - f1.x;
         df.y = this.m_impulse.y - f1.y;
         df.z = this.m_impulse.z - f1.z;
         PX = df.x * this.m_perp.x + df.z * this.m_axis.x;
         PY = df.x * this.m_perp.y + df.z * this.m_axis.y;
         L1 = df.x * this.m_s1 + df.y + df.z * this.m_a1;
         L2 = df.x * this.m_s2 + df.y + df.z * this.m_a2;
         v1.x -= this.m_invMassA * PX;
         v1.y -= this.m_invMassA * PY;
         w1 -= this.m_invIA * L1;
         v2.x += this.m_invMassB * PX;
         v2.y += this.m_invMassB * PY;
         w2 += this.m_invIB * L2;
      }
      else {
         var df2 = this.m_K.Solve22(new b2Vec2(), (-Cdot1X), (-Cdot1Y));
         this.m_impulse.x += df2.x;
         this.m_impulse.y += df2.y;
         PX = df2.x * this.m_perp.x;
         PY = df2.x * this.m_perp.y;
         L1 = df2.x * this.m_s1 + df2.y;
         L2 = df2.x * this.m_s2 + df2.y;
         v1.x -= this.m_invMassA * PX;
         v1.y -= this.m_invMassA * PY;
         w1 -= this.m_invIA * L1;
         v2.x += this.m_invMassB * PX;
         v2.y += this.m_invMassB * PY;
         w2 += this.m_invIB * L2;
      }
      bA.m_linearVelocity.SetV(v1);
      bA.m_angularVelocity = w1;
      bB.m_linearVelocity.SetV(v2);
      bB.m_angularVelocity = w2;
   }
   b2PrismaticJoint.prototype.SolvePositionConstraints = function (baumgarte) {
      if (baumgarte === undefined) baumgarte = 0;
      var limitC = 0;
      var oldLimitImpulse = 0;
      var bA = this.m_bodyA;
      var bB = this.m_bodyB;
      var c1 = bA.m_sweep.c;
      var a1 = bA.m_sweep.a;
      var c2 = bB.m_sweep.c;
      var a2 = bB.m_sweep.a;
      var tMat;
      var tX = 0;
      var m1 = 0;
      var m2 = 0;
      var i1 = 0;
      var i2 = 0;
      var linearError = 0.0;
      var angularError = 0.0;
      var active = false;
      var C2 = 0.0;
      var R1 = b2Mat22.FromAngle(a1);
      var R2 = b2Mat22.FromAngle(a2);
      tMat = R1;
      var r1X = this.m_localAnchor1.x - this.m_localCenterA.x;
      var r1Y = this.m_localAnchor1.y - this.m_localCenterA.y;
      tX = (tMat.col1.x * r1X + tMat.col2.x * r1Y);
      r1Y = (tMat.col1.y * r1X + tMat.col2.y * r1Y);
      r1X = tX;
      tMat = R2;
      var r2X = this.m_localAnchor2.x - this.m_localCenterB.x;
      var r2Y = this.m_localAnchor2.y - this.m_localCenterB.y;
      tX = (tMat.col1.x * r2X + tMat.col2.x * r2Y);
      r2Y = (tMat.col1.y * r2X + tMat.col2.y * r2Y);
      r2X = tX;
      var dX = c2.x + r2X - c1.x - r1X;
      var dY = c2.y + r2Y - c1.y - r1Y;
      if (this.m_enableLimit) {
         this.m_axis = b2Math.MulMV(R1, this.m_localXAxis1);
         this.m_a1 = (dX + r1X) * this.m_axis.y - (dY + r1Y) * this.m_axis.x;
         this.m_a2 = r2X * this.m_axis.y - r2Y * this.m_axis.x;
         var translation = this.m_axis.x * dX + this.m_axis.y * dY;
         if (b2Math.Abs(this.m_upperTranslation - this.m_lowerTranslation) < 2.0 * b2Settings.b2_linearSlop) {
            C2 = b2Math.Clamp(translation, (-b2Settings.b2_maxLinearCorrection), b2Settings.b2_maxLinearCorrection);
            linearError = b2Math.Abs(translation);
            active = true;
         }
         else if (translation <= this.m_lowerTranslation) {
            C2 = b2Math.Clamp(translation - this.m_lowerTranslation + b2Settings.b2_linearSlop, (-b2Settings.b2_maxLinearCorrection), 0.0);
            linearError = this.m_lowerTranslation - translation;
            active = true;
         }
         else if (translation >= this.m_upperTranslation) {
            C2 = b2Math.Clamp(translation - this.m_upperTranslation + b2Settings.b2_linearSlop, 0.0, b2Settings.b2_maxLinearCorrection);
            linearError = translation - this.m_upperTranslation;
            active = true;
         }
      }
      this.m_perp = b2Math.MulMV(R1, this.m_localYAxis1);
      this.m_s1 = (dX + r1X) * this.m_perp.y - (dY + r1Y) * this.m_perp.x;
      this.m_s2 = r2X * this.m_perp.y - r2Y * this.m_perp.x;
      var impulse = new b2Vec3();
      var C1X = this.m_perp.x * dX + this.m_perp.y * dY;
      var C1Y = a2 - a1 - this.m_refAngle;
      linearError = b2Math.Max(linearError, b2Math.Abs(C1X));
      angularError = b2Math.Abs(C1Y);
      if (active) {
         m1 = this.m_invMassA;
         m2 = this.m_invMassB;
         i1 = this.m_invIA;
         i2 = this.m_invIB;
         this.m_K.col1.x = m1 + m2 + i1 * this.m_s1 * this.m_s1 + i2 * this.m_s2 * this.m_s2;
         this.m_K.col1.y = i1 * this.m_s1 + i2 * this.m_s2;
         this.m_K.col1.z = i1 * this.m_s1 * this.m_a1 + i2 * this.m_s2 * this.m_a2;
         this.m_K.col2.x = this.m_K.col1.y;
         this.m_K.col2.y = i1 + i2;
         this.m_K.col2.z = i1 * this.m_a1 + i2 * this.m_a2;
         this.m_K.col3.x = this.m_K.col1.z;
         this.m_K.col3.y = this.m_K.col2.z;
         this.m_K.col3.z = m1 + m2 + i1 * this.m_a1 * this.m_a1 + i2 * this.m_a2 * this.m_a2;
         this.m_K.Solve33(impulse, (-C1X), (-C1Y), (-C2));
      }
      else {
         m1 = this.m_invMassA;
         m2 = this.m_invMassB;
         i1 = this.m_invIA;
         i2 = this.m_invIB;
         var k11 = m1 + m2 + i1 * this.m_s1 * this.m_s1 + i2 * this.m_s2 * this.m_s2;
         var k12 = i1 * this.m_s1 + i2 * this.m_s2;
         var k22 = i1 + i2;
         this.m_K.col1.Set(k11, k12, 0.0);
         this.m_K.col2.Set(k12, k22, 0.0);
         var impulse1 = this.m_K.Solve22(new b2Vec2(), (-C1X), (-C1Y));
         impulse.x = impulse1.x;
         impulse.y = impulse1.y;
         impulse.z = 0.0;
      }
      var PX = impulse.x * this.m_perp.x + impulse.z * this.m_axis.x;
      var PY = impulse.x * this.m_perp.y + impulse.z * this.m_axis.y;
      var L1 = impulse.x * this.m_s1 + impulse.y + impulse.z * this.m_a1;
      var L2 = impulse.x * this.m_s2 + impulse.y + impulse.z * this.m_a2;
      c1.x -= this.m_invMassA * PX;
      c1.y -= this.m_invMassA * PY;
      a1 -= this.m_invIA * L1;
      c2.x += this.m_invMassB * PX;
      c2.y += this.m_invMassB * PY;
      a2 += this.m_invIB * L2;
      bA.m_sweep.a = a1;
      bB.m_sweep.a = a2;
      bA.SynchronizeTransform();
      bB.SynchronizeTransform();
      return linearError <= b2Settings.b2_linearSlop && angularError <= b2Settings.b2_angularSlop;
   }
   Box2D.inherit(b2PrismaticJointDef, Box2D.Dynamics.Joints.b2JointDef);
   b2PrismaticJointDef.prototype.__super = Box2D.Dynamics.Joints.b2JointDef.prototype;
   b2PrismaticJointDef.b2PrismaticJointDef = function () {
      Box2D.Dynamics.Joints.b2JointDef.b2JointDef.apply(this, arguments);
      this.localAnchorA = new b2Vec2();
      this.localAnchorB = new b2Vec2();
      this.localAxisA = new b2Vec2();
   };
   b2PrismaticJointDef.prototype.b2PrismaticJointDef = function () {
      this.__super.b2JointDef.call(this);
      this.type = b2Joint.e_prismaticJoint;
      this.localAxisA.Set(1.0, 0.0);
      this.referenceAngle = 0.0;
      this.enableLimit = false;
      this.lowerTranslation = 0.0;
      this.upperTranslation = 0.0;
      this.enableMotor = false;
      this.maxMotorForce = 0.0;
      this.motorSpeed = 0.0;
   }
   b2PrismaticJointDef.prototype.Initialize = function (bA, bB, anchor, axis) {
      this.bodyA = bA;
      this.bodyB = bB;
      this.localAnchorA = this.bodyA.GetLocalPoint(anchor);
      this.localAnchorB = this.bodyB.GetLocalPoint(anchor);
      this.localAxisA = this.bodyA.GetLocalVector(axis);
      this.referenceAngle = this.bodyB.GetAngle() - this.bodyA.GetAngle();
   }
   Box2D.inherit(b2PulleyJoint, Box2D.Dynamics.Joints.b2Joint);
   b2PulleyJoint.prototype.__super = Box2D.Dynamics.Joints.b2Joint.prototype;
   b2PulleyJoint.b2PulleyJoint = function () {
      Box2D.Dynamics.Joints.b2Joint.b2Joint.apply(this, arguments);
      this.m_groundAnchor1 = new b2Vec2();
      this.m_groundAnchor2 = new b2Vec2();
      this.m_localAnchor1 = new b2Vec2();
      this.m_localAnchor2 = new b2Vec2();
      this.m_u1 = new b2Vec2();
      this.m_u2 = new b2Vec2();
   };
   b2PulleyJoint.prototype.GetAnchorA = function () {
      return this.m_bodyA.GetWorldPoint(this.m_localAnchor1);
   }
   b2PulleyJoint.prototype.GetAnchorB = function () {
      return this.m_bodyB.GetWorldPoint(this.m_localAnchor2);
   }
   b2PulleyJoint.prototype.GetReactionForce = function (inv_dt) {
      if (inv_dt === undefined) inv_dt = 0;
      return new b2Vec2(inv_dt * this.m_impulse * this.m_u2.x, inv_dt * this.m_impulse * this.m_u2.y);
   }
   b2PulleyJoint.prototype.GetReactionTorque = function (inv_dt) {
      if (inv_dt === undefined) inv_dt = 0;
      return 0.0;
   }
   b2PulleyJoint.prototype.GetGroundAnchorA = function () {
      var a = this.m_ground.m_xf.position.Copy();
      a.Add(this.m_groundAnchor1);
      return a;
   }
   b2PulleyJoint.prototype.GetGroundAnchorB = function () {
      var a = this.m_ground.m_xf.position.Copy();
      a.Add(this.m_groundAnchor2);
      return a;
   }
   b2PulleyJoint.prototype.GetLength1 = function () {
      var p = this.m_bodyA.GetWorldPoint(this.m_localAnchor1);
      var sX = this.m_ground.m_xf.position.x + this.m_groundAnchor1.x;
      var sY = this.m_ground.m_xf.position.y + this.m_groundAnchor1.y;
      var dX = p.x - sX;
      var dY = p.y - sY;
      return Math.sqrt(dX * dX + dY * dY);
   }
   b2PulleyJoint.prototype.GetLength2 = function () {
      var p = this.m_bodyB.GetWorldPoint(this.m_localAnchor2);
      var sX = this.m_ground.m_xf.position.x + this.m_groundAnchor2.x;
      var sY = this.m_ground.m_xf.position.y + this.m_groundAnchor2.y;
      var dX = p.x - sX;
      var dY = p.y - sY;
      return Math.sqrt(dX * dX + dY * dY);
   }
   b2PulleyJoint.prototype.GetRatio = function () {
      return this.m_ratio;
   }
   b2PulleyJoint.prototype.b2PulleyJoint = function (def) {
      this.__super.b2Joint.call(this, def);
      var tMat;
      var tX = 0;
      var tY = 0;
      this.m_ground = this.m_bodyA.m_world.m_groundBody;
      this.m_groundAnchor1.x = def.groundAnchorA.x - this.m_ground.m_xf.position.x;
      this.m_groundAnchor1.y = def.groundAnchorA.y - this.m_ground.m_xf.position.y;
      this.m_groundAnchor2.x = def.groundAnchorB.x - this.m_ground.m_xf.position.x;
      this.m_groundAnchor2.y = def.groundAnchorB.y - this.m_ground.m_xf.position.y;
      this.m_localAnchor1.SetV(def.localAnchorA);
      this.m_localAnchor2.SetV(def.localAnchorB);
      this.m_ratio = def.ratio;
      this.m_constant = def.lengthA + this.m_ratio * def.lengthB;
      this.m_maxLength1 = b2Math.Min(def.maxLengthA, this.m_constant - this.m_ratio * b2PulleyJoint.b2_minPulleyLength);
      this.m_maxLength2 = b2Math.Min(def.maxLengthB, (this.m_constant - b2PulleyJoint.b2_minPulleyLength) / this.m_ratio);
      this.m_impulse = 0.0;
      this.m_limitImpulse1 = 0.0;
      this.m_limitImpulse2 = 0.0;
   }
   b2PulleyJoint.prototype.InitVelocityConstraints = function (step) {
      var bA = this.m_bodyA;
      var bB = this.m_bodyB;
      var tMat;
      tMat = bA.m_xf.R;
      var r1X = this.m_localAnchor1.x - bA.m_sweep.localCenter.x;
      var r1Y = this.m_localAnchor1.y - bA.m_sweep.localCenter.y;
      var tX = (tMat.col1.x * r1X + tMat.col2.x * r1Y);
      r1Y = (tMat.col1.y * r1X + tMat.col2.y * r1Y);
      r1X = tX;
      tMat = bB.m_xf.R;
      var r2X = this.m_localAnchor2.x - bB.m_sweep.localCenter.x;
      var r2Y = this.m_localAnchor2.y - bB.m_sweep.localCenter.y;
      tX = (tMat.col1.x * r2X + tMat.col2.x * r2Y);
      r2Y = (tMat.col1.y * r2X + tMat.col2.y * r2Y);
      r2X = tX;
      var p1X = bA.m_sweep.c.x + r1X;
      var p1Y = bA.m_sweep.c.y + r1Y;
      var p2X = bB.m_sweep.c.x + r2X;
      var p2Y = bB.m_sweep.c.y + r2Y;
      var s1X = this.m_ground.m_xf.position.x + this.m_groundAnchor1.x;
      var s1Y = this.m_ground.m_xf.position.y + this.m_groundAnchor1.y;
      var s2X = this.m_ground.m_xf.position.x + this.m_groundAnchor2.x;
      var s2Y = this.m_ground.m_xf.position.y + this.m_groundAnchor2.y;
      this.m_u1.Set(p1X - s1X, p1Y - s1Y);
      this.m_u2.Set(p2X - s2X, p2Y - s2Y);
      var length1 = this.m_u1.Length();
      var length2 = this.m_u2.Length();
      if (length1 > b2Settings.b2_linearSlop) {
         this.m_u1.Multiply(1.0 / length1);
      }
      else {
         this.m_u1.SetZero();
      }
      if (length2 > b2Settings.b2_linearSlop) {
         this.m_u2.Multiply(1.0 / length2);
      }
      else {
         this.m_u2.SetZero();
      }
      var C = this.m_constant - length1 - this.m_ratio * length2;
      if (C > 0.0) {
         this.m_state = b2Joint.e_inactiveLimit;
         this.m_impulse = 0.0;
      }
      else {
         this.m_state = b2Joint.e_atUpperLimit;
      }
      if (length1 < this.m_maxLength1) {
         this.m_limitState1 = b2Joint.e_inactiveLimit;
         this.m_limitImpulse1 = 0.0;
      }
      else {
         this.m_limitState1 = b2Joint.e_atUpperLimit;
      }
      if (length2 < this.m_maxLength2) {
         this.m_limitState2 = b2Joint.e_inactiveLimit;
         this.m_limitImpulse2 = 0.0;
      }
      else {
         this.m_limitState2 = b2Joint.e_atUpperLimit;
      }
      var cr1u1 = r1X * this.m_u1.y - r1Y * this.m_u1.x;
      var cr2u2 = r2X * this.m_u2.y - r2Y * this.m_u2.x;
      this.m_limitMass1 = bA.m_invMass + bA.m_invI * cr1u1 * cr1u1;
      this.m_limitMass2 = bB.m_invMass + bB.m_invI * cr2u2 * cr2u2;
      this.m_pulleyMass = this.m_limitMass1 + this.m_ratio * this.m_ratio * this.m_limitMass2;
      this.m_limitMass1 = 1.0 / this.m_limitMass1;
      this.m_limitMass2 = 1.0 / this.m_limitMass2;
      this.m_pulleyMass = 1.0 / this.m_pulleyMass;
      if (step.warmStarting) {
         this.m_impulse *= step.dtRatio;
         this.m_limitImpulse1 *= step.dtRatio;
         this.m_limitImpulse2 *= step.dtRatio;
         var P1X = ((-this.m_impulse) - this.m_limitImpulse1) * this.m_u1.x;
         var P1Y = ((-this.m_impulse) - this.m_limitImpulse1) * this.m_u1.y;
         var P2X = ((-this.m_ratio * this.m_impulse) - this.m_limitImpulse2) * this.m_u2.x;
         var P2Y = ((-this.m_ratio * this.m_impulse) - this.m_limitImpulse2) * this.m_u2.y;
         bA.m_linearVelocity.x += bA.m_invMass * P1X;
         bA.m_linearVelocity.y += bA.m_invMass * P1Y;
         bA.m_angularVelocity += bA.m_invI * (r1X * P1Y - r1Y * P1X);
         bB.m_linearVelocity.x += bB.m_invMass * P2X;
         bB.m_linearVelocity.y += bB.m_invMass * P2Y;
         bB.m_angularVelocity += bB.m_invI * (r2X * P2Y - r2Y * P2X);
      }
      else {
         this.m_impulse = 0.0;
         this.m_limitImpulse1 = 0.0;
         this.m_limitImpulse2 = 0.0;
      }
   }
   b2PulleyJoint.prototype.SolveVelocityConstraints = function (step) {
      var bA = this.m_bodyA;
      var bB = this.m_bodyB;
      var tMat;
      tMat = bA.m_xf.R;
      var r1X = this.m_localAnchor1.x - bA.m_sweep.localCenter.x;
      var r1Y = this.m_localAnchor1.y - bA.m_sweep.localCenter.y;
      var tX = (tMat.col1.x * r1X + tMat.col2.x * r1Y);
      r1Y = (tMat.col1.y * r1X + tMat.col2.y * r1Y);
      r1X = tX;
      tMat = bB.m_xf.R;
      var r2X = this.m_localAnchor2.x - bB.m_sweep.localCenter.x;
      var r2Y = this.m_localAnchor2.y - bB.m_sweep.localCenter.y;
      tX = (tMat.col1.x * r2X + tMat.col2.x * r2Y);
      r2Y = (tMat.col1.y * r2X + tMat.col2.y * r2Y);
      r2X = tX;
      var v1X = 0;
      var v1Y = 0;
      var v2X = 0;
      var v2Y = 0;
      var P1X = 0;
      var P1Y = 0;
      var P2X = 0;
      var P2Y = 0;
      var Cdot = 0;
      var impulse = 0;
      var oldImpulse = 0;
      if (this.m_state == b2Joint.e_atUpperLimit) {
         v1X = bA.m_linearVelocity.x + ((-bA.m_angularVelocity * r1Y));
         v1Y = bA.m_linearVelocity.y + (bA.m_angularVelocity * r1X);
         v2X = bB.m_linearVelocity.x + ((-bB.m_angularVelocity * r2Y));
         v2Y = bB.m_linearVelocity.y + (bB.m_angularVelocity * r2X);
         Cdot = (-(this.m_u1.x * v1X + this.m_u1.y * v1Y)) - this.m_ratio * (this.m_u2.x * v2X + this.m_u2.y * v2Y);
         impulse = this.m_pulleyMass * ((-Cdot));
         oldImpulse = this.m_impulse;
         this.m_impulse = b2Math.Max(0.0, this.m_impulse + impulse);
         impulse = this.m_impulse - oldImpulse;
         P1X = (-impulse * this.m_u1.x);
         P1Y = (-impulse * this.m_u1.y);
         P2X = (-this.m_ratio * impulse * this.m_u2.x);
         P2Y = (-this.m_ratio * impulse * this.m_u2.y);
         bA.m_linearVelocity.x += bA.m_invMass * P1X;
         bA.m_linearVelocity.y += bA.m_invMass * P1Y;
         bA.m_angularVelocity += bA.m_invI * (r1X * P1Y - r1Y * P1X);
         bB.m_linearVelocity.x += bB.m_invMass * P2X;
         bB.m_linearVelocity.y += bB.m_invMass * P2Y;
         bB.m_angularVelocity += bB.m_invI * (r2X * P2Y - r2Y * P2X);
      }
      if (this.m_limitState1 == b2Joint.e_atUpperLimit) {
         v1X = bA.m_linearVelocity.x + ((-bA.m_angularVelocity * r1Y));
         v1Y = bA.m_linearVelocity.y + (bA.m_angularVelocity * r1X);
         Cdot = (-(this.m_u1.x * v1X + this.m_u1.y * v1Y));
         impulse = (-this.m_limitMass1 * Cdot);
         oldImpulse = this.m_limitImpulse1;
         this.m_limitImpulse1 = b2Math.Max(0.0, this.m_limitImpulse1 + impulse);
         impulse = this.m_limitImpulse1 - oldImpulse;
         P1X = (-impulse * this.m_u1.x);
         P1Y = (-impulse * this.m_u1.y);
         bA.m_linearVelocity.x += bA.m_invMass * P1X;
         bA.m_linearVelocity.y += bA.m_invMass * P1Y;
         bA.m_angularVelocity += bA.m_invI * (r1X * P1Y - r1Y * P1X);
      }
      if (this.m_limitState2 == b2Joint.e_atUpperLimit) {
         v2X = bB.m_linearVelocity.x + ((-bB.m_angularVelocity * r2Y));
         v2Y = bB.m_linearVelocity.y + (bB.m_angularVelocity * r2X);
         Cdot = (-(this.m_u2.x * v2X + this.m_u2.y * v2Y));
         impulse = (-this.m_limitMass2 * Cdot);
         oldImpulse = this.m_limitImpulse2;
         this.m_limitImpulse2 = b2Math.Max(0.0, this.m_limitImpulse2 + impulse);
         impulse = this.m_limitImpulse2 - oldImpulse;
         P2X = (-impulse * this.m_u2.x);
         P2Y = (-impulse * this.m_u2.y);
         bB.m_linearVelocity.x += bB.m_invMass * P2X;
         bB.m_linearVelocity.y += bB.m_invMass * P2Y;
         bB.m_angularVelocity += bB.m_invI * (r2X * P2Y - r2Y * P2X);
      }
   }
   b2PulleyJoint.prototype.SolvePositionConstraints = function (baumgarte) {
      if (baumgarte === undefined) baumgarte = 0;
      var bA = this.m_bodyA;
      var bB = this.m_bodyB;
      var tMat;
      var s1X = this.m_ground.m_xf.position.x + this.m_groundAnchor1.x;
      var s1Y = this.m_ground.m_xf.position.y + this.m_groundAnchor1.y;
      var s2X = this.m_ground.m_xf.position.x + this.m_groundAnchor2.x;
      var s2Y = this.m_ground.m_xf.position.y + this.m_groundAnchor2.y;
      var r1X = 0;
      var r1Y = 0;
      var r2X = 0;
      var r2Y = 0;
      var p1X = 0;
      var p1Y = 0;
      var p2X = 0;
      var p2Y = 0;
      var length1 = 0;
      var length2 = 0;
      var C = 0;
      var impulse = 0;
      var oldImpulse = 0;
      var oldLimitPositionImpulse = 0;
      var tX = 0;
      var linearError = 0.0;
      if (this.m_state == b2Joint.e_atUpperLimit) {
         tMat = bA.m_xf.R;
         r1X = this.m_localAnchor1.x - bA.m_sweep.localCenter.x;
         r1Y = this.m_localAnchor1.y - bA.m_sweep.localCenter.y;
         tX = (tMat.col1.x * r1X + tMat.col2.x * r1Y);
         r1Y = (tMat.col1.y * r1X + tMat.col2.y * r1Y);
         r1X = tX;
         tMat = bB.m_xf.R;
         r2X = this.m_localAnchor2.x - bB.m_sweep.localCenter.x;
         r2Y = this.m_localAnchor2.y - bB.m_sweep.localCenter.y;
         tX = (tMat.col1.x * r2X + tMat.col2.x * r2Y);
         r2Y = (tMat.col1.y * r2X + tMat.col2.y * r2Y);
         r2X = tX;
         p1X = bA.m_sweep.c.x + r1X;
         p1Y = bA.m_sweep.c.y + r1Y;
         p2X = bB.m_sweep.c.x + r2X;
         p2Y = bB.m_sweep.c.y + r2Y;
         this.m_u1.Set(p1X - s1X, p1Y - s1Y);
         this.m_u2.Set(p2X - s2X, p2Y - s2Y);
         length1 = this.m_u1.Length();
         length2 = this.m_u2.Length();
         if (length1 > b2Settings.b2_linearSlop) {
            this.m_u1.Multiply(1.0 / length1);
         }
         else {
            this.m_u1.SetZero();
         }
         if (length2 > b2Settings.b2_linearSlop) {
            this.m_u2.Multiply(1.0 / length2);
         }
         else {
            this.m_u2.SetZero();
         }
         C = this.m_constant - length1 - this.m_ratio * length2;
         linearError = b2Math.Max(linearError, (-C));
         C = b2Math.Clamp(C + b2Settings.b2_linearSlop, (-b2Settings.b2_maxLinearCorrection), 0.0);
         impulse = (-this.m_pulleyMass * C);
         p1X = (-impulse * this.m_u1.x);
         p1Y = (-impulse * this.m_u1.y);
         p2X = (-this.m_ratio * impulse * this.m_u2.x);
         p2Y = (-this.m_ratio * impulse * this.m_u2.y);
         bA.m_sweep.c.x += bA.m_invMass * p1X;
         bA.m_sweep.c.y += bA.m_invMass * p1Y;
         bA.m_sweep.a += bA.m_invI * (r1X * p1Y - r1Y * p1X);
         bB.m_sweep.c.x += bB.m_invMass * p2X;
         bB.m_sweep.c.y += bB.m_invMass * p2Y;
         bB.m_sweep.a += bB.m_invI * (r2X * p2Y - r2Y * p2X);
         bA.SynchronizeTransform();
         bB.SynchronizeTransform();
      }
      if (this.m_limitState1 == b2Joint.e_atUpperLimit) {
         tMat = bA.m_xf.R;
         r1X = this.m_localAnchor1.x - bA.m_sweep.localCenter.x;
         r1Y = this.m_localAnchor1.y - bA.m_sweep.localCenter.y;
         tX = (tMat.col1.x * r1X + tMat.col2.x * r1Y);
         r1Y = (tMat.col1.y * r1X + tMat.col2.y * r1Y);
         r1X = tX;
         p1X = bA.m_sweep.c.x + r1X;
         p1Y = bA.m_sweep.c.y + r1Y;
         this.m_u1.Set(p1X - s1X, p1Y - s1Y);
         length1 = this.m_u1.Length();
         if (length1 > b2Settings.b2_linearSlop) {
            this.m_u1.x *= 1.0 / length1;
            this.m_u1.y *= 1.0 / length1;
         }
         else {
            this.m_u1.SetZero();
         }
         C = this.m_maxLength1 - length1;
         linearError = b2Math.Max(linearError, (-C));
         C = b2Math.Clamp(C + b2Settings.b2_linearSlop, (-b2Settings.b2_maxLinearCorrection), 0.0);
         impulse = (-this.m_limitMass1 * C);
         p1X = (-impulse * this.m_u1.x);
         p1Y = (-impulse * this.m_u1.y);
         bA.m_sweep.c.x += bA.m_invMass * p1X;
         bA.m_sweep.c.y += bA.m_invMass * p1Y;
         bA.m_sweep.a += bA.m_invI * (r1X * p1Y - r1Y * p1X);
         bA.SynchronizeTransform();
      }
      if (this.m_limitState2 == b2Joint.e_atUpperLimit) {
         tMat = bB.m_xf.R;
         r2X = this.m_localAnchor2.x - bB.m_sweep.localCenter.x;
         r2Y = this.m_localAnchor2.y - bB.m_sweep.localCenter.y;
         tX = (tMat.col1.x * r2X + tMat.col2.x * r2Y);
         r2Y = (tMat.col1.y * r2X + tMat.col2.y * r2Y);
         r2X = tX;
         p2X = bB.m_sweep.c.x + r2X;
         p2Y = bB.m_sweep.c.y + r2Y;
         this.m_u2.Set(p2X - s2X, p2Y - s2Y);
         length2 = this.m_u2.Length();
         if (length2 > b2Settings.b2_linearSlop) {
            this.m_u2.x *= 1.0 / length2;
            this.m_u2.y *= 1.0 / length2;
         }
         else {
            this.m_u2.SetZero();
         }
         C = this.m_maxLength2 - length2;
         linearError = b2Math.Max(linearError, (-C));
         C = b2Math.Clamp(C + b2Settings.b2_linearSlop, (-b2Settings.b2_maxLinearCorrection), 0.0);
         impulse = (-this.m_limitMass2 * C);
         p2X = (-impulse * this.m_u2.x);
         p2Y = (-impulse * this.m_u2.y);
         bB.m_sweep.c.x += bB.m_invMass * p2X;
         bB.m_sweep.c.y += bB.m_invMass * p2Y;
         bB.m_sweep.a += bB.m_invI * (r2X * p2Y - r2Y * p2X);
         bB.SynchronizeTransform();
      }
      return linearError < b2Settings.b2_linearSlop;
   }
   Box2D.postDefs.push(function () {
      Box2D.Dynamics.Joints.b2PulleyJoint.b2_minPulleyLength = 2.0;
   });
   Box2D.inherit(b2PulleyJointDef, Box2D.Dynamics.Joints.b2JointDef);
   b2PulleyJointDef.prototype.__super = Box2D.Dynamics.Joints.b2JointDef.prototype;
   b2PulleyJointDef.b2PulleyJointDef = function () {
      Box2D.Dynamics.Joints.b2JointDef.b2JointDef.apply(this, arguments);
      this.groundAnchorA = new b2Vec2();
      this.groundAnchorB = new b2Vec2();
      this.localAnchorA = new b2Vec2();
      this.localAnchorB = new b2Vec2();
   };
   b2PulleyJointDef.prototype.b2PulleyJointDef = function () {
      this.__super.b2JointDef.call(this);
      this.type = b2Joint.e_pulleyJoint;
      this.groundAnchorA.Set((-1.0), 1.0);
      this.groundAnchorB.Set(1.0, 1.0);
      this.localAnchorA.Set((-1.0), 0.0);
      this.localAnchorB.Set(1.0, 0.0);
      this.lengthA = 0.0;
      this.maxLengthA = 0.0;
      this.lengthB = 0.0;
      this.maxLengthB = 0.0;
      this.ratio = 1.0;
      this.collideConnected = true;
   }
   b2PulleyJointDef.prototype.Initialize = function (bA, bB, gaA, gaB, anchorA, anchorB, r) {
      if (r === undefined) r = 0;
      this.bodyA = bA;
      this.bodyB = bB;
      this.groundAnchorA.SetV(gaA);
      this.groundAnchorB.SetV(gaB);
      this.localAnchorA = this.bodyA.GetLocalPoint(anchorA);
      this.localAnchorB = this.bodyB.GetLocalPoint(anchorB);
      var d1X = anchorA.x - gaA.x;
      var d1Y = anchorA.y - gaA.y;
      this.lengthA = Math.sqrt(d1X * d1X + d1Y * d1Y);
      var d2X = anchorB.x - gaB.x;
      var d2Y = anchorB.y - gaB.y;
      this.lengthB = Math.sqrt(d2X * d2X + d2Y * d2Y);
      this.ratio = r;
      var C = this.lengthA + this.ratio * this.lengthB;
      this.maxLengthA = C - this.ratio * b2PulleyJoint.b2_minPulleyLength;
      this.maxLengthB = (C - b2PulleyJoint.b2_minPulleyLength) / this.ratio;
   }
   Box2D.inherit(b2RevoluteJoint, Box2D.Dynamics.Joints.b2Joint);
   b2RevoluteJoint.prototype.__super = Box2D.Dynamics.Joints.b2Joint.prototype;
   b2RevoluteJoint.b2RevoluteJoint = function () {
      Box2D.Dynamics.Joints.b2Joint.b2Joint.apply(this, arguments);
      this.K = new b2Mat22();
      this.K1 = new b2Mat22();
      this.K2 = new b2Mat22();
      this.K3 = new b2Mat22();
      this.impulse3 = new b2Vec3();
      this.impulse2 = new b2Vec2();
      this.reduced = new b2Vec2();
      this.m_localAnchor1 = new b2Vec2();
      this.m_localAnchor2 = new b2Vec2();
      this.m_impulse = new b2Vec3();
      this.m_mass = new b2Mat33();
   };
   b2RevoluteJoint.prototype.GetAnchorA = function () {
      return this.m_bodyA.GetWorldPoint(this.m_localAnchor1);
   }
   b2RevoluteJoint.prototype.GetAnchorB = function () {
      return this.m_bodyB.GetWorldPoint(this.m_localAnchor2);
   }
   b2RevoluteJoint.prototype.GetReactionForce = function (inv_dt) {
      if (inv_dt === undefined) inv_dt = 0;
      return new b2Vec2(inv_dt * this.m_impulse.x, inv_dt * this.m_impulse.y);
   }
   b2RevoluteJoint.prototype.GetReactionTorque = function (inv_dt) {
      if (inv_dt === undefined) inv_dt = 0;
      return inv_dt * this.m_impulse.z;
   }
   b2RevoluteJoint.prototype.GetJointAngle = function () {
      return this.m_bodyB.m_sweep.a - this.m_bodyA.m_sweep.a - this.m_referenceAngle;
   }
   b2RevoluteJoint.prototype.GetJointSpeed = function () {
      return this.m_bodyB.m_angularVelocity - this.m_bodyA.m_angularVelocity;
   }
   b2RevoluteJoint.prototype.IsLimitEnabled = function () {
      return this.m_enableLimit;
   }
   b2RevoluteJoint.prototype.EnableLimit = function (flag) {
      this.m_enableLimit = flag;
   }
   b2RevoluteJoint.prototype.GetLowerLimit = function () {
      return this.m_lowerAngle;
   }
   b2RevoluteJoint.prototype.GetUpperLimit = function () {
      return this.m_upperAngle;
   }
   b2RevoluteJoint.prototype.SetLimits = function (lower, upper) {
      if (lower === undefined) lower = 0;
      if (upper === undefined) upper = 0;
      this.m_lowerAngle = lower;
      this.m_upperAngle = upper;
   }
   b2RevoluteJoint.prototype.IsMotorEnabled = function () {
      this.m_bodyA.SetAwake(true);
      this.m_bodyB.SetAwake(true);
      return this.m_enableMotor;
   }
   b2RevoluteJoint.prototype.EnableMotor = function (flag) {
      this.m_enableMotor = flag;
   }
   b2RevoluteJoint.prototype.SetMotorSpeed = function (speed) {
      if (speed === undefined) speed = 0;
      this.m_bodyA.SetAwake(true);
      this.m_bodyB.SetAwake(true);
      this.m_motorSpeed = speed;
   }
   b2RevoluteJoint.prototype.GetMotorSpeed = function () {
      return this.m_motorSpeed;
   }
   b2RevoluteJoint.prototype.SetMaxMotorTorque = function (torque) {
      if (torque === undefined) torque = 0;
      this.m_maxMotorTorque = torque;
   }
   b2RevoluteJoint.prototype.GetMotorTorque = function () {
      return this.m_maxMotorTorque;
   }
   b2RevoluteJoint.prototype.b2RevoluteJoint = function (def) {
      this.__super.b2Joint.call(this, def);
      this.m_localAnchor1.SetV(def.localAnchorA);
      this.m_localAnchor2.SetV(def.localAnchorB);
      this.m_referenceAngle = def.referenceAngle;
      this.m_impulse.SetZero();
      this.m_motorImpulse = 0.0;
      this.m_lowerAngle = def.lowerAngle;
      this.m_upperAngle = def.upperAngle;
      this.m_maxMotorTorque = def.maxMotorTorque;
      this.m_motorSpeed = def.motorSpeed;
      this.m_enableLimit = def.enableLimit;
      this.m_enableMotor = def.enableMotor;
      this.m_limitState = b2Joint.e_inactiveLimit;
   }
   b2RevoluteJoint.prototype.InitVelocityConstraints = function (step) {
      var bA = this.m_bodyA;
      var bB = this.m_bodyB;
      var tMat;
      var tX = 0;
      if (this.m_enableMotor || this.m_enableLimit) {}
      tMat = bA.m_xf.R;
      var r1X = this.m_localAnchor1.x - bA.m_sweep.localCenter.x;
      var r1Y = this.m_localAnchor1.y - bA.m_sweep.localCenter.y;
      tX = (tMat.col1.x * r1X + tMat.col2.x * r1Y);
      r1Y = (tMat.col1.y * r1X + tMat.col2.y * r1Y);
      r1X = tX;
      tMat = bB.m_xf.R;
      var r2X = this.m_localAnchor2.x - bB.m_sweep.localCenter.x;
      var r2Y = this.m_localAnchor2.y - bB.m_sweep.localCenter.y;
      tX = (tMat.col1.x * r2X + tMat.col2.x * r2Y);
      r2Y = (tMat.col1.y * r2X + tMat.col2.y * r2Y);
      r2X = tX;
      var m1 = bA.m_invMass;
      var m2 = bB.m_invMass;
      var i1 = bA.m_invI;
      var i2 = bB.m_invI;
      this.m_mass.col1.x = m1 + m2 + r1Y * r1Y * i1 + r2Y * r2Y * i2;
      this.m_mass.col2.x = (-r1Y * r1X * i1) - r2Y * r2X * i2;
      this.m_mass.col3.x = (-r1Y * i1) - r2Y * i2;
      this.m_mass.col1.y = this.m_mass.col2.x;
      this.m_mass.col2.y = m1 + m2 + r1X * r1X * i1 + r2X * r2X * i2;
      this.m_mass.col3.y = r1X * i1 + r2X * i2;
      this.m_mass.col1.z = this.m_mass.col3.x;
      this.m_mass.col2.z = this.m_mass.col3.y;
      this.m_mass.col3.z = i1 + i2;
      this.m_motorMass = 1.0 / (i1 + i2);
      if (this.m_enableMotor == false) {
         this.m_motorImpulse = 0.0;
      }
      if (this.m_enableLimit) {
         var jointAngle = bB.m_sweep.a - bA.m_sweep.a - this.m_referenceAngle;
         if (b2Math.Abs(this.m_upperAngle - this.m_lowerAngle) < 2.0 * b2Settings.b2_angularSlop) {
            this.m_limitState = b2Joint.e_equalLimits;
         }
         else if (jointAngle <= this.m_lowerAngle) {
            if (this.m_limitState != b2Joint.e_atLowerLimit) {
               this.m_impulse.z = 0.0;
            }
            this.m_limitState = b2Joint.e_atLowerLimit;
         }
         else if (jointAngle >= this.m_upperAngle) {
            if (this.m_limitState != b2Joint.e_atUpperLimit) {
               this.m_impulse.z = 0.0;
            }
            this.m_limitState = b2Joint.e_atUpperLimit;
         }
         else {
            this.m_limitState = b2Joint.e_inactiveLimit;
            this.m_impulse.z = 0.0;
         }
      }
      else {
         this.m_limitState = b2Joint.e_inactiveLimit;
      }
      if (step.warmStarting) {
         this.m_impulse.x *= step.dtRatio;
         this.m_impulse.y *= step.dtRatio;
         this.m_motorImpulse *= step.dtRatio;
         var PX = this.m_impulse.x;
         var PY = this.m_impulse.y;
         bA.m_linearVelocity.x -= m1 * PX;
         bA.m_linearVelocity.y -= m1 * PY;
         bA.m_angularVelocity -= i1 * ((r1X * PY - r1Y * PX) + this.m_motorImpulse + this.m_impulse.z);
         bB.m_linearVelocity.x += m2 * PX;
         bB.m_linearVelocity.y += m2 * PY;
         bB.m_angularVelocity += i2 * ((r2X * PY - r2Y * PX) + this.m_motorImpulse + this.m_impulse.z);
      }
      else {
         this.m_impulse.SetZero();
         this.m_motorImpulse = 0.0;
      }
   }
   b2RevoluteJoint.prototype.SolveVelocityConstraints = function (step) {
      var bA = this.m_bodyA;
      var bB = this.m_bodyB;
      var tMat;
      var tX = 0;
      var newImpulse = 0;
      var r1X = 0;
      var r1Y = 0;
      var r2X = 0;
      var r2Y = 0;
      var v1 = bA.m_linearVelocity;
      var w1 = bA.m_angularVelocity;
      var v2 = bB.m_linearVelocity;
      var w2 = bB.m_angularVelocity;
      var m1 = bA.m_invMass;
      var m2 = bB.m_invMass;
      var i1 = bA.m_invI;
      var i2 = bB.m_invI;
      if (this.m_enableMotor && this.m_limitState != b2Joint.e_equalLimits) {
         var Cdot = w2 - w1 - this.m_motorSpeed;
         var impulse = this.m_motorMass * ((-Cdot));
         var oldImpulse = this.m_motorImpulse;
         var maxImpulse = step.dt * this.m_maxMotorTorque;
         this.m_motorImpulse = b2Math.Clamp(this.m_motorImpulse + impulse, (-maxImpulse), maxImpulse);
         impulse = this.m_motorImpulse - oldImpulse;
         w1 -= i1 * impulse;
         w2 += i2 * impulse;
      }
      if (this.m_enableLimit && this.m_limitState != b2Joint.e_inactiveLimit) {
         tMat = bA.m_xf.R;
         r1X = this.m_localAnchor1.x - bA.m_sweep.localCenter.x;
         r1Y = this.m_localAnchor1.y - bA.m_sweep.localCenter.y;
         tX = (tMat.col1.x * r1X + tMat.col2.x * r1Y);
         r1Y = (tMat.col1.y * r1X + tMat.col2.y * r1Y);
         r1X = tX;
         tMat = bB.m_xf.R;
         r2X = this.m_localAnchor2.x - bB.m_sweep.localCenter.x;
         r2Y = this.m_localAnchor2.y - bB.m_sweep.localCenter.y;
         tX = (tMat.col1.x * r2X + tMat.col2.x * r2Y);
         r2Y = (tMat.col1.y * r2X + tMat.col2.y * r2Y);
         r2X = tX;
         var Cdot1X = v2.x + ((-w2 * r2Y)) - v1.x - ((-w1 * r1Y));
         var Cdot1Y = v2.y + (w2 * r2X) - v1.y - (w1 * r1X);
         var Cdot2 = w2 - w1;
         this.m_mass.Solve33(this.impulse3, (-Cdot1X), (-Cdot1Y), (-Cdot2));
         if (this.m_limitState == b2Joint.e_equalLimits) {
            this.m_impulse.Add(this.impulse3);
         }
         else if (this.m_limitState == b2Joint.e_atLowerLimit) {
            newImpulse = this.m_impulse.z + this.impulse3.z;
            if (newImpulse < 0.0) {
               this.m_mass.Solve22(this.reduced, (-Cdot1X), (-Cdot1Y));
               this.impulse3.x = this.reduced.x;
               this.impulse3.y = this.reduced.y;
               this.impulse3.z = (-this.m_impulse.z);
               this.m_impulse.x += this.reduced.x;
               this.m_impulse.y += this.reduced.y;
               this.m_impulse.z = 0.0;
            }
         }
         else if (this.m_limitState == b2Joint.e_atUpperLimit) {
            newImpulse = this.m_impulse.z + this.impulse3.z;
            if (newImpulse > 0.0) {
               this.m_mass.Solve22(this.reduced, (-Cdot1X), (-Cdot1Y));
               this.impulse3.x = this.reduced.x;
               this.impulse3.y = this.reduced.y;
               this.impulse3.z = (-this.m_impulse.z);
               this.m_impulse.x += this.reduced.x;
               this.m_impulse.y += this.reduced.y;
               this.m_impulse.z = 0.0;
            }
         }
         v1.x -= m1 * this.impulse3.x;
         v1.y -= m1 * this.impulse3.y;
         w1 -= i1 * (r1X * this.impulse3.y - r1Y * this.impulse3.x + this.impulse3.z);
         v2.x += m2 * this.impulse3.x;
         v2.y += m2 * this.impulse3.y;
         w2 += i2 * (r2X * this.impulse3.y - r2Y * this.impulse3.x + this.impulse3.z);
      }
      else {
         tMat = bA.m_xf.R;
         r1X = this.m_localAnchor1.x - bA.m_sweep.localCenter.x;
         r1Y = this.m_localAnchor1.y - bA.m_sweep.localCenter.y;
         tX = (tMat.col1.x * r1X + tMat.col2.x * r1Y);
         r1Y = (tMat.col1.y * r1X + tMat.col2.y * r1Y);
         r1X = tX;
         tMat = bB.m_xf.R;
         r2X = this.m_localAnchor2.x - bB.m_sweep.localCenter.x;
         r2Y = this.m_localAnchor2.y - bB.m_sweep.localCenter.y;
         tX = (tMat.col1.x * r2X + tMat.col2.x * r2Y);
         r2Y = (tMat.col1.y * r2X + tMat.col2.y * r2Y);
         r2X = tX;
         var CdotX = v2.x + ((-w2 * r2Y)) - v1.x - ((-w1 * r1Y));
         var CdotY = v2.y + (w2 * r2X) - v1.y - (w1 * r1X);
         this.m_mass.Solve22(this.impulse2, (-CdotX), (-CdotY));
         this.m_impulse.x += this.impulse2.x;
         this.m_impulse.y += this.impulse2.y;
         v1.x -= m1 * this.impulse2.x;
         v1.y -= m1 * this.impulse2.y;
         w1 -= i1 * (r1X * this.impulse2.y - r1Y * this.impulse2.x);
         v2.x += m2 * this.impulse2.x;
         v2.y += m2 * this.impulse2.y;
         w2 += i2 * (r2X * this.impulse2.y - r2Y * this.impulse2.x);
      }
      bA.m_linearVelocity.SetV(v1);
      bA.m_angularVelocity = w1;
      bB.m_linearVelocity.SetV(v2);
      bB.m_angularVelocity = w2;
   }
   b2RevoluteJoint.prototype.SolvePositionConstraints = function (baumgarte) {
      if (baumgarte === undefined) baumgarte = 0;
      var oldLimitImpulse = 0;
      var C = 0;
      var tMat;
      var bA = this.m_bodyA;
      var bB = this.m_bodyB;
      var angularError = 0.0;
      var positionError = 0.0;
      var tX = 0;
      var impulseX = 0;
      var impulseY = 0;
      if (this.m_enableLimit && this.m_limitState != b2Joint.e_inactiveLimit) {
         var angle = bB.m_sweep.a - bA.m_sweep.a - this.m_referenceAngle;
         var limitImpulse = 0.0;
         if (this.m_limitState == b2Joint.e_equalLimits) {
            C = b2Math.Clamp(angle - this.m_lowerAngle, (-b2Settings.b2_maxAngularCorrection), b2Settings.b2_maxAngularCorrection);
            limitImpulse = (-this.m_motorMass * C);
            angularError = b2Math.Abs(C);
         }
         else if (this.m_limitState == b2Joint.e_atLowerLimit) {
            C = angle - this.m_lowerAngle;
            angularError = (-C);
            C = b2Math.Clamp(C + b2Settings.b2_angularSlop, (-b2Settings.b2_maxAngularCorrection), 0.0);
            limitImpulse = (-this.m_motorMass * C);
         }
         else if (this.m_limitState == b2Joint.e_atUpperLimit) {
            C = angle - this.m_upperAngle;
            angularError = C;
            C = b2Math.Clamp(C - b2Settings.b2_angularSlop, 0.0, b2Settings.b2_maxAngularCorrection);
            limitImpulse = (-this.m_motorMass * C);
         }
         bA.m_sweep.a -= bA.m_invI * limitImpulse;
         bB.m_sweep.a += bB.m_invI * limitImpulse;
         bA.SynchronizeTransform();
         bB.SynchronizeTransform();
      } {
         tMat = bA.m_xf.R;
         var r1X = this.m_localAnchor1.x - bA.m_sweep.localCenter.x;
         var r1Y = this.m_localAnchor1.y - bA.m_sweep.localCenter.y;
         tX = (tMat.col1.x * r1X + tMat.col2.x * r1Y);
         r1Y = (tMat.col1.y * r1X + tMat.col2.y * r1Y);
         r1X = tX;
         tMat = bB.m_xf.R;
         var r2X = this.m_localAnchor2.x - bB.m_sweep.localCenter.x;
         var r2Y = this.m_localAnchor2.y - bB.m_sweep.localCenter.y;
         tX = (tMat.col1.x * r2X + tMat.col2.x * r2Y);
         r2Y = (tMat.col1.y * r2X + tMat.col2.y * r2Y);
         r2X = tX;
         var CX = bB.m_sweep.c.x + r2X - bA.m_sweep.c.x - r1X;
         var CY = bB.m_sweep.c.y + r2Y - bA.m_sweep.c.y - r1Y;
         var CLengthSquared = CX * CX + CY * CY;
         var CLength = Math.sqrt(CLengthSquared);
         positionError = CLength;
         var invMass1 = bA.m_invMass;
         var invMass2 = bB.m_invMass;
         var invI1 = bA.m_invI;
         var invI2 = bB.m_invI;
         var k_allowedStretch = 10.0 * b2Settings.b2_linearSlop;
         if (CLengthSquared > k_allowedStretch * k_allowedStretch) {
            var uX = CX / CLength;
            var uY = CY / CLength;
            var k = invMass1 + invMass2;
            var m = 1.0 / k;
            impulseX = m * ((-CX));
            impulseY = m * ((-CY));
            var k_beta = 0.5;
            bA.m_sweep.c.x -= k_beta * invMass1 * impulseX;
            bA.m_sweep.c.y -= k_beta * invMass1 * impulseY;
            bB.m_sweep.c.x += k_beta * invMass2 * impulseX;
            bB.m_sweep.c.y += k_beta * invMass2 * impulseY;
            CX = bB.m_sweep.c.x + r2X - bA.m_sweep.c.x - r1X;
            CY = bB.m_sweep.c.y + r2Y - bA.m_sweep.c.y - r1Y;
         }
         this.K1.col1.x = invMass1 + invMass2;
         this.K1.col2.x = 0.0;
         this.K1.col1.y = 0.0;
         this.K1.col2.y = invMass1 + invMass2;
         this.K2.col1.x = invI1 * r1Y * r1Y;
         this.K2.col2.x = (-invI1 * r1X * r1Y);
         this.K2.col1.y = (-invI1 * r1X * r1Y);
         this.K2.col2.y = invI1 * r1X * r1X;
         this.K3.col1.x = invI2 * r2Y * r2Y;
         this.K3.col2.x = (-invI2 * r2X * r2Y);
         this.K3.col1.y = (-invI2 * r2X * r2Y);
         this.K3.col2.y = invI2 * r2X * r2X;
         this.K.SetM(this.K1);
         this.K.AddM(this.K2);
         this.K.AddM(this.K3);
         this.K.Solve(b2RevoluteJoint.tImpulse, (-CX), (-CY));
         impulseX = b2RevoluteJoint.tImpulse.x;
         impulseY = b2RevoluteJoint.tImpulse.y;
         bA.m_sweep.c.x -= bA.m_invMass * impulseX;
         bA.m_sweep.c.y -= bA.m_invMass * impulseY;
         bA.m_sweep.a -= bA.m_invI * (r1X * impulseY - r1Y * impulseX);
         bB.m_sweep.c.x += bB.m_invMass * impulseX;
         bB.m_sweep.c.y += bB.m_invMass * impulseY;
         bB.m_sweep.a += bB.m_invI * (r2X * impulseY - r2Y * impulseX);
         bA.SynchronizeTransform();
         bB.SynchronizeTransform();
      }
      return positionError <= b2Settings.b2_linearSlop && angularError <= b2Settings.b2_angularSlop;
   }
   Box2D.postDefs.push(function () {
      Box2D.Dynamics.Joints.b2RevoluteJoint.tImpulse = new b2Vec2();
   });
   Box2D.inherit(b2RevoluteJointDef, Box2D.Dynamics.Joints.b2JointDef);
   b2RevoluteJointDef.prototype.__super = Box2D.Dynamics.Joints.b2JointDef.prototype;
   b2RevoluteJointDef.b2RevoluteJointDef = function () {
      Box2D.Dynamics.Joints.b2JointDef.b2JointDef.apply(this, arguments);
      this.localAnchorA = new b2Vec2();
      this.localAnchorB = new b2Vec2();
   };
   b2RevoluteJointDef.prototype.b2RevoluteJointDef = function () {
      this.__super.b2JointDef.call(this);
      this.type = b2Joint.e_revoluteJoint;
      this.localAnchorA.Set(0.0, 0.0);
      this.localAnchorB.Set(0.0, 0.0);
      this.referenceAngle = 0.0;
      this.lowerAngle = 0.0;
      this.upperAngle = 0.0;
      this.maxMotorTorque = 0.0;
      this.motorSpeed = 0.0;
      this.enableLimit = false;
      this.enableMotor = false;
   }
   b2RevoluteJointDef.prototype.Initialize = function (bA, bB, anchor) {
      this.bodyA = bA;
      this.bodyB = bB;
      this.localAnchorA = this.bodyA.GetLocalPoint(anchor);
      this.localAnchorB = this.bodyB.GetLocalPoint(anchor);
      this.referenceAngle = this.bodyB.GetAngle() - this.bodyA.GetAngle();
   }
   Box2D.inherit(b2WeldJoint, Box2D.Dynamics.Joints.b2Joint);
   b2WeldJoint.prototype.__super = Box2D.Dynamics.Joints.b2Joint.prototype;
   b2WeldJoint.b2WeldJoint = function () {
      Box2D.Dynamics.Joints.b2Joint.b2Joint.apply(this, arguments);
      this.m_localAnchorA = new b2Vec2();
      this.m_localAnchorB = new b2Vec2();
      this.m_impulse = new b2Vec3();
      this.m_mass = new b2Mat33();
   };
   b2WeldJoint.prototype.GetAnchorA = function () {
      return this.m_bodyA.GetWorldPoint(this.m_localAnchorA);
   }
   b2WeldJoint.prototype.GetAnchorB = function () {
      return this.m_bodyB.GetWorldPoint(this.m_localAnchorB);
   }
   b2WeldJoint.prototype.GetReactionForce = function (inv_dt) {
      if (inv_dt === undefined) inv_dt = 0;
      return new b2Vec2(inv_dt * this.m_impulse.x, inv_dt * this.m_impulse.y);
   }
   b2WeldJoint.prototype.GetReactionTorque = function (inv_dt) {
      if (inv_dt === undefined) inv_dt = 0;
      return inv_dt * this.m_impulse.z;
   }
   b2WeldJoint.prototype.b2WeldJoint = function (def) {
      this.__super.b2Joint.call(this, def);
      this.m_localAnchorA.SetV(def.localAnchorA);
      this.m_localAnchorB.SetV(def.localAnchorB);
      this.m_referenceAngle = def.referenceAngle;
      this.m_impulse.SetZero();
      this.m_mass = new b2Mat33();
   }
   b2WeldJoint.prototype.InitVelocityConstraints = function (step) {
      var tMat;
      var tX = 0;
      var bA = this.m_bodyA;
      var bB = this.m_bodyB;
      tMat = bA.m_xf.R;
      var rAX = this.m_localAnchorA.x - bA.m_sweep.localCenter.x;
      var rAY = this.m_localAnchorA.y - bA.m_sweep.localCenter.y;
      tX = (tMat.col1.x * rAX + tMat.col2.x * rAY);
      rAY = (tMat.col1.y * rAX + tMat.col2.y * rAY);
      rAX = tX;
      tMat = bB.m_xf.R;
      var rBX = this.m_localAnchorB.x - bB.m_sweep.localCenter.x;
      var rBY = this.m_localAnchorB.y - bB.m_sweep.localCenter.y;
      tX = (tMat.col1.x * rBX + tMat.col2.x * rBY);
      rBY = (tMat.col1.y * rBX + tMat.col2.y * rBY);
      rBX = tX;
      var mA = bA.m_invMass;
      var mB = bB.m_invMass;
      var iA = bA.m_invI;
      var iB = bB.m_invI;
      this.m_mass.col1.x = mA + mB + rAY * rAY * iA + rBY * rBY * iB;
      this.m_mass.col2.x = (-rAY * rAX * iA) - rBY * rBX * iB;
      this.m_mass.col3.x = (-rAY * iA) - rBY * iB;
      this.m_mass.col1.y = this.m_mass.col2.x;
      this.m_mass.col2.y = mA + mB + rAX * rAX * iA + rBX * rBX * iB;
      this.m_mass.col3.y = rAX * iA + rBX * iB;
      this.m_mass.col1.z = this.m_mass.col3.x;
      this.m_mass.col2.z = this.m_mass.col3.y;
      this.m_mass.col3.z = iA + iB;
      if (step.warmStarting) {
         this.m_impulse.x *= step.dtRatio;
         this.m_impulse.y *= step.dtRatio;
         this.m_impulse.z *= step.dtRatio;
         bA.m_linearVelocity.x -= mA * this.m_impulse.x;
         bA.m_linearVelocity.y -= mA * this.m_impulse.y;
         bA.m_angularVelocity -= iA * (rAX * this.m_impulse.y - rAY * this.m_impulse.x + this.m_impulse.z);
         bB.m_linearVelocity.x += mB * this.m_impulse.x;
         bB.m_linearVelocity.y += mB * this.m_impulse.y;
         bB.m_angularVelocity += iB * (rBX * this.m_impulse.y - rBY * this.m_impulse.x + this.m_impulse.z);
      }
      else {
         this.m_impulse.SetZero();
      }
   }
   b2WeldJoint.prototype.SolveVelocityConstraints = function (step) {
      var tMat;
      var tX = 0;
      var bA = this.m_bodyA;
      var bB = this.m_bodyB;
      var vA = bA.m_linearVelocity;
      var wA = bA.m_angularVelocity;
      var vB = bB.m_linearVelocity;
      var wB = bB.m_angularVelocity;
      var mA = bA.m_invMass;
      var mB = bB.m_invMass;
      var iA = bA.m_invI;
      var iB = bB.m_invI;
      tMat = bA.m_xf.R;
      var rAX = this.m_localAnchorA.x - bA.m_sweep.localCenter.x;
      var rAY = this.m_localAnchorA.y - bA.m_sweep.localCenter.y;
      tX = (tMat.col1.x * rAX + tMat.col2.x * rAY);
      rAY = (tMat.col1.y * rAX + tMat.col2.y * rAY);
      rAX = tX;
      tMat = bB.m_xf.R;
      var rBX = this.m_localAnchorB.x - bB.m_sweep.localCenter.x;
      var rBY = this.m_localAnchorB.y - bB.m_sweep.localCenter.y;
      tX = (tMat.col1.x * rBX + tMat.col2.x * rBY);
      rBY = (tMat.col1.y * rBX + tMat.col2.y * rBY);
      rBX = tX;
      var Cdot1X = vB.x - wB * rBY - vA.x + wA * rAY;
      var Cdot1Y = vB.y + wB * rBX - vA.y - wA * rAX;
      var Cdot2 = wB - wA;
      var impulse = new b2Vec3();
      this.m_mass.Solve33(impulse, (-Cdot1X), (-Cdot1Y), (-Cdot2));
      this.m_impulse.Add(impulse);
      vA.x -= mA * impulse.x;
      vA.y -= mA * impulse.y;
      wA -= iA * (rAX * impulse.y - rAY * impulse.x + impulse.z);
      vB.x += mB * impulse.x;
      vB.y += mB * impulse.y;
      wB += iB * (rBX * impulse.y - rBY * impulse.x + impulse.z);
      bA.m_angularVelocity = wA;
      bB.m_angularVelocity = wB;
   }
   b2WeldJoint.prototype.SolvePositionConstraints = function (baumgarte) {
      if (baumgarte === undefined) baumgarte = 0;
      var tMat;
      var tX = 0;
      var bA = this.m_bodyA;
      var bB = this.m_bodyB;
      tMat = bA.m_xf.R;
      var rAX = this.m_localAnchorA.x - bA.m_sweep.localCenter.x;
      var rAY = this.m_localAnchorA.y - bA.m_sweep.localCenter.y;
      tX = (tMat.col1.x * rAX + tMat.col2.x * rAY);
      rAY = (tMat.col1.y * rAX + tMat.col2.y * rAY);
      rAX = tX;
      tMat = bB.m_xf.R;
      var rBX = this.m_localAnchorB.x - bB.m_sweep.localCenter.x;
      var rBY = this.m_localAnchorB.y - bB.m_sweep.localCenter.y;
      tX = (tMat.col1.x * rBX + tMat.col2.x * rBY);
      rBY = (tMat.col1.y * rBX + tMat.col2.y * rBY);
      rBX = tX;
      var mA = bA.m_invMass;
      var mB = bB.m_invMass;
      var iA = bA.m_invI;
      var iB = bB.m_invI;
      var C1X = bB.m_sweep.c.x + rBX - bA.m_sweep.c.x - rAX;
      var C1Y = bB.m_sweep.c.y + rBY - bA.m_sweep.c.y - rAY;
      var C2 = bB.m_sweep.a - bA.m_sweep.a - this.m_referenceAngle;
      var k_allowedStretch = 10.0 * b2Settings.b2_linearSlop;
      var positionError = Math.sqrt(C1X * C1X + C1Y * C1Y);
      var angularError = b2Math.Abs(C2);
      if (positionError > k_allowedStretch) {
         iA *= 1.0;
         iB *= 1.0;
      }
      this.m_mass.col1.x = mA + mB + rAY * rAY * iA + rBY * rBY * iB;
      this.m_mass.col2.x = (-rAY * rAX * iA) - rBY * rBX * iB;
      this.m_mass.col3.x = (-rAY * iA) - rBY * iB;
      this.m_mass.col1.y = this.m_mass.col2.x;
      this.m_mass.col2.y = mA + mB + rAX * rAX * iA + rBX * rBX * iB;
      this.m_mass.col3.y = rAX * iA + rBX * iB;
      this.m_mass.col1.z = this.m_mass.col3.x;
      this.m_mass.col2.z = this.m_mass.col3.y;
      this.m_mass.col3.z = iA + iB;
      var impulse = new b2Vec3();
      this.m_mass.Solve33(impulse, (-C1X), (-C1Y), (-C2));
      bA.m_sweep.c.x -= mA * impulse.x;
      bA.m_sweep.c.y -= mA * impulse.y;
      bA.m_sweep.a -= iA * (rAX * impulse.y - rAY * impulse.x + impulse.z);
      bB.m_sweep.c.x += mB * impulse.x;
      bB.m_sweep.c.y += mB * impulse.y;
      bB.m_sweep.a += iB * (rBX * impulse.y - rBY * impulse.x + impulse.z);
      bA.SynchronizeTransform();
      bB.SynchronizeTransform();
      return positionError <= b2Settings.b2_linearSlop && angularError <= b2Settings.b2_angularSlop;
   }
   Box2D.inherit(b2WeldJointDef, Box2D.Dynamics.Joints.b2JointDef);
   b2WeldJointDef.prototype.__super = Box2D.Dynamics.Joints.b2JointDef.prototype;
   b2WeldJointDef.b2WeldJointDef = function () {
      Box2D.Dynamics.Joints.b2JointDef.b2JointDef.apply(this, arguments);
      this.localAnchorA = new b2Vec2();
      this.localAnchorB = new b2Vec2();
   };
   b2WeldJointDef.prototype.b2WeldJointDef = function () {
      this.__super.b2JointDef.call(this);
      this.type = b2Joint.e_weldJoint;
      this.referenceAngle = 0.0;
   }
   b2WeldJointDef.prototype.Initialize = function (bA, bB, anchor) {
      this.bodyA = bA;
      this.bodyB = bB;
      this.localAnchorA.SetV(this.bodyA.GetLocalPoint(anchor));
      this.localAnchorB.SetV(this.bodyB.GetLocalPoint(anchor));
      this.referenceAngle = this.bodyB.GetAngle() - this.bodyA.GetAngle();
   }
})();
(function () {
   var b2DebugDraw = Box2D.Dynamics.b2DebugDraw;
   b2DebugDraw.b2DebugDraw = function () {
      this.m_drawScale = 1.0;
      this.m_lineThickness = 1.0;
      this.m_alpha = 1.0;
      this.m_fillAlpha = 1.0;
      this.m_xformScale = 1.0;
      var __this = this;
      //#WORKAROUND
      this.m_sprite = {
         graphics: {
            clear: function () {
               __this.m_ctx.clearRect(0, 0, __this.m_ctx.canvas.width, __this.m_ctx.canvas.height)
            }
         }
      };
   };
   b2DebugDraw.prototype._color = function (color, alpha) {
      return "rgba(" + ((color & 0xFF0000) >> 16) + "," + ((color & 0xFF00) >> 8) + "," + (color & 0xFF) + "," + alpha + ")";
   };
   b2DebugDraw.prototype.b2DebugDraw = function () {
      this.m_drawFlags = 0;
   };
   b2DebugDraw.prototype.SetFlags = function (flags) {
      if (flags === undefined) flags = 0;
      this.m_drawFlags = flags;
   };
   b2DebugDraw.prototype.GetFlags = function () {
      return this.m_drawFlags;
   };
   b2DebugDraw.prototype.AppendFlags = function (flags) {
      if (flags === undefined) flags = 0;
      this.m_drawFlags |= flags;
   };
   b2DebugDraw.prototype.ClearFlags = function (flags) {
      if (flags === undefined) flags = 0;
      this.m_drawFlags &= ~flags;
   };
   b2DebugDraw.prototype.SetSprite = function (sprite) {
      this.m_ctx = sprite;
   };
   b2DebugDraw.prototype.GetSprite = function () {
      return this.m_ctx;
   };
   b2DebugDraw.prototype.SetDrawScale = function (drawScale) {
      if (drawScale === undefined) drawScale = 0;
      this.m_drawScale = drawScale;
   };
   b2DebugDraw.prototype.GetDrawScale = function () {
      return this.m_drawScale;
   };
   b2DebugDraw.prototype.SetLineThickness = function (lineThickness) {
      if (lineThickness === undefined) lineThickness = 0;
      this.m_lineThickness = lineThickness;
      this.m_ctx.strokeWidth = lineThickness;
   };
   b2DebugDraw.prototype.GetLineThickness = function () {
      return this.m_lineThickness;
   };
   b2DebugDraw.prototype.SetAlpha = function (alpha) {
      if (alpha === undefined) alpha = 0;
      this.m_alpha = alpha;
   };
   b2DebugDraw.prototype.GetAlpha = function () {
      return this.m_alpha;
   };
   b2DebugDraw.prototype.SetFillAlpha = function (alpha) {
      if (alpha === undefined) alpha = 0;
      this.m_fillAlpha = alpha;
   };
   b2DebugDraw.prototype.GetFillAlpha = function () {
      return this.m_fillAlpha;
   };
   b2DebugDraw.prototype.SetXFormScale = function (xformScale) {
      if (xformScale === undefined) xformScale = 0;
      this.m_xformScale = xformScale;
   };
   b2DebugDraw.prototype.GetXFormScale = function () {
      return this.m_xformScale;
   };
   b2DebugDraw.prototype.DrawPolygon = function (vertices, vertexCount, color) {
      if (!vertexCount) return;
      var s = this.m_ctx;
      var drawScale = this.m_drawScale;
      s.beginPath();
      s.strokeStyle = this._color(color.color, this.m_alpha);
      s.moveTo(vertices[0].x * drawScale, vertices[0].y * drawScale);
      for (var i = 1; i < vertexCount; i++) {
         s.lineTo(vertices[i].x * drawScale, vertices[i].y * drawScale);
      }
      s.lineTo(vertices[0].x * drawScale, vertices[0].y * drawScale);
      s.closePath();
      s.stroke();
   };
   b2DebugDraw.prototype.DrawSolidPolygon = function (vertices, vertexCount, color) {
      if (!vertexCount) return;
      var s = this.m_ctx;
      var drawScale = this.m_drawScale;
      s.beginPath();
      s.strokeStyle = this._color(color.color, this.m_alpha);
      s.fillStyle = this._color(color.color, this.m_fillAlpha);
      s.moveTo(vertices[0].x * drawScale, vertices[0].y * drawScale);
      for (var i = 1; i < vertexCount; i++) {
         s.lineTo(vertices[i].x * drawScale, vertices[i].y * drawScale);
      }
      s.lineTo(vertices[0].x * drawScale, vertices[0].y * drawScale);
      s.closePath();
      s.fill();
      s.stroke();
   };
   b2DebugDraw.prototype.DrawCircle = function (center, radius, color) {
      if (!radius) return;
      var s = this.m_ctx;
      var drawScale = this.m_drawScale;
      s.beginPath();
      s.strokeStyle = this._color(color.color, this.m_alpha);
      s.arc(center.x * drawScale, center.y * drawScale, radius * drawScale, 0, Math.PI * 2, true);
      s.closePath();
      s.stroke();
   };
   b2DebugDraw.prototype.DrawSolidCircle = function (center, radius, axis, color) {
      if (!radius) return;
      var s = this.m_ctx,
         drawScale = this.m_drawScale,
         cx = center.x * drawScale,
         cy = center.y * drawScale;
      s.moveTo(0, 0);
      s.beginPath();
      s.strokeStyle = this._color(color.color, this.m_alpha);
      s.fillStyle = this._color(color.color, this.m_fillAlpha);
      s.arc(cx, cy, radius * drawScale, 0, Math.PI * 2, true);
      s.moveTo(cx, cy);
      s.lineTo((center.x + axis.x * radius) * drawScale, (center.y + axis.y * radius) * drawScale);
      s.closePath();
      s.fill();
      s.stroke();
   };
   b2DebugDraw.prototype.DrawSegment = function (p1, p2, color) {
      var s = this.m_ctx,
         drawScale = this.m_drawScale;
      s.strokeStyle = this._color(color.color, this.m_alpha);
      s.beginPath();
      s.moveTo(p1.x * drawScale, p1.y * drawScale);
      s.lineTo(p2.x * drawScale, p2.y * drawScale);
      s.closePath();
      s.stroke();
   };
   b2DebugDraw.prototype.DrawTransform = function (xf) {
      var s = this.m_ctx,
         drawScale = this.m_drawScale;
      s.beginPath();
      s.strokeStyle = this._color(0xff0000, this.m_alpha);
      s.moveTo(xf.position.x * drawScale, xf.position.y * drawScale);
      s.lineTo((xf.position.x + this.m_xformScale * xf.R.col1.x) * drawScale, (xf.position.y + this.m_xformScale * xf.R.col1.y) * drawScale);

      s.strokeStyle = this._color(0xff00, this.m_alpha);
      s.moveTo(xf.position.x * drawScale, xf.position.y * drawScale);
      s.lineTo((xf.position.x + this.m_xformScale * xf.R.col2.x) * drawScale, (xf.position.y + this.m_xformScale * xf.R.col2.y) * drawScale);
      s.closePath();
      s.stroke();
   };
})();
var i;
for (i = 0; i < Box2D.postDefs.length; ++i) Box2D.postDefs[i]();

module.exports = Box2D
},{}]},{},["/home/zloyrim/Projects/SideScroller/Infinite Sidescroller/GameCode/main.js"])
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Vzci9sb2NhbC9saWIvbm9kZV9tb2R1bGVzL3dhdGNoaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJCMmQuanMiLCJDb25maWcuanMiLCJDb250cm9sbGVycy9Bc3NldENvbnRyb2xsZXIuanMiLCJDb250cm9sbGVycy9FbnRpdHlDb250cm9sbGVyLmpzIiwiQ29udHJvbGxlcnMvR2FtZUNvbnRyb2xsZXIuanMiLCJDb250cm9sbGVycy9HcmFwaGljc0NvbnRyb2xsZXIuanMiLCJDb250cm9sbGVycy9JZGVudGlmaWNhdGlvbkNvbnRyb2xsZXIuanMiLCJDb250cm9sbGVycy9Jbml0Q29udHJvbGxlci5qcyIsIkNvbnRyb2xsZXJzL0tleWJvYXJkQ29udHJvbGxlci5qcyIsIkNvbnRyb2xsZXJzL011bHRpcGxheWVyU3luY0NvbnRyb2xsZXIuanMiLCJDb250cm9sbGVycy9OZXR3b3JrQ29udHJvbGxlci5qcyIsIkNvbnRyb2xsZXJzL1BoeXNpY3NDb250cm9sbGVyLmpzIiwiQ29udHJvbGxlcnMvUmVnaXN0ZXJBc0NvbnRyb2xsZXIuanMiLCJDb250cm9sbGVycy9UZXJyYWluQ29udHJvbGxlci5qcyIsIkNvbnRyb2xsZXJzL1RlcnJhaW5TbGljZUNvbnRyb2xsZXIuanMiLCJDb250cm9sbGVycy9UZXN0Q29udHJvbGxlci5qcyIsIkNvbnRyb2xsZXJzL1dvcmxkQ29udHJvbGxlci5qcyIsIkdhbWVVdGlsaXR5LmpzIiwiSW5jbHVkZXMuanMiLCJMb2dpYy9BbnRMb2dpYy5qcyIsIkxvZ2ljL0VzdGVlbWVkQ29tcGFuaW9uTG9naWMuanMiLCJMb2dpYy9HcmlmZmluTG9naWMuanMiLCJMb2dpYy9IZXJvTG9naWMuanMiLCJMb2dpYy9IeWVuYUxvZ2ljLmpzIiwiTG9naWMvTWVkdXNhTG9naWMuanMiLCJMb2dpYy9QaXp6YUxvZ2ljLmpzIiwiTW9kZWxzL0Fzc2V0TW9kZWwuanMiLCJNb2RlbHMvRW50aXR5TW9kZWwuanMiLCJNb2RlbHMvR2FtZU1vZGVsLmpzIiwiTW9kZWxzL0dyYXBoaWNzTW9kZWwuanMiLCJNb2RlbHMvSWRlbnRpZmljYXRpb25Nb2RlbC5qcyIsIk1vZGVscy9LZXlib2FyZE1vZGVsLmpzIiwiTW9kZWxzL011bHRpcGxheWVyU3luY01vZGVsLmpzIiwiTW9kZWxzL05ldHdvcmtNb2RlbC5qcyIsIk1vZGVscy9QaHlzaWNzTW9kZWwuanMiLCJNb2RlbHMvUmVnaXN0ZXJBc01vZGVsLmpzIiwiTW9kZWxzL1RlcnJhaW5Nb2RlbC5qcyIsIk1vZGVscy9UZXJyYWluU2xpY2VNb2RlbC5qcyIsIk1vZGVscy9UZXN0TW9kZWwuanMiLCJNb2RlbHMvV29ybGRNb2RlbC5qcyIsIlJlbmRlcmVycy9BbnRSZW5kZXJlci5qcyIsIlJlbmRlcmVycy9CYWNrZ3JvdW5kUmVuZGVyZXIuanMiLCJSZW5kZXJlcnMvRXN0ZWVtZWRDb21wYW5pb25SZW5kZXJlci5qcyIsIlJlbmRlcmVycy9HcmlmZmluUmVuZGVyZXIuanMiLCJSZW5kZXJlcnMvSFVEUmVuZGVyZXIuanMiLCJSZW5kZXJlcnMvSGVyb1JlbmRlcmVyLmpzIiwiUmVuZGVyZXJzL0h5ZW5hUmVuZGVyZXIuanMiLCJSZW5kZXJlcnMvTWVkdXNhUmVuZGVyZXIuanMiLCJSZW5kZXJlcnMvUGl6emFSZW5kZXJlci5qcyIsIlJlbmRlcmVycy9UZXJyYWluQ2VsbFJlbmRlcmVyLmpzIiwiUmVuZGVyZXJzL1RlcnJhaW5TbGljZVJlbmRlcmVyLmpzIiwibWFpbi5qcyIsIm5vZGVfbW9kdWxlcy9ib3gyZHdlYi9ib3gyZC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDL0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDMURBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN2RUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDL3RCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDakVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDNWNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM5TUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcktBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDektBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDamJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3JsQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMxcUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3hFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDekxBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDelFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3ZGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcEtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzNFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNqVUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDMUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM1TEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMvSEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDN1JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzNXQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQy9IQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM1REE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNuQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0xBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN0Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDM0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQy9KQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcERBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3BMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDckRBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ05BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ05BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbkhBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDN0dBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMvQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMzRkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN6RUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaklBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMvRkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMzRkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDMUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzdDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDckdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaEVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwiLy8gVGhpcyBmaWxlIGNvbnRhaW5zIHNob3J0Y3V0cyBmb3IgdGhlIG1ldGhvZHMgb2YgdGhlIEJveDJEIGxpYnJhcnkgdGhhdCBhcmUgdXNlZFxuLy8gdG9vIG9mdGVuIHRvIHR5cGUgdGhlaXIgbG9uZyBuYW1lc1xuXG52YXIgQjJkID0gZnVuY3Rpb24oKXtcblxufTtcblxuQjJkLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24oKXtcblx0aW5jbHVkZSgpO1xuXG5cdHRoaXMuYjJWZWMyID0gQm94MkQuQ29tbW9uLk1hdGguYjJWZWMyO1xuXHR0aGlzLmIyQm9keURlZiA9IEJveDJELkR5bmFtaWNzLmIyQm9keURlZjtcblx0dGhpcy5iMkJvZHkgPSBCb3gyRC5EeW5hbWljcy5iMkJvZHk7XG5cdHRoaXMuYjJGaXh0dXJlRGVmID0gQm94MkQuRHluYW1pY3MuYjJGaXh0dXJlRGVmO1xuXHR0aGlzLmIyRml4dHVyZSA9IEJveDJELkR5bmFtaWNzLmIyRml4dHVyZTtcblx0dGhpcy5iMldvcmxkID0gQm94MkQuRHluYW1pY3MuYjJXb3JsZDtcblx0dGhpcy5iMk1hc3NEYXRhID0gQm94MkQuQ29sbGlzaW9uLlNoYXBlcy5iMk1hc3NEYXRhO1xuXHR0aGlzLmIyUG9seWdvblNoYXBlID0gQm94MkQuQ29sbGlzaW9uLlNoYXBlcy5iMlBvbHlnb25TaGFwZTtcblx0dGhpcy5iMkNpcmNsZVNoYXBlID0gQm94MkQuQ29sbGlzaW9uLlNoYXBlcy5iMkNpcmNsZVNoYXBlO1xuXHR0aGlzLmIyRGVidWdEcmF3ID0gQm94MkQuRHluYW1pY3MuYjJEZWJ1Z0RyYXc7IFxuXHR0aGlzLmIyQ29udGFjdExpc3RlbmVyID0gQm94MkQuRHluYW1pY3MuYjJDb250YWN0TGlzdGVuZXI7XG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gbmV3IEIyZDtcblxudmFyIEluY2x1ZGVzID0gcmVxdWlyZShcIi4vSW5jbHVkZXMuanNcIik7IHZhciBpbmNsdWRlX2RhdGEgPSBJbmNsdWRlcy5nZXRfaW5jbHVkZV9kYXRhKHtcblx0Y3VycmVudF9tb2R1bGU6IFwiQjJkXCIsIFxuXHRpbmNsdWRlX29wdGlvbnM6IEluY2x1ZGVzLmNob2ljZXMuT1RIRVJfU1RVRkZcbn0pOyBldmFsKGluY2x1ZGVfZGF0YS5uYW1lX3N0YXRlbWVudHMpOyB2YXIgaW5jbHVkZSA9IGZ1bmN0aW9uKCl7ZXZhbChpbmNsdWRlX2RhdGEubW9kdWxlX3N0YXRlbWVudHMpO31cblxuIiwidmFyIENvbmZpZyA9IGZ1bmN0aW9uKCl7XG5cdHRoaXMuU0NSRUVOX1cgPSAwOyAvLyBzZXQgdXAgd2hlbiB0aGUgcGFnZSBpcyBsb2FkZWQgKHRvIDk1JSBvZiB3aWR0aCBvZiBjb250YWluaW5nIGVsZW1lbnQpIFxuXHR0aGlzLlNDUkVFTl9IID0gNjAwO1xuXG5cdHRoaXMuTUFJTl9DQU5WQVNfTkFNRSA9IFwiZGlzcGxheV9jYW52YXNcIjtcblx0dGhpcy5ERUJVR19DQU5WQVNfTkFNRSA9IFwiZGVidWdfY2FudmFzXCI7XG5cblx0Ly8gRnJhbWVzIFBlciBTZWNvbmQuIEVzc2VudGlhbGx5LCBmcmVxdWVuY3kgb2YgY3JlYXRlanMuVGlja2VyIFxuXHQvLyBXYXJuaW5nISBGcmVxdWVuY3kgb2YgdGhlIEJveDJEIHBoeXNpY3MgdXBkYXRlcyBtYXkgYmUgZGlmZmVyZW50XG5cdC8vIChDdXJyZW50bHkgbm90IGltcGxlbWVudGVkKVxuXHR0aGlzLkZQUyA9IDMwOyBcblx0XG5cdC8vdGhlIG1vdmVtZW50IGVkZ2UsIGNvbnRyb2xzIHRlcnJhaW4gZ2VuZXJhdGlvblxuXHR0aGlzLm1vdmVtZW50X2VkZ2UgPSAwO1xuXG5cdC8vIEJveDJEIHN0dWZmID4+PlxuXHR0aGlzLkIyRCA9IHtcblx0XHRTQ0FMRTogMzAsXG5cdFx0U1BTOiA2MCwgXHRcdFx0Ly8gU3RlcHMgUGVyIFNlY29uZFxuXHRcdFZFTE9DSVRZX0lUUjogOCxcdC8vIHZlbG9jaXR5IGl0ZXJhdGlvbnNcblx0XHRQT1NJVElPTl9JVFI6IDMsXHQvLyBwb3NpdGlvbiBpdGVyYXRpb25zXG5cdFx0ZGVidWdfZHJhdzogZmFsc2Vcblx0fTtcblxuXHR0aGlzLlRlcnJhaW5TbGljZSA9IHtcblx0XHRncmlkX3Jvd3M6IDIwLFxuXHRcdGdyaWRfY29sdW1uczogMjAsXG5cdFx0Y2VsbF93OiAxLCAvLyBpbiBtZXRlcnNcblxuXHRcdC8vIGlzIGF1dG9tYXRpY2FsbHkgaW5jcmVtZW50ZWQgZWFjaCB0aW1lIG5ldyBUZXJyYWluU2xpY2VNb2RlbCBpcyBpbnN0YW50aWF0ZWQ6XG5cdFx0bmV4dF9zbGljZV9pZDogMCBcblx0fTtcblxuXHR0aGlzLldvcmxkID0ge1xuXHRcdG1heHk6IDIyLFxuXG5cdH07XG5cdHRoaXMuUmVtb3RlID0ge1xuXHRcdG1hc3RlcjogZmFsc2UsIC8vIGFtIEkgdGhlIG9uZSB3aXRoIHdob21lIG90aGVyIHBsYXllcnMgc3luYz8gXG5cdFx0Y29ubmVjdGVkOiBmYWxzZSwgLy8gYW0gSSBpbiBtdWx0aXBsYXllciBtb2RlXG5cdH07XG5cdFxuXHR0aGlzLkluaXQgPSB7XG5cdFx0c2Vzc2lvbl9pZDogbnVsbCxcblx0XHRwbGF5ZXJfaWQ6IG51bGwsXG5cdFx0bW9kZTogbnVsbCxcblxuXHRcdC8vIGZvciBtdWx0aXBsYXllciBnYW1lIHlvdSBoYXZlIGNlcnRhaW4gdGltZSBsaW1pdFxuXHRcdC8vIHRvIGpvaW4gdGhlIGdhbWUuIEluIHRoaXMgdGltZSBsaW1pdCBwbGF5ZXJzIHNob3VsZG4ndCBiZSBhYmxlIHRvIGdvIHBhc3Rcblx0XHQvLyBjZXJ0YWluIHBvaW50IG9mIHRoZSBtYXAuXG5cdFx0bW92ZW1lbnRfYmxvY2tlZDogdHJ1ZSxcblx0XHR0aW1lX2xpbWl0OiAxNSwgLy8gc2Vjb25kc1xuXHRcdC8vIHdlIHNob3VsZCBiZWdpbiBhdXRvbWF0aWNhbGx5IGFmdGVyIGV2ZXJ5b25lIGlzIGpvaW5lZFxuXG5cdH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gbmV3IENvbmZpZztcbiIsIlxudmFyIEFzc2V0Q29udHJvbGxlciA9IChmdW5jdGlvbigpe1xuXHQvKlxuXHQgICBBc3NldENvbnRyb2xsZXIgaXMgaW4gY2hhcmdlIG9mIHNldHRpbmcgdXAgYWxsIGJpdG1hcHMvYW5pbWF0aW9ucy9vdGhlciByZXNvdXJjZXNcblx0ICAgZm9yIGV2ZXJ5b25lIGVsc2UuXG4gICAqL1xuXG5cdC8vIHVzZSBBc3NldE1vZGVsLmxvYWRlci5nZXRSZXN1bHQoXCJpZF9vZl90aGVfYXNzZXRcIik7XG5cblx0dmFyIGluaXQgPSBmdW5jdGlvbihhc3NldF9wYXRoKXtcblx0XHRpbmNsdWRlKCk7XHRcblxuXHRcdC8qIFRPRE8gbWFrZSBtb2RlbCB3aXRoIHRoZSBlYXNpbHkgbWFuYWdlZCB0YWJsZXMgb2YgcmVzb3VyY2VzIHdoaWNoIHdpbGwgYmVcblx0XHQgICBhZGRlZCB0byB0aGUgbG9hZGVyIGF1dG9tYXRpY2FsbHlcblx0XHQqL1xuXG5cdFx0Ly9sb2FkZXIgPSBuZXcgY3JlYXRlanMuTG9hZFF1ZXVlKGZhbHNlKTsgLy8gbG9hZGluZyByZXNvdXJzZXMgdXNpbmcgcHJlbG9hZC5qc1xuXHRcdC8vbG9hZGVyLmFkZEV2ZW50TGlzdGVuZXIoXCJjb21wbGV0ZVwiLCBoYW5kbGVDb21wbGV0ZSk7XG5cdFx0dmFyIG1hbmlmZXN0ID0gQXNzZXRNb2RlbC5tYW5pZmVzdDtcdFxuXHRcdEFzc2V0TW9kZWwubG9hZGVyLmxvYWRNYW5pZmVzdChtYW5pZmVzdCwgdHJ1ZSwgYXNzZXRfcGF0aCk7XG5cdFx0XG5cdH07XG5cblx0dmFyIHBvc3RfaW5pdCA9IGZ1bmN0aW9uKCl7XG5cdFx0LyogdGhpcyBmdW5jdGlvbiB3aWxsIGJlIGRvbmUgZGlmZmVyZW50bHkgYXQgc29tZSBwb2ludFxuXHRcdCAqIGl0J2xsIGhhdmUgc29tZXRoaW5nIHRvIGRvIHdpdGggcmVmYWN0b3JpbmcgSW5pdENvbnRyb2xsZXJcblx0XHQgKi9cblxuXHRcdC8vQXNzZXRNb2RlbC5hbmltYXRpb25zW1wiYW50XCJdID0gbmV3IGNyZWF0ZWpzLlNwcml0ZVNoZWV0KHtcblx0XHRcdC8vXCJmcmFtZXJhdGVcIjogMC4yLFxuXHRcdFx0Ly9cImltYWdlc1wiOiBbZ2V0X2Fzc2V0KFwiQW50MVwiKSwgZ2V0X2Fzc2V0KFwiQW50MlwiKSwgZ2V0X2Fzc2V0KFwiQW50M1wiKV0sXG5cdFx0XHQvL1wiZnJhbWVzXCI6IHsgXCJyZWdYXCI6IDMsIFwicmVnWVwiOiA2LCBcImhlaWdodFwiOiAyNSwgXCJ3aWR0aFwiOiA1MCwgXCJjb3VudFwiOiA2fSxcblx0XHRcdC8vXCJhbmltYXRpb25zXCI6IHtcblx0XHRcdFx0Ly9cIndhbGtcIjogWzAsIDEsIFwid2Fsa1wiXSxcblx0XHRcdFx0Ly9cInVwc2lkZV9kb3duXCI6IFsyLCAzLCBcInVwc2lkZV9kb3duXCJdLFxuXHRcdFx0XHQvL1wiZGVhdGhcIjogWzQsIDUsIFwiZGVhdGhcIl1cblx0XHRcdC8vfVxuXHRcdC8vfSlcblxuXHR9O1xuXHRcblxuXHR2YXIgZ2V0X2Fzc2V0ID0gZnVuY3Rpb24oaWQpe1xuXG5cdFx0dmFyIHJlc3VsdCA9IEFzc2V0TW9kZWwubG9hZGVyLmdldFJlc3VsdChpZCk7XG5cblx0XHRpZighcmVzdWx0KXtcblx0XHRcdHRocm93IFwiRXJyb3I6IGFzc2V0IHdpdGggaWQgXCIgKyBpZCArIFwiIGNvdWxkIG5vdCBiZSBsb2FkZWQuXCIgK1xuXHRcdFx0XHRcIiBDaGVjayB0aGF0IGlkIGlzIHZhbGlkIGFuZCB0aGF0IGFzc2V0cyB3ZXJlIHByb3Blcmx5IGxvYWRlZFwiO1xuXHRcdH1cblx0XHRcblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9O1xuXHRcdFxuXG5cblx0XG5cdHJldHVybiB7XG5cdFx0aW5pdDogaW5pdCxcblx0XHRnZXRfYXNzZXQ6IGdldF9hc3NldCxcblx0fTtcblxufSkoKTtcblxubW9kdWxlLmV4cG9ydHMgPSBBc3NldENvbnRyb2xsZXI7XG5cbnZhciBJbmNsdWRlcyA9IHJlcXVpcmUoXCIuLi9JbmNsdWRlcy5qc1wiKTsgdmFyIGluY2x1ZGVfZGF0YSA9IEluY2x1ZGVzLmdldF9pbmNsdWRlX2RhdGEoe1xuXHRjdXJyZW50X21vZHVsZTogXCJBc3NldENvbnRyb2xsZXJcIiwgXG5cdGluY2x1ZGVfb3B0aW9uczogSW5jbHVkZXMuY2hvaWNlcy5ERUZBVUxUXG59KTsgZXZhbChpbmNsdWRlX2RhdGEubmFtZV9zdGF0ZW1lbnRzKTsgdmFyIGluY2x1ZGUgPSBmdW5jdGlvbigpe2V2YWwoaW5jbHVkZV9kYXRhLm1vZHVsZV9zdGF0ZW1lbnRzKTt9XG5cbiIsInZhciBFbnRpdHlDb250cm9sbGVyID0gKGZ1bmN0aW9uICgpIHtcbiAgICAvKiBEZXNjcmlwdGlvblxuICAgICovXG5cbiAgICB2YXIgdHlwZV9sb2dpY190YWJsZTtcblxuICAgIHZhciBDb3VudCA9IDA7XG5cbiAgICB2YXIgaW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLyogaXMgcmFuIGZyb20gdGhlIEluaXRDb250cm9sbGVyIG9uY2Ugd2hlbiB0aGUgZ2FtZSBpcyBsb2FkZWQgKi9cblxuICAgICAgICBpbmNsdWRlKCk7IC8vIHNhdGlzZnkgcmVxdWlyZW1lbnRzXG5cdFx0Ly90eXBlX2xvZ2ljX3RhYmxlID0ge1xuXHRcdC8vXHRcImFudFwiOiBBbnRMb2dpYyxcblx0XHQvL1x0XCJoZXJvXCI6IEhlcm9Mb2dpYyxcblx0XHQvL1x0XCJjb21wYW5pb25cIjogRXN0ZWVtZWRDb21wYW5pb25Mb2dpYyxcblx0XHQvL307XG4gICAgICAgIGNvbnNvbGUubG9nKE1lZHVzYUxvZ2ljKTtcbiAgICAgICAgdHlwZV9sb2dpY190YWJsZSA9IHtcbiAgICAgICAgICAgIFwiYW50XCI6IEFudExvZ2ljLFxuICAgICAgICAgICAgXCJoZXJvXCI6IEhlcm9Mb2dpYyxcbiAgICAgICAgICAgIFwiR3JpZmZpblwiOiBHcmlmZmluTG9naWMsXG4gICAgICAgICAgICBcIkh5ZW5hXCI6IEh5ZW5hTG9naWMsXG5cdFx0XHRcIk1lZHVzYVwiOiBNZWR1c2FMb2dpYyxcbiAgICAgICAgICAgIFwicGl6emFcIjogUGl6emFMb2dpYyxcbiAgICAgICAgfTtcbiAgICAgICAgXG5cbiAgICAgICAgZm9yICh0eXBlIGluIHR5cGVfbG9naWNfdGFibGUpIHtcbiAgICAgICAgICAgIHZhciBsb2dpYyA9IHR5cGVfbG9naWNfdGFibGVbdHlwZV07XG4gICAgICAgICAgICBsb2dpYy5pbml0KCk7XG5cbiAgICAgICAgICAgIGlmIChsb2dpYy5iZWdpbl9jb250YWN0KSB7XG4gICAgICAgICAgICAgICAgUGh5c2ljc0NvbnRyb2xsZXIubGlzdGVuX2Zvcl9jb250YWN0X3dpdGgodHlwZSwgXCJCZWdpbkNvbnRhY3RcIiwgbG9naWMuYmVnaW5fY29udGFjdCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChsb2dpYy5lbmRfY29udGFjdCkge1xuICAgICAgICAgICAgICAgIFBoeXNpY3NDb250cm9sbGVyLmxpc3Rlbl9mb3JfY29udGFjdF93aXRoKHR5cGUsIFwiRW5kQ29udGFjdFwiLCBsb2dpYy5lbmRfY29udGFjdCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChsb2dpYy5wcmVfc29sdmUpIHtcbiAgICAgICAgICAgICAgICBQaHlzaWNzQ29udHJvbGxlci5saXN0ZW5fZm9yX2NvbnRhY3Rfd2l0aCh0eXBlLCBcIlByZVNvbHZlXCIsIGxvZ2ljLnByZV9zb2x2ZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChsb2dpYy5wb3N0X3NvbHZlKSB7XG4gICAgICAgICAgICAgICAgUGh5c2ljc0NvbnRyb2xsZXIubGlzdGVuX2Zvcl9jb250YWN0X3dpdGgodHlwZSwgXCJQb3N0U29sdmVcIiwgbG9naWMucG9zdF9zb2x2ZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIC8vdmFyIHNwYXduID0gZnVuY3Rpb24gKHgsIHksIHR5cGUpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICogc3Bhd24gZW50aXR5IG9mIHRoZSBnaXZlbiB0eXBlIGF0IHRoZSBnaXZlbiBjb29yZGluYXRlc1xuICAgICAgICAqIGFsc28gcmVnaXN0ZXJlcyB0aGluZyBhcyBhd2FpdGluZyBncmFwaGljcyBpbml0aWFsaXphdGlvblxuICAgICAgICAqL1xuICAgICAgICAvL3ZhciBsb2dpYyA9IHR5cGVfbG9naWNfdGFibGVbdHlwZV07XG5cbiAgICAgICAgLy9pZiAobG9naWMpIHtcbiAgICAgICAgICAgIC8vdmFyIG5ld19lbnRpdHkgPSBsb2dpYy5zcGF3bih4LCB5KTtcbiAgICAgICAgICAgIC8vUmVnaXN0ZXJBc0NvbnRyb2xsZXIucmVnaXN0ZXJfYXMoXCJhd2FpdGluZ19ncmFwaGljc19pbml0aWFsaXphdGlvblwiLCBuZXdfZW50aXR5KVxuXG4gICAgICAgICAgICAvL2lmICghRW50aXR5TW9kZWwuZm9yX2xvZ2ljX3VwZGF0ZVt0eXBlXSkge1xuICAgICAgICAgICAgICAgIC8vRW50aXR5TW9kZWwuZm9yX2xvZ2ljX3VwZGF0ZVt0eXBlXSA9IHt9O1xuICAgICAgICAgICAgLy99XG4gICAgICAgICAgICAvL3ZhciBsb2dpY191cGRfdGFibGUgPSBFbnRpdHlNb2RlbC5mb3JfbG9naWNfdXBkYXRlW3R5cGVdO1xuICAgICAgICAgICAgLy9sb2dpY191cGRfdGFibGVbbmV3X2VudGl0eS5pZF0gPSBuZXdfZW50aXR5O1xuICAgICAgICAvL30gZWxzZSB7XG4gICAgICAgICAgICAvL3Rocm93IFwiTG9naWMgZm9yIHRoZSB0eXBlIFwiICsgdHlwZSArIFwiIGlzIG5vdCBkZWZpbmVkXCI7XG4gICAgICAgIC8vfVxuXG5cdC8vfTtcblxuXG5cdHZhciB1cGRhdGUgPSBmdW5jdGlvbihkZWx0YSl7XG5cdFx0LyogaXMgcmFuIGVhY2ggdGljayBmcm9tIHRoZSBHYW1lQ29udHJvbGxlci51cGRhdGVfYWxsICovXG5cdFx0dmFyIGRlYnVnX2NvbW1hbmRzID0gS2V5Ym9hcmRDb250cm9sbGVyLmRlYnVnX2NvbW1hbmRzKCk7XG5cblx0XHQvLyBkZW1vbnN0cmF0aW9uIHB1cnBvc2VzXG5cdFx0aWYoZGVidWdfY29tbWFuZHMoXCJzcGF3bl9hbnRcIikpe1xuXHRcdCAgICBzcGF3bigoTWF0aC5yYW5kb20oKSAqIDUwICsgMTAgKyBXb3JsZENvbnRyb2xsZXIuZ2V0X21vdmVtZW50X2VkZ2UoKSksIDEwLCBcImFudFwiKTtcblx0XHR9XG5cblx0XHRpZiAoZGVidWdfY29tbWFuZHMoXCJzcGF3bl9waXp6YVwiKSkge1xuXHRcdCAgICBzcGF3bigoTWF0aC5yYW5kb20oKSAqIDUwICsgMTAgKyBXb3JsZENvbnRyb2xsZXIuZ2V0X21vdmVtZW50X2VkZ2UoKSksIDE2LCBcInBpenphXCIpO1xuXHRcdH1cblxuXHRcdGlmKGRlYnVnX2NvbW1hbmRzKFwicmVxdWVzdF9oZXJvXCIpICYmICFFbnRpdHlNb2RlbC5oZXJvX3NwYXduZWQpe1xuXHRcdFx0Ly8gaWYgaGVybyBpcyByZXF1ZXN0ZWQsIGFuZCBub3Qgc3Bhd25lZCB5ZXQsXG5cdFx0XHQvLyBzcGF3biBoZXJvXG5cdFx0XHRcblx0XHRcdEVudGl0eU1vZGVsLmhlcm9fc3Bhd25lZCA9IHRydWU7XG5cdFx0XHRzcGF3bihXb3JsZENvbnRyb2xsZXIuZ2V0X21vdmVtZW50X2VkZ2UoKSArIDEwLDEwLCBcImhlcm9cIik7XG5cdFx0fVxuXG5cdFx0aWYgKGRlYnVnX2NvbW1hbmRzKFwic3Bhd25fZ3JpZmZpblwiKSAmJiBDb3VudCA+IDUpIHtcbiAgICAgICAgICAgIHZhciBuZXdfZ3JpZmZpbiA9IHNwYXduKE1hdGgucmFuZG9tKCkgKiA1MCArIFdvcmxkQ29udHJvbGxlci5nZXRfbW92ZW1lbnRfZWRnZSgpLCAtMjAsIFwiR3JpZmZpblwiKTtcbiAgICAgICAgICAgIENvdW50ID0gMDtcbiAgICAgICAgfVxuICAgICAgICBDb3VudCsrO1xuXG4gICAgICAgIGlmIChkZWJ1Z19jb21tYW5kcyhcInNwYXduX2dyaWZmaW5cIikpIHtcbiAgICAgICAgICAgIHZhciBuZXdfZ3JpZmZpbiA9IHNwYXduKE1hdGgucmFuZG9tKCkgKiA1MCArIFdvcmxkQ29udHJvbGxlci5nZXRfbW92ZW1lbnRfZWRnZSgpLCAxMCwgXCJHcmlmZmluXCIpO1xuICAgICAgICB9XG5cblxuICAgICAgICAvLyBkZW1vbnN0cmF0aW9uIHB1cnBvc2VzIGZvciBoeWVuYVxuICAgICAgICBpZiAoZGVidWdfY29tbWFuZHMoXCJzcGF3bl9oeWVuYVwiKSkge1xuICAgICAgICAgICAgdmFyIG5ld19oeWVuYSA9IHNwYXduKE1hdGgucmFuZG9tKCkgKiA1MCArIFdvcmxkQ29udHJvbGxlci5nZXRfbW92ZW1lbnRfZWRnZSgpLCAxMCwgXCJIeWVuYVwiKTtcbiAgICAgICAgfVxuXHRcdFxuXHRcdC8vIGRlbW9uc3RyYXRpb24gcHVycG9zZXMgZm9yIGh5ZW5hXG4gICAgICAgIGlmIChkZWJ1Z19jb21tYW5kcyhcInNwYXduX21lZHVzYVwiKSkge1xuICAgICAgICAgICAgdmFyIG5ld19NZWR1c2EgPSBzcGF3bihNYXRoLnJhbmRvbSgpICogNTAgKyBXb3JsZENvbnRyb2xsZXIuZ2V0X21vdmVtZW50X2VkZ2UoKSwgMTAsIFwiTWVkdXNhXCIpO1xuICAgICAgICB9XG5cdFx0XG5cblx0XHQvKlxuXHRcdC8vVGhpcyBzaG91bGQgYmUgaGFuZGxlZCBpbiB0aGUgdXBkYXRlIG9mIE11bHRpcGxheWVyU3luY1xuXHRcdGlmKENvbmZpZy5SZW1vdGUubWFzdGVyKXsvL2lmIG1hc3RlciwgcGFyc2UgcmVxdWVzdHNcblx0XHRcdE11bHRpcGxheWVyU3luY0NvbnRyb2xsZXIucmVjZWl2ZV9zcGF3bl9yZXF1ZXN0KCk7XG5cdFx0fWVsc2UgaWYoQ29uZmlnLlJlbW90ZS5jb25uZWN0ZWQpey8vaWYgc2xhdmUsIHBhcnNlIG5vdGlmaWNhdGlvbnNcblx0XHRcdE11bHRpcGxheWVyU3luY0NvbnRyb2xsZXIucmVjZWl2ZV9zcGF3bl9ub3RpZmljYXRpb24oKTtcblx0XHR9XG5cdFx0Ki9cblx0XHRmb3IgKHZhciB0eXBlIGluIEVudGl0eU1vZGVsLmZvcl9sb2dpY191cGRhdGUpIHtcbiAgICAgICAgICAgIHZhciB0YWJsZSA9IEVudGl0eU1vZGVsLmZvcl9sb2dpY191cGRhdGVbdHlwZV07XG5cbiAgICAgICAgICAgIHZhciBsb2dpYyA9IHR5cGVfbG9naWNfdGFibGVbdHlwZV07XG4gICAgICAgICAgICBmb3IgKHZhciBpZCBpbiB0YWJsZSkge1xuICAgICAgICAgICAgICAgIHZhciBlbnRpdHkgPSB0YWJsZVtpZF07XG5cbiAgICAgICAgICAgICAgICBpZiAoYmV5b25kX3dvcmxkX2JvdW5kYXJ5KGVudGl0eSkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gaWYgb3V0c2lkZSBib3VuZGFyaWVzIG9mIHRoZSB3b3JsZCwgZGVzcGF3blxuICAgICAgICAgICAgICAgICAgICBlbnRpdHkucG9pbnRfdmFsdWUgPSAwO1xuICAgICAgICAgICAgICAgICAgICBkZXNwYXduKGVudGl0eSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlbnRpdHkudHlwZSA9PSBcImhlcm9cIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgZW50aXR5LmhwID0gMDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcImVudGl0eSBvZiB0eXBlXCIsIHR5cGUsIFwiZGVsZXRlZCBkdWUgdG8gdGhlIHdvcmxkIGJvdW5kYXJ5XCIpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGVsc2UgdGljayBpdHMgQUlcbiAgICAgICAgICAgICAgICAgICAgbG9naWMudGlja19BSShlbnRpdHkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9IC8vIGVuZCBmb3IgaW4gXG5cblx0XHRzeW5jX2hlcm8oKTtcblxuXHR9O1xuXG5cdHZhciBzcGF3biA9IGZ1bmN0aW9uKHgsIHksIHR5cGUpe1xuXHRcdC8qKlxuXHRcdCogc3Bhd24gZW50aXR5IG9mIHR5cGUgPnR5cGU8XG5cdFx0KiBhdCBwb3NpdGlvbiAoeCwgeSlcblx0XHQqICEgbm90aWNlIHRoYXQgaXQgZG9lc24ndCBzcGF3biBlbnRpdHkgZGlyZWN0bHksIGJ1dCBpbnN0ZWFkIHNlbmRzIHRoZSByZXF1ZXN0XG5cdFx0KiAhIGZvciB0aGUgZW50aXR5IGRlbGV0aW9uLCBzbyB1bmRldGVybWluYXRlIGFtb3VudCBvZiB0aW1lIG1heSBwYXNzIGZyb20gdGhlXG5cdFx0KiAhIG1vbWVudCB0aGlzIGZ1bmN0aW9uIHJldHVybmVkLCB1bnRpbCB0aGUgZW50aXR5IGlzIGFjdHVhbGx5IHNwYXduZWRcblx0XHQqIHRoaXMgdGltZSB3aWxsIHVzdWFsbHkgYmUgcmVsYXRpdmVseSBzbWFsbCwgcHJvYmFibHkgMi0yMCB0aWNrcyBvciBzbyBmb3IgbXVsdGlwbGF5ZXJcblx0XHQqL1xuXG5cdFx0TXVsdGlwbGF5ZXJTeW5jQ29udHJvbGxlci5yb3V0ZV9vdXRjb21pbmdfcGFja2V0KHtcblx0XHRcdG9wOiBcInNwYXduXCIsXG5cdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0eDogeCxcblx0XHRcdHk6IHlcblx0XHR9KTtcblx0fTtcblxuXHR2YXIgaGFuZGxlX3NwYXduID0gZnVuY3Rpb24ocGFja2V0KXtcblx0XHQvKipcblx0XHQqIHRha2VzIHRoZSBwYWNrZXQgd2l0aCA+b3A8IFwic3Bhd25cIlxuXHRcdCogY29udGFpbmluZyBwcm9wZXJ0aWVzID54PCwgPnk8LCA+dHlwZTwsIGFuZCBwb3NzaWJseSBtb3JlXG5cdFx0KiBoYW5kbGVzIGNyZWF0aW9uIG9mIHRoZSBlbnRpdHksIGlkIGFzc2lnbm1lbnQsIGV0Yy5cblx0XHQqL1xuXG5cdFx0XG5cdFx0dmFyIHggPSBwYWNrZXQueCxcblx0XHRcdHkgPSBwYWNrZXQueSxcblx0XHRcdHR5cGUgPSBwYWNrZXQudHlwZTtcblxuXHRcdGlmKHR5cGVfbG9naWNfdGFibGVbdHlwZV0gPT0gbnVsbCl7XG5cdFx0XHR0aHJvdyBcIk5vIGxvZ2ljIGZvdW5kIGZvciB0aGUgdHlwZVwiICsgU3RyaW5nKHR5cGUpO1xuXHRcdH1cblxuXHRcdHZhciBsb2dpYyA9IHR5cGVfbG9naWNfdGFibGVbdHlwZV07XG5cdFx0dmFyIGVudGl0eSA9IGxvZ2ljLnNwYXduKHgsIHkpO1xuXG5cdFx0aWYodHlwZSA9PSBcImhlcm9cIil7XG5cdFx0XHQvLyBUT0RPOiBtb3ZlIHRoaXMgd2hvbGUgdGhpbmcgaW50byB0aGUgSGVyb0xvZ2ljLnNwYXduP1xuXHRcdFx0dmFyIHBsYXllcl9pZCA9IHBhY2tldC5wbGF5ZXJfaWQ7XG5cdFx0XHRpZihwbGF5ZXJfaWQgPT0gbnVsbCl7XG5cdFx0XHRcdHRocm93IFwicGxheWVyX2lkIGlzIHVuZGVmaW5lZFwiO1xuXHRcdFx0fVxuXHRcdFx0Ly8gaWRlbnRpZnkgdGhlIGhlcm9cblx0XHRcdGVudGl0eS5wbGF5ZXJfaWQgPSBwbGF5ZXJfaWQ7XG5cdFx0XHQvLyBzdG9yZSBpdCBmb3IgRW50aXR5Q29udHJvbGxlciBwdXJwb3Nlc1xuXHRcdFx0RW50aXR5TW9kZWwuaGVyb2VzW3BsYXllcl9pZF0gPSBlbnRpdHk7XG5cdFx0fVxuXG5cdFx0SWRlbnRpZmljYXRpb25Db250cm9sbGVyLmFzc2lnbl9pZChlbnRpdHkpO1xuXG5cdFx0cmVnX2Zvcl9sb2dpY191cGRhdGUoZW50aXR5KTtcblxuXHRcdFJlZ2lzdGVyQXNDb250cm9sbGVyLnJlZ2lzdGVyX2FzKFwiYXdhaXRpbmdfZ3JhcGhpY3NfaW5pdGlhbGl6YXRpb25cIiwgZW50aXR5KVxuXHR9O1xuXHRcblx0XG5cblx0Ly90YWtlcyBhIHN0cmluZyB0eXBlIGluZGV4IGFzIHBhcmFtZXRlciBcblx0Ly9hbmQgcmV0dXJucyB0aGUgc3Bhd24oKSBmdW5jdGlvbiBhc3NvY2lhdGVkIHdpdGggaXRcblx0Ly92YXIgZ2V0X29wZXJhdGlvbiA9IGZ1bmN0aW9uKHR5cGUpe1xuXHRcdC8vdmFyIHNwYXduID0gdHlwZV9sb2dpY190YWJsZVt0eXBlXS5zcGF3bjtcblx0XHQvL3JldHVybiBzcGF3bjtcblx0Ly99O1xuXHRcblx0Ly9yZWdpc3RlcnMgYSBuZXcgaW5zdGFuY2Vcblx0Ly9zbyB0aGF0IHJlbmRlcmVycyBhbmQgdXBkYXRlcnMga25vdyB0byB1cGRhdGUgaXQgb24gdGlja1xuXHR2YXIgcmVnX2Zvcl9sb2dpY191cGRhdGUgPSBmdW5jdGlvbihuZXdfZW50aXR5KXtcblx0XHR2YXIgdHlwZSA9IG5ld19lbnRpdHkudHlwZTtcblxuXHRcdGlmKHR5cGUgPT0gbnVsbCl7XG5cdFx0XHRjb25zb2xlLmxvZyhuZXdfZW50aXR5KTtcblx0XHRcdHRocm93IFwiVHlwZSBpcyB1bmRlZmluZWQgZm9yIHRoaXMgZW50aXR5XCI7XG5cdFx0fVxuXG5cdFx0aWYoIUVudGl0eU1vZGVsLmZvcl9sb2dpY191cGRhdGVbdHlwZV0pe1xuXHRcdFx0RW50aXR5TW9kZWwuZm9yX2xvZ2ljX3VwZGF0ZVt0eXBlXSA9IHt9O1xuXHRcdH1cblx0XHR2YXIgbG9naWNfdXBkX3RhYmxlID0gRW50aXR5TW9kZWwuZm9yX2xvZ2ljX3VwZGF0ZVt0eXBlXTtcblx0XHRsb2dpY191cGRfdGFibGVbbmV3X2VudGl0eS5pZF0gPSAgbmV3X2VudGl0eTtcblx0XHRcblx0fTtcblx0XG5cdC8vd3JhcHBlciBmb3IgdW5pdmVyc2FsIHNwYXduXG5cdC8vbWFpbnRhaW5zIHRoZSBvbGQgaW50ZXJmYWNlXG5cdC8vdmFyIHNwYXduID0gZnVuY3Rpb24odHlwZSx4LHkpe1xuXHRcdC8vTXVsdGlwbGF5ZXJTeW5jQ29udHJvbGxlci5oYW5kbGVfc3Bhd24oe3R5cGU6dHlwZSx4OngseTp5fSk7XG5cdC8vfTtcblx0XG5cdHZhciBkZWxldGVfZW50aXR5ID0gZnVuY3Rpb24oZW50aXR5X2luc3RhbmNlKXtcblx0XHQvKipcblx0XHQqIFRoaXMgZnVuY3Rpb24gaXMgc3VwcG9zZWQgdG8gYmUgY2FsbGVkIGJ5IHRoZSBpbmRpdmlkdWFsIGxvZ2ljIG1vZHVsZXMsIHdoZW4gdGhlIGFyZSBmaW5pc2hlZFxuXHRcdCogYW5pbWF0aW5nIGRlYXQvZGVzdHJ1Y3Rpb24gb2Ygc29tZXRoaW5nIGFuZCB3YW50IHRvIGdldCByaWQgb2YgaXQsIG9yIGluIG90aGVyIGNpcmN1bXN0YW5jZXMsXG5cdFx0KiB3aGVuIGVudGl0eSBzaG91bGQgYmUgaW1tZWRpYXRlbHkgZGVsZXRlZCBmcm9tIHRoZSB3b3JsZFxuXHRcdCogISBub3RpY2UgdGhhdCBpdCBkb2Vzbid0IGRlbGV0ZSBlbnRpdHkgZGlyZWN0bHksIGJ1dCBpbnN0ZWFkIHNlbmRzIHRoZSByZXF1ZXN0XG5cdFx0KiAhIGZvciB0aGUgZW50aXR5IGRlbGV0aW9uLCBzbyB1bmRldGVybWluYXRlIGFtb3VudCBvZiB0aW1lIG1heSBwYXNzIGZyb20gdGhlXG5cdFx0KiAhIG1vbWVudCB0aGlzIGZ1bmN0aW9uIHJldHVybmVkLCB1bnRpbCB0aGUgZW50aXR5IGlzIGFjdHVhbGx5IGRlbGV0ZWRcblx0XHQqIHRoaXMgdGltZSB3aWxsIHVzdWFsbHkgYmUgcmVsYXRpdmVseSBzbWFsbCwgcHJvYmFibHkgMi0yMCB0aWNrcyBvciBzbyBmb3IgbXVsdGlwbGF5ZXJcblx0XHQqL1xuXG5cdFx0TXVsdGlwbGF5ZXJTeW5jQ29udHJvbGxlci5yb3V0ZV9vdXRjb21pbmdfcGFja2V0KHtcblx0XHRcdG9wOiBcImRlbGV0ZV9lbnRpdHlcIixcblx0XHRcdGlkOiBlbnRpdHlfaW5zdGFuY2UuaWQsXG5cdFx0XHR0eXBlOiBlbnRpdHlfaW5zdGFuY2UudHlwZSxcblx0XHR9KTtcblxuXHR9O1xuXHRcblx0dmFyIGhhbmRsZV9kZWxldGUgPSBmdW5jdGlvbihwYWNrZXQpe1xuXHRcdC8qKlxuXHRcdCogVGhpcyBmdW5jdGlvbiB3aWxsIHJlbW92ZSB0aGlzIGVudGl0eSBhbG9uZyB3aXRoIHNvbWUgb3RoZXIgaW5mbyBhYm91dCB0aGlzIGVudGl0eVxuXHRcdCogZnJvbSB0aGUgd29ybGQsIGl0J2xsIGFsc28gZnJlZSB0aGUgaWQgb2YgdGhpcyBlbnRpdHkuIFRoZSBwaHlzaWNhbCBib2R5IHdpbGwgYmUgZGVsZXRlZFxuXHRcdCogdG9vOyBcblx0XHQqL1xuXG5cdFx0dmFyIGVudGl0eV9pbnN0YW5jZSA9IEVudGl0eU1vZGVsLmZvcl9sb2dpY191cGRhdGVbcGFja2V0LnR5cGVdW3BhY2tldC5pZF07XG5cblx0XHRpZihlbnRpdHlfaW5zdGFuY2UgPT0gbnVsbCl7XG5cdFx0XHQvLyBpZiBubyBzdWNoIGVudGl0eSxcblx0XHRcdC8vIHByb2JhYmx5IGl0IHdhcyBhbHJlYWR5IGRlbGV0ZWQgdGhyb3VnaCBvdGhlciBtZWFucyxcblx0XHRcdC8vIHRodXMgYWJvcnRcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFxuXHRcdHZhciB0eXBlID0gZW50aXR5X2luc3RhbmNlLnR5cGU7XG5cdFx0aWYodHlwZSA9PSBudWxsKXtcblx0XHRcdGNvbnNvbGUubG9nKGVudGl0eV9pbnN0YW5jZSk7XG5cdFx0XHR0aHJvdyBcInR5cGUgaXMgdW5kZWZpbmVkIGZvciB0aGlzIGVudGl0eVwiO1xuXHRcdH1cblxuXHRcdHZhciBpZCA9IGVudGl0eV9pbnN0YW5jZS5pZDtcblx0XHRpZihpZCA9PSBudWxsKXtcblx0XHRcdGNvbnNvbGUubG9nKGVudGl0eV9pbnN0YW5jZSk7XG5cdFx0XHR0aHJvdyBcImlkIGlzIHVuZGVmaW5lZCBmb3IgdGhpcyBlbnRpdHlcIjtcblx0XHR9XG5cdFx0XG5cblx0XHQvLyBUT0RPOiBmaW5pc2ggdGhpcyBmdW5jdGlvbiBhbmQgdGhlbiB1cGRhdGUgaXQgcmVndWxhcmx5O1xuXHRcdC8vIFRoaXMgb25lIGlzIHZlcnkgc2Vuc2l0aXZlLCBhcyBldmVuIG9uZSByZWZlcmVuY2UgbGVmdCBtYXkgcHJldmVudCBcblx0XHQvLyBvYmplY3QgZnJvbSBiZWluZyBkZWxldGVkIGFuZCBjYXVzZSBtZW1vcnkgbGVha3MuIFRlc3RpbmcgaXMgcmVxdWlyZWRcblx0XHRpZihlbnRpdHlfaW5zdGFuY2UuYm9keSAhPSBudWxsKXtcblx0XHRcdHZhciBib2R5ID0gZW50aXR5X2luc3RhbmNlLmJvZHk7XG5cdFx0fWVsc2V7XG5cdFx0XHQvLyBib2R5IGlzIHJlcXVpcmVkLiBpZiBwbGFjZSB3aGVyZSBib2R5IGlzIHN0b3JlZCBjaGFuZ2VkLCB5b3Ugc2hvdWxkIHVwZGF0ZSB0aGlzIGZ1bmN0aW9uXG5cdFx0XHR0aHJvdyBcIkJvZHkgb2YgdGhlIGluc3RhbmNlIGlzIHVuZGVmaW5lZFwiXG5cdFx0fVxuXHRcdC8vIHJlbW92ZSBncmFwaGljc1xuXHRcdFx0UmVnaXN0ZXJBc0NvbnRyb2xsZXIucmVnaXN0ZXJfYXMoXCJyZW1vdmVkX2VudGl0eVwiLCBlbnRpdHlfaW5zdGFuY2UpO1xuXHRcdC8vIHJlbW92ZSBwaHlzaWNzXG5cdFx0XHRQaHlzaWNzQ29udHJvbGxlci5yZW1vdmVfYm9keShib2R5KTtcblx0XHQvLyByZW1vdmUgc3RvcmVkIHJlZmVyZW5jZXMgd2l0aGluIEVudGl0eUNvbnRyb2xsZXIvTW9kZWxcblx0XHRcdGRlbGV0ZSBFbnRpdHlNb2RlbC5mb3JfbG9naWNfdXBkYXRlW3R5cGVdW2lkXTtcblx0XHRcdGlmKHR5cGUgPT0gXCJoZXJvXCIpe1xuXHRcdFx0XHRkZWxldGUgRW50aXR5TW9kZWwuaGVyb2VzW2VudGl0eV9pbnN0YW5jZS5wbGF5ZXJfaWRdO1xuXHRcdFx0XHRFbnRpdHlNb2RlbC5oZXJvX3NwYXduZWQgPSBmYWxzZTtcblx0XHRcdH1cblx0XHQvLyBmcmVlIHRoZSBpZFxuXHRcdFx0SWRlbnRpZmljYXRpb25Db250cm9sbGVyLnJlbW92ZV9pZChpZCk7XG5cdH07XG5cblxuICAgIHZhciBkZXNwYXduID0gZnVuY3Rpb24gKGVudGl0eSkge1xuICAgICAgICAvKipcbiAgICAgICAgICogdGhpcyBmdW5jdGlvbiB3aWxsIGRlc3Bhd24gZ2l2ZW4gZW50aXR5XG4gICAgICAgICAqIGluIG9uZSBvZiB0d28gd2F5czpcbiAgICAgICAgICogaWYgZW50aXR5IGhhcyBkZXNwYXduIGZ1bmN0aW9uLCBpdCB3aWxsIGJlIGNhbGxlZFxuICAgICAgICAgKiBpZiBub3QsIGVudGl0eSB3aWxsIGJlIGRlbGV0ZWQgZGlyZWN0bHlcbiAgICAgICAgKi9cblxuICAgICAgICB2YXIgdHlwZSA9IGVudGl0eS50eXBlO1xuICAgICAgICB2YXIgaWQgPSBlbnRpdHkuaWQ7XG5cblxuICAgICAgICBpZiAoZW50aXR5LmRpZSkge1xuICAgICAgICAgICAgLy8gaWYgY3VzdG9tIGRlc3Bhd24gZnVuY3Rpb24gaXMgcHJvdmlkZWQsIGNhbGwgaXRcblx0XHRcdGVudGl0eS5kaWUoKTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiZGllIGNhbGxlZCBmb3IgdGhlIHR5cGVcIiwgdHlwZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBvciBkZWxldGUgZGlyZWN0bHlcbiAgICAgICAgICAgIGRlbGV0ZV9lbnRpdHkoZW50aXR5KTtcblx0XHRcdGNvbnNvbGUud2FybihcImRpZSBmdW5jdGlvbiBub3QgZGVmaW5lZCBmb3IgdGhlIGVudGl0eSBvZiB0eXBlXCIsIHR5cGUpO1xuICAgICAgICB9XG5cbiAgICB9O1xuXG5cbiAgICB2YXIgYmV5b25kX3dvcmxkX2JvdW5kYXJ5ID0gZnVuY3Rpb24gKGVudGl0eSkge1xuICAgICAgICAvKipcbiAgICAgICAgKiBjaGVja3MgaWYgdGhlIGVudGl0eSBpcyBiZXlvbmQgb25lIG9mIHRoZSB3b3JsZCBib3VuZGFyaWVzLFxuICAgICAgICAqL1xuICAgICAgICB2YXIgYm9keSA9IGVudGl0eS5ib2R5O1xuICAgICAgICByZXR1cm4gKGJvZHkuR2V0V29ybGRDZW50ZXIoKS54IDwgV29ybGRDb250cm9sbGVyLmdldF9tb3ZlbWVudF9lZGdlKCkgfHxcbiAgICAgICAgICAgIGJvZHkuR2V0V29ybGRDZW50ZXIoKS55ID4gQ29uZmlnLldvcmxkLm1heHkpO1xuXG4gICAgfTtcblx0XHRcblx0XHRcblx0dmFyIGNyZWF0ZV9hYnN0cmFjdF9lbnRpdHkgPSBmdW5jdGlvbigpe1xuXHRcdHJldHVybiBuZXcgQWJzdHJhY3RFbnRpdHkoKTtcblx0fTtcblx0XHRcblx0XHRcblx0LyoqXG5cdGNsYXNzIEFic3RyYWN0RW50aXR5XG5cdG1lbWJlciBmdW5jdGlvbnM6XG5cdFx0Ly9udW1iZXJzIGFyZSBnaXZlbiBpbiBtZXRlcnMgcmF0aGVyIHRoYW4gcGl4ZWxzIGV4Y2VwdCB3aGVyZSBub3RlZCAoMSBtZXRlciA9IDMwIHBpeGVscylcblx0XHRWT0lEIGp1bXAoZG91YmxlIHgsIGRvdWJsZSB5KVxuXHRcdFx0XHRcdGFwcGxpZXMgYW4gaW1wdWxzZSB3aXRoIHhfY29tcG9uZW50IHggYW5kIHlfY29tcG9uZW50IHlcblx0XHRWT0lEIGp1bXBfZGlyZWN0aW9uKGRvdWJsZSBhbmdsZSwgZG91YmxlIGZvcmNlKVxuXHRcdFx0XHRcdHdoZXJlIGFuZ2xlIGlzIGluIGRlZ3JlZXMuIGNhbGxzIGp1bXAgaW50ZXJuYWxseVxuXHRcdFZPSUQgbW92ZShkb3VibGUgc3BlZWQpXG5cdFx0XHRcdFx0Y2F1c2VzIHRoZSBlbnRpdHkgdG8gbW92ZSBob3Jpem9udGFsbHkgYXQgc3BlZWQvdGljay4gXG5cdFx0Qk9PTCBlbmVteV9pbl9yYW5nZVxuXHRcdFx0XHRcdHJldHVybnMgdHJ1ZSBpZiBhbnkgaGVybyBpcyB3aXRoaW4gcmFuZ2UgKHggYXhpcyBvbmx5KVxuXHRcdEJPT0wgZGlyZWN0aW9uX25lYXJlc3RfZW5lbXkoKVxuXHRcdFx0XHRcdHJldHVybnMgdHJ1ZSAocmlnaHQpIGlmIHRoZSBuZWFyZXN0IGVuZW15IGlzIHRvIHRoZSByaWdodCwgZWxzZSByZXR1cm5zIGZhbHNlIChsZWZ0KVxuXHRcdFZPSUQgdGFrZV9kYW1hZ2UoKVxuXHRcdFx0XHRcdGNoZWNrcyBpZiBkYW1hZ2UgaGFzIGJlZW4gZGVhbHQgdGhpcyB0aWNrIGFuZCByZXNvbHZlcyBpdCBcblx0XHRWT0lEIGRpZSgpXG5cdFx0XHRcdFx0c2hvdWxkIGJlIGNhbGxlZCBlYWNoIHRpY2sgdGhhdCBocCA8PSAwLiBoYW5kbGVzIGRlYXRoIGFuZCBkZWNheVxuXHRcdGIyZEZpeHR1cmUgZ2V0X2ZpeHR1cmUoc3RyaW5nIG5hbWUpXG5cdFx0XHRcdFx0Z2l2ZW4gYSBuYW1lLCByZXR1cm5zIHRoZSBmaXJzdCBmaXh0dXJlIGluIGVudGl0eS5ib2R5IHdpdGggbWF0Y2hpbmcgbmFtZS4gZGVmYXVsdCBuYW1lcyBhcmUgXCJ0b3BcIiwgXCJib3R0b21cIiwgXCJsZWZ0XCIsIFwicmlnaHRcIiwgYW5kIFwibWFpblwiLlxuXHRcdEJPT0wgbW92ZW1lbnRfdm9sdW50YXJ5KClcblx0XHRcdFx0XHRyZXR1cm5zIHRydWUgaWYgdGhlIG9iamVjdCBpcyBtb3ZpbmcgaW4gdGhlIHNhbWUgZGlyZWN0aW9uIGl0IGlzIGZhY2luZywgZWxzZSBmYWxzZVxuXHRcdEJPT0wgaW5fYWlyKClcblx0XHRcdFx0XHRyZXR1cm5zIHRydWUgaWYgdGhlcmUgYXJlIG5vIG9iamVjdHMgaW1tZWRpYXRlbHkgYmVsb3cgdGhlIGVudGl0eSwgZWxzZSBmYWxzZVxuXHRcdEJPT0wgcGF0aF9mcmVlKClcblx0XHRcdFx0XHRyZXR1cm5zIHRydWUgaWYgdGhlaXIgaXMgYW4gb2JqZWN0IGltbWVkaWF0ZWx5IGFkamFjZW50IHRvIHRoZSBlbnRpdHkgaW4gdGhlIGN1cnJlbnRseSBmYWNlZCBkaXJlY3Rpb25cblx0XHRWT0lEIGNoYW5nZV9hbmltYXRpb24oc3RyaW5nIGFuaW1hdGlvbl9pZClcblx0XHRcdFx0XHRzZXRzIHRoZSBhbmltYXRpb24gZm9yIHRoZSBlbnRpdHksIGFuZCBlbnN1cmVzIHRoYXQgdGhlIGFuaW1hdGlvbiB3aWxsIG5vdCBiZSBjb250aW51b3VzbHkgcmVzZXQuXG5cdCovXG5cdHRoaXMuQWJzdHJhY3RFbnRpdHkgPSBmdW5jdGlvbigpe1xuXHRcdHRoaXMuaHAgPSAyO1xuXHRcdHRoaXMuc3BlZWQgPSA3O1xuXHRcdHRoaXMuanVtcF9mb3JjZSA9IDEyNTtcblx0XHR0aGlzLmRhbWFnZSA9IDU7XG5cdFx0dGhpcy5wb2ludF92YWx1ZSA9IDIwMDtcblx0XHR0aGlzLnNpZ2h0X3JhbmdlID0gMTY7IC8vZGlzdGFuY2UgYXQgd2hpY2ggZW50aXR5IGRldGVjdHMgaGVyb2VzXG5cdFx0dGhpcy5hdHRhY2tfcmFuZ2UgPSA4OyAvL2Rpc3RhbmNlIGF0IHdoaWNoIGVudGl0eSBsZWFwcyBhdCB0aGUgaGVyb1xuXHRcdFxuXHRcdHRoaXMuaGl0X3Rha2VuID0gZmFsc2U7IC8vd2hldGhlciBhIGhpdCBoYXMgYmVlbiB0YWtlbiBzaW5jZSB0aGUgbGFzdCB0aWNrXG5cdFx0dGhpcy5kYW1hZ2VfdGFrZW4gPSAwOyAvL3RoZSBhbW91bnQgb2YgZGFtYWdlIGluZmxpY3RlZCBieSBoaXRzIHNpbmNlIHRoZSBsYXN0IHRpY2tcblx0XHRcblx0XHR0aGlzLmRpcmVjdGlvbiA9IGZhbHNlO1x0Ly9mYWxzZT1sZWZ0LCB0cnVlPXJpZ2h0O1xuXHRcdHRoaXMuZGlyZWN0aW9uX3ByZXZpb3VzID0gZmFsc2U7Ly9zdG9yZSBkaXJlY3Rpb24gZnJvbSBlbmQgb2YgcHJldmlvdXMgdGlja1xuXHRcdHRoaXMueF9wcmV2aW91cyA9IDA7XHRcdC8vc3RvcmUgeCB2YWx1ZSBmcm9tIGVuZCBvZiBwcmV2aW91cyB0aWNrXG5cdFx0dGhpcy55X3ByZXZpb3VzID0gMDtcdFx0Ly9zdG9yZSB4IHZhbHVlIGZyb20gZW5kIG9mIHByZXZpb3VzIHRpY2tcblx0XHRcblx0XHR0aGlzLmlzX2lkbGUgPSB0cnVlOyAvL2RldGVybWluZXMgd2hldGhlciBlbnRpdHkgaXMgYWdncmVzc2l2ZSBvciBpZGxlXG5cdFx0dGhpcy5pZGxlX2R1cmF0aW9uID0gNDA7IC8vIHRpbWUgYnVmZmVyIGJldHdlZW4gY2hhbmdpbmcgaWRsZSBzdGF0ZXNcblx0XHR0aGlzLmlkbGVfdGltZXIgPSB0aGlzLmlkbGVfZHVyYXRpb247XG5cdFx0dGhpcy5pZGxlX2NvdW50ZXIgPSAwOyAvL3VzZWQgdG8gbWFuYWdlIHRoZSBudW1iZXIgb2YgdGltZXMgdGhlIGVudGl0eSBoYXMgY2hhbmdlZCBzdGF0ZSB3aGlsZSBpZGxlXG5cdFx0dGhpcy5pc19hbGl2ZSA9IHRydWU7IC8vZGlzYWJsZXMgYXR0YWNraW5nIGFuZCBwbGF5cyBkZWF0aCBhbmltYXRpb24gd2hpbGUgZmFsc2Vcblx0XHR0aGlzLmRlYXRoX2R1cmF0aW9uID0gMzA7Ly90aW1lIGJldHdlZW4gZGVhdGggYW5kIGRlbGV0aW9uXG5cdFx0dGhpcy5kZWNheV9kdXJhdGlvbiA9IDIwOy8vdGltZSBiZXR3ZWVuIGRlY2F5IGFuaW1hdGlvbiBhbmQgZGVsZXRpb25cblx0XHR0aGlzLmRlYXRoX3RpbWVyID0gLTE7XG5cdFx0dGhpcy5ydW5uaW5nX2F3YXkgPSBmYWxzZTsgLy93aGV0aGVyIHRoZSBlbnRpdHkgaXMgcnVubmluZyBhd2F5XG5cdFx0dGhpcy5ydW5fYXdheV9kdXJhdGlvbiA9IDMwOyAvL3NldCBjb3dhcmRpY2UgbGV2ZWxcblx0XHR0aGlzLnJ1bl9hd2F5X3RpbWVyID0gLTE7XG5cdFx0dGhpcy5jYW5fYXR0YWNrID0gdHJ1ZTtcdC8vd2hldGhlciBhdHRhY2tpbmcgaXMgZW5hYmxlZFxuXHRcdHRoaXMuYXR0YWNrX2Nvb2xkb3duID0gMTA7IC8vYXR0YWNrIGNvb2xkb3duXG5cdFx0dGhpcy5hdHRhY2tfY29vbGRvd25fdGltZXIgPSAtMTtcblx0XHR0aGlzLmNhbl9sZWFwID0gdHJ1ZTtcdFx0Ly9sZWFwaW5nIGVuYWJsZWRcblx0XHR0aGlzLmxlYXBfY29vbGRvd24gPSA0MDsvL21pbmltdW0gdGltZSBiZXR3ZWVuIGxlYXBzXG5cdFx0dGhpcy5sZWFwX2Nvb2xkb3duX3RpbWVyID0gLTE7IFxuXHRcdHRoaXMuY2hhcmdlX2R1cmF0aW9uID0gODA7Ly9tYXhpbXVtIGxlbmd0aCBvZiBhIGNoYXJnZVxuXHRcdHRoaXMuY2hhcmdlX3RpbWVyID0gdGhpcy5jaGFyZ2VfZHVyYXRpb247XG5cdFx0dGhpcy5jaGFyZ2VfY29vbGRvd24gPSAyMDsvL21pbmltdW0gdGltZSBiZXR3ZWVuIGNoYXJnZXNcblx0XHR0aGlzLmNoYXJnZV9jb29sZG93bl90aW1lciA9IC0xO1xuXHRcdHRoaXMuYmxpbmtpbmcgPSBmYWxzZTtcdC8vd2hldGhlciBlbnRpdHkgaXMgYmxpbmtpbmdcblx0XHR0aGlzLmJsaW5rX2R1cmF0aW9uID0gMjA7Ly9ob3cgbG9uZyB0aGUgZW50aXR5IGJsaW5rcyBhZnRlciB0YWtpbmcgZGFtYWdlXG5cdFx0dGhpcy5ibGlua190aW1lciA9IC0xO1xuXHRcdHRoaXMubWFpbnRlbmFuY2VfZnJlcXVlbmN5ID0gMjA7Ly90aWNrcyBiZXR3ZWVuIHJvdXRpbmUgbWFpbnRlbmFuY2UgY2hlY2tzXG5cdFx0dGhpcy5tYWludGVuYW5jZV90aW1lciA9IHRoaXMubWFpbnRlbmFuY2VfZnJlcXVlbmN5O1xuXHRcdFxuXHRcdHRoaXMucGF0aF9ibG9ja2VkID0gZmFsc2U7Ly9pcyB0aGlzIGRlcHJlY2F0ZWQ/IHNldCBkdXJpbmcgY29sbGlzaW9uXG5cdFx0dGhpcy5vYnN0cnVjdGlvbl90b2xlcmFuY2UgPSA0Oy8vaG93IG1hbnkgdGltZXMgdGhlIGVudGl0eSBjYW4gYmUgYmxvY2tlZCBiZWZvcmUgaGUgdGFrZXMgYWN0aW9uXG5cdFx0dGhpcy5ibG9ja2VkX2NvdW50ID0gMDsvL3RyYWNrcyBudW1iZXIgb2YgdGltZXMgYmxvY2tlZCBiZXR3ZWVuIG1haW50ZW5hbmNlIGNoZWNrc1xuXHRcdFxuXHRcdHRoaXMubmVlZHNfZ3JhcGhpY3NfdXBkYXRlID0gZmFsc2U7IC8vYWNjZXNzZWQgYnkgcmVuZGVyZXIgZm9yIGFuaW1hdGlvbiBwdXJwb3Nlc1xuXHRcdHRoaXMuYW5pbWF0aW9uID0gXCJzdGFuZFwiOyAvL2FjY2Vzc2VkIGJ5IHJlbmRlcmVyIGZvciBhbmltYXRpb24gcHVycG9zZXNcblx0XHRcblx0XHQvL2Jvb3N0IGVudGl0eVxuXHRcdHRoaXMuanVtcCA9IGZ1bmN0aW9uKHgseSl7XG5cdFx0XHR2YXIgYm9keSA9IHRoaXMuYm9keTtcblx0XHRcdHZhciBkaXJlY3Rpb24gPSBuZXcgQjJkLmIyVmVjMih4LCB5KTtcblx0XHRcdGJvZHkuQXBwbHlJbXB1bHNlKGRpcmVjdGlvbiwgYm9keS5HZXRXb3JsZENlbnRlcigpKTtcblx0XHR9O1xuXHRcdFxuXHRcdC8vY29udmVydHMgYW5nbGUgYW5kIGZvcmNlIGludG8geCBhbmQgeSwgdGhlbiBjYWxscyBqdW1wXG5cdFx0dGhpcy5qdW1wX2RpcmVjdGlvbiA9IGZ1bmN0aW9uKGFuZ2xlLGZvcmNlKXtcblx0XHRcdHZhciB4LHk7XG5cdFx0XHRhbmdsZSA9ICgoYW5nbGUlMzYwKSpNYXRoLlBJKS8xODA7XG5cdFx0XHR4ID0gZm9yY2UqTWF0aC5jb3MoYW5nbGUpO1xuXHRcdFx0eSA9IGZvcmNlKk1hdGguc2luKGFuZ2xlKTtcblx0XHRcdHRoaXMuanVtcCh4LHkpO1xuXHRcdH07XG5cdFx0XG5cdFx0XG5cdFx0Ly9tb3ZlIHNwZWVkIGluIGN1cnJlbnQgZGlyZWN0aW9uXG5cdFx0dGhpcy5tb3ZlID0gZnVuY3Rpb24oc3BlZWQpe1xuXHRcdFx0dmFyIGRpciA9ICh0aGlzLmRpcmVjdGlvbioyLTEpO1xuXHRcdFx0dmFyIHZlbG9jaXR5ID0gdGhpcy5ib2R5LkdldExpbmVhclZlbG9jaXR5KCk7XG5cdFx0XHR2ZWxvY2l0eS54ID0gc3BlZWQqZGlyOyBcblx0XHRcdHRoaXMuYm9keS5TZXRMaW5lYXJWZWxvY2l0eSh2ZWxvY2l0eSk7XG5cdFx0XHR0aGlzLmJvZHkuU2V0QXdha2UodHJ1ZSk7XG5cdFx0fTtcblx0XHRcdFxuXHRcdC8vY2hlY2sgZm9yIGVuZW1pZXMgaW4gcmFuZ2UgKHZpc2lvbiBvciBqdW1wKVxuXHRcdHRoaXMuZW5lbXlfaW5fcmFuZ2UgPSBmdW5jdGlvbihyYW5nZSl7XG5cdFx0XHR2YXIgaGVyb194O1xuXHRcdFx0dmFyIG91dHB1dCA9IGZhbHNlO1xuXHRcdFx0Lypcblx0XHRcdC8vTXVsdGlwbGF5ZXJcblx0XHRcdHZhciBoZXJvX2xpc3QgPSBFbnRpdHlDb250cm9sbGVyLmdldF9hbGxfaGVyb2VzKCk7XG5cdFx0XHRpZihoZXJvX2xpc3QubGVuZ3RoICE9IG51bGwpe1xuXHRcdFx0XHRmb3IgKGk9MDsgaTxoZXJvX2xpc3QubGVuZ3RoOyBpKyspe1xuXHRcdFx0XHRcdGlmKGhlcm9fbGlzdFtpXSAhPSBudWxsKXtcblx0XHRcdFx0XHRcdGhlcm9feCA9IGhlcm9fbGlzdFtpXS5ib2R5LkdldFdvcmxkQ2VudGVyKCkueFxuXHRcdFx0XHRcdFx0aWYoTWF0aC5hYnMoaGVyb194IC0gdGhpcy5ib2R5LkdldFdvcmxkQ2VudGVyKCkueCkgPCByYW5nZSl7XG5cdFx0XHRcdFx0XHRcdG91dHB1dCA9IHRydWU7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fWVsc2UgaWYoRW50aXR5Q29udHJvbGxlci5nZXRfbXlfaGVybygpICE9IG51bGwpe1xuXHRcdFx0Ki9cblx0XHRcdHZhciBoZXJvID0gRW50aXR5Q29udHJvbGxlci5nZXRfbXlfaGVybygpO1xuXHRcdFx0aWYoaGVybyAhPSBudWxsKXtcblx0XHRcdFx0aGVyb194ID0gaGVyby5ib2R5LkdldFdvcmxkQ2VudGVyKCkueDtcblx0XHRcdFx0b3V0cHV0ID0gKE1hdGguYWJzKGhlcm9feCAtIHRoaXMuYm9keS5HZXRXb3JsZENlbnRlcigpLngpIDwgcmFuZ2UpO1xuXHRcdFx0fVxuXHRcdFx0Lypcblx0XHRcdH1cblx0XHRcdCovXG5cdFx0XHRyZXR1cm4gb3V0cHV0O1xuXHRcdH07XG5cdFx0XG5cdFx0Ly9yZXR1cm5zIHRoZSBkaXJlY3Rpb24gb2YgbmVhcmVzdCBlbmVteVxuXHRcdHRoaXMuZGlyZWN0aW9uX25lYXJlc3RfZW5lbXkgPSBmdW5jdGlvbigpe1xuXHRcdFx0Lypcblx0XHRcdC8vaW4gbXVsdGlwbGF5ZXIsIGZpcnN0IGZpbmQgbmVhcmVzdCBlbmVteVxuXHRcdFx0dmFyIG5lYXJlc3QsIGhlcm9feDsgXG5cdFx0XHR2YXIgZGlzdGFuY2UgPSAwO1xuXHRcdFx0dmFyIHggPSB0aGlzLmJvZHkuR2V0V29ybGRDZW50ZXIoKS54O1xuXHRcdFx0dmFyIGhlcm9fbGlzdCA9IEVudGl0eUNvbnRyb2xsZXIuZ2V0X2FsbF9oZXJvZXMoKTtcblx0XHRcdGlmKGhlcm9fbGlzdC5sZW5ndGggIT0gbnVsbCl7XG5cdFx0XHRcdGZvcihpPTA7aTw4O2krKyl7XG5cdFx0XHRcdFx0aWYoaGVyb19saXN0LmkgIT0gbnVsbCl7XG5cdFx0XHRcdFx0XHRpZihNYXRoLmFicyhoZXJvX2xpc3QuaS5ib2R5LkdldFdvcmxkQ2VudGVyKCkueCAtIHgpIDwgTWF0aC5hYnMobmVhcmVzdC5ib2R5LkdldFdvcmxkQ2VudGVyKCkueCAtIHgpIHx8IG5lYXJlc3QgPT0gbnVsbCl7XG5cdFx0XHRcdFx0XHRcdG5lYXJlc3QgPSBoZXJvX2xpc3QuaTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0aGVyb194ID0gbmVhcmVzdC5ib2R5LkdldFdvcmxkQ2VudGVyKCkueDtcblx0XHRcdFx0ZGlzdGFuY2UgPSAoaGVyb194IC0geCk7XG5cdFx0XHR9ZWxzZSBpZihFbnRpdHlDb250cm9sbGVyLmdldF9teV9oZXJvKCkgIT0gbnVsbCl7XG5cdFx0XHRcdGRpc3RhbmNlID0gRW50aXR5Q29udHJvbGxlci5nZXRfbXlfaGVybygpLmJvZHkuR2V0V29ybGRDZW50ZXIoKS54IC0geDtcblx0XHRcdH1cblx0XHRcdHJldHVybiAoZGlzdGFuY2UgPiAwKTsvL3JldHVybiB0cnVlL3JpZ2h0IG9mIGRpc3RhbmNlIGlzIHBvc2l0aXZlLCByZXR1cm4gZmFsc2UvbGVmdCBpZiBkaXN0YW5jZSBpcyBuZWdhdGl2ZVxuXHRcdFx0Ki9cblx0XHRcdHZhciBuZWFyZXN0O1xuXHRcdFx0dmFyIGhlcm9feCA9IEVudGl0eUNvbnRyb2xsZXIuZ2V0X215X2hlcm8oKS5ib2R5LkdldFdvcmxkQ2VudGVyKCkueDtcblx0XHRcdHZhciBkaXN0YW5jZSA9IChoZXJvX3ggLSB0aGlzLmJvZHkuR2V0V29ybGRDZW50ZXIoKS54KTtcblx0XHRcdHJldHVybiAoZGlzdGFuY2UgPiAwKTsvL3JldHVybiB0cnVlL3JpZ2h0IG9mIGRpc3RhbmNlIGlzIHBvc2l0aXZlLCByZXR1cm4gZmFsc2UvbGVmdCBpZiBkaXN0YW5jZSBpcyBuZWdhdGl2ZVxuXHRcdH07XG5cdFx0XG5cdFx0Ly9kZWNyZWFzZSBoZWFsdGhcblx0XHR0aGlzLnRha2VfZGFtYWdlID0gZnVuY3Rpb24oKXtcblx0XHRcdHRoaXMuaHAgLT0gdGhpcy5kYW1hZ2VfdGFrZW47XG5cdFx0XHR0aGlzLmRhbWFnZV90YWtlbiA9IDA7XG5cdFx0XHR0aGlzLmhpdF90YWtlbiA9IGZhbHNlO1xuXHRcdFx0dGhpcy5ibGlua2luZyA9IHRydWU7XG5cdFx0XHR0aGlzLmJsaW5rX3RpbWVyID0gdGhpcy5ibGlua19kdXJhdGlvbjtcblx0XHRcdC8va25vY2tiYWNrIGhlcmVcblx0XHR9O1xuXHRcdFxuXHRcdC8vZGllXG5cdFx0dGhpcy5kaWUgPSBmdW5jdGlvbigpe1xuXHRcdFx0aWYgKHRoaXMuaXNfYWxpdmUpey8vaWYgYWxpdmUsIGtpbGwgaXRcblx0XHRcdFx0dGhpcy5kZWF0aF90aW1lciA9IHRoaXMuZGVhdGhfZHVyYXRpb247XG5cdFx0XHRcdHRoaXMuaXNfYWxpdmUgPSBmYWxzZTtcblx0XHRcdFx0V29ybGRDb250cm9sbGVyLmluY3JlYXNlX3Njb3JlKHRoaXMucG9pbnRfdmFsdWUpO1xuXHRcdFx0XHR0aGlzLmhpdF90YWtlbiA9IGZhbHNlO1xuXHRcdFx0XHR0aGlzLmNhbl9hdHRhY2sgPSBmYWxzZTtcblx0XHRcdFx0dGhpcy5jaGFuZ2VfYW5pbWF0aW9uKHRoaXMsXCJkZWF0aFwiKTtcblx0XHRcdFx0cmV0dXJuIDtcblx0XHRcdH1lbHNley8vZWxzZSBkZWNheVxuXHRcdFx0XHR0aGlzLmRlYXRoX3RpbWVyLS07XG5cdFx0XHRcdGlmICh0aGlzLmRlYXRoX3RpbWVyIDw9IHRoaXMuZGVhdGhfZHVyYXRpb24gJiYgdGhpcy5kZWF0aF90aW1lciA+IHRoaXMuZGVjYXlfZHVyYXRpb24gJiYgdGhpcy5kZWF0aF90aW1lciA+IDApe1xuXHRcdFx0XHRcdHRoaXMuY2hhbmdlX2FuaW1hdGlvbihcImRlYXRoXCIpO1xuXHRcdFx0XHR9IGVsc2UgaWYgKHRoaXMuZGVhdGhfdGltZXIgPD0gdGhpcy5kZWNheV9kdXJhdGlvbiAmJiB0aGlzLmRlYXRoX3RpbWVyID4gMCl7XG5cdFx0XHRcdFx0dGhpcy5jaGFuZ2VfYW5pbWF0aW9uKFwiZGVjYXlcIik7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0RW50aXR5Q29udHJvbGxlci5kZWxldGVfZW50aXR5KHRoaXMpOy8vcmVtb3ZlIGluc3RhbmNlIGZyb20gbWVtb3J5XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRcblx0XHQvL3Rha2VzIGEgc3RyaW5nIGFzIHBhcmFtZXRlcnMuIHJldHVybnMgdGhlIGZpeHR1cmUgd2l0aCBmaXh0dXJlX25hbWUgPT0gbmFtZSwgb3IgbnVsbCBpZiBpdCBkb2VzIG5vdCBleGlzdFxuXHRcdHRoaXMuZ2V0X2ZpeHR1cmUgPSBmdW5jdGlvbihlbnRpdHksbmFtZSl7XG5cdFx0XHR2YXIgY3VycmVudF9maXh0dXJlID0gZW50aXR5LmJvZHkuR2V0Rml4dHVyZUxpc3QoKTtcblx0XHRcdHdoaWxlIChjdXJyZW50X2ZpeHR1cmUgIT0gbnVsbCl7XG5cdFx0XHRcdGlmIChjdXJyZW50X2ZpeHR1cmUuR2V0VXNlckRhdGEoKSAhPSBudWxsKXtcblx0XHRcdFx0XHRpZiAoY3VycmVudF9maXh0dXJlLkdldFVzZXJEYXRhKCkubmFtZSA9PSBuYW1lKXtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRjdXJyZW50X2ZpeHR1cmUgPSBjdXJyZW50X2ZpeHR1cmUuR2V0TmV4dCgpO1xuXHRcdFx0fVxuXHRcdFx0aWYgKGN1cnJlbnRfZml4dHVyZS5HZXRVc2VyRGF0YSgpID09IG51bGwpe1xuXHRcdFx0XHRjdXJyZW50X2ZpeHR1cmUgPSBudWxsO1xuXHRcdFx0fWVsc2UgaWYgKGN1cnJlbnRfZml4dHVyZS5HZXRVc2VyRGF0YSgpLm5hbWUgIT0gbmFtZSl7XG5cdFx0XHRcdGN1cnJlbnRfZml4dHVyZSA9IG51bGw7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gY3VycmVudF9maXh0dXJlO1xuXHRcdH07XG5cdFx0XG5cdFx0Ly9jaGVja3MgaWYgbW92ZW1lbnQgaXMgdm9sdW50YXJ5IG9yIGZvcmNlZFxuXHRcdHRoaXMubW92ZW1lbnRfdm9sdW50YXJ5ID0gZnVuY3Rpb24oKXtcblx0XHRcdC8vaWYgZGlyZWN0aW9uIGJlaW5nIGZhY2VkIGlzIGRpZmZlcmVudCBmcm9tIHRoZSBkaXJlY3Rpb24gbW92aW5nLCByZXR1cm4gZmFsc2Vcblx0XHRcdHZhciBvdXRwdXQgPSB0cnVlO1xuXHRcdFx0dmFyIHZlbG9jaXR5ID0gdGhpcy5ib2R5LkdldExpbmVhclZlbG9jaXR5KCkueDtcblx0XHRcdGlmKHZlbG9jaXR5ICE9IDApe1xuXHRcdFx0XHRvdXRwdXQgPSAodmVsb2NpdHkvTWF0aC5hYnModmVsb2NpdHkpID09ICh0aGlzLmRpcmVjdGlvbikqMi0xKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBvdXRwdXQ7XG5cdFx0fTtcblxuXHRcdC8vY2hlY2tzIGlmIGluIHRoZSBhaXJcblx0XHR0aGlzLmluX2FpciA9IGZ1bmN0aW9uKCl7XG5cdFx0XHR2YXIgYm9keSA9IHRoaXMuYm9keTtcblx0XHRcdHZhciBvYmplY3RzX2JlbmVhdGg7XG5cdFx0XHRpZiAoYm9keS5HZXRGaXh0dXJlTGlzdCgpICE9IG51bGwpey8vcHJldmVudCBidWdzIG9uIGRlc3RydWN0aW9uXG5cdFx0XHRcdHZhciBBQUJCID0gYm9keS5HZXRGaXh0dXJlTGlzdCgpLkdldE5leHQoKS5HZXROZXh0KCkuR2V0QUFCQigpO1xuXHRcdFx0XHRvYmplY3RzX2JlbmVhdGggPSBQaHlzaWNzQ29udHJvbGxlci5xdWVyeV9hYWJiKEFBQkIpO1xuXHRcdFx0fWVsc2V7XG5cdFx0XHRcdG9iamVjdHNfYmVuZWF0aCA9IDA7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gKG9iamVjdHNfYmVuZWF0aCA8IDUpOy8vZm9yIHNvbWUgbXlzdGVyaW91cyByZWFzb24sIGl0IGNvdW50cyA0IGNvbGxpc2lvbnMgZXZlbiBpbiBtaWQgYWlyXG5cdFx0fTtcblxuXHRcdC8vY2hlY2tzIGlmIHRoZXJlIGlzIGEgY29sbGlzaW9uIGluIGN1cnJlbnQgZGlyZWN0aW9uXG5cdFx0dGhpcy5wYXRoX2ZyZWUgPSBmdW5jdGlvbigpe1xuXHRcdFx0dmFyIGJvZHkgPSB0aGlzLmJvZHk7XG5cdFx0XHR2YXIgb2JqZWN0c19iZWZvcmU7XG5cdFx0XHR2YXIgQUFCQjtcblx0XHRcdGlmIChib2R5LkdldEZpeHR1cmVMaXN0KCkgIT0gbnVsbCl7Ly9wcmV2ZW50IGJ1Z3Mgb24gZGVzdHJ1Y3Rpb25cblx0XHRcdFx0aWYgKHRoaXMuZGlyZWN0aW9uKXtcblx0XHRcdFx0XHRBQUJCID0gYm9keS5HZXRGaXh0dXJlTGlzdCgpLkdldEFBQkIoKTtcblx0XHRcdFx0XHRvYmplY3RzX2JlZm9yZSA9IFBoeXNpY3NDb250cm9sbGVyLnF1ZXJ5X2FhYmIoQUFCQik7XG5cdFx0XHRcdH1lbHNle1xuXHRcdFx0XHRcdEFBQkIgPSBib2R5LkdldEZpeHR1cmVMaXN0KCkuR2V0TmV4dCgpLkdldEFBQkIoKTtcblx0XHRcdFx0XHRvYmplY3RzX2JlZm9yZSA9IFBoeXNpY3NDb250cm9sbGVyLnF1ZXJ5X2FhYmIoQUFCQik7XG5cdFx0XHRcdH1cblx0XHRcdH1lbHNle1xuXHRcdFx0XHRvYmplY3RzX2JlZm9yZSA9IDA7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gKG9iamVjdHNfYmVmb3JlIDwgNCk7Ly9hc3N1bWVzIGNvbnRhY3Qgd2l0aCBib3R0b20gc2Vuc29yLCB0b3Agc2Vuc29yLCBhbmQgbWFpbiBzaGFwZSBcblx0XHR9O1xuXG5cdFx0Ly9zZXR0ZXIgZm9yIGFuaW1hdGlvbiB2YXJpYWJsZSwgZW5zdXJlcyB0aGUgYW5pbWF0aW9uIGlzIG9ubHkgcmVzZXQgb24gYWN0dWFsIGNoYW5nZVxuXHRcdHRoaXMuY2hhbmdlX2FuaW1hdGlvbiA9IGZ1bmN0aW9uKG5ld19hbmltYXRpb24pe1xuXHRcdFx0aWYodGhpcy5hbmltYXRpb24gIT0gbmV3X2FuaW1hdGlvbil7XG5cdFx0XHRcdHRoaXMuYW5pbWF0aW9uID0gbmV3X2FuaW1hdGlvbjtcblx0XHRcdFx0dGhpcy5uZWVkc19ncmFwaGljc191cGRhdGUgPSB0cnVlO1xuXHRcdFx0fWVsc2V7IFxuXHRcdFx0XHR0aGlzLm5lZWRzX2dyYXBoaWNzX3VwZGF0ZSA9IGZhbHNlO1xuXHRcdFx0fVxuXHRcdH07XG5cdH07IC8vIGVuZCBBYnN0cmFjdEVudGl0eVxuXHRcblx0dmFyIHN5bmNfaGVybyA9IGZ1bmN0aW9uKCl7XG5cdFx0LyoqXG5cdFx0KiBzZW5kIHN5bmNocm9uaXphdGlvbiBpbmZvcm1hdGlvbiBmb3IgdGhlIGhlcm8sXG5cdFx0KiBpZiBuZWVkZWQgKGlmIHNvbWV0aGluZyBpbXBvcnRhbnQgY2hhbmdlZClcblx0XHQqL1xuXG5cdFx0dmFyIG15X2hlcm8gPSBFbnRpdHlNb2RlbC5oZXJvZXNbTmV0d29ya0NvbnRyb2xsZXIuZ2V0X25ldHdvcmtfaWQoKV07XG5cblx0XHRpZihteV9oZXJvKXtcblx0XHRcdHZhciB2ZWxvY2l0eSA9IG15X2hlcm8uYm9keS5HZXRMaW5lYXJWZWxvY2l0eSgpO1xuXHRcdFx0dmFyIG9sZF92ZWxvY2l0eSA9IEVudGl0eU1vZGVsLmhlcm9fbGFzdF92ZWxvY2l0eTtcblxuXHRcdFx0dmFyIGRpZmZlcmVuY2UgPSBNYXRoLnNxcnQoTWF0aC5wb3codmVsb2NpdHkueCAtIG9sZF92ZWxvY2l0eS54LCAyKSArIE1hdGgucG93KHZlbG9jaXR5LnkgLSBvbGRfdmVsb2NpdHkueSwgMikpXG5cblx0XHRcdGlmKGRpZmZlcmVuY2UgIT0gMCl7XG5cdFx0XHRcdC8vIGlmIGRpZmZlcmVudFxuXHRcdFx0XHR2YXIgcG9zaXRpb24gPSBteV9oZXJvLmJvZHkuR2V0V29ybGRDZW50ZXIoKTtcblx0XHRcblx0XHRcdFx0TXVsdGlwbGF5ZXJTeW5jQ29udHJvbGxlci5yb3V0ZV9vdXRjb21pbmdfcGFja2V0KHtcblx0XHRcdFx0XHRvcDogXCJoZXJvX3N5bmNcIixcblx0XHRcdFx0XHR2ZWxvY2l0eToge3g6IHZlbG9jaXR5LngsIHk6IHZlbG9jaXR5Lnl9LFxuXHRcdFx0XHRcdHBvc2l0aW9uOiB7eDogcG9zaXRpb24ueCwgeTogcG9zaXRpb24ueX1cblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cblx0XHRcdEVudGl0eU1vZGVsLmhlcm9fbGFzdF92ZWxvY2l0eSA9IHt4OiB2ZWxvY2l0eS54LCB5OiB2ZWxvY2l0eS55fTtcblx0XHR9XG5cblxuXHRcdC8vIGNoZWNrIHZlbG9jaXR5IGNoYW5nZVxuXHRcdFxuXHRcdC8vIHNlbmQgaWYgbmVlZGVkXG5cdFx0XG5cdH07XG5cdFxuXHR2YXIgaGFuZGxlX2hlcm9fc3luYyA9IGZ1bmN0aW9uKHBhY2tldCl7XG5cdFx0LyoqXG5cdFx0KiBoYW5kbGUgdGhlIHN5bmMgcmVxdWVzdCBmb3IgdGhlIGhlcm9cblx0XHQqIHN5bmNocm9uaXplIHZlbG9jaXR5IGFuZCB0aGUgcG9zaXRpb25cblx0XHQqL1xuXHRcdFxuXHRcdGlmKHBhY2tldC5wbGF5ZXJfaWQgPT0gTmV0d29ya0NvbnRyb2xsZXIuZ2V0X25ldHdvcmtfaWQoKSl7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdFxuXHRcdHZhciBwbGF5ZXJfaWQgPSBwYWNrZXQucGxheWVyX2lkO1xuXG5cdFx0dmFyIGhlcm8gPSBFbnRpdHlNb2RlbC5oZXJvZXNbcGxheWVyX2lkXTtcblxuXHRcdGlmKGhlcm8gPT0gbnVsbCl7XG5cdFx0XHRjb25zb2xlLndhcm4oXCJoZXJvIGlzIG5vdCBkZWZpbmVkIGZvciB0aGUgcGxheWVyX2lkXCIsIFN0cmluZyhwbGF5ZXJfaWQpKTtcblx0XHR9ZWxzZXtcblxuXHRcdFx0dmFyIHZlbCA9IG5ldyBCMmQuYjJWZWMyKHBhY2tldC52ZWxvY2l0eS54LCBwYWNrZXQudmVsb2NpdHkueSk7XG5cdFx0XHR2YXIgcG9zID0gbmV3IEIyZC5iMlZlYzIocGFja2V0LnBvc2l0aW9uLngsIHBhY2tldC5wb3NpdGlvbi55KTtcblx0XHRcdFxuXHRcdFx0aGVyby5ib2R5LlNldExpbmVhclZlbG9jaXR5KHZlbCk7XG5cdFx0XHRoZXJvLmJvZHkuU2V0UG9zaXRpb24ocG9zKTtcblx0XHR9XG5cdFx0XG5cdH07XG5cblx0dmFyIGdldF9hbGxfaGVyb2VzID0gZnVuY3Rpb24oKXtcblx0XHQvKipcblx0XHQqIHJldHVybiB0YWJsZSB3aXRoIG5ldHdvcmsgaWRzIGFzc29jaWF0ZWQgd2l0aCBjb3JyZXNwb25naW5nIGhlcm8gaW5zdGFuY2VzXG5cdFx0Ki9cblx0XHRcblx0XHRyZXR1cm4gRW50aXR5TW9kZWwuaGVyb2VzO1xuXHR9O1xuXG5cdHZhciBnZXRfbXlfaGVybyA9IGZ1bmN0aW9uKCl7XG5cdFx0LyoqXG5cdFx0KiBnZXQgdGhlIGhlcm8gZm9yIHRoaXMgcGxheWVyXG5cdFx0Ki9cblxuXHRcdHJldHVybiBnZXRfYWxsX2hlcm9lcygpW05ldHdvcmtDb250cm9sbGVyLmdldF9uZXR3b3JrX2lkKCldO1xuXHRcdFxuXHR9O1xuXHRcblx0XG5cdFxuXHRcblx0XG5cdFxuXHRyZXR1cm4ge1xuXHRcdC8vIGRlY2xhcmUgcHVibGljXG5cdFx0aW5pdDogaW5pdCwgXG5cdFx0dXBkYXRlOiB1cGRhdGUsXG5cdFx0Ly9nZXRfb3BlcmF0aW9uOiBnZXRfb3BlcmF0aW9uLFxuXHRcdHJlZ19mb3JfbG9naWNfdXBkYXRlOiByZWdfZm9yX2xvZ2ljX3VwZGF0ZSxcblx0XHRzcGF3bjogc3Bhd24sXG5cdFx0ZGVsZXRlX2VudGl0eTogZGVsZXRlX2VudGl0eSxcblx0XHQvL2Z1bGZpbGxfZGVsZXRlX3JlcXVlc3Q6IGZ1bGZpbGxfZGVsZXRlX3JlcXVlc3QsXG5cdFx0aGFuZGxlX3NwYXduOiBoYW5kbGVfc3Bhd24sXG5cdFx0aGFuZGxlX2RlbGV0ZTogaGFuZGxlX2RlbGV0ZSxcblx0XHRoYW5kbGVfaGVyb19zeW5jOiBoYW5kbGVfaGVyb19zeW5jLFxuXG5cdFx0Z2V0X2FsbF9oZXJvZXM6IGdldF9hbGxfaGVyb2VzLFxuXHRcdGdldF9teV9oZXJvOiBnZXRfbXlfaGVybyxcblx0XHRjcmVhdGVfYWJzdHJhY3RfZW50aXR5OiBjcmVhdGVfYWJzdHJhY3RfZW50aXR5LFxuICAgIH07XG59KSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEVudGl0eUNvbnRyb2xsZXI7XG5cbnZhciBJbmNsdWRlcyA9IHJlcXVpcmUoXCIuLi9JbmNsdWRlcy5qc1wiKTsgdmFyIGluY2x1ZGVfZGF0YSA9IEluY2x1ZGVzLmdldF9pbmNsdWRlX2RhdGEoe1xuICAgIGN1cnJlbnRfbW9kdWxlOiBcIkVudGl0eUNvbnRyb2xsZXJcIixcbiAgICBpbmNsdWRlX29wdGlvbnM6IEluY2x1ZGVzLmNob2ljZXMuREVGQVVMVCB8IEluY2x1ZGVzLmNob2ljZXMuTE9HSUNcbn0pOyBldmFsKGluY2x1ZGVfZGF0YS5uYW1lX3N0YXRlbWVudHMpOyB2YXIgaW5jbHVkZSA9IGZ1bmN0aW9uICgpIHsgZXZhbChpbmNsdWRlX2RhdGEubW9kdWxlX3N0YXRlbWVudHMpOyB9XG4iLCJcblxudmFyIEdhbWVDb250cm9sbGVyID0gKGZ1bmN0aW9uKCl7XG5cblx0dmFyIGluaXQgPSBmdW5jdGlvbigpe1xuXHRcdGluY2x1ZGUoKTtcblx0fTtcblx0XHRcblxuXHR2YXIgdXBkYXRlX2FsbCA9IGZ1bmN0aW9uKGV2ZW50KXtcblx0XHQvKlxuXHRcdCAqIG1haW4gZnVuY3Rpb24gcHJldHR5IG11Y2hcblx0XHQgKiBldmVyeWdoaW5nIGVsc2UgaXMgY2FsbGVkIGZyb20gaGVyZSBldmVyeSB0aWNrXG5cdFx0ICovXG5cdFx0S2V5Ym9hcmRDb250cm9sbGVyLnVwZGF0ZShkZWx0YSk7XG5cblx0ICAgIHZhciBjbWRzID0gS2V5Ym9hcmRDb250cm9sbGVyLnBhdXNlX2NvbW1hbmRzKCk7XG5cdCAgICBpZiAoY21kcyhcInBhdXNlXCIpICYmIEdhbWVNb2RlbC5wYXVzZUNvdW50ZXIgPiAxMCAmJiBHcmFwaGljc0NvbnRyb2xsZXIuZ2V0X2hlYWx0aCgpID4gMCkge1xuXHQgICAgICAgIGNyZWF0ZWpzLlRpY2tlci5wYXVzZWQgPSAhY3JlYXRlanMuVGlja2VyLnBhdXNlZDtcblx0ICAgICAgICBHYW1lTW9kZWwucGF1c2VDb3VudGVyID0gMDtcblx0ICAgICAgICBjb25zb2xlLmxvZyhcInBhdXNlXCIpO1xuXHQgICAgfVxuXHQgICAgR2FtZU1vZGVsLnBhdXNlQ291bnRlciArPSAxO1xuXHRcdFxuXHRcdGlmICghY3JlYXRlanMuVGlja2VyLnBhdXNlZCl7XG5cdFx0XHR2YXIgZGVsdGEgPSBldmVudC5kZWx0YTtcblxuXHRcdFx0Ly8gISEhISB3b3JsZCBzaW11bGF0aW9uIHN0ZXAgZ29lcyBzb21ld2hlcmUgcmlnaHQgaGVyZVxuXHRcdFx0Ly8gYXMgcGVyIGN1cnJlbnQgZGVzaWduLCB3aWxsIHRha2UgZGVsdGEgYXMgYW4gYXJndW1lbnRcblx0XHRcblx0XHRcdC8vVGVycmFpbkNvbnRyb2xsZXIuZ2VuZXJhdGVfdGVycmFpbigpOyBcblx0XHRcdC8vUGxheWVyQ29udHJvbGxlci51cGRhdGUoKTtcblx0XHRcblx0XHRcdElkZW50aWZpY2F0aW9uQ29udHJvbGxlci51cGRhdGUoZGVsdGEpO1xuXHRcdFx0V29ybGRDb250cm9sbGVyLnVwZGF0ZShkZWx0YSk7XG5cblx0XHRcdFRlcnJhaW5Db250cm9sbGVyLnVwZGF0ZShkZWx0YSk7XG5cdFx0XHRFbnRpdHlDb250cm9sbGVyLnVwZGF0ZShkZWx0YSk7XG5cblx0XHRcdC8vIFNob3VsZCBiZSBjYWxsZWQgYWZ0ZXIgYWxsIG1vdmVtZW50IG9mIG9iamVjdHMgaXMgZG9uZTpcblx0XHRcdC8vSFVEQ29udHJvbGxlci51cGRhdGUoKTtcblx0XHRcdC8vQmFja2dyb3VuZENvbnRyb2xsZXIudXBkYXRlKCk7XG5cdFx0XHRHcmFwaGljc0NvbnRyb2xsZXIudXBkYXRlKCk7XG5cdFx0XHRHcmFwaGljc0NvbnRyb2xsZXIudXBkYXRlKGRlbHRhKTtcblxuXHRcdFx0TXVsdGlwbGF5ZXJTeW5jQ29udHJvbGxlci51cGRhdGUoZGVsdGEpO1xuXHRcdFx0TmV0d29ya0NvbnRyb2xsZXIudXBkYXRlKGRlbHRhKTtcblx0XHR9XG5cdH07XG5cblxuXHRyZXR1cm4ge1xuXHRcdGluaXQ6IGluaXQsXG5cdFx0dXBkYXRlX2FsbDogdXBkYXRlX2FsbCxcblx0fTtcblxufSkoKTtcblxubW9kdWxlLmV4cG9ydHMgPSBHYW1lQ29udHJvbGxlcjtcblxudmFyIEluY2x1ZGVzID0gcmVxdWlyZShcIi4uL0luY2x1ZGVzLmpzXCIpOyB2YXIgaW5jbHVkZV9kYXRhID0gSW5jbHVkZXMuZ2V0X2luY2x1ZGVfZGF0YSh7XG5cdGN1cnJlbnRfbW9kdWxlOiBcIkdhbWVDb250cm9sbGVyXCIsIFxuXHRpbmNsdWRlX29wdGlvbnM6IEluY2x1ZGVzLmNob2ljZXMuREVGQVVMVFxufSk7IGV2YWwoaW5jbHVkZV9kYXRhLm5hbWVfc3RhdGVtZW50cyk7IHZhciBpbmNsdWRlID0gZnVuY3Rpb24oKXtldmFsKGluY2x1ZGVfZGF0YS5tb2R1bGVfc3RhdGVtZW50cyk7fVxuXG4iLCIvKlxuR3JhcGhpY3NDb250cm9sbGVyXG5cdFB1YmxpYyBGdW5jdGlvbnM6XG5cdC1pbml0KClcblx0XHRzZXRzIHVwIHRoZSBHcmFwaGljc0NvbnRyb2xsZXIgZm9yIHRoZSByZXN0IG9mIHRoZSBnYW1lLCBjYWxsZWQgb25jZSBkdXJpbmcgaW5pdGlhbGl6YXRpb25cblx0LXVwZGF0ZShpbnQgZGVsdGEpXG5cdFx0Y29tbW9uIGZ1bmN0aW9uLCBjYWxsZWQgZWFjaCB0aWNrLiBwZXJmb3JtcyByb3V0aW5lIGdyYXBoaWNzIG1haW50ZW5hbmNlXG5cdFx0cmVnaXN0ZXJzIGFsbCBpbnN0YW5jZXMgdGhhdCB3ZXJlIG1hcmtlZCBmb3IgcmVnaXN0cmF0aW9uIHNpbmNlIHRoZSBsYXN0IHRpY2tcblx0XHRyZW5kZXJzIGFsbCByZWdpc3RlcmVkIGluc3RhbmNlc1xuXHQtZ2V0X3N0YWdlKClcblx0XHRyZXR1cm5zIHRoZSBzdGFnZSBvYmplY3QsIGFuIGVhc2VsanMgb2JqZWN0IHRoYXQgc3RvcmVzIGluZm9ybWF0aW9uIGFib3V0IHRoZSBnYW1lXG5cdC1nZXRfY2FtZXJhKClcblx0XHRyZXR1cm5zIHRoZSBjYW1lcmEgb2JqZWN0LCB3aGljaCBjb250cm9scyB0aGUgdmlldyBvZmZzZXRcblx0LWdldF9hc3NldChzdHJpbmcgaWQpXG5cdFx0cmV0cmlldmVzIHRoZSBhc3NldCB3aXRoIGlkOyBhbiBhbGlhcyBmb3IgdGhlIHNhbWUgZnVuY3Rpb24gaW4gQXNzZXRDb250cm9sbGVyXG5cdC1yZWdfZm9yX3JlbmRlcihFYXNlbGpzX29iaiBzcHJpdGUsIE9iamVjdCBlbnRpdHlfaW5zdGFuY2UpXG5cdFx0bGlua3MgYW4gZW50aXR5IHdpdGggYSBzcHJpdGUgYW5kIHJlZ2lzdGVycyBpdCB0byBiZSByZW5kZXJlZCBlYWNoIHRpY2tcblx0LXNldF9yZWdfcG9zaXRpb24oZWFzZWxqc19vYmosaW50IG9mZnNldF94LGludCBvZmZzZXRfeSlcblx0XHRhZGp1c3RzIGEgc3ByaXRlcyB4IGFuZCB5IG9mZnNldHMgdG8gY29uZm9ybSB0byB0aGUgYm94MmQgc3lzdGVtXG5cdC1yZXF1ZXN0X2JpdG1hcChzdHJpbmc/IGlkKVxuXHRcdHJldHJpZXZlcyBhIHByZXZpb3VzbHkgbG9hZGVkIGFzc2V0IGFzIGEgc3ByaXRlXG5cdC1yZXF1ZXN0X2FuaW1hdGVkKHN0cmluZyBpZCwgc3RyaW5nfHxpbnQgc3RhcnRfYW5pbWF0aW9uL3N0YXJ0X2ZyYW1lKVxuXHRcdHJldHVybnMgYSBuZXcgc3ByaXRlIG9iamVjdCBnZW5lcmF0ZWQgZnJvbSB0aGUgaW1hZ2UgaWQgYW5kIHRoZSBzdGFydCBmcmFtZVxuXHQtZGVzdHJveV9ncmFwaGljc19mb3IoaW50IGlkKVxuXHRcdGRlc3Ryb3lzIHRoZSBncmFwaGljcyBvYmplY3RzIGFzc29jaWF0ZWQgd2l0aCB0aGUgaW5zdGFuY2Ugb2YgdGhlIHBhc3NlZCBpZFxuXHQtZm9sbG93KGludCBpZClcblx0XHRzZXRzIHRoZSBjYW1lcmEgdG8gZm9sbG93IHRoZSBvYmplY3Qgb2YgdGhlIHBhc3NlZCBpZFxuXHQtZ2V0X21vdmVtZW50X2VkZ2UoKVxuXHRcdHJldHVybnMgbGVmdCBjYW1lcmEgYm91bmQsIGEuay5hLCB0aGUgbW92ZW1lbnQgZWRnZS4gdXNlZCBmb3IgbG90cyBvZiB0aGluZ3Ncblx0XHRcbiovXG52YXIgR3JhcGhpY3NDb250cm9sbGVyID0gKGZ1bmN0aW9uKCl7XG5cdC8qIFxuXHRDb250cm9scyBhbGwgZ3JhcGhpY3MgYW5kIHByb3ZpZGVzIGFuIGludGVyZmFjZSBmb3IgY29tbW9uIGVhc2VsLmpzIGZ1bmN0aW9uc1xuXHQqL1xuXHRcblx0dmFyIGdldF9hc3NldDsgXG5cdHZhciB0eXBlX3JlbmRlcmVyX3RhYmxlO1xuXHR2YXIgUHJpdmF0ZUdyYXBoaWNzOyBcblx0dmFyIHJlUmVuZGVyID0gZmFsc2U7XG5cblx0dmFyIGluaXQgPSBmdW5jdGlvbigpe1xuXHRcdC8qIGlzIHJhbiBmcm9tIHRoZSBJbml0Q29udHJvbGxlciBvbmNlIHdoZW4gdGhlIGdhbWUgaXMgbG9hZGVkICovXG5cdFx0aW5jbHVkZSgpOyAvLyBzYXRpc2Z5IHJlcXVpcmVtZW50c1xuXG5cdFx0Ly9BbGwgcmVuZGVyZXJzIG11c3QgYmUgcmVnaXN0ZXJlZCBoZXJlXG5cdFx0Ly9MaW5rcyBlYWNoIHJlbmRlcmVyIHdpdGggaXRzIG9iamVjdCBpZFxuXHRcdHR5cGVfcmVuZGVyZXJfdGFibGUgPSB7XG5cdFx0Ly8gdHlwZTpcdHJlbmRlcmVyOlxuXHRcdFx0XCJhbnRcIjogQW50UmVuZGVyZXIsXG5cdFx0XHRcImhlcm9cIjogSGVyb1JlbmRlcmVyLFxuXHRcdFx0XCJHcmlmZmluXCI6R3JpZmZpblJlbmRlcmVyLFxuXHRcdFx0XCJIeWVuYVwiOiBIeWVuYVJlbmRlcmVyLFxuXHRcdFx0XCJ0ZXJyYWluX2NlbGxcIjogVGVycmFpbkNlbGxSZW5kZXJlcixcblx0XHRcdFwidGVycmFpbl9zbGljZVwiOiBUZXJyYWluU2xpY2VSZW5kZXJlcixcblx0XHRcdFwiY29tcGFuaW9uXCI6IEVzdGVlbWVkQ29tcGFuaW9uUmVuZGVyZXIsXG4gICAgICAgICAgICBcInBpenphXCI6IFBpenphUmVuZGVyZXIsXG5cdFx0fTtcblxuXHRcdGdldF9hc3NldCA9IEFzc2V0Q29udHJvbGxlci5nZXRfYXNzZXQ7IC8vIGZvciBxdWlja2VyIGFjY2Vzc1xuXG5cdFx0R3JhcGhpY3NNb2RlbC5zdGFnZSA9IG5ldyBjcmVhdGVqcy5TdGFnZShDb25maWcuTUFJTl9DQU5WQVNfTkFNRSk7XG5cdFx0R3JhcGhpY3NNb2RlbC5zdGFnZS5jYW52YXMud2lkdGggPSBDb25maWcuU0NSRUVOX1c7XG5cdFx0R3JhcGhpY3NNb2RlbC5zdGFnZS5jYW52YXMuaGVpZ2h0ID0gQ29uZmlnLlNDUkVFTl9IO1xuXHRcdFxuXHRcdEdyYXBoaWNzTW9kZWwuY2FtZXJhLm9mZnNldF9mcm9tX2ZvbGxvd2VkLnggLT0gKDE2MTQgLSBHcmFwaGljc01vZGVsLnN0YWdlLmNhbnZhcy53aWR0aCkgLyAzO1xuXG5cdFx0Ly8gaW5pdCBhbGwgcmVuZGVyZXJzXG5cdFx0Zm9yKHR5cGUgaW4gdHlwZV9yZW5kZXJlcl90YWJsZSl7XG5cdFx0XHR0eXBlX3JlbmRlcmVyX3RhYmxlW3R5cGVdLmluaXQoKTtcblx0XHR9XG5cblx0XHQvLyB0aGlzIG9iamVjdCBpcyBwYXNzZWQgdG8gYWxsIHJlbmRlcmVycyB0byBnaXZlIHRoZW0gYWNjZXNzIHRvIGZ1bmN0aW9uc1xuXHRcdC8vIHRoYXQgbm8gb25lIGVsc2UgaXMgc3VwcG9zZWQgdG8gYmUgYWJsZSB0byBhY2Nlc3Ncblx0XHRQcml2YXRlR3JhcGhpY3MgPSB7XG5cdFx0XHRzdGFnZTogR3JhcGhpY3NNb2RlbC5zdGFnZSxcblx0XHRcdHJlcXVlc3RfYml0bWFwOiByZXF1ZXN0X2JpdG1hcCxcblx0XHRcdHJlcXVlc3RfYW5pbWF0ZWQ6IHJlcXVlc3RfYW5pbWF0ZWQsXG5cdFx0XHRnZXRfYXNzZXQ6IGdldF9hc3NldCxcblx0XHRcdHRyYW5zX3h5OiB0cmFuc194eSxcblx0XHRcdHJlZ19mb3JfcmVuZGVyOiByZWdfZm9yX3JlbmRlcixcblx0XHR9O1xuXG5cdFx0QmFja2dyb3VuZFJlbmRlcmVyLmluaXQoKTtcblx0XHRIVURSZW5kZXJlci5pbml0KCk7XG5cblx0fTtcblxuICAgIFxuXHR2YXIgdXBkYXRlID0gZnVuY3Rpb24oZGVsdGEpe1xuXHRcdC8qIGlzIHJhbiBlYWNoIHRpY2sgZnJvbSB0aGUgR2FtZUNvbnRyb2xsZXIudXBkYXRlX2FsbCAqL1xuXHRcdFxuXHRcdHVwZGF0ZV9jYW1lcmEoKTsgLy8gbmVlZHMgdG8gYmUgdXBkYXRlZCBmaXJzdFxuXG5cdFx0ZGVzdHJveV91bm5lZWRlZCgpOyAvLyBnb2VzIHNlY29uZCwgZG8gbm90IHVwZGF0ZSBhbnkgc3R1ZmYgYmVmb3JlIHVubmVlZGVkIHN0dWZmIGlzIHJlbW92ZWRcblxuXHRcdHJlZ2lzdGVyX25ld19zdHVmZigpO1xuXG5cdFx0cmVuZGVyX3RoaW5ncygpO1xuXHRcdFxuXHRcdHN5bmNocm9uaXplX3RvX3BoeXNpY2FsX2JvZGllcygpO1xuXG5cdFx0QmFja2dyb3VuZFJlbmRlcmVyLnJlbmRlcigpO1xuXHRcdFxuXHRcdEhVRFJlbmRlcmVyLnJlbmRlcigpO1xuXHRcdFxuXHRcdEdyYXBoaWNzTW9kZWwuc3RhZ2UudXBkYXRlKCk7XG5cdH07XG5cblx0dmFyIGRlc3Ryb3lfdW5uZWVkZWQgPSBmdW5jdGlvbigpe1xuXHRcdC8qKlxuXHRcdCogZGVzdHJveSBncmFwaGljcyBmb3IgZXZlcnl0aGluZyB0aGF0IHdhcyBtYXJrZWRcblx0XHQqIGZvciBkZXN0cnVjdGlvblxuXHRcdCovXG5cblx0XHR2YXIgc2xpY2VzID0gUmVnaXN0ZXJBc0NvbnRyb2xsZXIucmV0cmlldmVfcmVnaXN0ZXJlZF9hcyhcInJlbW92ZWRfc2xpY2VcIik7XG5cblx0XHR2YXIgZW50aXRpZXMgPSBSZWdpc3RlckFzQ29udHJvbGxlci5yZXRyaWV2ZV9yZWdpc3RlcmVkX2FzKFwicmVtb3ZlZF9lbnRpdHlcIik7XG5cblx0XHR3aGlsZShzbGljZXMubGVuZ3RoID4gMCl7XG5cdFx0XHR2YXIgc2xpY2UgPSBzbGljZXMucG9wKCk7XG5cdFx0XHR2YXIgZ3JpZCA9IHNsaWNlLmdyaWQ7XG5cblx0XHRcdGZvcih2YXIgaSA9IDA7IGkgPCBncmlkLmxlbmd0aDsgaSsrKXtcblx0XHRcdFx0dmFyIHJvdyA9IGdyaWRbaV07IC8vIG9yIGlzIGl0IGEgY29sdW1uP1xuXG5cdFx0XHRcdGZvcih2YXIgaiA9IDA7IGogPCByb3cubGVuZ3RoOyBqKyspe1xuXHRcdFx0XHRcdHZhciBjZWxsID0gcm93W2pdO1xuXHRcdFx0XHRcdGlmKGNlbGwua2luZCAhPSAwKXtcblx0XHRcdFx0XHRcdGRlc3Ryb3lfZ3JhcGhpY3NfZm9yKGNlbGwuaWQpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0XG5cdFx0fVxuXHRcdFxuXHRcdHdoaWxlKGVudGl0aWVzLmxlbmd0aCA+IDApe1xuXHRcdFx0dmFyIGVudGl0eSA9IGVudGl0aWVzLnBvcCgpO1xuXHRcdFx0ZGVzdHJveV9ncmFwaGljc19mb3IoZW50aXR5LmlkKTtcblx0XHR9XG5cdH07XG5cdFxuXHRcblxuXHR2YXIgZm9sbG93ID0gZnVuY3Rpb24oaWQpe1xuXHRcdC8vb3JkZXIgY2FtZXJhIHRvIGZvbGxvdyB0aGUgZ3JhcGhpY2FsIHJlcHJlc2VudGF0aW9uXG5cdFx0Ly9vZiBhbiBvYmplY3Qgd2l0aCB0aGUgZ2l2ZW4gaWQsIGlmIGl0IGV4aXN0c1xuXHRcdEdyYXBoaWNzTW9kZWwuY2FtZXJhLmZvbGxvd2luZyA9IEdyYXBoaWNzTW9kZWwuYWxsX3BoeXNpY2FsW2lkXTtcblx0fTtcblx0XG5cdFxuXHR2YXIgcmVnaXN0ZXJfbmV3X3N0dWZmID0gZnVuY3Rpb24oKXtcblx0XHQvL3NlYXJjaCB0aHJvdWdoIGFsbCBpbnN0YW5jZXMgaW4gdGhlIHF1ZXVlIFxuXHRcdC8vYW5kIHJlZ2lzdGVyIHRoZW0gZm9yIGdyYXBoaWNzIHVwZGF0ZXMuXG5cblx0XHQvLyByZXRyaWV2ZSBpbnN0YW5jZXMgb2YgcGh5c2ljYWwgdGhpbmdzIHRoYXQgZG8gbm90IGhhdmUgZ3JhcGhpY3MgeWV0XG5cdFx0dmFyIG5ld19zdHVmZiA9IFJlZ2lzdGVyQXNDb250cm9sbGVyLnJldHJpZXZlX3JlZ2lzdGVyZWRfYXMoXCJhd2FpdGluZ19ncmFwaGljc19pbml0aWFsaXphdGlvblwiKTtcblxuXHRcdHZhciBsZW5ndGggPSBuZXdfc3R1ZmYubGVuZ3RoXG5cdFx0Zm9yKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKXtcblx0XHRcdHZhciBuZXdfb2JqID0gbmV3X3N0dWZmLnBvcCgpO1xuXHRcdFx0aWYodHlwZV9yZW5kZXJlcl90YWJsZVtuZXdfb2JqLnR5cGVdKXtcblx0XHRcdFx0Ly8gaWYgcmVuZGVyZXIgZXhpc3RzIGZvciB0aGlzIHR5cGUsIHJlZ2lzdGVyIHRocm91Z2ggaXRcblx0XHRcdFx0dHlwZV9yZW5kZXJlcl90YWJsZVtuZXdfb2JqLnR5cGVdLnJlZ2lzdGVyKG5ld19vYmosIFByaXZhdGVHcmFwaGljcyk7XHRcblx0XHRcdH1lbHNle1xuXHRcdFx0XHR0aHJvdyBcIk5vIHJlbmRlcmVyIGZvdW5kIGZvciB0aGUgdHlwZSBcIiArIFN0cmluZyhuZXdfb2JqLnR5cGUpICtcblx0XHRcdFx0XHRcIiBjb25maXJtIHRoYXQgcmVuZGVyZXIgZXhpc3RzIGFuZCBpcyBhZGRlZCB0byB0aGUgR3JhcGhpY3NDb250cm9sbGVyLnR5cGVfcmVuZGVyZXJfdGFibGVcIlxuXHRcdFx0fVxuXHRcdH1cblx0fTtcblx0XG5cdHZhciByZW5kZXJfdGhpbmdzID0gZnVuY3Rpb24oKXtcblx0XHQvKipcblx0XHQqIGNhbGwgcmVuZGVyZXJzIGZvciBldmVyeXRoaW5nXG5cdFx0Ki9cblx0XHRcblx0XHR2YXIgdG9fcmVuZGVyID0gR3JhcGhpY3NNb2RlbC5zcGVjaWFsX3JlbmRlcjtcblxuXHRcdGZvcih2YXIgdHlwZSBpbiB0b19yZW5kZXIpe1xuXHRcdFx0dmFyIHRhYmxlID0gdG9fcmVuZGVyW3R5cGVdO1xuXHRcdFx0dmFyIHJlbmRlcmVyID0gdHlwZV9yZW5kZXJlcl90YWJsZVt0eXBlXTtcblxuXHRcdFx0Zm9yKHZhciBpZCBpbiB0YWJsZSl7XG5cdFx0XHRcdHNwcml0ZV9hbmltYXRlKHRhYmxlW2lkXSwgUHJpdmF0ZUdyYXBoaWNzKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0XG5cdH07XG5cdFxuXHR2YXIgc3ByaXRlX2FuaW1hdGUgPSBmdW5jdGlvbihzcHJpdGUpe1xuXHRcdC8vc2V0IGdyYXBoaWNhbCByZXByZXNlbnRhdGlvbiBiYXNlZCBvbiB0aGUgYW5pbWF0aW9uIHZhcmlhYmxlIGRldGVybWluZWQgYnkgdGhlIEFJXG5cdFx0Ly9zZXQgYW5pbWF0aW9uXG5cdFx0aWYoc3ByaXRlLnBoeXNpY2FsX2luc3RhbmNlLm5lZWRzX2dyYXBoaWNzX3VwZGF0ZSl7XG5cdFx0XHR2YXIgYW5pbWF0aW9uID0gc3ByaXRlLnBoeXNpY2FsX2luc3RhbmNlLmFuaW1hdGlvbjtcblx0XHRcdHNwcml0ZS5nb3RvQW5kUGxheShhbmltYXRpb24pXG5cdFx0fVxuXHRcdFxuXHRcdC8vc2V0IGRpcmVjdGlvblxuXHRcdGlmIChzcHJpdGUucGh5c2ljYWxfaW5zdGFuY2UuZGlyZWN0aW9uKXsgLy9pZiBkaXJlY3Rpb24gPT0gcmlnaHQsIGZsaXAgcmlnaHRcblx0XHRcdHNwcml0ZS5zY2FsZVggPSAtMTtcblx0XHR9ZWxzZXsgLy9lbHNlIGZsaXAgbGVmdFxuXHRcdFx0c3ByaXRlLnNjYWxlWCA9IDE7XG5cdFx0fVxuXG5cdFx0Ly9zZXQgYWxwaGEgaWYgYmxpbmtpbmdcblx0XHRpZihzcHJpdGUucGh5c2ljYWxfaW5zdGFuY2UuYmxpbmtpbmcgJiYgc3ByaXRlLnBoeXNpY2FsX2luc3RhbmNlLmJsaW5rX3RpbWVyJTIgPT0gMSl7XG5cdFx0XHRzcHJpdGUuYWxwaGEgPSAwO1xuXHRcdH1lbHNle1xuXHRcdFx0c3ByaXRlLmFscGhhID0gMTtcblx0XHR9XG5cdH07XG5cblx0Ly9jYWxsZWQgZnJvbSB1cGRhdGUoKSwgbWFpbnRhaW5zIGNhbWVyYSBwb3NpdGlvblxuXHR2YXIgdXBkYXRlX2NhbWVyYSA9IGZ1bmN0aW9uKCl7XG5cdFx0dmFyIGNhbWVyYSA9IEdyYXBoaWNzTW9kZWwuY2FtZXJhO1xuXHRcdHZhciBjZW50ZXIgPSBjYW1lcmEuY2VudGVyO1xuXHRcdFxuXHRcdGNlbnRlci54ID0gQ29uZmlnLlNDUkVFTl9XLzIgLSBjYW1lcmEub2Zmc2V0X2Zyb21fZm9sbG93ZWQueDtcblx0XHQvL0NBTUVSQSBTSE9VTEQgTk9UIE1PVkUgVkVSVElDQUxMWVxuXHRcdC8vY2VudGVyLnkgPSBDb25maWcuU0NSRUVOX0gvMiAtIGNhbWVyYS5vZmZzZXRfZnJvbV9mb2xsb3dlZC55O1xuXHRcdFxuXHRcdGlmKGNhbWVyYS5mb2xsb3dpbmcgIT0gbnVsbCl7XG5cdFx0ICAgIGNhbWVyYS5vZmZzZXQueCA9IGNlbnRlci54IC0gY2FtZXJhLmZvbGxvd2luZy5waHlzaWNhbF9pbnN0YW5jZS5ib2R5LkdldFdvcmxkQ2VudGVyKCkueCAqIENvbmZpZy5CMkQuU0NBTEU7XG5cdFx0XHRjYW1lcmEub2Zmc2V0LnkgPSBjZW50ZXIueSAtIGNhbWVyYS5mb2xsb3dpbmcucGh5c2ljYWxfaW5zdGFuY2UuYm9keS5HZXRXb3JsZENlbnRlcigpLnkgKiBDb25maWcuQjJELlNDQUxFO1xuXHRcdFx0Ly8gbm93LCB3ZSBkbyBub3Qgd2FudCB0aGUgY2FtZXJhIHRvIGRpc3BsYXkgd2hhdCBpcyBiZWhpbmQgdGhlIG1vdmVtZW50IGVkZ2UuIGJ1dCB0aGUgY2FtZXJhIGlzIGEgcmVsYXRpdmUgdGhpbmdcblx0XHRcdC8vIHNvIHdlIGNhbid0IGp1c3QgbGltaXQgc29tZSBzb3J0IG9mIHggcG9zaXRpb24gb3Igc3VjaC5cblx0XHRcdC8vIEknbGwgdXNlIHRoZSBmb2xsb3dpbmcgdGVjaG5pcXVlOiBcblx0XHRcdC8vICAgMS4gY2FsY3VsYXRlIHdlcmUgdGhlIHBoeXNpY2FsIG1vdmVtZW50IGVkZ2Ugd291bGQgYmUgaWYgZHJhd24gcmlnaHQgbm93IHRvIHRoZSBjYW52YXNcblx0XHRcdC8vICAgMi4gaWYgaXQgd291bGQgYmUgZGlzcGxheWVkIG9uLXNjcmVlbiwgb2Zmc2V0IGNhbWVyYSBzbyB0aGF0IGl0IHdvdWxkbid0IGJlIGFueW1vcmVcblxuXHRcdFx0dmFyIG1vdl9lZGdlX2dyYXBoaWNzX3ggPSAoV29ybGRDb250cm9sbGVyLmdldF9tb3ZlbWVudF9lZGdlKCkgKiBDb25maWcuQjJELlNDQUxFKSArIGNhbWVyYS5vZmZzZXQueDtcblxuXHRcdFx0Ly8gcmVjYWxsIHRoYXQgbGVmdCBkaXNwbGF5IGVkZ2UgaXMgMCBmb3IgZ3JhcGhpY3MsIGFzICgwLCAwKSBpcyB0aGUgdG9wLWxlZnQgY29ybmVyXG5cdFx0XHRpZihtb3ZfZWRnZV9ncmFwaGljc194ID4gMCl7XG5cdFx0XHRcdC8vIGlmIG1vdmVtZW50IGVkZ2Ugd291bGQgYmUgZGlzcGxheWVkXG5cdFx0XHRcdGNhbWVyYS5vZmZzZXQueCAtPSBtb3ZfZWRnZV9ncmFwaGljc194O1xuXHRcdFx0fVxuXHRcdH1cblx0XHRpZiAoY2FtZXJhLm9mZnNldC55IDwgMCkge1xuXHRcdCAgICBjYW1lcmEub2Zmc2V0LnkgPSAwO1xuXHRcdH1cblxuXHRcdGFkanVzdF9kZWJ1Z19kcmF3KCk7IC8vIGdvZXMgbGFzdFxuXHR9O1xuXG5cdFxuXG5cblx0Ly8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG5cdHZhciBhZGp1c3RfZGVidWdfZHJhdyA9IGZ1bmN0aW9uKCl7XG5cdFx0dmFyIGNhbWVyYSA9IEdyYXBoaWNzTW9kZWwuY2FtZXJhO1xuXHRcdFRlc3RDb250cm9sbGVyLnNldF9kZWJ1Z19vZmZzZXQoY2FtZXJhLm9mZnNldC54LCBjYW1lcmEub2Zmc2V0LnkpO1xuXHR9O1xuXG5cdHZhciByZXF1ZXN0X2JpdG1hcCA9IGZ1bmN0aW9uKGlkKXtcblx0XHQvLyBpZiBpZCBpcyBpbnZhbGlkLCB0aHJvdyBtZWFuaW5nZnVsIGV4Y2VwdGlvbj9cblx0XHR2YXIgYml0bWFwID0gbmV3IGNyZWF0ZWpzLkJpdG1hcChnZXRfYXNzZXQoaWQpKTtcblx0XHQvLyBtb3JlIGNvbXBsaWNhdGVkIHNldHRpbmcgZm9yIHJlZ2lzdHJhdGlvbiBwb3NpdGlvbiBtYXkgYmUgbmVlZGVkLCBkZXBlbmRpbmcgb24gdGhlIGJvZHkgYXR0YWNoZWRcblx0XHRpZiAoIShiaXRtYXAuaW1hZ2UpKXtcblx0XHRcdHRocm93IFwiRXJyb3I6IGltYWdlIHdhc24ndCBjb3JyZWN0bHkgbG9hZGVkIGZvciB0aGlzIGJpdG1hcFwiO1xuXHRcdH1cblx0XHRcblx0XHRiaXRtYXAucmVnWCA9IGJpdG1hcC5pbWFnZS53aWR0aC8yO1xuXHRcdGJpdG1hcC5yZWdZID0gYml0bWFwLmltYWdlLmhlaWdodC8yO1xuXG5cdFx0cmV0dXJuIGJpdG1hcDtcblx0XHQvLyBUT0RPIHJlc2VhcmNoIERpc3BsYXlPYmplY3QncyBjYWNoaW5nLiBhbmQgbWF5YmUgaW5jb3Jwb3JhdGVcblx0fTtcblx0XG5cdFxuXHR2YXIgcmVxdWVzdF9hbmltYXRlZCA9IGZ1bmN0aW9uKGlkLCBzdGFydF9mcmFtZSl7XG5cdFx0Ly8gdGhpcyBpbXBsZW1lbnRhdGlvbiBpcyB0ZW1wb3Jhcnlcblx0XHQvLyB1bnRpbCBJIHNldHVwIGVmZmljaWVudCBmYWNpbGl0eSBmb3IgZGVmaW5pbmcgc3ByaXRlc2hlZXRzXG5cdFx0Ly8gd2l0aGluIEdyYXBoaWNzQ29udHJvbGxlclxuXG5cdFx0aWYoIWlkIHx8ICFzdGFydF9mcmFtZSl7XG5cdFx0XHRpZighaWQpe1xuXHRcdFx0XHR0aHJvdyBcIndyb25nIGlkXCI7XG5cdFx0XHR9ZWxzZXtcblx0XHRcdFx0dGhyb3cgXCJ3cm9uZyBzdGFydF9mcmFtZVwiO1xuXHRcdFx0fVxuXHRcdH07XG5cblx0XHR2YXIgc3ByaXRlID0gbmV3IGNyZWF0ZWpzLlNwcml0ZShpZCwgc3RhcnRfZnJhbWUpO1xuXG5cdFx0cmV0dXJuIHNwcml0ZTtcblx0fTtcblxuXHRcblx0Ly9jb252ZXJ0cyBlYXNlbGpzIG9yaWdpbnMgdG8gYm94MmQgb3JpZ2luc1xuXHR2YXIgc3luY2hyb25pemVfdG9fcGh5c2ljYWxfYm9kaWVzID0gZnVuY3Rpb24oKXtcblxuXHRcdHZhciB0aWxlcyA9IEdyYXBoaWNzTW9kZWwuYWxsX3BoeXNpY2FsO1xuXG5cdFx0Zm9yKHZhciBpZCBpbiB0aWxlcyl7XG5cdFx0XHR2YXIgdGlsZSA9IHRpbGVzW2lkXTtcblx0XHRcdHZhciBib2R5ID0gdGlsZS5waHlzaWNhbF9pbnN0YW5jZS5ib2R5O1xuXHRcdFx0dmFyIHRpbGVfcG9zID0gdHJhbnNfeHkoYm9keS5HZXRXb3JsZENlbnRlcigpKTtcblxuXHRcdFx0dGlsZS54ID0gdGlsZV9wb3MueDtcblx0XHRcdHRpbGUueSA9IHRpbGVfcG9zLnk7XG5cdFx0fVxuXHR9O1xuXHRcblxuXHR2YXIgdHJhbnNfeHkgPSBmdW5jdGlvbihwb3NpdGlvbl92ZWN0b3JfdW5zY2FsZWQpe1xuXHRcdC8vIHRha2VzIHBvc2l0aW9uIHZlY3RvciB3aXRoIHZhbHVlcyBpbiBtZXRlcnMsIHRyYW5zbGF0ZXNcblx0XHQvLyBpdCB0byBwaXhlbCBwb3NpdGlvbiB0YWtpbmcgdGhlIGNhbWVyYSBwb3NpdGlvbiBpbnRvIGFjY291bnRcblx0XHR2YXIgY2FtZXJhID0gR3JhcGhpY3NNb2RlbC5jYW1lcmE7XG5cblx0XHR2YXIgeCA9IChwb3NpdGlvbl92ZWN0b3JfdW5zY2FsZWQueCAqIENvbmZpZy5CMkQuU0NBTEUpICsgY2FtZXJhLm9mZnNldC54O1xuXHRcdHZhciB5ID0gKHBvc2l0aW9uX3ZlY3Rvcl91bnNjYWxlZC55ICogQ29uZmlnLkIyRC5TQ0FMRSkgKyBjYW1lcmEub2Zmc2V0Lnk7XG5cblx0XHRyZXR1cm4ge3g6IHgsIHk6IHl9O1x0XG5cdH07XG5cblx0dmFyIHNldF9yZWdfcG9zaXRpb24gPSBmdW5jdGlvbihlYXNlbGpzX29iaiwgb2Zmc2V0X3gsIG9mZnNldF95KXtcblx0XHQvLyBzZXRzIHJlZ2lzdHJhdGlvbiBwb3NpdGlvbiBvZiB0aGUgZWFzZWxqcyBvYmplY3Rcblx0XHQvLyByZWdpc3JhdGlvbiBwb3NpdGlvbiBpcyB0aGUgcmVsYXRpdmUgcG9pbnQgb2YgdGhlIG9iamVjdFxuXHRcdC8vIHRoYXQgeW91IG1vdmUgd2hlbiB5b3Ugc2V0IG9iamVjdCdzIHggYW5kIHkgY29vcmRpbmF0c1xuXHRcdC8vIGkuZS4gaWYgcmVnLiBwb3NpdGlvbiBvZiB0aGUgcGxheWVyIGlzIGhlYWQsIGFuZCB5b3Ugc2V0IHRoZWlyXG5cdFx0Ly8gcG9zaXRpb24gdG8gKDAsIDApLCB0aGVpciBoZWFkIHdpbGwgYmUgYXQgKDAsIDApXG5cdFx0Ly8gY3VycmVudGx5IHRoZSByZWdpc3RyYXRpb24gcG9zaXRpb24gaXMgc2V0IHRvIHRoZSBtaWRkbGUgb2YgdGhlIGJvZHlcblx0XHQvLyB0byBtYXRjaCB3aGF0IGJveDJkIGRvZXNcblx0XHQvLyBsYXN0IHR3byBhcmd1bWVudHMgYXJlIG9wdGlvbmFsIGFuZCBzZXQgUElYRUwgb2Zmc2V0IGZyb20gdGhlIG5vcm1hbCByZWdpc3RyYXRpb25cblx0XHQvLyBwb3NpdGlvblxuXHRcdFxuXHRcdC8vIHRoaXMgaWYgc3RhdGVtZW50IHNob3VsZCBiZSB0ZW1wb3Jhcnlcblx0XHRpZihlYXNlbGpzX29iai5pbWFnZSl7XG5cdFx0XHR2YXIgdyA9IGVhc2VsanNfb2JqLmltYWdlLndpZHRoO1x0XG5cdFx0XHR2YXIgaCA9IGVhc2VsanNfb2JqLmltYWdlLmhlaWdodDtcdFxuXHRcdH1lbHNle1xuXHRcdFx0dmFyIHcgPSBlYXNlbGpzX29iai5zcHJpdGVTaGVldC5fZnJhbWVXaWR0aDtcblx0XHRcdHZhciBoID0gZWFzZWxqc19vYmouc3ByaXRlU2hlZXQuX2ZyYW1lSGVpZ2h0O1xuXHRcdH07XG5cblx0XHR2YXIgb2Zmc2V0X3ggPSBvZmZzZXRfeCB8fCAwO1xuXHRcdHZhciBvZmZzZXRfeSA9IG9mZnNldF95IHx8IDA7XG5cblx0XHRlYXNlbGpzX29iai5yZWdYID0gdy8yICsgb2Zmc2V0X3g7XG5cdFx0ZWFzZWxqc19vYmoucmVnWSA9IGgvMiArIG9mZnNldF95O1xuXG5cdH07XG5cblx0dmFyIHJlZ19mb3JfcmVuZGVyID0gZnVuY3Rpb24oZWFzZWxqc19vYmosIHBoeXNpY2FsX2luc3RhbmNlKXtcblx0XHQvLyByZWdpc3RlcmVzIG9iamVjdCBmb3IgcmVuZGVyaW5nIHdpdGhpbiBncmFwaGljcyBjb250cm9sbGVyXG5cdFx0Ly8gaWYgKE9QVElPTkFMISkgcGh5c2ljYWxfaW5zdGFuY2UgaXMgZ2l2ZW4sIGdyYXBoaWNzIGNvbnRyb2xsZXIgd2lsbCBhdXRvbWF0aWNhbGx5XG5cdFx0Ly8gc2V0IHRoZSBlYXNlbGpzX29iaidzIHBvc2l0aW9uIHRvIHBvc2l0aW9uIG9mIHRoYXQgYm9keSwgZWFjaCB0aWNrLlxuXHRcdC8vIGlmIHRoZSB0eXBlIG9mIHRoZSBwaHlzaWNhbCBpbnN0YW5jZSBpcyBhc3NvY2lhdGVkIHdpdGggc29tZSByZW5kZXJlclxuXHRcdFx0XG5cdFx0XG5cdFx0aWYocGh5c2ljYWxfaW5zdGFuY2Upe1xuXG5cdFx0XHRpZihwaHlzaWNhbF9pbnN0YW5jZS5ib2R5ID09IG51bGwpe1xuXHRcdFx0XHQvLyBhcmUgeW91IHRyeWluZyB0byBkbyBzb21ldGhpbmcgdGVycmlibGU/IHN1Y2ggYXMgcmVnaXN0ZXJpbmdcblx0XHRcdFx0Ly8gc29tZSBvYmplY3QgdGhhdCBkb2Vzbid0IG5lZWQgZ3JhcGhpY2FsIHJlcHJlc2VudGF0aW9uP1xuXHRcdFx0XHR0aHJvdyBcIlBoeXNpY2FsIGluc3RhbmNlIGlzIHByb3ZpZGVkLCBidXQgaXQgaGFzIG5vIGJvZHlcIjtcblx0XHRcdH1cblx0XHRcdHZhciBpZCA9IHBoeXNpY2FsX2luc3RhbmNlLmlkO1xuXHRcdFx0dmFyIHR5cGUgPSBwaHlzaWNhbF9pbnN0YW5jZS50eXBlO1xuXG5cdFx0XHRpZihpZCA9PSBudWxsIHx8IHR5cGUgPT0gbnVsbCl7XG5cdFx0XHRcdHRocm93IFwiSWQgb3IgdHlwZSBpcyB1bmRlZmluZWQgZm9yIHRoaXMgcGh5c2ljYWwgaW5zdGFuY2VcIjtcblx0XHRcdH1cblxuXHRcdFx0ZWFzZWxqc19vYmoucGh5c2ljYWxfaW5zdGFuY2UgPSBwaHlzaWNhbF9pbnN0YW5jZTtcblx0XHRcdEdyYXBoaWNzTW9kZWwuYWxsX3BoeXNpY2FsW2lkXSA9IGVhc2VsanNfb2JqO1xuXG5cdFx0XHRpZighR3JhcGhpY3NNb2RlbC5zcGVjaWFsX3JlbmRlclt0eXBlXSl7XG5cdFx0XHRcdEdyYXBoaWNzTW9kZWwuc3BlY2lhbF9yZW5kZXJbdHlwZV0gPSB7fTtcblx0XHRcdH1cblxuXHRcdFx0R3JhcGhpY3NNb2RlbC5zcGVjaWFsX3JlbmRlclt0eXBlXVtpZF0gPSBlYXNlbGpzX29iajtcblx0XHR9XG5cblxuXHRcdEFkZFRvU3RhZ2UoZWFzZWxqc19vYmopO1xuXHR9O1xuXG5cdHZhciBBZGRUb1N0YWdlID0gZnVuY3Rpb24oZWxlbWVudCl7XG5cdFx0Ly8gY2FuIGJlIHVwZGF0ZWQgbGF0ZXIgdG8gbWFuYWdlIHotaW5kZXggb3Igd2hhdGV2ZXJcblx0XHRHcmFwaGljc01vZGVsLnN0YWdlLmFkZENoaWxkKGVsZW1lbnQpO1xuXHR9O1xuXHRcblxuXHR2YXIgZ2V0X3N0YWdlID0gZnVuY3Rpb24oKXtcblx0XHRyZXR1cm4gR3JhcGhpY3NNb2RlbC5zdGFnZTtcblx0fTtcblx0XG5cdHZhciBnZXRfY2FtZXJhID0gZnVuY3Rpb24oKXtcblx0XHRyZXR1cm4gR3JhcGhpY3NNb2RlbC5jYW1lcmE7XG5cdH07XG5cdFxuXHR2YXIgZGVzdHJveV9ncmFwaGljc19mb3IgPSBmdW5jdGlvbihpZCl7XG5cdFx0LyoqXG5cdFx0KiByZW1vdmUgZnJvbSB0aGUgc3RhZ2UgYW5kIGRlc3Ryb3kgZ3JhcGhpY3MgaW5zdGFuY2VzIGZvciB0aGUgb2JqZWN0IHdpdGggdGhlIGdpdmVuIGlkXG5cdFx0KiB0aGlzIGluY2x1ZGVzIHJlbW92aW5nIGFsbCByZWZlcmVuY2VzIHRvIGl0LlxuXHRcdCogVE9ETzogSU1QT1JUQU5UISEhIGlmIEdyYXBoaWNzQ29udHJvbGxlciB3YXMgdXBkYXRlZCB0byBzdG9yZSBtb3JlXG5cdFx0KiByZWZlcmVuY2VzIHRvIHNvbWUgZ3JhcGhpY3MgaW5zdGFuY2VzLCBVUERBVEUgdGhpcyBmdW5jdGlvbiB0byByZWZsZWN0IGNoYW5nZXNcblx0XHQqIGV2ZW4gYSBzaW5nbGUgcmVmZXJlbmNlIHRvIHRoZSBvYmplY3QgbWF5IGNhdXNlIGl0IHRvIHN0YXkgaW4gbWVtb3J5XG5cdFx0Ki9cblx0XHRcblxuXHRcdGlmKEdyYXBoaWNzTW9kZWwuYWxsX3BoeXNpY2FsW2lkXSAhPSBudWxsKXtcblx0XHRcdHZhciBncmFwaGljc19pbnN0YW5jZSA9IEdyYXBoaWNzTW9kZWwuYWxsX3BoeXNpY2FsW2lkXTtcblx0XHR9ZWxzZXtcblx0XHRcdC8vIGlmIHlvdSBlbmNvdW50ZXIgdGhpcyBleGNlcHRpb24sIG1heWJlIGltcGxlbWVudGF0aW9uIGNoYW5nZWQuIFxuXHRcdFx0Ly8gSWYgdGhhdCdzIHRoZSBjYXNlLCBzb21lIHRoaW5ncyBuZWVkIHJld3JpdGluZy4gVGhpcyBmdW5jdGlvbiBpblxuXHRcdFx0Ly8gcHJ0aWN1bGFyLiBPciBtYXliZSB0aGVyZSBpcyBhIGJ1Zy5cblx0XHRcdHRocm93IFwiVGhlIGdyYXBoaWNzIG9iamVjdCB3aXRoIGlkIFwiICsgU3RyaW5nKGlkKSArIFwiIGlzbid0IHJlZ2lzdGVyZWQgYXMgaGF2aW5nIHBoeXNpY2FsIGJvZHlcIjtcblx0XHR9XG5cblx0XHRpZihncmFwaGljc19pbnN0YW5jZS5waHlzaWNhbF9pbnN0YW5jZS50eXBlICE9IG51bGwpe1xuXHRcdFx0dmFyIHR5cGUgPSBncmFwaGljc19pbnN0YW5jZS5waHlzaWNhbF9pbnN0YW5jZS50eXBlO1xuXG5cdFx0fWVsc2V7XG5cdFx0XHQvLyBpZiB5b3UgZW5jb3VudGVyIHRoaXMgZXhjZXB0aW9uIGl0IG1heSBtZWFuIGEgYnVnLCBvciBhbHRlcm5hdGl2ZWx5XG5cdFx0XHQvLyBpdCBtYXkgbWVhbiB0aGF0IGltcGxlbWVudGF0aW9uIGNoYW5nZWQgYW5kIHRoaXMgZnVuY3Rpb24gbmVlZHMgYW4gdXBkYXRlXG5cdFx0XHR0aHJvdyBcIlBoeXNpY2FsIGluc3RhbmNlIHdpdGggaWQgXCIgKyBTdHJpbmcoaWQpICsgXCIgZG9lc24ndCBzZWVtIHRvIGhhdmUgYSB0eXBlXCI7XG5cdFx0fVxuXHRcdFxuXHRcdC8vIHJlbW92ZSBmcm9tIHRoZSBzdGFnZSBcblx0XHRcblx0XHRcdC8qIGdyYXBoaWNzX2luc3RhbmNlLnJlbW92ZUFsbEV2ZW50TGlzdGVuZXJzKCk7IFxuXHRcdFx0ICAgY291bGQgYmUgbmVjZXNzYXJ5IHRvIHJlbW92ZSBhdHRhY2hlZCBldmVudCBsaXN0ZW5lcnMsIGJ1dCBpdCBzZWVtcywgYXQgbGVhc3Rcblx0XHRcdCAgIHNvIGZhciwgdGhhdCB0aGlzIHN0dWZmIGlzIGRvbmUgYXV0b21hdGljYWxseSBiZSBlYXNlbGpzICovXG5cblx0XHRcdEdyYXBoaWNzTW9kZWwuc3RhZ2UucmVtb3ZlQ2hpbGQoZ3JhcGhpY3NfaW5zdGFuY2UpO1xuXG5cdFx0Ly8gcmVtb3ZlIGZyb20gYWxsX3BoeXNpY2FsIChyZXNwb25zaWJsZSB0cmFja2luZyBmb3IgYm9keSBwb3NpdGlvbilcblx0XHRcdGRlbGV0ZSBHcmFwaGljc01vZGVsLmFsbF9waHlzaWNhbFtpZF07XG5cdFx0Ly8gcmVtb3ZlIGZyb20gc3BlY2lhbF9yZW5kZXJcblx0XHRcdGRlbGV0ZSBHcmFwaGljc01vZGVsLnNwZWNpYWxfcmVuZGVyW3R5cGVdW2lkXTtcblx0XHQvLyBUT0RPOiByZW1vdmUgY2FtZXJhIHJlZmVyZW5jZSBpZiBmb2xsb3dpbmcgdGhpcyBvYmplY3Rcblx0XHRcdFxuXHR9O1xuXG5cdHJldHVybiB7XG5cdFx0Ly8gZGVjbGFyZSBwdWJsaWNcblx0XHRpbml0OiBpbml0LCBcblx0XHR1cGRhdGU6IHVwZGF0ZSxcblx0XHRnZXRfc3RhZ2U6IGdldF9zdGFnZSxcblx0XHRnZXRfY2FtZXJhOiBnZXRfY2FtZXJhLFxuXHRcdGdldF9hc3NldDogZ2V0X2Fzc2V0LFxuXHRcdHJlZ19mb3JfcmVuZGVyOiByZWdfZm9yX3JlbmRlcixcblx0XHRzZXRfcmVnX3Bvc2l0aW9uOiBzZXRfcmVnX3Bvc2l0aW9uLFxuXHRcdHJlcXVlc3RfYml0bWFwOiByZXF1ZXN0X2JpdG1hcCxcblx0XHRyZXF1ZXN0X2FuaW1hdGVkOiByZXF1ZXN0X2FuaW1hdGVkLFxuXHRcdGRlc3Ryb3lfZ3JhcGhpY3NfZm9yOiBkZXN0cm95X2dyYXBoaWNzX2Zvcixcblx0XHRmb2xsb3c6IGZvbGxvdyxcblx0fTtcbn0pKCk7XG5cbm1vZHVsZS5leHBvcnRzID0gR3JhcGhpY3NDb250cm9sbGVyO1xuXG52YXIgSW5jbHVkZXMgPSByZXF1aXJlKFwiLi4vSW5jbHVkZXMuanNcIik7IHZhciBpbmNsdWRlX2RhdGEgPSBJbmNsdWRlcy5nZXRfaW5jbHVkZV9kYXRhKHtcblx0Y3VycmVudF9tb2R1bGU6IFwiR3JhcGhpY3NDb250cm9sbGVyXCIsIFxuXHRpbmNsdWRlX29wdGlvbnM6IEluY2x1ZGVzLmNob2ljZXMuREVGQVVMVCB8IEluY2x1ZGVzLmNob2ljZXMuUkVOREVSRVJTXG59KTsgZXZhbChpbmNsdWRlX2RhdGEubmFtZV9zdGF0ZW1lbnRzKTsgdmFyIGluY2x1ZGUgPSBmdW5jdGlvbigpe2V2YWwoaW5jbHVkZV9kYXRhLm1vZHVsZV9zdGF0ZW1lbnRzKTt9XG5cbiIsIlxudmFyIElkZW50aWZpY2F0aW9uQ29udHJvbGxlciA9IChmdW5jdGlvbigpe1xuXHQvKiBJcyBpbiBjaGFyZ2Ugb2YgZ2l2aW5nIHVuaXF1ZSBJRCdzIHRvIGV2ZXJ5dGhpbmdcblx0ICogdGhhdCB3YW50cyB0aGVtXG5cdCovXG5cblx0dmFyIGluaXQgPSBmdW5jdGlvbigpe1xuXHRcdC8qIGlzIHJhbiBmcm9tIHRoZSBJbml0Q29udHJvbGxlciBvbmNlIHdoZW4gdGhlIGdhbWUgaXMgbG9hZGVkICovXG5cblx0XHRpbmNsdWRlKCk7IC8vIHNhdGlzZnkgcmVxdWlyZW1lbnRzXG5cblx0XHQvLyBjcmVhdGUgMTAwIGlkJ3Ncblx0XHRmb3IodmFyIGkgPSAwOyBpIDwgMTAwOyBpKyspe1xuXHRcdFx0dmFyIGlkID0gSWRlbnRpZmljYXRpb25Nb2RlbC5uZXh0X2lkICsrO1xuXHRcdFx0SWRlbnRpZmljYXRpb25Nb2RlbC5mcmVlX2lkcy5wdXNoKGlkKTtcblx0XHRcdElkZW50aWZpY2F0aW9uTW9kZWwuaWRfbWF0Y2hpbmdbaWRdID0gbnVsbDtcblx0XHR9XG5cblx0fTtcblxuXHR2YXIgdXBkYXRlID0gZnVuY3Rpb24oZGVsdGEpe1xuXHRcdC8qIGlzIHJhbiBlYWNoIHRpY2sgZnJvbSB0aGUgR2FtZUNvbnRyb2xsZXIudXBkYXRlX2FsbCAqL1xuXHRcdC8vIGNsZWFudXAgaWRzLCBpZiB0b28gbWFueSBmcmVlIGlkcyAobGlrZSBpZiBub24tZnJlZSBpZCdzIDwgZnJlZSBpZCdzLzEwXG5cdFx0XG5cdFx0Ly9UT0RPOiBtYWtlIGZ1bmN0aW9uIHRvIGFjdHVhbGx5IGJlIGNhbGxlZCBmcm9tIHRoZSBHYW1lQ29udHJvbGxlci51cGRhdGVfYWxsXG5cdFx0Ly8gVE9ETzogbG9vcCB0aHJvdWdoIGFsbCBub24tZnJlZSBpZCdzLCBhbmQgaWYgYW55IG9mIHRoZW0gcmVmZXJlbmNlIG51bGwsXG5cdFx0Ly8gcmVtb3ZlICh1bnJlZ2lzdGVyKSB0aGVtO1xuXHRcdHZhciBjbWRzID0gS2V5Ym9hcmRDb250cm9sbGVyLmRlYnVnX2NvbW1hbmRzKCk7XG5cdFx0XG5cdFx0aWYoY21kcyhcInNob3dfaWRzXCIpKXtcblx0XHRcdGNvbnNvbGUubG9nKElkZW50aWZpY2F0aW9uTW9kZWwuZnJlZV9pZHMsIElkZW50aWZpY2F0aW9uTW9kZWwubmV4dF9pZCk7XG5cdFx0fVxuXG5cdH07XG5cblx0dmFyIGFzc2lnbl9pZCA9IGZ1bmN0aW9uKG9iaiwgc2V0X2lkKXtcblx0XHQvKipcblx0XHQqIGFzc2lnbnMgaWQgdG8gdGhlIG9iamVjdFxuXHRcdCogc2V0cyBwcm9wZXJ0eSBpZCBvbiB0aGUgb2JqZWN0IGdpdmVuLiB5b3UgY2FuIGdpdmUgT1BUSU9OQUwgcGFyYW1ldGVyXG5cdFx0KiBzZXRfaWQgd2hpY2ggc2hvdWxkIGJlIGEgZnVuY3Rpb24gdGhhdCB0YWtlcyBvYmplY3QgYW5kIGlkIGFuZCBhc3NpZ25zXG5cdFx0KiBpZCB0byB0aGUgb2JqZWN0LiB0aGlzIGNhbiBiZSB1c2VmdWwgaWYgeW91IHdhbnQgdG8gc3RvcmUgaWQgaW4gc29tZSB1bnVzdWFsXG5cdFx0KiBwbGFjZSwgb3IgcGVyZm9ybSBzb21lIGV4dHJhIG9wZXJhdGlvbnMgYmVmb3JlIGlkIGlzIGFzc2lnbmVkXG5cdFx0KlxuXHRcdCogcmV0dXJuIGlkIGFzc2lnbmVkXG5cdFx0KiBJZGVudGlmaWNhdGlvbkNvbnRyb2xsZXIgd2lsbCByZW1lbWJlciB0aGF0IHRoaXMgaWQgaGFzIGJlZW4gYXNzaWduZWRcblx0XHQqIHRoaXMgb2JqZWN0XG5cdFx0Ki9cblx0XHR2YXIgZnJlZSA9IElkZW50aWZpY2F0aW9uTW9kZWwuZnJlZV9pZHM7XG5cdFx0dmFyIGlkO1xuXG5cdFx0Ly8gZ2V0IGZyZWUgaWRcblx0XHRpZihmcmVlLmxlbmd0aCA+IDApe1xuXHRcdFx0aWQgPSBmcmVlLnBvcCgpO1xuXHRcdH1lbHNle1xuXHRcdFx0aWQgPSBJZGVudGlmaWNhdGlvbk1vZGVsLm5leHRfaWQrKztcblx0XHR9XG5cblx0XHQvLyBzZXQgaWQgb24gdGhlIG9iamVjdC4gdGhyb3VnaCBmdW5jdGlvbiBpZiBwcm92aWRlZFxuXHRcdGlmKHNldF9pZCl7XG5cdFx0XHRzZXRfaWQob2JqLCBpZCk7XG5cdFx0fWVsc2V7XG5cdFx0XHRvYmouaWQgPSBpZDtcblx0XHR9XG5cblx0XHQvLyBhc3NvY2lhdGUgaWQgd2l0aCB0aGUgb2JqZWN0IG9ialxuXHRcdElkZW50aWZpY2F0aW9uTW9kZWwuaWRfbWF0Y2hpbmdbaWRdID0gb2JqO1xuXG5cdFx0cmV0dXJuIGlkXG5cdH07XG5cblx0dmFyIHJlc2VydmVfaWQgPSBmdW5jdGlvbigpe1xuXHRcdC8qKlxuXHRcdCogcmV0dXJucyBmcmVlIGlkIGFuZCBwcm9taXNlcyBub3QgdG8gb3Zlcml0ZSBpdFxuXHRcdCogYWxzbyBhbGxvd3Mgc29tZW9uZSB0byBmb3JjZSB0aGlzIGlkXG5cdFx0Ki9cblx0XHR2YXIgZnJlZSA9IElkZW50aWZpY2F0aW9uTW9kZWwuZnJlZV9pZHM7XG5cdFx0Ly8gZ2V0IGZyZWUgaWRcblx0XHRpZihmcmVlLmxlbmd0aCA+IDApe1xuXHRcdFx0aWQgPSBmcmVlLnBvcCgpO1xuXHRcdH1lbHNle1xuXHRcdFx0aWQgPSBJZGVudGlmaWNhdGlvbk1vZGVsLm5leHRfaWQrKztcblx0XHR9XG5cblx0XHRJZGVudGlmaWNhdGlvbk1vZGVsLnJlc2VydmVkLnB1c2goaWQpO1xuXG5cdFx0cmV0dXJuIGlkO1xuXG5cdH07XG5cdFxuXG5cdHZhciBmb3JjZV9pZCA9IGZ1bmN0aW9uKG9iaiwgaWQsIHNldF9pZCl7XG5cdFx0LyoqXG5cdFx0KiBGb3JjZSBvYmplY3QgPm9iajwgdG8gaGF2ZSB0aGUgZ2l2ZW4gaWQgPmlkPFxuXHRcdCogSWYgaWQgaXNuJ3QgZnJlZSwgZXhjZXB0aW9uIGlzIHRocm93blxuXHRcdCogVGhpcyBmdW5jdGlvbiBpcyBtb3N0IGxpa2VseSB1c2VkIGRpcmVjdGx5IG9ubHkgZm9yIHRoZSBtdWx0aXBsYXllclxuXHRcdCogcHVycG9zZXMgXG5cdFx0KiBJZiBPUFRJT05BTCBmdW5jdGlvbiA+c2V0X2lkPCBpcyBnaXZlbiwgaXQnbGwgYmUgY2FsbGVkIGluc3RlYWRcblx0XHQqIG9mIGFzc2lnbmluZyBpZHMgZGlyZWN0bHkgKHVzZSB0aGlzIGlmIHNwZWNpYWwgbWFuaXB1bGF0aW9ucyBzaG91bGQgYmUgZG9uZSlcblx0XHQqXG5cdFx0Ki9cblxuXHRcdHZhciBmcmVlID0gSWRlbnRpZmljYXRpb25Nb2RlbC5mcmVlX2lkcztcblx0XHR2YXIgcmVzZXJ2ZWQgPSBJZGVudGlmaWNhdGlvbk1vZGVsLnJlc2VydmVkO1xuXG5cdFx0dmFyIGlkeCA9IGZyZWUuaW5kZXhPZihpZCk7IFxuXHRcdHZhciBpZHkgPSByZXNlcnZlZC5pbmRleE9mKGlkKTtcblxuXHRcdGlmKGlkeCA+PSAwKXtcblx0XHRcdHZhciBpZCA9IGZyZWUuc3BsaWNlKGlkeCwgMSk7IC8vIGV4dHJhY3QgdGhlIGRlc2lyZWQgaW5kZXggXG5cdFx0fWVsc2UgaWYgKGlkeSA+PSAwKXtcblx0XHRcdHZhciBpZCA9IHJlc2VydmVkLnNwbGljZShpZHgsIDEpOyAvLyBleHRyYWN0IHRoZSBkZXNpcmVkIGluZGV4IFxuXHRcdH1lbHNle1xuXHRcdFx0Ly8gaWYgbm90IGZvdW5kLCB0aGVuIG5vbi1mcmVlIGlkLCB0aGVuIGV4Y2VwdGlvblxuXHRcdFx0dGhyb3cgXCJUaGUgaWQgXCIgKyBTdHJpbmcoaWQpICsgXCIgaXMgbm9uLWZyZWVcIjtcblx0XHR9XG5cdFxuXHRcdC8vIHNldCBpZCBvbiB0aGUgb2JqZWN0LiB0aHJvdWdoIGZ1bmN0aW9uIGlmIHByb3ZpZGVkXG5cdFx0aWYoc2V0X2lkKXtcblx0XHRcdHNldF9pZChvYmosIGlkKTtcblx0XHR9ZWxzZXtcblx0XHRcdG9iai5pZCA9IGlkO1xuXHRcdH1cblxuXHRcdC8vIGFzc29jaWF0ZSBpZCB3aXRoIHRoZSBvYmplY3Qgb2JqXG5cdFx0SWRlbnRpZmljYXRpb25Nb2RlbC5pZF9tYXRjaGluZ1tpZF0gPSBvYmo7XG5cblx0XHRyZXR1cm4gaWQ7XG5cblx0fTtcblxuXHR2YXIgZ2V0X2J5X2lkID0gZnVuY3Rpb24oaWQpe1xuXHRcdC8qKlxuXHRcdCogZ2V0IG9iamVjdCBhc3NvY2lhdGVkIHdpdGggdGhlIGdpdmVuIGlkXG5cdFx0Ki9cblx0XHRyZXR1cm4gSWRlbnRpZmljYXRpb25Nb2RlbC5pZF9tYXRjaGluZ1tpZF07XG5cdH07XG5cblx0dmFyIHJlbW92ZV9pZCA9IGZ1bmN0aW9uKGlkKXtcblx0XHQvKipcblx0XHQqIG1hcmsgaWQgYXMgZnJlZSBhbmQgbm8gbG9uZ2VyIGFzc2ljaWF0ZSBpdCB3aXRoIGFueSBvYmplY3Rcblx0XHQqIG5vdGljZSB0aGF0IHlvdSB5b3Vyc2VsZiBpcyByZXNwb25zaWJsZSBmb3IgbWFraW5nIHN1cmVcblx0XHQqIHRoYXQgb2JqZWN0IHRoYXQgd2FzIGFzc29jaWF0ZWQgd2l0aCB0aGlzIGlkIGRvZXNuJ3QgdGhpbmtcblx0XHQqIHRoYXQgaGUgaXMgc3RpbGwgYXNzaWduZWQgdGhpcyBpc1xuXHRcdCovXG5cblx0XHQvLyBUT0RPOiBtYWtlIHN1cmUgdGhhdCBhbGwga25vd24gcGxhY2VzIHRoYXQgdXNlIGlkcyAoUGh5c2ljc0NvbnRyb2xsZXJzJ1xuXHRcdC8vIGNvbnRhY3QgbGlzdGVuZXIgZm9yIGV4YW1wbGUpIGFyZSBub3RpZmllZCB0aGF0IGlkIGhhZCBiZWVuIHVucmVnaXN0ZXJlZFxuXHRcdGRlbGV0ZSBJZGVudGlmaWNhdGlvbk1vZGVsLmlkX21hdGNoaW5nW2lkXTtcblx0XHRJZGVudGlmaWNhdGlvbk1vZGVsLmZyZWVfaWRzLnB1c2goaWQpO1xuXHR9O1xuXHRcblx0dmFyIGFzc2lnbl90eXBlID0gZnVuY3Rpb24ob2JqLCB0eXBlKXtcblx0XHQvKipcblx0XHQqIGFzc2lnbnMgd2FudGVkIHR5cGUgKHN0cmluZykgdG8gdGhlIGdpdmVuXG5cdFx0KiBtb2RlbCBkZWZpbml0aW9uXG5cdFx0KiBpZiB5b3UgdHJ5IHRvIGFzc2lnbiBzYW1lIHR5cGUgdHdpY2UsIHRocm93cyBleGNlcHRpb247XG5cdFx0KiBJZC4uLkNvbnRyb2xsZXIgYWxsb3dzIHlvdSB0byByZXRyaWV2ZSBtb2RlbFxuXHRcdCovXG5cblx0XHR2YXIgdHlwZXMgPSBJZGVudGlmaWNhdGlvbk1vZGVsLnR5cGVzO1xuXHRcdGlmKHR5cGVzW3R5cGVdKXtcblx0XHRcdHRocm93IFwiRXJyb3I6IHR5cGUgXCIgKyB0eXBlICsgXCIgaXMgYWxyZWFkeSByZWdpc3RlcmVkLiBcIiArXG5cdFx0XHRcdFwiWW91IGNhbid0IHJlZ2lzdGVyIHRoZSBzYW1lIHR5cGUgdHdpY2VcIjtcblx0XHR9ZWxzZXtcblx0XHRcdHR5cGVzW3R5cGVdID0gb2JqO1xuXHRcdFx0b2JqLnByb3RvdHlwZS50eXBlID0gdHlwZTtcblx0XHR9XG5cdFx0XG5cdH07XG5cdFxuXHR2YXIgZ2V0X2J5X3R5cGUgPSBmdW5jdGlvbih0eXBlKXtcblx0XHQvKipcblx0XHQqIGdldHMgb2JqZWN0IGJ5IGl0J3MgdHlwZVxuXHRcdCovXG5cdFx0dmFyIHR5cGVzID0gSWRlbnRpZmljYXRpb25Nb2RlbC50eXBlcztcblx0XHRpZih0eXBlc1t0eXBlXSl7XG5cdFx0XHRyZXR1cm4gdHlwZXNbdHlwZV07XG5cdFx0fWVsc2V7XG5cdFx0XHR0aHJvdyBcIkVycm9yOiB0eXBlIFwiICsgdHlwZSArIFwiIHdhc24ndCBkZWZpbmVkIHlldFwiO1xuXHRcdH1cblx0fTtcblx0XG5cdFxuXHRcblx0XG5cdHJldHVybiB7XG5cdFx0Ly8gZGVjbGFyZSBwdWJsaWNcblx0XHRpbml0OiBpbml0LCBcblx0XHR1cGRhdGU6IHVwZGF0ZSxcblx0XHRhc3NpZ25faWQ6IGFzc2lnbl9pZCxcblx0XHRyZXNlcnZlX2lkOiByZXNlcnZlX2lkLFxuXHRcdGZvcmNlX2lkOiBmb3JjZV9pZCxcblx0XHRnZXRfYnlfaWQ6IGdldF9ieV9pZCxcblx0XHRyZW1vdmVfaWQ6IHJlbW92ZV9pZCxcblx0XHRhc3NpZ25fdHlwZTogYXNzaWduX3R5cGUsXG5cdFx0Z2V0X2J5X3R5cGU6IGdldF9ieV90eXBlLFxuXHR9O1xufSkoKTtcblxubW9kdWxlLmV4cG9ydHMgPSBJZGVudGlmaWNhdGlvbkNvbnRyb2xsZXI7XG5cbnZhciBJbmNsdWRlcyA9IHJlcXVpcmUoXCIuLi9JbmNsdWRlcy5qc1wiKTsgdmFyIGluY2x1ZGVfZGF0YSA9IEluY2x1ZGVzLmdldF9pbmNsdWRlX2RhdGEoe1xuXHRjdXJyZW50X21vZHVsZTogXCJJZGVudGlmaWNhdGlvbkNvbnRyb2xsZXJcIiwgXG5cdGluY2x1ZGVfb3B0aW9uczogSW5jbHVkZXMuY2hvaWNlcy5ERUZBVUxUXG59KTsgZXZhbChpbmNsdWRlX2RhdGEubmFtZV9zdGF0ZW1lbnRzKTsgdmFyIGluY2x1ZGUgPSBmdW5jdGlvbigpe2V2YWwoaW5jbHVkZV9kYXRhLm1vZHVsZV9zdGF0ZW1lbnRzKTt9XG5cbiIsInZhciBJbml0Q29udHJvbGxlciA9IChmdW5jdGlvbigpe1xuXHQvLyB3aHkgZG8geW91IHdhbnQgdG8gcHV0IGluaXRpYWxpemF0aW9uIG9mIGV2ZXJ5dGhpbmcgaW50byB0aGUgSW5pdENvbnRyb2xsZXI/XG5cdC8vIEJlY2F1c2UgaWYgaW5pdGlhbGl6YXRpb24gb2Ygc210aCBkZXBlbmRzIG9uIGluaXRpYWxpemF0aW9uIG9mIHNtdGggZWxzZSxcblx0Ly8gaXQncyBlYXNpZXIgdG8gY29udHJvbCBoZXJlXG5cdC8vXG5cdC8vIGUuZy4gaWYgeW91IHRyeSB0byBkbyB2YXIgZm9vID0gJCgnI2ZvbycpOyBzb21ld2hlcmUgaW4gb3RoZXIgbW9kdWxlLFxuXHQvLyB5b3UgY2FuIGdldCBmb28gPSBudWxsOyBhcyBjb2RlIG9mIHRoYXQgbW9kdWxlIGNhbiBleGVjdXRlIGJlZm9yZSB0aGUgaHRtbCBkb2N1bWVudFxuXHQvLyB3YXMgZnVsbHkgbG9hZGVkLCBidXQgPkluaXRDb250cm9sbGVyLmluaXQ8IGlzIGNhbGxlZCBhZnRlciBkb2N1bWVudCB3YXMgbG9hZGVkLCBzb1xuXHQvLyAtMSBwb3RlbnRpYWwgcHJvYmxlbS4gQnR3LCBhdCB0aGlzIG1vbWVudCBpbiB0aW1lIHRoZSB0aGUgc3R1ZmYgaXMgc2V0IHRvIHdvcmsgdGhhdCB3YXlcblx0Ly8gdXNpbmcgaHRtbCAoPGJvZHkgb25sb2FkPS4uLik7IG1heWJlIHVzaW5nIEpTIHdvdWxkIGJlIGJldHRlcj8gSWRrO1xuXHRcdFxuXG5cdHZhciBpbml0ID0gZnVuY3Rpb24obW9kZSwgc2Vzc2lvbl9pZCwgcGxheWVyX2lkKXtcblx0XHRpbmNsdWRlKCk7XG5cblx0XHRDb25maWcuSW5pdC5tb2RlID0gbW9kZTtcblx0XHRDb25maWcuSW5pdC5zZXNzaW9uX2lkID0gc2Vzc2lvbl9pZDtcblx0XHRDb25maWcuSW5pdC5wbGF5ZXJfaWQgPSBwbGF5ZXJfaWQ7XG5cblx0XHRlbmFibGVfYXJyb3drZXlfc2Nyb2xsKGZhbHNlKTtcblx0XHRzZXR1cF9zY3JlZW4oKTtcblx0XHRzZXR1cF9ldmVudHMoKTtcblxuXHRcdGluaXRfYWxsX21vZHVsZXMobW9kZSk7IC8vIGNhbGwgLmluaXQgZnVuY3Rpb24gb2YgZXZlcnlvbmUuIGUuZy4gUGxheWVyQ29udHJvbGxlci5pbml0KCk7IGV0Yy5cblxuXHRcdFxuXHRcdC8vIE5vdGljZSB0aGF0IGFzc2V0IGRlcGVuZGVudCBzdHVmZiBkb2Vzbid0IChhbmQgbXVzdG4ndCkgc3RhcnQgdW50aWxcblx0XHQvLyBhbGwgYXNzZXRzIGFyZSBjb21wbGV0ZWx5IGxvYWRlZC4gVGhhdCBpbmNsdWRlcyB0aWNrZXIsIGkuZS4gbm8gdGlja3MgYXJlIHByb2Nlc3NlZFxuXHRcdC8vIHVudGlsIGV2ZXJ5dGhpbmcgaXMgbG9hZGVkLiBJZiB5b3Ugd2FudCBzb21ldGhpbmcgZGlmZmVyZW50LCBlLmcuIGRpc3BsYXkgc29tZSBzb3J0IG9mIGxvYWRpbmdcblx0XHQvLyBhbmltYXRpb24gLSBsZXQgbWUga25vdy5cblx0XHQvLyBMb29rIGludG8gdGhlIHNldHVwX2Fzc2V0X2RlcGVuZGVudCBmdW5jdGlvblxuXHRcdFx0QXNzZXRNb2RlbC5sb2FkZXIgPSBuZXcgY3JlYXRlanMuTG9hZFF1ZXVlKGZhbHNlKTsgLy8gbG9hZGluZyByZXNvdXJzZXMgdXNpbmcgcHJlbG9hZC5qc1xuXHRcdFx0QXNzZXRNb2RlbC5sb2FkZXIuYWRkRXZlbnRMaXN0ZW5lcihcImNvbXBsZXRlXCIsIHNldHVwX2Fzc2V0X2RlcGVuZGVudCk7XG5cblx0XHQvLyBpZiBtb3JlIHN0dWZmIG5lZWRzIHRvIGJlIGRvbmUgZm9yIHRoZSB0ZXN0IG1vZGUsIFxuXHRcdC8vIG9yIG1vcmUgdHlwZXMgb2YgaXQgbmVlZHMgdG8gYmUgYWRkZWRcblx0XHQvLyB5b3UgY2FuIHNhZmVseSBtYWtlIHRoZSBmb2xsb3dpbmcgYSBzZXBhcmF0ZSBmdW5jdGlvblxuXHRcdFx0dmFyIGFzc2V0X3BhdGggPSAobW9kZSA9PSBcInRlc3RcIikgPyBcIi4vYXNzZXRzL2FydC9cIiA6IFwiLi4vR2FtZUNvZGUvYXNzZXRzL2FydC9cIjtcblxuXHRcdEFzc2V0Q29udHJvbGxlci5pbml0KGFzc2V0X3BhdGgpO1xuXHRcdFxuXHRcdC8vc2V0dXBfYXNzZXRfZGVwZW5kZW50KCk7XG5cblx0fTtcblxuXHR2YXIgaW5pdF9hbGxfbW9kdWxlcyA9IGZ1bmN0aW9uKG1vZGUpe1xuXHRcdC8vIFRPRE86IGJldHRlciB3YXkgdG8gZG8gc3R1ZmYgbGlrZSB0aGF0IChjYWxsIGNlcnRhaW4gZnVuY3Rpb25cblx0XHQvLyBvZiBldmVyeSBtb2R1bGUgaW4gdGhlIG9yZGVyLiBcblx0XHQvLyBBbHNvLCBpbml0IGFuZCB1cGRhdGUgZnVuY3Rpb25zIG9mIGVhY2ggbW9kdWxlIHNob3VsZCBwcm9iYWJseVxuXHRcdC8vIGFjY2VwdCBzb21lIGFyZ3VtZW50LiBJIHRoaW5rIHRvIG1ha2UgdGhpcyBhcmd1bWVudCBhbiBvYmplY3QsXG5cdFx0Ly8gdGhpcyB3YXkgd2UgY2FuIGFkZCBtb3JlIHRoaW5ncyB0byBiZSBwYXNzZWQgdy9vIGFueSBwcm9ibGVtIGFuZFxuXHRcdC8vIHdlIHdvbid0IG5lZWQgdG8gY2hhbmdlIGFueXRoaW5nXG5cdFx0XG5cdFx0QjJkLmluaXQoKTsgLy8gZ29lcyBmaXJzdFxuXHRcdElkZW50aWZpY2F0aW9uQ29udHJvbGxlci5pbml0KCk7XG5cdFx0UmVnaXN0ZXJBc0NvbnRyb2xsZXIuaW5pdCgpO1xuXG5cdFx0Ly9Bc3NldENvbnRyb2xsZXIuaW5pdCgpOyAvLyBjYWxsZWQgZnJvbSB0aGUgSW5pdENvbnRyb2xsZXIuaW5pdC8vIHN0dWZmIGhhcyB0byBjaGFuZ2Vcblx0XHRHYW1lQ29udHJvbGxlci5pbml0KCk7XG5cdFx0S2V5Ym9hcmRDb250cm9sbGVyLmluaXQoKTtcblx0XHRQaHlzaWNzQ29udHJvbGxlci5pbml0KCk7XG5cblx0XHRUZXN0Q29udHJvbGxlci5pbml0KG1vZGUpO1xuXHRcdFxuXG5cdFx0Ly9QbGF5ZXJDb250cm9sbGVyLmluaXQoKTtcblx0XHRUZXJyYWluQ29udHJvbGxlci5pbml0KCk7XG5cdFx0VGVycmFpblNsaWNlQ29udHJvbGxlci5pbml0KCk7XG5cdFx0V29ybGRDb250cm9sbGVyLmluaXQoKTtcblx0XHRcblxuXG5cblx0XHQvLyBXQVJOSU5HISEhIEdyYXBoaWNzQ29udHJvbGxlci5pbml0IGlzIGNhbGxlZCBmcm9tIHRoZVxuXHRcdC8vIHNldHVwX2Fzc2V0X2RlcGVuZGVudCBmdW5jdGlvbiBhcyBpdCwgd2VsbCwgZGVwZW5kcyBvbiBhc3NldHMgYmVpbmcgbG9hZGVkXG5cblx0fTtcblxuXG5cdHZhciBlbmFibGVfYXJyb3drZXlfc2Nyb2xsID0gZnVuY3Rpb24oZW5hYmxlX3Njcm9sbCl7XG5cdFx0aWYoZW5hYmxlX3Njcm9sbCA9PSBmYWxzZSl7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuXHRcdFx0ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGZ1bmN0aW9uKGUpeyAvLyAuZ2V0RWxlbWVudEJ5SWQoXCJkaXNwbGF5X2NhbnZhc1wiKVxuXHRcdFx0XHRhcnJvd3MgPSBbMzcsIDM4LCAzOSwgNDBdOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuXHRcdFx0XHRpZihhcnJvd3MuaW5kZXhPZihlLmtleUNvZGUpID4gLTEpeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuXHRcdFx0XHRcdGUucHJldmVudERlZmF1bHQoKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG5cdFx0XHRcdH1lbHNleyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG5cdFx0XHRcdFx0cmV0dXJuIHRydWUgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuXHRcdFx0XHR9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuXHRcdFx0fSkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG5cdFx0fVx0XHRcblx0fTtcblx0XG5cdHZhciBzZXR1cF9zY3JlZW4gPSBmdW5jdGlvbigpe1xuXG5cdFx0Ly8gU2V0dGluZyB1cCBvdGhlciBzdHVmZjpcblx0XHQvLyBlLmcgc2V0dXAgY2FudmFzIHNpemVcblx0XHRcblx0XHQvLyBUT0RPOiBhbGxvdyByZXNpemVzP1xuXG5cdFx0Q29uZmlnLlNDUkVFTl9XID0gJCgnI2NhbnZhc19jb250YWluZXInKS53aWR0aCgpOyAvLyBpcyBkeW5hbWljYWxseSBzZXQgdG8gcGl4ZWwgd2lkdGggb2YgdGhlIGNvbnRhaW5pbmcgZWxlbWVudFxuXG5cdFx0Ly8gcG9zc2libGUgcmVzaXppbmcgdGVjaG5pcXVlOiBcblx0XHQvLyBodHRwOi8vd3d3LmZhYmlvYmlvbmRpLmNvbS9ibG9nLzIwMTIvMDgvY3JlYXRlanMtYW5kLWh0bWw1LWNhbnZhcy1yZXNpemUtZnVsbHNjcmVlbi1hbmQtbGlxdWlkLWxheW91dHMvXG5cblx0XHRcblx0XHQvLyQoJyNkZWJ1Z19jYW52YXMnKS53aWR0aChTdHJpbmcoU0NSRUVOX1cpICsgXCJweFwiKTtcblx0XHQvLyQoJyNkaXNwbGF5X2NhbnZhcycpLndpZHRoKFN0cmluZyhTQ1JFRU5fVykgKyBcInB4XCIpO1xuXG5cdFx0Ly8kKCcjZGVidWdfY2FudmFzJykuaGVpZ2h0KFN0cmluZyhTQ1JFRU5fSCkgKyBcInB4XCIpO1xuXHRcdC8vJCgnI2Rpc3BsYXlfY2FudmFzJykuaGVpZ2h0KFN0cmluZyhTQ1JFRU5fSCkgKyBcInB4XCIpO1xuXHRcdFxuXHR9O1xuXG5cdHZhciBzZXR1cF90aWNrZXIgPSBmdW5jdGlvbigpe1xuXG5cdFx0Y3JlYXRlanMuVGlja2VyLnNldEZQUyhDb25maWcuRlBTKTtcblxuXHRcdC8vIHRpY2tlcjogb24gZWFjaCB0aWNrIGNhbGwgR2FtZUNvbnRyb2xsZXIudXBkYXRlX2FsbCgpO1xuXHRcdGNyZWF0ZWpzLlRpY2tlci5hZGRFdmVudExpc3RlbmVyKFwidGlja1wiLCBHYW1lQ29udHJvbGxlci51cGRhdGVfYWxsKTtcblxuXHRcblx0fTtcblxuXHR2YXIgc2V0dXBfZXZlbnRzID0gZnVuY3Rpb24oKXtcblxuXG5cdFx0Ly8ga2V5Ym9hcmQgaW5wdXQgZXZlbnQ6IG9uIGVhY2gga2V5Ym9hcmQgZXZlbnQgY2FsbCBhcHByb3ByaWF0ZSBLZXlib2FyZENvbnRyb2xsZXIgZnVuY3Rpb25cblx0XHRkb2N1bWVudC5vbmtleWRvd24gPSBLZXlib2FyZENvbnRyb2xsZXIua2V5ZG93bjtcblx0XHRkb2N1bWVudC5vbmtleXVwID0gS2V5Ym9hcmRDb250cm9sbGVyLmtleXVwO1xuXG5cdFx0XHQvLyBvbiBpbnRlcnJ1cHQgZXZlbnQ6IHN0b3AvcGF1c2UgdGlja2VyID9cblxuXHR9O1xuXG5cdHZhciBzZXR1cF9hc3NldF9kZXBlbmRlbnQgPSBmdW5jdGlvbigpe1xuXHRcdC8vIHRoaXMgbWF5IG5lZWQgdG8gbW92ZSB0byBlaXRoZXIgbG9hZF9nYW1lIG9yIHNvbWUgc29ydCBvZiByZXNpemluZyBmdW5jdGlvblxuXHRcdE11bHRpcGxheWVyU3luY0NvbnRyb2xsZXIuaW5pdCgpO1xuXHRcdFxuXHRcdFxuXHRcdE5ldHdvcmtDb250cm9sbGVyLmluaXQoKTtcblx0XHRFbnRpdHlDb250cm9sbGVyLmluaXQoKTtcblx0XHRHcmFwaGljc0NvbnRyb2xsZXIuaW5pdCgpO1xuXHRcdC8vSFVEQ29udHJvbGxlci5pbml0KCk7XG5cdFx0Ly9CYWNrZ3JvdW5kQ29udHJvbGxlci5pbml0KCk7XG5cblx0XHRcblx0XHRzZXR1cF90aWNrZXIoKTtcblxuXHRcdC8vVGVycmFpbkNvbnRyb2xsZXIuZ2VuZXJhdGVfdGVycmFpbigpOyAvLyBJbml0aWFsIHRlcnJhaW4gZ2VuZXJhdGlvbiAvLyBkZXByZWNhdGVkLCBnZW5lcmF0aW9uIHdpbGwgYmUgY2FsbGVkIGZyb20gdXBkYXRlIGVhY2ggdGlja1xuXHR9O1xuXG5cblx0cmV0dXJuIHtcblx0XHRpbml0OiBpbml0LFxuXHR9O1xufSkoKTtcblxubW9kdWxlLmV4cG9ydHMgPSBJbml0Q29udHJvbGxlcjtcblxudmFyIEluY2x1ZGVzID0gcmVxdWlyZShcIi4uL0luY2x1ZGVzLmpzXCIpOyB2YXIgaW5jbHVkZV9kYXRhID0gSW5jbHVkZXMuZ2V0X2luY2x1ZGVfZGF0YSh7XG5cdGN1cnJlbnRfbW9kdWxlOiBcIkluaXRDb250cm9sbGVyXCIsIFxuXHRpbmNsdWRlX29wdGlvbnM6IEluY2x1ZGVzLmNob2ljZXMuQUxMXG59KTsgZXZhbChpbmNsdWRlX2RhdGEubmFtZV9zdGF0ZW1lbnRzKTsgdmFyIGluY2x1ZGUgPSBmdW5jdGlvbigpe2V2YWwoaW5jbHVkZV9kYXRhLm1vZHVsZV9zdGF0ZW1lbnRzKTt9XG5cbiIsInZhciBLZXlib2FyZENvbnRyb2xsZXIgPSAoZnVuY3Rpb24oKVxue1xuXG5cdHZhciBpbml0ID0gZnVuY3Rpb24oKXtcblx0XHRcblx0XHRpbmNsdWRlKCk7XG5cdH07XG5cblx0dmFyIHVwZGF0ZSA9IGZ1bmN0aW9uKGRlbHRhKXtcblx0XHQvKipcblx0XHQqIHVwZGF0ZSBjYWxsZWQgZnJvbSBHYW1lQ29udHJvbGxlci51cGRhdGVfYWxsXG5cdFx0Ki9cblx0XHRcblx0XHRpZihLZXlib2FyZE1vZGVsLnN0YXRlX2NoYW5nZWQpe1xuXHRcdFx0Ly8gaWYga2V5Ym9hcmQgc3RhdGUgY2hhbmdlZCBzaW5jZSB0aGUgbGFzdCB0aW1lLFxuXHRcdFx0Ly8gc2VuZCB0aGUga2V5Ym9hcmQgc3RhdGUgb3Zlci5cblx0XHRcdC8vIFRPRE86IG9wdGltaXplP1xuXHRcdFx0Ly8gWW91IGNvdWxkIHNlbmQgb25seSB0aG9zZSBzcGVjaWZpYyBrZXlzIHRoYXQgY2hhbmdlZCwgbm90IHdob2xlIHRhYmxlXG5cdFx0XHQvLyBZb3UgY291bGQgc2VuZCBvbmx5IHJlbGV2YW50IGtleXMgdGhhdCBtaWdodCBiZSBuZWVkZWQgdGhlcmVcblx0XHRcdC8vIElzIGl0IHdvcnRoIHRoZSB0aW1lIHNwZW50PyBLZWVwIGluIG1pbmRzLCB0aG9zZSB0YWJsZXMgYXJlIHVzdWFsbHkgc21hbGwsXG5cdFx0XHQvLyB1bmxlc3MgcGxheWVycyBkZWNpZGUgdG8gc21hc2ggdGhlaXIgZmFjZXMgaW50byB0aGUga2V5Ym9yZCByZXBlYXRlZGx5XG5cdFx0XHQvLyAob3VyIGdhbWUgaXNuJ3QgdGhhdCBiYWQsIHJpZ2h0Pylcblx0XHRcdE11bHRpcGxheWVyU3luY0NvbnRyb2xsZXIucm91dGVfb3V0Y29taW5nX3BhY2tldCh7XG5cdFx0XHRcdG9wOiBcImtleWJvYXJkX3N0YXRlXCIsXG5cdFx0XHRcdGtleV90YWJsZTogS2V5Ym9hcmRNb2RlbC5rZXlzLFxuXHRcdFx0fSk7XG5cblx0XHRcdEtleWJvYXJkTW9kZWwuc3RhdGVfY2hhbmdlZCA9IGZhbHNlO1xuXHRcdH1cblx0XHRcblx0fTtcblxuXHR2YXIgaGFuZGxlX2tleWJvYXJkX2NoYW5nZSA9IGZ1bmN0aW9uKHBhY2tldCl7XG5cdFx0LyoqXG5cdFx0KiBhY2NlcHRzIHRoZSBuZXR3b3JrIHBhY2tldC4gY2hhbmdlcyB0aGUgcmVzcGVjdGl2ZVxuXHRcdCoga2V5Ym9yZCBzdGF0ZSBmb3IgdGhlIGdpdmVuIHBhY2tldC5wbGF5ZXJfaWRcblx0XHQqIGlzIGNhbGxlZCBmcm9tIHRoZSBNdWx0aXBsYXllclN5bmNDb250cm9sbGVyXG5cdFx0Ki9cblx0XHR2YXIgcGxheWVyX2lkID0gcGFja2V0LnBsYXllcl9pZDtcblx0XHRcblx0XHRpZihwbGF5ZXJfaWQgPT0gbnVsbCl7XG5cdFx0XHR0aHJvdyBcIkVycm9yOiAobmV0d29yaykgcGxheWVyX2lkIGlzIG5vdCBkZWZpbmVkXCI7XG5cdFx0fVxuXG5cdFx0S2V5Ym9hcmRNb2RlbC5hbGxfa2V5Ym9hcmRfc3RhdGVzW3BsYXllcl9pZF0gPSBwYWNrZXQua2V5X3RhYmxlO1xuXHR9O1xuXHRcblx0XG5cdHZhciBjb3B5X29iamVjdCA9IGZ1bmN0aW9uKG9iail7XG5cdFx0LyoqXG5cdFx0KiByZXR1cm5zIChzaGFsbG93KSBjb3B5IG9mIHRoZSBvYmplY3Rcblx0XHQqXG5cdFx0KiBAU3RhY2sgT3ZlcmZsb3c6XG5cdFx0KiBXaXRoIGpRdWVyeSwgeW91IGNhbiBzaGFsbG93IGNvcHkgd2l0aDpcblx0XHQqIHZhciBjb3BpZWRPYmplY3QgPSBqUXVlcnkuZXh0ZW5kKHt9LCBvcmlnaW5hbE9iamVjdClcblx0XHQqIHN1YnNlcXVlbnQgY2hhbmdlcyB0byB0aGUgY29waWVkT2JqZWN0IHdpbGwgbm90IGFmZmVjdCB0aGUgb3JpZ2luYWxPYmplY3QsIGFuZCB2aWNlIHZlcnNhLlxuXHRcdCogT3IgdG8gbWFrZSBhIGRlZXAgY29weTpcblx0XHQqIHZhciBjb3BpZWRPYmplY3QgPSBqUXVlcnkuZXh0ZW5kKHRydWUsIHt9LCBvcmlnaW5hbE9iamVjdClcblx0XHQqL1xuXHRcdFxuXHRcdHJldHVybiBqUXVlcnkuZXh0ZW5kKHt9LCBvYmopO1xuXHR9O1xuXHRcblx0XG5cdFxuXHR2YXIgZ2V0X2FjdGl2ZV9jb21tYW5kc19mdW5jdGlvbiA9IGZ1bmN0aW9uKHRhYmxlLCBwbGF5ZXJfaWQpe1xuXHRcdC8vID5wbGF5ZXJfaWQ8IGlzIG9wdGlvbmFsLCBhbmQgcGFydCBvZiBhIGRpcnR5LWlzaCBxdWljayBpbXBsZW1lbnRhdGlvblxuXHRcdC8vIFRoaW5ncyBzaG91bGQgYmUgcmV3cml0dGVuIGF0IHNvbWUgcG9pbnRcblx0XHQvL1xuXHRcdC8vIGdldCBhbGwgY29tbWFuZHMgYXNzb2NpYXRlZCB3aXRoIGtleXMgdGhhdCBhcmUgZGVmaW5lZCBpbiB0aGUgPnRhYmxlPCxcblx0XHQvLyBhbmQgYXJlIGN1cnJlbnRseSBwcmVzc2VkXG5cdFx0Ly9cblx0XHQvLyByZXR1cm5zOiBhcnJheSBvZiBjb21tYW5kc1xuXHRcdC8vXG5cdFx0Ly8gVE9ETzogUkVGQUNUT1IgdGhpcyBmdW5jdGlvbiB0byB3b3JrIGJldHRlciBhbmQgc28gcGVvcGxlIGRvIG5vdFxuXHRcdC8vIG5lZWQgdG8gY2FsbCBpdCBlYWNoIHRpY2suIGluc3RlYWQgdGhleSBzaG91bGQgZ2V0IHJlZmVyZW5jZSB0byBmdW5jdGlvbiBvbmUgdGltZVxuXHRcdC8vIGFuZCBzdGF5IHVwZGF0ZWQgb24gdGhlIGFjdGl2ZSBjb21tYW5kc1xuXHRcdFxuXHRcdHZhciBjb21tYW5kcyA9IFtdO1xuXHRcdGlmKHBsYXllcl9pZCAhPSBudWxsKXtcblx0XHRcdHZhciBrZXlfdGFibGUgPSBLZXlib2FyZE1vZGVsLmFsbF9rZXlib2FyZF9zdGF0ZXNbcGxheWVyX2lkXTtcblx0XHR9ZWxzZXtcblx0XHRcdHZhciBrZXlfdGFibGUgPSBLZXlib2FyZE1vZGVsLmtleXM7XG5cdFx0fVxuXHRcdFxuXHRcdCQuZWFjaChLZXlib2FyZE1vZGVsLnRyYW5zbGF0aW9uX3RhYmxlcy5jb2RlX3RvX25hbWUsIGZ1bmN0aW9uKGtleSwgY21kKXtcblx0XHRcdGlmKGtleV90YWJsZVtrZXldICYmIHRhYmxlW2NtZF0pe1xuXHRcdFx0XHRjb21tYW5kcy5wdXNoKHRhYmxlW2NtZF0pO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0dmFyIGdldF9rZXkgPSBmdW5jdGlvbihrZXkpe1xuXHRcdFx0aWYoY29tbWFuZHMuaW5kZXhPZihrZXkpID4gLTEpe1xuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH1lbHNle1xuXHRcdFx0XHRyZXR1cm4gZmFsc2Vcblx0XHRcdH07XG5cdFx0fTtcblxuXHRcdHJldHVybiBnZXRfa2V5O1xuXHR9O1xuXG5cdC8vIHB1YmxpYzpcblx0XG5cdHZhciBrZXlkb3duID0gZnVuY3Rpb24oZXZlbnQpe1xuXHRcdEtleWJvYXJkTW9kZWwua2V5c1tldmVudC5rZXlDb2RlXSA9IHRydWU7XG5cdFx0S2V5Ym9hcmRNb2RlbC5zdGF0ZV9jaGFuZ2VkID0gdHJ1ZTtcblx0fTtcblxuXHR2YXIga2V5dXAgPSBmdW5jdGlvbihldmVudCl7XG5cdFx0ZGVsZXRlIEtleWJvYXJkTW9kZWwua2V5c1tldmVudC5rZXlDb2RlXTtcblx0XHRLZXlib2FyZE1vZGVsLnN0YXRlX2NoYW5nZWQgPSB0cnVlO1xuXHR9O1xuXG5cblx0dmFyIG1vdmVtZW50X2NvbW1hbmRzID0gZnVuY3Rpb24oKXtcblx0XHRyZXR1cm4gZ2V0X2FjdGl2ZV9jb21tYW5kc19mdW5jdGlvbihLZXlib2FyZE1vZGVsLnRyYW5zbGF0aW9uX3RhYmxlcy5tb3ZlbWVudCk7XG5cdH07XG5cblx0dmFyIHBhdXNlX2NvbW1hbmRzID0gZnVuY3Rpb24gKCkge1xuXHQgICAgcmV0dXJuIGdldF9hY3RpdmVfY29tbWFuZHNfZnVuY3Rpb24oS2V5Ym9hcmRNb2RlbC50cmFuc2xhdGlvbl90YWJsZXMucGF1c2UpO1xuXHR9O1xuXG5cdHZhciBkZWJ1Z19jb21tYW5kcyA9IGZ1bmN0aW9uKCl7XG5cdFx0LyoqXG5cdFx0KiBjb21tYW5kcyBhY3RpdmUgaW4gZGVidWcgbW9kZVxuXHRcdCovXG5cdFx0cmV0dXJuIGdldF9hY3RpdmVfY29tbWFuZHNfZnVuY3Rpb24oS2V5Ym9hcmRNb2RlbC50cmFuc2xhdGlvbl90YWJsZXMuZGVidWcpO1xuXHR9O1xuXHRcblx0dmFyIGdldF9yZW1vdGVfbW92ZW1lbnQgPSBmdW5jdGlvbihwbGF5ZXJfaWQpe1xuXHRcdC8qKlxuXHRcdCogdGhpcyBpdCBURU1QT1JBUlkgZnVuY3Rpb24gXG5cdFx0KiBJIHRocm93IGl0IHRvZ2V0aGVyIHNvIEkgZG8gbm90IGhhdmUgdG8gY2hhbmdlIGhvdyBrZXlib2FyZCBjb250cm9sbGVyIHdvcmtzIGZvciBub3dcblx0XHQqIGlmIHdlIGZpbmQgdGhhdCB3ZSBzaG91bGQgc2VuZCBtb3JlIGtleWJvYXJkIHN0dWZmIG92ZXIgdGhlIG5ldHdvcmssIHdlIHNob3VsZCByZXdyaXRlXG5cdFx0KiB0aGUgS2V5Ym9hcmRDb250cm9sbGVyIGFwcHJvcHJpYXRlbHlcblx0XHQqL1xuXG5cdFx0aWYocGxheWVyX2lkID09IG51bGwpe1xuXHRcdFx0dGhyb3cgXCJFcnJvcjogcGxheWVyX2lkIHVuZGVmaW5lZFwiO1xuXHRcdH1cblxuXHRcdHZhciBrZXlfZnVuID0gZ2V0X2FjdGl2ZV9jb21tYW5kc19mdW5jdGlvbihLZXlib2FyZE1vZGVsLnRyYW5zbGF0aW9uX3RhYmxlcy5tb3ZlbWVudCwgcGxheWVyX2lkKTtcblx0XHRyZXR1cm4ga2V5X2Z1bjtcblx0fTtcblx0XG5cdFxuXG5cdHJldHVybiB7XG5cdFx0a2V5ZG93bjoga2V5ZG93bixcblx0XHRrZXl1cDoga2V5dXAsXG4gICAgICAgIHBhdXNlX2NvbW1hbmRzOiBwYXVzZV9jb21tYW5kcyxcblx0XHRtb3ZlbWVudF9jb21tYW5kczogbW92ZW1lbnRfY29tbWFuZHMsXG5cdFx0ZGVidWdfY29tbWFuZHM6IGRlYnVnX2NvbW1hbmRzLFxuXHRcdGluaXQ6IGluaXQsXG5cdFx0dXBkYXRlOiB1cGRhdGUsXG5cdFx0aGFuZGxlX2tleWJvYXJkX2NoYW5nZTogaGFuZGxlX2tleWJvYXJkX2NoYW5nZSxcblx0XHRnZXRfcmVtb3RlX21vdmVtZW50OiBnZXRfcmVtb3RlX21vdmVtZW50LFxuXHR9O1xuXG59KSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEtleWJvYXJkQ29udHJvbGxlcjtcblxudmFyIEluY2x1ZGVzID0gcmVxdWlyZShcIi4uL0luY2x1ZGVzLmpzXCIpOyB2YXIgaW5jbHVkZV9kYXRhID0gSW5jbHVkZXMuZ2V0X2luY2x1ZGVfZGF0YSh7XG5cdGN1cnJlbnRfbW9kdWxlOiBcIktleWJvYXJkQ29udHJvbGxlclwiLCBcblx0aW5jbHVkZV9vcHRpb25zOiBJbmNsdWRlcy5jaG9pY2VzLkRFRkFVTFRcbn0pOyBldmFsKGluY2x1ZGVfZGF0YS5uYW1lX3N0YXRlbWVudHMpOyB2YXIgaW5jbHVkZSA9IGZ1bmN0aW9uKCl7ZXZhbChpbmNsdWRlX2RhdGEubW9kdWxlX3N0YXRlbWVudHMpO31cblxuIiwiXG52YXIgTXVsdGlwbGF5ZXJTeW5jQ29udHJvbGxlciA9IChmdW5jdGlvbigpe1xuXHQvKiBFbnN1cmVzIHRoYXQgY3VycmVudCBwbGF5ZXIgaXMgc3luY2hyb25pemVkIHdpdGggdGhlIHNlcnZlclxuXHQgKiBvciB3aXRoIG90aGVyIHBsYXllcnNcblx0Ki9cblxuXHR2YXIgb3BfdGFibGU7XG5cblx0dmFyIGluaXQgPSBmdW5jdGlvbigpe1xuXHRcdC8qIGlzIHJhbiBmcm9tIHRoZSBJbml0Q29udHJvbGxlciBvbmNlIHdoZW4gdGhlIGdhbWUgaXMgbG9hZGVkICovXG5cdFx0aW5jbHVkZSgpOyAvLyBzYXRpc2Z5IHJlcXVpcmVtZW50c1xuXG5cdFx0Ly8gdGFibGUgdGhhdCBhc3NvY2lhdGVzID5vcDwgKG9wZXJhdGlvbikgd2l0aCB0aGUgc3BlY2lmaWMgaGFuZGxlclxuXHRcdC8vIGF0IHNvbWUgKGxpa2VseSBleHRlcm5hbCkgbW9kdWxlXG5cdFx0b3BfdGFibGUgPSB7XG5cdFx0XHRzcGF3bjogRW50aXR5Q29udHJvbGxlci5oYW5kbGVfc3Bhd24sXG5cdFx0XHRkZWxldGVfZW50aXR5OiBFbnRpdHlDb250cm9sbGVyLmhhbmRsZV9kZWxldGUsXG5cdFx0XHRrZXlib2FyZF9zdGF0ZTogS2V5Ym9hcmRDb250cm9sbGVyLmhhbmRsZV9rZXlib2FyZF9jaGFuZ2UsXG5cdFx0XHRoZXJvX3N5bmM6IEVudGl0eUNvbnRyb2xsZXIuaGFuZGxlX2hlcm9fc3luYyxcblx0XHRcdHRlcnJhaW5fc2VlZDogc3luY19zZWVkLFxuXHRcdH1cblx0fTtcblxuXG5cdHZhciB1cGRhdGUgPSBmdW5jdGlvbihkZWx0YSl7XG5cdFx0LyogaXMgcmFuIGVhY2ggdGljayBmcm9tIHRoZSBHYW1lQ29udHJvbGxlci51cGRhdGVfYWxsICovXG5cblx0XHR2YXIgZGF0YSA9IE5ldHdvcmtDb250cm9sbGVyLmdldF9kYXRhKCk7IC8vIGFycmF5IG9mIGFsbCBwYWNrZXRzXG5cblx0XHR2YXIgb3BfcGFja2V0ID0gTXVsdGlwbGF5ZXJTeW5jTW9kZWwub3BfcGFja2V0c190YWJsZTsgLy9vcF9wYWNrZXQgaXMgYSBsaXN0IG9mIG9iamVjdHNcblxuXG5cdFx0Ly8gdGhlIGZvbGxvd2luZyBsb29wIHdpbGwgc3RvcmUgcGFja2V0cyBiYXNlZCBvbiB0aGVpciBvcFxuXHRcdC8qaWYoZGF0YSAhPSBudWxsKXtcblx0XHRcdGZvcih2YXIgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKXsgLy9mb3IgZWFjaCBwYWNrZXQgaW4gYnVmZmVyXG5cdFx0XHRcdHZhciBwYWNrZXQgPSBkYXRhW2ldO1xuXHRcdFx0XHR2YXIgb3AgPSBwYWNrZXQub3A7IC8vZ2V0IHBhY2tldCBvcFxuXHRcdFx0XHRvcF9wYWNrZXRbb3BdID0gb3BfcGFja2V0W29wXSB8fCBbXTtcblx0XHRcdFx0aWYob3AgIT0gbnVsbCl7XG5cdFx0XHRcdFx0b3BfcGFja2V0W29wXS5wdXNoKHBhY2tldCk7XG5cdFx0XHRcdH1lbHNle1xuXHRcdFx0XHRcdGNvbnNvbGUubG9nKHBhY2tldCk7XG5cdFx0XHRcdFx0dGhyb3cgXCJFcnJvciwgdGhpcyBwYWNrZXQgaGFzIG5vIG9wIHByb3BlcnR5XCJcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0qL1xuXHRcdFxuXHRcdC8vaGFuZGxlX3BhY2tldHMoZGF0YSk7IC8vIFNlYW5zXG5cblx0XHRpZihkYXRhICE9IG51bGwpe1xuXHRcdFx0Zm9yKHZhciBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpKyspe1xuXHRcdFx0XHQvLyBmb3IgZWFjaCBwYWNrZXQgaW4gaW5jb21pbmcgcGFja2V0cyxcblx0XHRcdFx0Ly8gcm91dCBpdFxuXHRcdFx0XHR2YXIgcGFja2V0ID0gZGF0YVtpXTtcblx0XHRcdFx0cm91dGVfaW5jb21pbmdfcGFja2V0KHBhY2tldCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0TmV0d29ya0NvbnRyb2xsZXIuY2xlYW5fZGF0YSgpO1x0Ly8gcmVtb3ZlIGRhdGEgdGhhdCB3YXMgcHJvY2Vzc2VkXG5cdH07XG5cblx0dmFyIHJvdXRlX291dGNvbWluZ19wYWNrZXQgPSBmdW5jdGlvbihwYWNrZXQpe1xuXHRcdC8qKlxuXHRcdCogcm91dGUgcGFja2V0IGFwcHJvcHJpYXRlbHlcblx0XHQqL1xuXHRcdGlmKHBhY2tldC5wbGF5ZXJfaWQgPT0gbnVsbCl7XG5cdFx0XHRcdC8vIGlmIHBhY2tldCB3YXNuJ3QgaWRlbnRpZmllZCBiZWZvcmVcblx0XHRcdFx0Ly8gaWRlbnRpZnkgdGhlIHBhY2tldCBhcyBtaW5lXG5cdFx0XHRcdHBhY2tldC5wbGF5ZXJfaWQgPSBOZXR3b3JrQ29udHJvbGxlci5nZXRfbmV0d29ya19pZCgpO1xuXHRcdH1cblxuXHRcdHZhciBvcCA9IHBhY2tldC5vcDtcblx0XHR2YXIgaGFuZGxlciA9IG9wX3RhYmxlW29wXTtcblxuXHRcdGlmKGhhbmRsZXIgPT0gbnVsbCl7XG5cdFx0XHQvLyBpZiBubyBoYW5kbGVyIGFzc2lnbmVkXG5cdFx0XHRjb25zb2xlLndhcm4oXCJObyBoYW5kbGVyIGZvciBvcFwiLCBvcCk7XG5cdFx0XHRyZXR1cm4gLTE7XG5cdFx0fVxuXG5cdFx0aWYoQ29uZmlnLlJlbW90ZS5jb25uZWN0ZWQpe1xuXHRcdFx0Ly8gaWYgbXVsdGlwbGF5ZXJcblx0XHRcdFxuXHRcdFx0XG5cdFx0XHRpZihDb25maWcuUmVtb3RlLm1hc3Rlcil7XG5cdFx0XHRcdC8vIGlmIG1hc3RlciBvZiB0aGUgbmV0d29ya1xuXHRcdFx0XHQvLyByb3V0ZSBiYWNrIHRvIHNwZWNpZmljIGhhbmRsZXJcblx0XHRcdFx0Ly8gZWNobyB0byBhbGwgY2xpZW50c1xuXG5cdFx0XHRcdGhhbmRsZXIocGFja2V0KTtcblxuXHRcdFx0XHR2YXIgcmVzcG9uc2UgPSBwYWNrZXQ7IC8vIGRvIHdlIHdhbnQgdG8gYWxsb3cgb3ZlcnJpZGluZyB0aGUgcmVzcG9uc2U/XG5cblx0XHRcdFx0TmV0d29ya0NvbnRyb2xsZXIuYWRkX3RvX25leHRfdXBkYXRlKHJlc3BvbnNlKTtcblx0XHRcdH1lbHNle1xuXHRcdFx0XHQvLyBpZiBvbmUgb2YgdGhlIGNsaWVudHNcblx0XHRcdFx0Ly8gcm91dGUgdG8gdGhlIG1hc3RlclxuXHRcdFx0XHROZXR3b3JrQ29udHJvbGxlci5hZGRfdG9fbmV4dF91cGRhdGUocGFja2V0KTtcblx0XHRcdH1cblx0XHR9ZWxzZXtcblx0XHRcdC8vIGlmIHNpbmdscGxheWVyXG5cdFx0XHQvLyByb3V0ZSBiYWNrIHRvIHRoZSBzcGVjaWZpYyBoYW5kbGVyXG5cdFx0XHRoYW5kbGVyKHBhY2tldCk7XG5cdFx0XHQvL2NvbnNvbGUubG9nKG9wLGhhbmRsZXIpO1xuXHRcdFx0XG5cdFx0XHRcblx0XHR9XG5cdH07XG5cblx0dmFyIHJvdXRlX2luY29taW5nX3BhY2tldCA9IGZ1bmN0aW9uKHBhY2tldCl7XG5cdFx0LyoqXG5cdFx0KiBoYW5kbGUgcGFja2V0IHRoYXQgYXJyaXZlZCBvdmVyIHRoZSBuZXR3b3JrXG5cdFx0KiAhIHRoaXMgZnVuY3Rpb24gaXMgY2FsbGVkIG9ubHkgd2hlbiBwYWNrZXRzIGFycml2ZSByZW1vdGVseVxuXHRcdCogISBzbyB5b3UgbWF5IHNhZmVseSBhc3N1bWUgdGhhdCB5b3UgYXJlIGNvbm5lY3RlZCB0byB0aGUgbmV0d29ya1xuXHRcdCogISBhbmQgdGhlIHBhY2tldCBkaWRuJ3Qgb3JpZ2luYXRlIG9uIHlvdXIgc2lkZSAodGhpcyBsYXN0IG9uZSBpc1xuXHRcdCogISBlc3BlY2lhbGx5IGltcG9ydGFudClcblx0XHQqL1xuXG5cdFx0YXBwbHlfdHJhbnNmb3JtcyhwYWNrZXQpOyAvLyBhcHBseSBhbnkgbmVjZXNzYXJ5IHRyYW5zZm9ybWF0aW9ucyBiZWZvcmUgYmVnaW5uaW5nXG5cblx0XHR2YXIgb3AgPSBwYWNrZXQub3A7XG5cdFx0dmFyIGhhbmRsZXIgPSBvcF90YWJsZVtvcF07XG5cblx0XHRpZihoYW5kbGVyID09IG51bGwpe1xuXHRcdFx0Ly8gaWYgbm8gaGFuZGxlciBhc3NpZ25lZFxuXHRcdFx0Y29uc29sZS53YXJuKFwiTm8gaGFuZGxlciBmb3Igb3BcIiwgb3ApO1xuXHRcdFx0cmV0dXJuIC0xO1xuXHRcdH1cblxuXHRcdGlmKENvbmZpZy5SZW1vdGUubWFzdGVyKXtcblx0XHRcdC8vIGlmIG1hc3RlclxuXHRcdFx0Ly8gcm91dGUgdG8gc3BlY2lmaWMgaGFuZGxlclxuXHRcdFx0Ly8gZWNobyB0byB0aGUgY2xpZW50c1xuXHRcdFx0aGFuZGxlcihwYWNrZXQpO1xuXHRcdFx0TmV0d29ya0NvbnRyb2xsZXIuYWRkX3RvX25leHRfdXBkYXRlKHBhY2tldCk7XG5cdFx0fWVsc2V7XG5cdFx0XHQvLyBpZiBvbmUgb2YgdGhlIGNsaWVudHNcblx0XHRcdC8vIHJvdXRlIHRvIHRoZSBoYW5kbGVyXG5cdFx0XHRoYW5kbGVyKHBhY2tldCk7XG5cdFx0fVxuXHRcdFxuXHR9O1xuXG5cdHZhciBhcHBseV90cmFuc2Zvcm1zID0gZnVuY3Rpb24ocGFja2V0KXtcblx0XHQvKipcblx0XHQqIGlmIHNvbWUgc3BlY2lmaWMgdHJhbnNmb3JtYXRpb24gaXMgc3VwcG9zZWQgdG8gYmUgYXBwbGllZCB0byB0aGUgcGFja2V0XG5cdFx0KiAob3Agc2hvdWxkIGNoYW5nZSBzb21laG93LCBuZXcgcHJvcGVydGllcyBhZGRlZCBldGMuKVxuXHRcdCogYXBwbHkgdGhpcyB0cmFuc2Zvcm1hdGlvblxuXHRcdCogISBub3RpY2UgdGhhdCB0cmFuc2Zvcm1zIGFyZSBhcHBsaWVkIHRvIGluY29taW5nIHBhY2tldHMgb25seVxuXHRcdCogISBpZiB5b3UgYXJlIGNvbmZpZGVudCB5b3UgbmVlZCBzb21ldGhpbmcgZWxzZSwgY29udGFjdCBtZSAoQUspXG5cdFx0Ki9cblxuXHRcdHN3aXRjaChwYWNrZXQub3Ape1xuXHRcdFx0Y2FzZSBudWxsOlxuXHRcdFx0XHRjb25zb2xlLmxvZyhwYWNrZXQpO1xuXHRcdFx0XHR0aHJvdyBcIm9wIGZvciB0aGlzIHBhY2tldCBpcyB1bmRlZmluZWRcIjtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIFwic3Bhd25cIjpcblx0XHRcdFx0Ly9pZihwYWNrZXQudHlwZSA9PSBcImNvbXBhbmlvblwiKXtcblx0XHRcdFx0XHQvL2lmKHBhY2tldC5wbGF5ZXJfaWQgPT0gTmV0d29ya0NvbnRyb2xsZXIuZ2V0X25ldHdvcmtfaWQoKSl7XG5cdFx0XHRcdFx0XHQvLy8vIGlmIEkgYW0gcmVjZWl2aW5nIG5vdGlmaWNhdGlvbiBhYm91dCBteSBvd24gaGVybyBzcGF3bmVkXG5cdFx0XHRcdFx0XHQvLy8vIHNwYXduIGhlcm8gaW5zdGVhZCBvZiBjb21wYW5pb25cblx0XHRcdFx0XHRcdC8vcGFja2V0LnR5cGUgPSBcImhlcm9cIjtcblx0XHRcdFx0XHQvL31cblx0XHRcdFx0Ly99ZWxzZSBpZihwYWNrZXQudHlwZSA9PSBcImhlcm9cIil7XG5cdFx0XHRcdFx0Ly8vLyBzb21lb25lIHJlcXVlc3RlZCBoZXJvIHNwYXduLFxuXHRcdFx0XHRcdC8vLy8gYnV0IEkgc2hvdWxkIHNwYXduIGNvbXBhbmlvblxuXHRcdFx0XHRcdC8vcGFja2V0LnR5cGUgPSBcImNvbXBhbmlvblwiO1xuXHRcdFx0XHQvL31cblx0XHRcdFx0YnJlYWs7XG5cdFx0XHQvL2RlZmF1bHQ6XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHBhY2tldDtcblx0fTtcblx0XG5cdFxuXHRcblx0Lypcblx0aXRlcmF0ZXMgdGhyb3VnaCBwYWNrZXRzIGFuZCBwYXJzZXMgdGhlbSBiYXNlZCBvbiBvcCAob3BlcmF0aW9uKVxuXHQqL1xuXHQvKnZhciBoYW5kbGVfcGFja2V0cyA9IGZ1bmN0aW9uKGRhdGEpe1xuXHRcdGlmKGRhdGEgIT0gbnVsbCl7XG5cdFx0XHRmb3IoaSA9IDA7aSA8IGRhdGEubGVuZ3RoOyBpKyspe1xuXHRcdFx0XHRwYWNrZXQgPSBkYXRhW2ldO1xuXHRcdFx0XHRzd2l0Y2ggKHBhY2tldC5vcCl7XG5cdFx0XHRcdFx0Y2FzZSBudWxsOlxuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSBcInNwYXduXCI6XG5cdFx0XHRcdFx0XHRpZiAocGFja2V0LmlzX3JlcXVlc3QgPT0gQ29uZmlnLlJlbW90ZS5tYXN0ZXIpe1xuXHRcdFx0XHRcdFx0XHRoYW5kbGVfc3Bhd24ocGFja2V0KTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgXCJkZWxldGVcIjpcblx0XHRcdFx0XHRcdGlmIChwYWNrZXQuaXNfcmVxdWVzdCA9PSBDb25maWcuUmVtb3RlLm1hc3Rlcil7XG5cdFx0XHRcdFx0XHRcdGhhbmRsZV9kZWxldGUocGFja2V0KTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXHRcblx0dmFyIGdldF9wYWNrZXRzX2J5X29wID0gZnVuY3Rpb24ob3Ape1xuXHRcdFs+KlxuXHRcdCogZ2V0cyBhbGwgcGFja2V0cyB3aXRoIHRoZSBvcGVyYXRpb24gPm9wPFxuXHRcdCogZm9yIHlvdVxuXHRcdDxdXG5cdFx0cmV0dXJuIE11bHRpcGxheWVyU3luY01vZGVsLm9wX3BhY2tldHNfdGFibGVbb3BdO1xuXHR9O1xuXHRcblx0XHRbPlxuXHRcdFRoZSBoYW5kbGVfc3Bhd24oKSBmdW5jdGlvbiB0YWtlcyBhbiBvYmplY3QgYXMgYSBwYXJhbWV0ZXJcblx0XHRpdCBoYW5kbGVzIHRoZSBwYWNrZXQgYmFzZWQgb24gd2hldGhlciB0aGUgY2FsbGVyIGlzIGEgbWFzdGVyLCBzbGF2ZSwgb3Igc2luZ2xlIHBsYXllclxuXHRcdGFuZCBvbiB0aGUgY29udGVudHMgb2YgdGhlIHBhY2tldFxuXHRcdHRoZSBwYWNrZXQgaG9sZHMgdGhlIGZvbGxvd2luZ1xuXHRcdFx0cmVxdWlyZWQgZGF0YSBmaWVsZHM6XG5cdFx0XHRcdC1zdHJpbmcgdHlwZVxuXHRcdFx0XHRcdFx0c3RyaW5nIGluZGV4IG9mIGNsYXNzIHRvIGJlIGluc3RhbnRpYXRlZFxuXHRcdFx0XHQtaW50IHhcblx0XHRcdFx0XHRcdHggY29vcmRpbmF0ZSBvZiBpbnN0YW5jZVxuXHRcdFx0XHQtaW50IHlcblx0XHRcdFx0XHRcdHkgY29vcmRpbmF0ZSBvZiBpbnN0YW5jZVxuXHRcdFx0YXV0b21hdGljYWxseSBhc3NpZ25lZCBkYXRhIGZpZWxkczpcblx0XHRcdFx0LWJvb2wgaXNfcmVxdWVzdFxuXHRcdFx0XHRcdFx0dHJ1ZSBpZiByZXF1ZXN0IGZyb20gc2xhdmVcblx0XHRcdFx0XHRcdGZhbHNlIGlmIG5vdGlmaWNhdGlvbiBmcm9tIG1hc3RlclxuXHRcdFx0XHQtc3RyaW5nIG9wXG5cdFx0XHRcdFx0XHRtYXJrcyBwYWNrZXQgdG8gYmUgcGFyc2VkIGFzIGluc3RhbmNlIHNwYXduZXJcblx0XHRcdGFkZGl0aW9uYWxseSwgdGhlIHBhY2tldCBjYW4gYmUgYXNzaWduZWQgYW55IG51bWJlciBvZiBleHRyYSB2YXJpYWJsZXNcblx0XHRcdHRvIGJlIHBhcnNlZCBieSB0aGUgY2xhc3MnIGluZGl2aWR1YWwgc3Bhd24oKSBmdW5jdGlvblxuXHRcdDxdXG5cdHZhciBoYW5kbGVfc3Bhd24gPSBmdW5jdGlvbihwYWNrZXQpe1xuXHRcdFx0dmFyIHR5cGU7XG5cdFx0XHR2YXIgb2JqZWN0O1xuXHRcdFx0dmFyIG9wZXJhdGlvbjtcblx0XHRcdGlmIChwYWNrZXQudHlwZSA9PSBudWxsKXtcblx0XHRcdFx0Y29uc29sZS5sb2cocGFja2V0KTtcblx0XHRcdFx0dGhyb3cgXCJFcnJvciwgdGhpcyBwYWNrZXQgaGFzIG5vIHR5cGUgcHJvcGVydHlcIlxuXHRcdFx0fVxuXHRcdFx0aWYgKCFDb25maWcuUmVtb3RlLmNvbm5lY3RlZCl7IC8vaWYgc2luZ2xlcGxheWVyXG5cdFx0XHRcdHBhY2tldC5hc3NpZ24gPSB0cnVlO1xuXHRcdFx0XHRmdWxmaWxsX3NwYXduX3JlcXVlc3QocGFja2V0KTtcblx0XHRcdH1lbHNlIGlmIChDb25maWcuUmVtb3RlLm1hc3Rlcil7IC8vaWYgbWFzdGVyXG5cdFx0XHRcdHBhY2tldC5hc3NpZ24gPSB0cnVlO1xuXHRcdFx0XHRwYWNrZXQgPSBmdWxmaWxsX3NwYXduX3JlcXVlc3QocGFja2V0KTtcblx0XHRcdFx0c2VuZF9zcGF3bl9ub3RpZmljYXRpb25zKHBhY2tldCk7XG5cdFx0XHR9ZWxzZXsgLy9pZiBzbGF2ZVxuXHRcdFx0XHRpZiAocGFja2V0LmVudGl0eV9pZCAhPSBudWxsKXsvL2lmIGNhbGxlZCBpbiByZXNwb25zZSB0byBhIG5vdGlmaWNhdGlvblxuXHRcdFx0XHRcdHBhY2tldC5hc3NpZ24gPSBmYWxzZTtcblx0XHRcdFx0XHRmdWxmaWxsX3NwYXduX3JlcXVlc3QocGFja2V0KTtcblx0XHRcdFx0fWVsc2V7Ly9pZiBjYWxsZWQgZGlyZWN0bHkgZnJvbSBzbGF2ZSBzZXNzaW9uXG5cdFx0XHRcdFx0c2VuZF9zcGF3bl9yZXF1ZXN0KHBhY2tldCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0fTtcblx0XHRcblx0dmFyIGZ1bGZpbGxfc3Bhd25fcmVxdWVzdCA9IGZ1bmN0aW9uKHBhY2tldCl7XG5cdFx0XHR2YXIgb3BlcmF0aW9uO1xuXHRcdFx0dmFyIG9iamVjdDtcblx0XHRcdHZhciB0eXBlID0gcGFja2V0LnR5cGU7XG5cdFx0XHRpZiAodHlwZSAhPSBcImhlcm9cIil7XG5cdFx0XHRcdG9wZXJhdGlvbiA9IEVudGl0eUNvbnRyb2xsZXIuZ2V0X29wZXJhdGlvbih0eXBlKTsgLy9nZXQgcmVsZXZhbnQgc3Bhd24oKSBmdW5jdGlvbiBmcm9tIEVudGl0eUNvbnRyb2xsZXJcblx0XHRcdH1lbHNle1xuXHRcdFx0XHRpZiAodHlwZW9mIHBhY2tldC5jb250cm9sbGVyX2lkID09PSAndW5kZWZpbmVkJyB8fCBwYWNrZXQuY29udHJvbGxlcl9pZCA9PSBOZXR3b3JrQ29udHJvbGxlci5nZXRfbmV0d29ya19pZCgpKXtcblx0XHRcdFx0XHRwYWNrZXQuY29udHJvbGxlcl9pZCA9IE5ldHdvcmtDb250cm9sbGVyLmdldF9uZXR3b3JrX2lkKCk7XG5cdFx0XHRcdFx0b3BlcmF0aW9uID0gRW50aXR5Q29udHJvbGxlci5nZXRfb3BlcmF0aW9uKFwiaGVyb1wiKTtcblx0XHRcdFx0fWVsc2V7XG5cdFx0XHRcdFx0b3BlcmF0aW9uID0gRW50aXR5Q29udHJvbGxlci5nZXRfb3BlcmF0aW9uKFwiY29tcGFuaW9uXCIpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0b2JqZWN0ID0gbmV3IG9wZXJhdGlvbihwYWNrZXQueCxwYWNrZXQueSk7XG5cdFx0aWYgKHBhY2tldC5hc3NpZ24pe1xuXHRcdFx0SWRlbnRpZmljYXRpb25Db250cm9sbGVyLmFzc2lnbl9pZChvYmplY3QpO1xuXHRcdFx0cGFja2V0LmVudGl0eV9pZCA9IG9iamVjdC5pZDtcblx0XHR9ZWxzZXtcblx0XHRcdElkZW50aWZpY2F0aW9uQ29udHJvbGxlci5mb3JjZV9pZChvYmplY3QscGFja2V0LmVudGl0eV9pZCk7XG5cdFx0fVxuXHRcdEVudGl0eUNvbnRyb2xsZXIucmVnX2Zvcl9sb2dpY191cGRhdGUob2JqZWN0KTtcblx0XHRyZXR1cm4gcGFja2V0O1xuXHR9XG5cdFx0XG5cdHZhciBoYW5kbGVfZGVsZXRlID0gZnVuY3Rpb24ocGFja2V0KXtcblx0XHRpZiAocGFja2V0LmlkID09IG51bGwpe1xuXHRcdFx0Y29uc29sZS5sb2cocGFja2V0KTtcblx0XHRcdHRocm93IFwiRXJyb3IsIHRoaXMgcGFja2V0IGhhcyBubyBpZCBwcm9wZXJ0eVwiXG5cdFx0XHR9XG5cdFx0XHR2YXIgaWQgPSBwYWNrZXQuaWQ7XG5cdFx0XHR2YXIgb2JqZWN0O1xuXHRcdFx0b2JqZWN0ID0gSWRlbnRpZmljYXRpb25Db250cm9sbGVyLmdldF9ieV9pZChpZCk7XG5cdFx0XHRpZiAoIUNvbmZpZy5SZW1vdGUuY29ubmVjdGVkKXsgLy9pZiBzaW5nbGVwbGF5ZXJcblx0XHRcdFx0RW50aXR5Q29udHJvbGxlci5mdWxmaWxsX2RlbGV0ZV9yZXF1ZXN0KG9iamVjdCk7XG5cdFx0XHR9ZWxzZSBpZiAoQ29uZmlnLlJlbW90ZS5tYXN0ZXIpeyAvL2lmIG1hc3RlclxuXHRcdFx0XHRjb25zb2xlLmxvZyhcIm1hc3RlciBpc3N1ZXMgZGVhdGggc2VudGVuY2VcIik7XG5cdFx0XHRcdEVudGl0eUNvbnRyb2xsZXIuZnVsZmlsbF9kZWxldGVfcmVxdWVzdChvYmplY3QpOyBcblx0XHRcdFx0cGFja2V0LmVudGl0eV9pZCA9IG9iamVjdC5pZDtcblx0XHRcdFx0c2VuZF9kZWxldGVfbm90aWZpY2F0aW9ucyhwYWNrZXQpO1xuXHRcdFx0fWVsc2V7IC8vaWYgc2xhdmVcblx0XHRcdFx0aWYgKHR5cGVvZiBwYWNrZXQuZW50aXR5X2lkICE9PSAndW5kZWZpbmVkJyl7Ly9pZiBjYWxsZWQgaW4gcmVzcG9uc2UgdG8gYSBub3RpZmljYXRpb25cblx0XHRcdFx0XHRFbnRpdHlDb250cm9sbGVyLmZ1bGZpbGxfZGVsZXRlX3JlcXVlc3Qob2JqZWN0KTsgXG5cdFx0XHRcdFx0Y29uc29sZS5sb2coXCJzbGF2ZSBnb3QgaXRzIHdpc2hcIik7XG5cdFx0XHRcdH1lbHNley8vaWYgY2FsbGVkIGRpcmVjdGx5IGZyb20gc2xhdmUgc2Vzc2lvblxuXHRcdFx0XHRcdHNlbmRfZGVsZXRlX3JlcXVlc3QocGFja2V0KTtcblx0XHRcdFx0XHRjb25zb2xlLmxvZyhcInNsYXZlIHJlcXVlc3RzIGRlYXRoIHNlbnRlbmNlXCIpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblx0XG5cdC8vc2VuZCBzcGF3biByZXF1ZXN0IHRvIG1hc3RlclxuXHR2YXIgc2VuZF9zcGF3bl9yZXF1ZXN0ID0gZnVuY3Rpb24ocGFja2V0KXtcblx0XHRwYWNrZXQub3AgPSBcInNwYXduXCI7XG5cdFx0cGFja2V0LmlzX3JlcXVlc3QgPSB0cnVlO1xuXHRcdE5ldHdvcmtDb250cm9sbGVyLmFkZF90b19uZXh0X3VwZGF0ZShwYWNrZXQpO1xuXHR9O1xuXHRcblx0Ly92YXIgc2VuZF9zcGF3bl9ub3RpZmljYXRpb25zID0gZnVuY3Rpb24oeCwgeSwgdHlwZSwgaWQsIGV4dHJhcyl7XG5cdHZhciBzZW5kX3NwYXduX25vdGlmaWNhdGlvbnMgPSBmdW5jdGlvbihwYWNrZXQpe1xuXHRcdC8vc2VuZHMgbm90aWZpY2F0aW9ucyBhYm91dCBlbnRpdHkgc3Bhd25lZCwgc28gcmVtb3RlIHBlb3BsZSBtYXlcblx0XHQvL3NwYXduIHRoZWlyIG93biByZXByZXNlbnRhdGlvbnMgb2YgaXRcblx0XHRwYWNrZXQub3AgPSBcInNwYXduXCI7XG5cdFx0cGFja2V0LmlzX3JlcXVlc3QgPSBmYWxzZTtcblx0XHROZXR3b3JrQ29udHJvbGxlci5hZGRfdG9fbmV4dF91cGRhdGUocGFja2V0KTtcblx0fTtcblx0XG5cdHZhciBzZW5kX2RlbGV0ZV9yZXF1ZXN0ID0gZnVuY3Rpb24ocGFja2V0KXtcblx0XHRwYWNrZXQub3AgPSBcImRlbGV0ZVwiO1xuXHRcdHBhY2tldC5pc19yZXF1ZXN0ID0gdHJ1ZTtcblx0XHROZXR3b3JrQ29udHJvbGxlci5hZGRfdG9fbmV4dF91cGRhdGUocGFja2V0KTtcblx0fTtcblx0XG5cdC8vdmFyIHNlbmRfc3Bhd25fbm90aWZpY2F0aW9ucyA9IGZ1bmN0aW9uKHgsIHksIHR5cGUsIGlkLCBleHRyYXMpe1xuXHR2YXIgc2VuZF9kZWxldGVfbm90aWZpY2F0aW9ucyA9IGZ1bmN0aW9uKHBhY2tldCl7XG5cdFx0Ly9zZW5kcyBub3RpZmljYXRpb25zIGFib3V0IGVudGl0eSBzcGF3bmVkLCBzbyByZW1vdGUgcGVvcGxlIG1heVxuXHRcdC8vc3Bhd24gdGhlaXIgb3duIHJlcHJlc2VudGF0aW9ucyBvZiBpdFxuXHRcdHBhY2tldC5vcCA9IFwiZGVsZXRlXCI7XG5cdFx0cGFja2V0LmlzX3JlcXVlc3QgPSBmYWxzZTtcblx0XHROZXR3b3JrQ29udHJvbGxlci5hZGRfdG9fbmV4dF91cGRhdGUocGFja2V0KTtcblx0fTsqL1xuXG5cdFxuXG5cdHZhciBwYXRjaCA9IGZ1bmN0aW9uKG9iamVjdCwgZnVuYyl7XG5cdFx0LyoqXG5cdFx0KiBwYXRjaCBvYmplY3Qgd2l0aCB0aGUgZnVuY3Rpb24gZ2l2ZW5cblx0XHQqID5vYmplY3Q8IC0gb2JqZWN0IHdob3NlIHByb3RvdHlwZSB0byBwYXRjaCBcblx0XHQqID5mdW5jPCAtIE5BTUVEIGZ1bmN0aW9uLiBpdCBoYXMgdG8gaGF2ZSB0aGUgc2FtZSBuYW1lXG5cdFx0KiBhcyB0aGUgZnVuY3Rpb24gb24gdGhlID5vYmplY3Q8J3MgcHJvdG90eXBlIHRoYXQgaXQncyBtZWFudCB0byByZXBsYWNlXG5cdFx0KiB0aGlzIGlzIGZ1bmN0aW9uIG5hbWVkIGJhcjogdmFyIGhleSA9IGZ1bmN0aW9uIGJhcigpe307XG5cdFx0KiB0aGlzIGlzIHVubmFtZWQgZnVuY3Rpb246IHZhciBoZXkgPSBmdW5jdGlvbigpe307XG5cdFx0KlxuXHRcdCogdGhlIGZ1bmN0aW9uIHRoYXQgeW91IHBhc3Mgd2lsbCBiZSBjYWxsZWQgYmVmb3JlIHRoZSBub3JtYWwgZnVuY3Rpb24gYm9keVxuXHRcdCogd2hlbiBjYWxsZWQsIHlvdXIgZnVuY3Rpb24gd2lsbCBiZSBjYWxsZWQgb24gdGhlIHNhbWUgb2JqZWN0IChpbnN0YW5jZSkgdGhhdFxuXHRcdCogb2xkX2Z1bmN0aW9uIGlzIGNhbGxlZCBhbmQgd2lsbCBiZSBwYXNzZWQgdGhlIHNhbWUgYXJndW1lbnRzXG5cdFx0Ki9cblxuXHRcdGlmKGZ1bmMubmFtZSA9PT0gXCJcIil7XG5cdFx0XHR0aHJvdyBcIkZ1bmN0aW9uIHBhc3NlZCBzaG91bGQgYmUgbmFtZWQgZnVuY3Rpb25cIjtcblx0XHR9XG5cblx0XHR2YXIgb2xkX2Z1bmMgPSBvYmplY3QucHJvdG90eXBlW2Z1bmMubmFtZV07XG5cdFx0dmFyIGN1c3RvbV9mdW5jdGlvbiA9IGZ1bmM7XG5cblx0XHR2YXIgbmV3X2Z1bmN0aW9uID0gZnVuY3Rpb24gb3ZlcnJpZGVuX2J5X211bHRpcGxheWVyX2NvbnRyb2xsZXIoKXtcblxuXHRcdFx0Y3VzdG9tX2Z1bmN0aW9uLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cdFx0XHRyZXR1cm4gb2xkX2Z1bmMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgLy8gY2FsbCBvbGQgZnVuY3Rpb24gYW5kIHJldHVybiB3aGF0IGl0IHJldHVybnNcblx0XHR9XG5cblx0XHRvYmplY3QucHJvdG90eXBlW2Z1bmMubmFtZV0gPSBuZXdfZnVuY3Rpb247XG5cdFx0XG5cdH07XG5cdFxuXHR2YXIgbmV0d29ya19ldmVudF9oYW5kbGVyID0gZnVuY3Rpb24obmV0d29ya19ldmVudCl7XG5cdFx0LyoqXG5cdFx0KiBjYWxsZWQgZnJvbSB0aGUgbmV0d29yayBjb250cm9sbGVyIHdoZW4gY2VydGFpbiBldmVudHMgb2NjdXJcblx0XHQqL1xuXHRcdFxuXHRcdHZhciB0eXBlID0gbmV0d29ya19ldmVudC50eXBlO1xuXHRcdHZhciBpZCA9IG5ldHdvcmtfZXZlbnQubmV0d29ya19pZDtcblx0XHRzd2l0Y2ggKHR5cGUpIHtcblx0XHRcdGNhc2UgJ25ld19jb25uZWN0aW9uJzpcblx0XHRcdFx0aWYoQ29uZmlnLlJlbW90ZS5tYXN0ZXIpe1xuXHRcdFx0XHRcdC8vIGlmIG1hc3Rlciwgc2VuZCB0aGUgc2VlZCBmb3IgdGVycmFpbiBzeW5jXG5cdFx0XHRcdFx0TmV0d29ya0NvbnRyb2xsZXIuc2VuZF90byhpZCwge1xuXHRcdFx0XHRcdFx0b3A6IFwidGVycmFpbl9zZWVkXCIsXG5cdFx0XHRcdFx0XHRzZWVkOiBUZXJyYWluQ29udHJvbGxlci5nZXRfc2VlZCgpLFxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9XG5cdFx0XHRcdFxuXHRcdFx0XHRicmVhaztcblx0XHRcdFxuXHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0Y29uc29sZS5sb2coXCJldmVudF90eXBlXCIsIGV2ZW50X3R5cGUsIFwiZG9lc24ndCBoYXZlIGFuIGFjdGlvbiBhc3NvY2lhdGVkXCIpO1xuXHRcdH1cblx0fTtcblxuXHR2YXIgc3luY19zZWVkID0gZnVuY3Rpb24ocGFja2V0KXtcblx0XHQvKipcblx0XHQqIGRlc2NyaXB0aW9uXG5cdFx0Ki9cblx0XHRcblx0XHR2YXIgc2VlZCA9IHBhY2tldC5zZWVkO1xuXHRcdGlmKHNlZWQgIT0gbnVsbCl7XG5cdFx0XHRUZXJyYWluQ29udHJvbGxlci5zZXRfc2VlZChzZWVkKTtcblx0XHR9ZWxzZXtcblx0XHRcdHRocm93IFwic2VlZCBpcyBub3QgZGVmaW5lZFwiO1xuXHRcdH1cblx0fTtcblxuXHRyZXR1cm4ge1xuXHRcdC8vIGRlY2xhcmUgcHVibGljXG5cdFx0aW5pdDogaW5pdCwgXG5cdFx0dXBkYXRlOiB1cGRhdGUsXG5cdFx0Ly9nZXRfcGFja2V0c19ieV9vcDogZ2V0X3BhY2tldHNfYnlfb3AsXG5cdFx0Ly9oYW5kbGVfc3Bhd246IGhhbmRsZV9zcGF3bixcblx0XHQvL2hhbmRsZV9kZWxldGU6IGhhbmRsZV9kZWxldGUsXG5cdFx0Ly9zZW5kX3NwYXduX3JlcXVlc3Q6IHNlbmRfc3Bhd25fcmVxdWVzdCxcblx0XHQvL3NlbmRfc3Bhd25fbm90aWZpY2F0aW9uczogc2VuZF9zcGF3bl9ub3RpZmljYXRpb25zLFxuXHRcdC8vc2VuZF9kZWxldGVfcmVxdWVzdDogc2VuZF9kZWxldGVfcmVxdWVzdCxcblx0XHQvL3NlbmRfZGVsZXRlX25vdGlmaWNhdGlvbnM6IHNlbmRfZGVsZXRlX25vdGlmaWNhdGlvbnMsXG5cdFx0cm91dGVfb3V0Y29taW5nX3BhY2tldDogcm91dGVfb3V0Y29taW5nX3BhY2tldCxcblx0XHRyb3V0ZV9pbmNvbWluZ19wYWNrZXQ6IHJvdXRlX2luY29taW5nX3BhY2tldCxcblx0XHRuZXR3b3JrX2V2ZW50X2hhbmRsZXI6IG5ldHdvcmtfZXZlbnRfaGFuZGxlcixcblx0fTtcbn0pKCk7XG5cbm1vZHVsZS5leHBvcnRzID0gTXVsdGlwbGF5ZXJTeW5jQ29udHJvbGxlcjtcblxudmFyIEluY2x1ZGVzID0gcmVxdWlyZShcIi4uL0luY2x1ZGVzLmpzXCIpOyB2YXIgaW5jbHVkZV9kYXRhID0gSW5jbHVkZXMuZ2V0X2luY2x1ZGVfZGF0YSh7XG5cdGN1cnJlbnRfbW9kdWxlOiBcIk11bHRpcGxheWVyU3luY0NvbnRyb2xsZXJcIiwgXG5cdGluY2x1ZGVfb3B0aW9uczogSW5jbHVkZXMuY2hvaWNlcy5ERUZBVUxUXG59KTsgZXZhbChpbmNsdWRlX2RhdGEubmFtZV9zdGF0ZW1lbnRzKTsgdmFyIGluY2x1ZGUgPSBmdW5jdGlvbigpe2V2YWwoaW5jbHVkZV9kYXRhLm1vZHVsZV9zdGF0ZW1lbnRzKTt9XG5cbiIsIlxudmFyIE5ldHdvcmtDb250cm9sbGVyID0gKGZ1bmN0aW9uKCl7XG5cdC8qIG1hbmFnZXMgcDJwIGNvbW11bmljYXRpb25cblx0Ki9cblxuXHR2YXIgcGVlciwgY29ubjsgLy8gVEVNUE9SQVJZLiB0aGVyZSB3aWxsIGJlIG11bHRpcGxlIG9mIHRob3NlIHRoaW5nc1xuXHR2YXIgTUVESUFUT1JfU0VSVkVSX0tFWSA9ICdsdmdpb3h1ajN5bG0xam9yJzsgLy8nbDJmOGY4dnRiaGNmZWNkaSc7IC8vJ2E3dm9qY3BmNzB5c3l2aSc7XG5cblx0dmFyIGluaXQgPSBmdW5jdGlvbigpe1xuXHRcdC8qIGlzIHJhbiBmcm9tIHRoZSBJbml0Q29udHJvbGxlciBvbmNlIHdoZW4gdGhlIGdhbWUgaXMgbG9hZGVkICovXG5cdFx0aW5jbHVkZSgpOyAvLyBzYXRpc2Z5IHJlcXVpcmVtZW50c1xuXG5cdFx0Ly8gVE9ETzogbWFrZSBzdXJlIHRoYXQgc2Vuc2l0aXZlIGhvc3QgaW5mbyAobGlrZSBzcGF3biByZXF1ZXN0IHRoYXQgaGF2ZSBub3QgYmVlblxuXHRcdC8vIHNhdGlzZmllZCB5ZXQpIGFyZSBwcm9jZXNzZWQgY29ycmVjdGx5IGJlZm9yZSB1bmxvYWRpbmdcblx0XHQvLyBhbHNvIGl0IG1heSBtYWtlIHNlbnNlIHRvIGhhbmRsZSBldmVuIHNpdHVhdGlvbnMgd2hlbiB0aGUgcGFnZSB3YXMgZm9yY2VkIHRvIHVubG9hZFxuXHRcdC8vIGV2ZW4gYmVmb3JlIHRoZSBmdW5jdGlvbiB3YXMgY2FsbGVkIChwb3dlciBwcm9ibGVtPylcblx0XHRkb2N1bWVudC5vbmJlZm9yZXVubG9hZCA9IG9uX3VubG9hZDsgLy8gd2lsbCBiZSBleGVjdXRlZCBiZWZvcmUgdXNlciBsZWF2ZXMgcGFnZVxuXHRcdE5ldHdvcmtNb2RlbC5oZXkgPSBmYWxzZTtcblx0fTtcblxuXG5cdHZhciB1cGRhdGUgPSBmdW5jdGlvbihkZWx0YSl7XG5cdFx0LyogaXMgcmFuIGVhY2ggdGljayBmcm9tIHRoZSBHYW1lQ29udHJvbGxlci51cGRhdGVfYWxsICovXG5cblx0XHR2YXIgY21kcyA9IEtleWJvYXJkQ29udHJvbGxlci5kZWJ1Z19jb21tYW5kcygpO1xuXG5cdFx0aWYoIU5ldHdvcmtNb2RlbC5ibG9ja19jb25uZWN0aW9ucyAmJiBjbWRzKFwiY29ubmVjdFwiKSl7IFxuXHRcdFx0TmV0d29ya01vZGVsLmJsb2NrX2Nvbm5lY3Rpb25zID0gdHJ1ZTtcblx0XHRcdHN0YXJ0X211bHRpcGxheWVyX3Nlc3Npb24oW1wicGxheWVyMVwiLCBcInBsYXllcjJcIiwgXCJwbGF5ZXIzXCIsIFwicGxheWVyNFwiLCBcInBsYXllcjVcIiwgXCJwbGF5ZXI2XCIsIFwicGxheWVyN1wiLCBcInBsYXllcjhcIl0pO1xuXHRcdH1cblxuXHRcdGlmKENvbmZpZy5SZW1vdGUuY29ubmVjdGVkKXtcblx0XHRcdGlmKENvbmZpZy5SZW1vdGUubWFzdGVyKXtcblx0XHRcdFx0Ly8gaWYgSSBhbSB0aGUgbWFzdGVyLCBkaXN0cmlidXRlIGRhdGFcblx0XHRcdFx0c2VuZF9vdXRfZGF0YSgpO1xuXHRcdFx0fWVsc2V7XG5cdFx0XHRcdC8vIGlmIG5vdCB0aGUgbWFzdGVyLCBqdXN0IHNlbmQgZGF0YSB0byB0aGUgbWFzdGVyXG5cdFx0XHRcdHNlbmRfZGF0YV90b19tYXN0ZXIoKTtcblx0XHRcdH1cblx0XHR9XG5cblx0fTtcblxuXHR2YXIgc3RhcnRfbXVsdGlwbGF5ZXJfc2Vzc2lvbiA9IGZ1bmN0aW9uKGlkcyl7XG5cdFx0LyoqXG5cdFx0KiBwZXJmb3JtIHByb2NlZHVyZXMgdG8gc3RhcnQgcGxheWluZyB3aXRoIGFsbFxuXHRcdCogb3RoZXIgY29ubmVjdGVkIHBlb3BsZVxuXHRcdCovXG5cdFx0TmV0d29ya01vZGVsLnBlZXJzX3RvX2Nvbm5lY3QgPSBpZHM7XG5cblx0XHRpZihDb25maWcuSW5pdC5tb2RlICE9IFwidGVzdFwiKXtcdFxuXHRcdFx0Ly8gY3JlYXRlIHBlZXIsIGFzc2lnbiBpZFxuXHRcdFx0dmFyIHBlZXIgPSBOZXR3b3JrTW9kZWwubXlfcGVlciA9IG5ld19wZWVyKENvbmZpZy5Jbml0LnBsYXllcl9pZCk7IFxuXHRcdFx0cGVlci5vbignZXJyb3InLCBoYW5kbGVfc3RhbmRhcnRfcGVlcl9lcnJvcik7XG5cdFx0XHRwZWVyLm9uKCdvcGVuJywgb25fb2J0YWluaW5nX2lkX3N1Y2Nlc3NmdWxseSk7XG5cdFx0XHROZXR3b3JrTW9kZWwubXlfcGVlciA9IHBlZXI7XG5cblx0XHR9ZWxzZXtcblxuXHRcdFx0c2V0dXBfbmV0d29ya192YXJpYWJsZXNfZm9yX3Rlc3RpbmdfbW9kZSgpO1xuXHRcdFx0c2V0dXBfbXlfcGVlcl90ZXN0KCk7IC8vIHNldHVwIHBlZXIgLy8gYWxzbyBwaWNrcyBmcmVlIGlkci8vIGNhbGxzID5vbl9vYnRhaW5pbmdfaWRfc3VjY2Vzc2Z1bGx5XG5cdFx0fVxuXHRcdFx0XHRcblx0fTtcblxuXHR2YXIgc2V0dXBfbmV0d29ya192YXJpYWJsZXNfZm9yX3Rlc3RpbmdfbW9kZSA9IGZ1bmN0aW9uKCl7XG5cdFx0LyoqXG5cdFx0KiBzZXR1cCB2YXJpb3VzIHBhcmFtZXRlcnMgZm9yIHRoZSB0ZXN0aW5nIG1vZGUgZ2FtZVxuXHRcdCovXG5cdFx0dmFyIGlkcyA9IE5ldHdvcmtNb2RlbC5wZWVyc190b19jb25uZWN0O1xuXG5cdFx0TmV0d29ya01vZGVsLmNvbm5lY3Rpb25zID0ge307XG5cdFx0TmV0d29ya01vZGVsLmZyZWVfaWRzID0gW107XG5cblx0XHRmb3IodmFyIGkgPSAwOyBpIDwgaWRzLmxlbmd0aDsgaSsrKXtcblx0XHRcdHZhciBpZCA9IGlkc1tpXTtcblx0XHRcdE5ldHdvcmtNb2RlbC5jb25uZWN0aW9uc1tpZF0gPSBudWxsO1xuXHRcdFx0TmV0d29ya01vZGVsLmZyZWVfaWRzLnB1c2goaWQpO1xuXHRcdH1cblxuXHRcdE5ldHdvcmtNb2RlbC5ub25fZnJlZV9pZHMgPSBbXTtcblxuXHR9O1xuXHRcblx0XG5cdHZhciBoYW5kbGVfc3RhbmRhcnRfcGVlcl9lcnJvciA9IGZ1bmN0aW9uKGVycm9yKXtcblx0XHQvKipcblx0XHQqIHRoaXMgZnVuY3Rpb24gaXMgZm9yIGNvbm5lY3Rpb24gZXJyb3JzXG5cdFx0KiBpbiBub24tdGVzdCBtb2RlXG5cdFx0Ki9cblxuXHRcdGNvbnNvbGUubG9nKGVycm9yKTtcblx0XHR0aHJvdyBcIlBlZXIgZXJyb3JcIjtcblx0XHRcblx0fTtcblx0XG5cblx0dmFyIG9uX29idGFpbmluZ19pZF9zdWNjZXNzZnVsbHkgPSBmdW5jdGlvbihpZCl7XG5cdFx0LyoqXG5cdFx0KiB3aGVuIHRoZSBwbGF5ZXIgaWQgZm9yIHRoaXMgY2xpZW50IHdhcyBzdWNjZXNzZnVsbHlcblx0XHQqIGZvdW5kIHRocm91Z2ggdGhlIHByb2Nlc3MgaW4gdGhlIHNldHVwX215X3BlZXJfdGVzdCgpOyBmdW5jdGlvbixcblx0XHQqIHRoaXMgZnVuY3Rpb24gaXMgY2FsbGVkLCB3aGljaCBzaG91bGQgc2V0dXAgYWxsIG5lY2Vzc2FyeSB0aGluZ3MgZm9yIFxuXHRcdCogdGhlIG11bHRpcGxheWVyIHRvIHdvcmssIGFuZCBjb25uZWN0IHRvIHRoZSBvdGhlciBwbGF5ZXJcblx0XHQqL1xuXG5cdFx0TmV0d29ya01vZGVsLm15X2lkID0gaWQ7XG5cdFx0Q29uZmlnLlJlbW90ZS5jb25uZWN0ZWQgPSB0cnVlO1xuXG5cdFx0dmFyIHBlZXIgPSBOZXR3b3JrTW9kZWwubXlfcGVlcjtcblxuXHRcdHBlZXIub24oJ2Vycm9yJywgb25fcGVlcl9lcnJvcik7XG5cblx0XHRpZihOZXR3b3JrTW9kZWwubXlfaWQgIT0gTmV0d29ya01vZGVsLm15X3BlZXIuaWQpe1xuXHRcdFx0Ly8gbm90IGEgbWVhbmluZ2Z1bCBjaGVjaywgdGVycmlibGUgcHJhY3RpY2VzIGFyZSB0ZXJyaWJsZVxuXHRcdFx0dGhyb3cgXCJJZCdzIGRvIG5vdCBtYXRjaC4gU210aCB3ZW50IHdyb25nXCIgXG5cdFx0fVxuXG5cdFx0Y29uc29sZS5sb2coXCJPYnRhaW5lZCBpZCBzdWNlc3NmdWxseSwgbXkgaWQgaXNcIiwgaWQpO1xuXG5cdFx0aWYoQ29uZmlnLkluaXQubW9kZSAhPSBcInRlc3RcIil7XG5cdFx0XHRjb25zb2xlLmxvZyhcIlBsYXlpbmcgaW4gdGVzdGluZyBtdWx0aXBsYXllciBtb2RlXCIpO1xuXHRcdH1lbHNle1xuXHRcdFx0Y29uc29sZS5sb2coXCJQbGF5aW5nIGluIG5vcm1hbCBtdWx0aXBsYXllciBtb2RlXCIpO1xuXHRcdH1cblxuXHRcdC8qIG5vdGUgdGhhdCBpZiBvdGhlciBwZWVycyBjb25uZWN0IGluIHRoZSBmdXR1cmUsIFxuXHRcdCAqIGNvbm5lY3Rpb24gd2l0aCB0aGVtIHdpbGwgYmUgaGFuZGxlZCBhdCB0aGF0IHRpbWVcblx0XHQgKiB0aHJvdWdoIGFjY2VwdF9jb25uZWN0aW9uIGZ1bmN0aW9uXG5cdFx0ICovXG5cdFx0Y29ubmVjdF90b19vdGhlcnMoKTtcblxuXHRcdC8vIGFsbG93IHRpbWUgZm9yIGNvbm5lY3Rpb25zIHRvIGJlIGVzdGFibGlzaGVkLCB0aGVuIHBpY2sgdGhlIG1hc3RlclxuXHRcdE5ldHdvcmtNb2RlbC50aW1lb3V0X2lkID0gc2V0VGltZW91dChwaWNrX3RoZV9tYXN0ZXIsIDUwMDApO1xuXHR9O1xuXG5cdHZhciBjb25uZWN0X3RvX290aGVycyA9IGZ1bmN0aW9uKCl7XG5cdFx0LyoqXG5cdFx0KiBjb25uZWN0IHRvIGFsbCBvdGhlciBwZWVycyB0aGF0IGFyZSBhdmFpbGFibGUgYXQgdGhpcyB0aW1lXG5cdFx0Ki9cblx0XHR2YXIgaWRzID0gTmV0d29ya01vZGVsLnBlZXJzX3RvX2Nvbm5lY3Q7XG5cdFx0Zm9yKHZhciBpID0gMDsgaSA8IGlkcy5sZW5ndGg7IGkrKyl7XG5cblx0XHRcdHZhciBpZCA9IGlkc1tpXTtcblxuXHRcdFx0aWYoaWQgIT0gTmV0d29ya01vZGVsLm15X2lkKXtcblx0XHRcdFx0dmFyIGNvbm5lY3Rpb24gPSBOZXR3b3JrTW9kZWwubXlfcGVlci5jb25uZWN0KGlkKTtcblxuXHRcdFx0XHRjb25uZWN0aW9uLm9uKCdkYXRhJywgb25fZGF0YV9hcnJpdmFsKTtcblx0XHRcdFx0Y29ubmVjdGlvbi5vbignY2xvc2UnLCBvbl9jb25uZWN0aW9uX2Nsb3NlZCk7XG5cdFx0XHRcdGNvbm5lY3Rpb24ub24oJ29wZW4nLCBvbl9jb25uZWN0aW9uX29wZW4pO1xuXHRcdFx0XHRjb25uZWN0aW9uLm9uKCdlcnJvcicsIG9uX2Nvbm5lY3Rpb25fZXJyb3IpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHR9O1xuXHRcblx0dmFyIG9uX3BlZXJfZXJyb3IgPSBmdW5jdGlvbihlcnJvcil7XG5cdFx0LyoqXG5cdFx0KiBjYWxsZWQgb24gcGVlciBlcnJvcjtcblx0XHQqIG5vdGljZSB0aGF0IHRoaXMgZnVuY3Rpb24gZG9lc24ndCBoYW5kbGVcblx0XHQqIHBlZXIgZXJyb3JzIHRoYXQgYXJpc2UgZnJvbSBpbmFiaWxpdHkgdG8gY3JlYXRlIHBlZXIgYmVjYXVzZSBvZiBpZCBjb25mbGljdHMsXG5cdFx0KiBhcyB0aGlzIGZ1bmN0aW9uIGlzIGF0dGFjaGVkIGFzIGxpc3RlbmVyIG9ubHkgYWZ0ZXIgdGhlIHBlZXIgaXMgc3VjZXNzZnVsbHlcblx0XHQqIGNyZWF0ZWRcblx0XHQqL1xuXHRcdC8vY29uc29sZS53YXJuKFwiUGVlciBlcnJvclwiLCBlcnJvcik7XG5cdH07XG5cdFxuXHR2YXIgc2V0dXBfbXlfcGVlcl90ZXN0ID0gZnVuY3Rpb24oZXJyb3Ipe1xuXHRcdC8qKlxuXHRcdCogc2V0dXBzIHlvdXIgcGVyc29uYWwgcGVlciBwaWNraW5nIGZyZWUgaWQsIGFuZCByZXR1cm5pbmcgaXRcblx0XHQqIGxvb2tpbmcgdXAgZm9yIHRoZSBmcmVlIGlkJ3MgaXMgYSBodWdlIHBhaW4gbm93LCBvbmNlIHdlIHJ1biBvdXJcblx0XHQqIG93biBwZWVyIG1hdGNoaW5nIHNlcnZlciwgaXQnbGwgYmUgYSBsb3QgZWFzaWVyXG5cdFx0KlxuXHRcdCogPmVycm9yPCBwYXJhbWV0ZXIgaXMgbnVsbCBvbiB0aGUgZmlyc3QgY2FsbCwgYnV0IGlmIGZpcnN0IGlkIHRoYXQgd2FzXG5cdFx0KiB0cmllZCB3YXMgYWxyZWFkeSB0YWtlbiwgYW5kIGZ1bmN0aW9uIGlzIGNhbGxlZCBhZ2FpbiwgaXQnbGwgbm90IGJlIG51bGwgXG5cdFx0Ki9cblxuXHRcdGlmKGVycm9yID09IG51bGwgfHwgZXJyb3IudHlwZSA9PSBcInVuYXZhaWxhYmxlLWlkXCIpe1xuXHRcdFx0aWYoTmV0d29ya01vZGVsLmZyZWVfaWRzLmxlbmd0aCA+IDApe1xuXHRcdFx0XHR2YXIgaWQgPSBOZXR3b3JrTW9kZWwuZnJlZV9pZHMucG9wKCk7XG5cdFx0XHRcdE5ldHdvcmtNb2RlbC5ub25fZnJlZV9pZHMucHVzaChpZCk7XG5cdFx0XHRcdHZhciBwZWVyID0gTmV0d29ya01vZGVsLm15X3BlZXIgPSBuZXdfcGVlcihpZCk7IFxuXHRcdFx0XHRwZWVyLm9uKCdlcnJvcicsIHNldHVwX215X3BlZXJfdGVzdCk7XG5cdFx0XHRcdHBlZXIub24oJ29wZW4nLCBvbl9vYnRhaW5pbmdfaWRfc3VjY2Vzc2Z1bGx5KTtcblx0XHRcdH1lbHNle1xuXHRcdFx0XHRjb25zb2xlLndhcm4oXCJDb3VsZG4ndCBlc3RhYmxpc2ggbXVsdGlwbGF5ZXIgc2Vzc2lvbiwgYWxsIFwiICsgU3RyaW5nKE5ldHdvcmtNb2RlbC5wZWVyc190b19jb25uZWN0Lmxlbmd0aCkgKyBcIiBhdmFpbGFibGUgc2xvdHMgdGFrZW5cIik7XG5cdFx0XHRcdENvbmZpZy5SZW1vdGUuY29ubmVjdGVkID0gZmFsc2U7XG5cdFx0XHRcdE5ldHdvcmtNb2RlbC5ibG9ja19jb25uZWN0aW9ucyA9IGZhbHNlO1xuXG5cdFx0XHRcdHNldHVwX25ldHdvcmtfdmFyaWFibGVzX2Zvcl90ZXN0aW5nX21vZGUoKTtcblx0XHRcdH1cblx0XHR9ZWxzZXtcblx0XHRcdC8vY29uc29sZS53YXJuKFwiUGVlciBlcnJvclwiLCBlcnJvcik7XG5cdFx0fVxuXHRcdFxuXHR9O1xuXG5cdHZhciBvbl9jb25uZWN0aW9uX29wZW4gPSBmdW5jdGlvbigpe1xuXHRcdC8qKlxuXHRcdCogb24gb3BlbmluZyB0aGUgY29ubmVjdGlvblxuXHRcdCovXG5cblx0XHR2YXIgaWQgPSB0aGlzLnBlZXI7XHRcblx0XHRcblx0XHRjb25zb2xlLmxvZyhcIlN1Y2Nlc3NmdWxseSBpbml0aWF0ZWQgbmV3IGNvbm5lY3Rpb24gd2l0aCB0aGUgcGVlclwiLCBpZCk7XG5cblx0XHROZXR3b3JrTW9kZWwuY29ubmVjdGlvbnNbaWRdID0gdGhpcztcblx0XHRcblx0fTtcblxuXHR2YXIgb25fY29ubmVjdGlvbl9jbG9zZWQgPSBmdW5jdGlvbigpe1xuXHRcdC8qKlxuXHRcdCogY2FsbGVkIHdoZW4gc29tZSBjb25uZWN0aW9uIGNsb3Nlc1xuXHRcdCovXG5cdFx0dmFyIGlkID0gdGhpcy5wZWVyO1xuXHRcdHZhciBuZnJlZSA9IE5ldHdvcmtNb2RlbC5ub25fZnJlZV9pZHM7XG5cblx0XHRuZnJlZS5zcGxpY2UobmZyZWUuaW5kZXhPZihpZCksIDEpO1xuXG5cdFx0TmV0d29ya01vZGVsLmZyZWVfaWRzLnB1c2goaWQpO1xuXG5cdFx0ZGVsZXRlIE5ldHdvcmtNb2RlbC5jb25uZWN0aW9uc1tpZF07XG5cblxuXHRcdGlmKE5ldHdvcmtNb2RlbC5tYXN0ZXJfaWQgPT09IGlkKXtcblx0XHRcdGNvbnNvbGUubG9nKFwiQ2xvc2luZyBjb25uZWN0aW9uIHdpdGggdGhlIG1hc3RlclwiKTtcblx0XHRcdE5ldHdvcmtNb2RlbC5tYXN0ZXJfaWQgPSBudWxsO1xuXHRcdFx0cGlja190aGVfbWFzdGVyKCk7XG5cdFx0fVxuXG5cdFx0Y29uc29sZS5sb2coXCJDb25uZWN0aW9uIHdpdGggcGVlclwiLCBpZCwgXCJ3YXMgc3VjY2Vzc2Z1bGx5IGNsb3NlZFwiKTtcblx0fTtcblxuXHR2YXIgb25fY29ubmVjdGlvbl9lcnJvciA9IGZ1bmN0aW9uKGVycm9yKXtcblx0XHQvKipcblx0XHQqIHdoZW4gZXJyb3Igb24gdHJ5aW5nIHRvIGVzdGFibGlzaCBjb25uZWN0aW9uIG9jY3Vycztcblx0XHQqIG1vc3Qgb2Z0ZW4gaXQgd2lsbCBiZSBlcnJvciBmb3IgcGVlciBub3QgZXhpc3RpbmcuIHRoYXQncyBwYXJ0IG9mIHRoZSBub3JtYWwgcHJvY2Vzc1xuXHRcdCovXG5cdFx0XG5cdFx0Y29uc29sZS5sb2coXCJjb25uZWN0aW9uIGVycm9yIChsaWtlbHkgbm90IGEgYnVnKVwiKTtcblx0fTtcblx0XG5cdHZhciBwaWNrX3RoZV9tYXN0ZXIgPSBmdW5jdGlvbigpe1xuXHRcdC8qKlxuXHRcdCogcGljayB0aGUgbWFzdGVyIChvbmUgd2l0aCB3aG9tZSBldmVyeW9uZSBzeW5jaHJvbml6ZXMpXG5cdFx0KiBmb3IgdGhlIGN1cnJlbnQgZ3JvdXAgb2YgcGVlcnMuXG5cdFx0Ki9cblxuXHRcdGlmKE5ldHdvcmtNb2RlbC5tYXN0ZXJfaWQgIT0gbnVsbCl7XG5cdFx0XHQvLyBpZiBtYXN0ZXIgd2FzIGNob3NlbiBhbHJlYWR5XG5cdFx0XHRjb25zb2xlLmxvZyhcIm1hc3RlciBpcyBhbHJlYWR5IGNob3NlblwiKTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblxuXHRcdHZhciBpZHMgPSBOZXR3b3JrTW9kZWwucGVlcnNfdG9fY29ubmVjdDtcblxuXHRcdHZhciBjb25ucyA9IE5ldHdvcmtNb2RlbC5jb25uZWN0aW9ucztcblxuXHRcdGZvcih2YXIgaSA9IDA7IGkgPCBpZHMubGVuZ3RoOyBpKyspe1xuXHRcdFx0dmFyIGlkID0gaWRzW2ldO1xuXG5cdFx0XHRpZihjb25uc1tpZF0gIT0gbnVsbCAmJiBpZCAhPSBOZXR3b3JrTW9kZWwubXlfaWQpe1xuXHRcdFx0XHROZXR3b3JrTW9kZWwubWFzdGVyX2lkID0gaWQ7XG5cdFx0XHRcdGNvbnNvbGUubG9nKFwiVGhlIG1hc3RlciBpc1wiLCBpZCk7XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fWVsc2UgaWYoaWQgPT0gTmV0d29ya01vZGVsLm15X2lkKXtcblx0XHRcdFx0Ly8gaSBhbSB0aGUgYmVzdCBjYW5kaWRhdGUgZm9yIG1hc3RlclxuXHRcdFx0XHRDb25maWcuUmVtb3RlLm1hc3RlciA9IHRydWU7XG5cdFx0XHRcdGNvbnNvbGUubG9nKFwiSSBhbSB0aGUgbGF3ICh3YXMgY2hvc2VuIGFzIG1hc3RlcilcIik7XG5cdFx0XHRcdE5ldHdvcmtNb2RlbC5tYXN0ZXJfaWQgPSBpZDtcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdH07IC8vIGVuZCBwaWNrX3RoZV9tYXN0ZXJcblx0XG5cdHZhciBuZXdfcGVlciA9IGZ1bmN0aW9uKGlkKXtcblx0XHQvKipcblx0XHQqIHBhc3MgdGhlIGlkIHlvdSB3YW50IHRoZSBwZWVyIHRvIGhhdmVcblx0XHQqIHJldHVybnMgY3JlYXRlZCBwZWVyXG5cdFx0Ki9cblx0XHRcblx0XHR2YXIgcGVlciA9IG5ldyBQZWVyKGlkLCB7a2V5OiBNRURJQVRPUl9TRVJWRVJfS0VZfSk7XG5cblx0XHRwZWVyLm9uKCdjb25uZWN0aW9uJywgYWNjZXB0X2Nvbm5lY3Rpb24pO1xuXG5cblx0XHRyZXR1cm4gcGVlcjtcblx0fTtcblxuXHR2YXIgYWNjZXB0X2Nvbm5lY3Rpb24gPSBmdW5jdGlvbihjb25uKXtcblx0XHQvKipcblx0XHQqIHRha2VzIGNvbm5lY3Rpb25cblx0XHQqIGlzIGNhbGxlZCB3aGVuIHNvbWVvbmUgYXR0ZW1wdHMgdG8gZXN0YWJsaXNoIGNvbm5lY3Rpb25cblx0XHQqIHdpdGggdGhpcyBjbGllbnRcblx0XHQqL1xuXG5cdFx0dmFyIGZyZWVfaWRzID0gTmV0d29ya01vZGVsLmZyZWVfaWRzO1xuXHRcdHZhciBuZnJlZV9pZHMgPSBOZXR3b3JrTW9kZWwubm9uX2ZyZWVfaWRzO1xuXG5cdFx0dmFyIGlkID0gY29ubi5wZWVyO1xuXHRcdE5ldHdvcmtNb2RlbC5jb25uZWN0aW9uc1tpZF0gPSBjb25uO1xuXG5cdFx0Ly8gcmVtb3ZlIHRoZSBpZCBmcm9tIGxpc3Qgb2YgZnJlZSBpZHMuIG5vdGljZSB0aGF0IFxuXHRcdC8vIGFycmF5IGlzIHJlbGF0aXZlbHkgc21hbGwsIGFuZCBvcGVyYXRpb24gaGFwcGVuZHMgc2VsZG9tbHlcblx0XHRmcmVlX2lkcy5zcGxpY2UoZnJlZV9pZHMuaW5kZXhPZihpZCksIDEpOyBcblxuXHRcdGNvbnNvbGUubG9nKFwiYWNjZXB0aW5nIGNvbm5lY3Rpb24gZnJvbSBwZWVyXCIsIGlkKTtcblx0XHRcblx0XHRuZnJlZV9pZHMucHVzaChpZCk7XG5cblx0XHRjb25uLm9uKCdkYXRhJywgb25fZGF0YV9hcnJpdmFsKTtcblxuXHRcdGlmKENvbmZpZy5SZW1vdGUubWFzdGVyKXtcblx0XHRcdC8vIElmIEkgYW0gdGhlIG1hc3RlciwgSSB3YW50IHRvIG5vdGlmeSB0aGVtIGFib3V0IGl0XG5cdFx0XHRzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG5cdFx0XHRcdFx0c2VuZF90byhpZCwge3NwZWNpYWxfY29tbXVuaWNhdGlvbjogdHJ1ZSwgbWVzc2FnZTogXCJJIGFtIHRoZSBsYXchXCIsIG1hc3Rlcl9pZDogTmV0d29ya01vZGVsLm15X2lkfSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0LCAyMDAwKTtcblx0XHR9XG5cblx0XHRNdWx0aXBsYXllclN5bmNDb250cm9sbGVyLm5ldHdvcmtfZXZlbnRfaGFuZGxlcih7XG5cdFx0XHR0eXBlOiBcIm5ld19jb25uZWN0aW9uXCIsXG5cdFx0XHRuZXR3b3JrX2lkOiBpZCxcblx0XHR9KTtcblxuXHR9O1xuXG5cdHZhciBjb25uZWN0aW9uX3Vuc3VjY2Vzc2Z1bCA9IGZ1bmN0aW9uKGVycm9yKXtcblx0XHQvKipcblx0XHQqIGZvciBub3csIGp1c3QgYWRkIHRoZSBwZWVyIHRvIHdoaWNoIHdhcyB0cnlpbmcgdG8gY29ubmVjdCB0byB0aGVcblx0XHQqIGZyZWUgcGVlcnMgbGlzdC4gTGF0ZXIgc29tZSBpbnZlc3RpZ2F0aW9uIG9yIHJlY29ubmVjdGlvbiBhdHRlbXB0c1xuXHRcdCogbWF5IGJlIGltcGxlbWVudGVkXG5cdFx0Ki9cblxuXHRcdGNvbnNvbGUubG9nKGVycm9yKTtcblx0XHRcblx0fTtcblxuXHR2YXIgdXBkYXRlX3BsYXllcl9saXN0ID0gZnVuY3Rpb24oKXtcblx0XHQvKipcblx0XHQqIHNlYXJjaGVzIGZvciBuZXcgcGxheWVycyB1c2luZyBzdGFuZGFydCBwbGF5ZXIgaWQnc1xuXHRcdCogdGhpcyBmdW5jdGlvbiB3aWxsIGJlIGNhbGxlZCBvbmx5IG9uY2UsIHdoZW4gdGhpcyBjbGllbnQgZGVjaWRlc1xuXHRcdCogdG8gam9pbiBtdWx0aXBsYXllciBzZXNzaW9uLCBhdCBsZWFzdCB0aGVvcmV0aWNhbGx5LlxuXHRcdCogSWYgeW91IG5lZWQgdG8gY2FsbCBpdCByZWd1bGFybHksIGl0IHByb2JhYmx5IHNob3VsZCBiZSByZXdyaXR0ZW5cblx0XHQqL1xuXG5cdFx0dmFyIGZyZWVfaWRzID0gTmV0d29ya01vZGVsLmZyZWVfaWRzO1xuXG5cdFx0dmFyIHBlZXIgPSBOZXR3b3JrTW9kZWwubXlfcGVlcjtcblx0XHRcblx0XHRmb3IodmFyIGkgPSAwOyBpIDwgZnJlZV9pZHMubGVuZ3RoOyBpKyspe1xuXHRcdFx0dmFyIGNvbm4gPSBwZWVyLmNvbm5lY3QoZnJlZV9pZHNbaV0pO1xuXHRcdFx0Y29ubi5vbignZXJyb3InLCBjb25uZWN0aW9uX3Vuc3VjY2Vzc2Z1bCk7XG5cdFx0fVxuXHRcdFxuXHR9O1xuXHRcblx0XG5cdHZhciBzZW5kX3RvID0gZnVuY3Rpb24ocGVlcl9pZCwgZGF0YSl7XG5cdFx0LyoqXG5cdFx0KiBzZW5kIGRhdGEgdG8gdGhlIHBlZXIgd2l0aCB0aGUgcGVlcl9pZFxuXHRcdCogeW91IGNhbiBtYWtlIGRlY2lzaW9uIHRvIGRlbGF5IGRhdGEgc2VuZGluZywgb3IgY2hhbmdlXG5cdFx0KiBwcm9jZWR1cmUgc29tZWhvdyByaWdodCBoZXJlXG5cdFx0KiBidXQgZG8gbm90IHRyeSB0byBjb21wcmVzcyB0aGUgZGF0YSBpbiB0aGlzIGZ1bmN0aW9uLlxuXHRcdCogc2VuZF90byB3aWxsIGJlIGZpcmVkIG11bHRpcGxlIHRpbWVzIHBlciBlYWNoIHBpZWNlIG9mIGRhdGFcblx0XHQqIChpdCdsbCBiZSBzZW50IHRvIGFsbCBvdGhlciBwbGF5ZXJzKSBzbyBhbnkgY29tcHJlc3Npb24gc2hvdWxkXG5cdFx0KiB0YWtlIHBsYWNlIGluIHRoZSBcImRpc3RyaWJ1dGVfZGF0YVwiIGZ1bmN0aW9uXG5cdFx0Ki9cblxuXHRcdHZhciBjb25uID0gTmV0d29ya01vZGVsLmNvbm5lY3Rpb25zW3BlZXJfaWRdO1xuXG5cdFx0aWYoY29ubiAhPSBudWxsKXtcblx0XHRcdGNvbm4uc2VuZChkYXRhKTtcblx0XHR9ZWxzZXtcblx0XHRcdHRocm93IFwiTm8gY29ubmVjdGlvbiBleGlzdHMgZm9yIHRoZSBwZWVyIHdpdGggaWQgXCIgKyBTdHJpbmcoaWQpO1xuXHRcdH1cblx0XHRcblx0fTtcblxuXG5cdHZhciBkaXN0cmlidXRlX2RhdGEgPSBmdW5jdGlvbihkYXRhKXtcblx0XHQvKipcblx0XHQqIEZpcnN0LCBtYW5pcHVsYXRlIHRoZSBkYXRhIHRvIHByb3Blcmx5IGNvbXByZXNzIGl0LCBvciBkZWNpZGUgd2hhdCBzaG91bGRcblx0XHQqIGFuZCB3aGF0IHNob3VsZG4ndCBiZSBzZW50IChtYWtlIHN1cmUgdG8gZG9jdW1lbnQgc3R1ZmYgaGVyZSwgYmVjYXVzZSBwZW9wbGVcblx0XHQqIHdpbGwgcHVsbCB0aGVpciBoYWlyIG91dCB0cnlpbmcgdG8gdW5kZXJzdGFuZCB3aHkgdGhlaXIgc3R1ZmYgZG9lc24ndCBnZXQgc2VudClcblx0XHQqIFNlY29uZCwgc2VuZCB0aGUgZGF0YSB0byBhbGwgdGhlIGNvbm5lY3RlZCBwbGF5ZXJzIGluIHRoaXMgZ2FtZVxuXHRcdCovXG5cblx0XHR2YXIgY29ubnMgPSBOZXR3b3JrTW9kZWwuY29ubmVjdGlvbnM7XG5cdFx0Zm9yKHZhciBpZCBpbiBjb25ucyl7XG5cdFx0XHRpZihpZCAhPSBOZXR3b3JrTW9kZWwubXlfaWQgJiYgY29ubnNbaWRdKXtcblx0XHRcdFx0Y29ubnNbaWRdLnNlbmQoZGF0YSk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdFxuXHR9O1xuXG5cblx0dmFyIG9uX3VubG9hZCA9IGZ1bmN0aW9uKGFyZ3VtZW50cyl7XG5cdFx0LyoqXG5cdFx0KiB3aWxsIGJlIGNhbGxlZCB3aGVuIHRoZSB1c2VyIGlzIGFib3V0IHRvIGxlYXZlIHRoZSB3ZWIgcGFnZVxuXHRcdCogd2lsbCBtYWtlIHN1cmUgY29ubmVjdGlvbnMgYXJlIGdyYWNlZnVsbHkgY2xvc2VkIGFuZCBwZWVycyBhcmUgZGVzdHJveWVkXG5cdFx0Ki9cblxuXHRcdGNvbnNvbGUubG9nKFwiZG9jdW1lbnQgaXMgdW5sb2FkZWQgbm93LiBEZXN0cm95aW5nIHBlZXIsIGRpc2Nvbm5lY3RpbmcgZnJvbSBvdGhlcnNcIik7XG5cdFx0TmV0d29ya01vZGVsLm15X3BlZXIuZGVzdHJveSgpO1x0XG5cdH07XG5cdFxuXHRcblx0dmFyIG9uX2V2ZW50ID0gZnVuY3Rpb24oc210aCl7XG5cdFx0LyoqXG5cdFx0KiBkdW1teSBmdW5jdGlvbiwgZGVsZXRlIHdoZW4gaXNuJ3QgY2FsbGVkIGZyb20gYW55d2hlcmVcblx0XHQqL1xuXHRcdFxuXHR9O1xuXG5cblx0dmFyIG9uX2RhdGFfYXJyaXZhbCA9IGZ1bmN0aW9uKGRhdGEpe1xuXHRcdC8qKlxuXHRcdCogaXMgY2FsbGVkIHdoZW5ldmVyIG5ldyBkYXRhIGFycml2ZXNcblx0XHQqL1xuXG5cdFx0aWYoZGF0YS5zcGVjaWFsX2NvbW11bmljYXRpb24gIT0gbnVsbCl7XG5cdFx0XHQvLyBpZiB0aGlzIGlzIG5ldHdvcmsgaGFuZGxpbmcgZGF0YSxcblx0XHRcdC8vIG5vdCB0aGUgcmVndWxhciBtdWx0aXBsYXllciBkYXRhIHRyYW5zZmVyXG5cblx0XHRcdGlmKGRhdGEubWVzc2FnZSA9PSBcIkkgYW0gdGhlIGxhdyFcIil7XG5cdFx0XHRcdHZhciBtX2lkID0gZGF0YS5tYXN0ZXJfaWQ7XG5cblx0XHRcdFx0TmV0d29ya01vZGVsLm1hc3Rlcl9pZCA9IG1faWQ7XG5cdFx0XHRcdGNvbnNvbGUubG9nKFwiVGhlIG1hc3RlciBpc1wiLCBtX2lkKTtcblx0XHRcdFx0Y2xlYXJUaW1lb3V0KE5ldHdvcmtNb2RlbC50aW1lb3V0X2lkKTsgLy8gd2lsbCBnaXZlIGFuIGVycm9yIGlmIHRpbWVvdXQgcGFzc2VkP1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmKE5ldHdvcmtNb2RlbC5yZWNpZXZlX2FycmF5ID09IG51bGwpe1xuXHRcdFx0TmV0d29ya01vZGVsLnJlY2lldmVfYXJyYXkgPSBkYXRhO1xuXHRcdH1lbHNle1xuXHRcdFx0Zm9yKHZhciBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpKyspe1xuXHRcdFx0XHROZXR3b3JrTW9kZWwucmVjaWV2ZV9hcnJheS5wdXNoKGRhdGFbaV0pO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcblxuXG5cdHZhciBvbl9lcnJvciA9IGZ1bmN0aW9uKGVycm9yKXtcblx0XHQvKipcblx0XHQqIGNhbGxlZCB3aGVuIGVycm9yIG9jY3VycyB3aXRoIHRoZSBwZWVyXG5cdFx0Ki9cblx0fTtcblxuXG5cdHZhciBjb25uZWN0X3RvID0gZnVuY3Rpb24oaWQsIHBlZXIpe1xuXHRcdC8qKlxuXHRcdCogY29ubmVjdCBwZWVyID5wZWVyPCB0byB0aGUgcGVlciB3aXRoIHRoZSBnaXZlbiA+aWQ8XG5cdFx0KiByZXR1cm5zIGNvbm5lY3Rpb24gb2JqZWN0XG5cdFx0Ki9cblx0XHRcblx0XHR2YXIgY29ubiA9IHBlZXIuY29ubmVjdChpZCk7XG5cblx0XHRyZXR1cm4gY29ubjtcblx0fTtcblx0XG5cblx0dmFyIHJldHJpZXZlX2Zyb21fYmFja2xvZyA9IGZ1bmN0aW9uKCl7XG5cdFx0LyoqXG5cdFx0KiBnZXRzIHBhY2tldCBmcm9tIHRoZSBsaW5rZWQgbGlzdFxuXHRcdCogYW5kIHJlbW92ZXMgaXQgZnJvbSB0aGUgbGlzdFxuXHRcdCovXG5cdFx0XG5cdFx0dmFyIGxpc3QgPSBOZXR3b3JrTW9kZWwucGFja2FnZV9iYWNrbG9nO1xuXG5cdFx0aWYobGlzdC5IRUFEID09IG51bGwpe1xuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fVxuXG5cdFx0dmFyIHBhY2tldCA9IGxpc3QuSEVBRC5wYWNrZXQ7XG5cblx0XHRsaXN0LkhFQUQgPSBsaXN0LkhFQUQubmV4dDtcblx0XHRsaXN0LkhFQUQucHJldmlvdXMgPSBudWxsO1xuXG5cdFx0cmV0dXJuIHBhY2tldDtcblxuXHR9O1xuXG5cblx0dmFyIHBsYWNlX3RvX2JhY2tsb2cgPSBmdW5jdGlvbihwYWNrZXQpe1xuXHRcdC8qKlxuXHRcdCogcHV0cyBwYWNrZXQgaW50byB0aGUgbGlua2VkIGxpc3Rcblx0XHQqL1xuXHRcdHZhciBsaXN0ID0gTmV0d29ya01vZGVsLnBhY2thZ2VfYmFja2xvZztcblx0XHR2YXIgcGFja2V0X2NvbnRhaW5lciA9IHtwYWNrZXQ6IHBhY2tldH07IFxuXHRcdGlmKGxpc3QuSEVBRCA9PSBudWxsKXtcblx0XHRcdGxpc3QuSEVBRCA9IHBhY2tldF9jb250YWluZXI7XG5cdFx0XHRsaXN0LlRBSUwgPSBwYWNrZXRfY29udGFpbmVyO1xuXHRcdH1lbHNle1xuXHRcdFx0cGFja2V0X2NvbnRhaW5lci5wcmV2aW91cyA9IGxpc3QuVEFJTDtcblx0XHRcdGxpc3QuVEFJTC5uZXh0ID0gcGFja2V0X2NvbnRhaW5lcjtcblx0XHRcdGxpc3QuVEFJTCA9IHBhY2tldF9jb250YWluZXI7XG5cdFx0fVxuXHR9O1xuXHRcblxuXHR2YXIgYWRkX3RvX25leHRfdXBkYXRlID0gZnVuY3Rpb24oZGF0YSl7XG5cdFx0LyoqXG5cdFx0KiBjYWxsIHRoaXMgZnVuY3Rpb24gdG8gc2NoZWR1bGUgdGhlIGRhdGEgdG8gYmUgcGFzc2VkIHRvIHRoZSBtYXN0ZXIvY2xpZW50cy5cblx0XHQqIG5vdGUgdGhhdCB0aGlzIG1vZHVsZSB3aWxsIGRlY2lkZSBpdHNlbGYgd2hlbiBhbmQgaG93IHRvIHNlbmQgdGhlIGRhdGEsXG5cdFx0KiBzbyB5b3UgYXJlIG5vdCBndWFyYW50ZWVkIHRoYXQgaXQnbGwgYmUgc2VuZCBpbW1lZGlhdGVseSwgb3Igd2l0aCB0aGUgbmV4dCB1cGRhdGVcblx0XHQqIFlvdSBzaG91bGQgYWNjb3VudCBmb3IgdGhhdC4gVGhpcyBmdW5jdGlvbiBpcyBtZWFudCB0byBiZSBpbnRlbGxpZ2VudCBhbmQgcHJpb3JpdGl6ZSBtb3JlIGltcG9ydGFudFxuXHRcdCogc3R1ZmZcblx0XHQqL1xuXG5cdFx0Ly8gVEVNUE9SQVJZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVlZWVx0XG5cdFx0Ly9OZXR3b3JrTW9kZWwub3V0cHV0X2NlbGwgPSBOZXR3b3JrTW9kZWwub3V0cHV0X2NlbGwgfHwge307XG5cdFx0Ly9OZXR3b3JrTW9kZWwub3V0cHV0X2NlbGxbZGF0YS5wdXJwb3NlXSA9IGRhdGEuY29udGVudDtcblx0XHRcblx0XHRcblx0XHRcblx0XHROZXR3b3JrTW9kZWwuc2VuZF9hcnJheSA9IE5ldHdvcmtNb2RlbC5zZW5kX2FycmF5IHx8IFtdO1xuXG5cdFx0TmV0d29ya01vZGVsLnNlbmRfYXJyYXkucHVzaChkYXRhKTtcblx0fTtcblxuXHR2YXIgc2VuZF9vdXRfZGF0YSA9IGZ1bmN0aW9uKCl7XG5cdFx0LyoqXG5cdFx0KiB0ZW1wXG5cdFx0Ki9cblx0XHRcblx0XHRcblx0XHRpZihOZXR3b3JrTW9kZWwuc2VuZF9hcnJheSAhPSBudWxsKXtcblx0XHRcdFxuXHRcdFx0ZGlzdHJpYnV0ZV9kYXRhKE5ldHdvcmtNb2RlbC5zZW5kX2FycmF5KTtcblx0XHRcdE5ldHdvcmtNb2RlbC5zZW5kX2FycmF5ID0gbnVsbDtcblx0XHR9XG5cblx0fTtcblxuXHR2YXIgc2VuZF9kYXRhX3RvX21hc3RlciA9IGZ1bmN0aW9uKCl7XG5cdFx0LyoqXG5cdFx0KiBzZW5kIHRoZSBwcmVwYXJlZCBkYXRhIHRvIHRoZSBtYXN0ZXJcblx0XHQqL1xuXHRcdHZhciBtYXN0ZXJfY29ubiA9IE5ldHdvcmtNb2RlbC5jb25uZWN0aW9uc1tOZXR3b3JrTW9kZWwubWFzdGVyX2lkXTtcblx0XHRpZihOZXR3b3JrTW9kZWwuc2VuZF9hcnJheSAhPSBudWxsICYmIG1hc3Rlcl9jb25uICE9IG51bGwpe1xuXHRcdFx0bWFzdGVyX2Nvbm4uc2VuZChOZXR3b3JrTW9kZWwuc2VuZF9hcnJheSk7XG5cdFx0XHROZXR3b3JrTW9kZWwuc2VuZF9hcnJheSA9IG51bGw7XG5cdFx0fVxuXG5cdH07XG5cdFxuXG5cdHZhciBnZXRfZGF0YSA9IGZ1bmN0aW9uKCl7XG5cdFx0LyoqXG5cdFx0KiBnZXQgdGhlIGRhdGEgYXJyYXlcblx0XHQqL1xuXHRcdFxuXHRcdHZhciBkYXRhID0gTmV0d29ya01vZGVsLnJlY2lldmVfYXJyYXk7XG5cdFx0XG5cdFx0cmV0dXJuIGRhdGE7XG5cdH07XG5cblx0dmFyIGNsZWFuX2RhdGEgPSBmdW5jdGlvbigpe1xuXHRcdC8qKlxuXHRcdCogZGVzY3JpcHRpb25cblx0XHQqL1xuXHRcdGRlbGV0ZSBOZXR3b3JrTW9kZWwucmVjaWV2ZV9hcnJheTtcblx0fTtcblx0XG5cdHZhciBnZXRfbmV0d29ya19pZCA9IGZ1bmN0aW9uKCl7XG5cdFx0Ly8gcmV0dXJucyBteSBuZXR3b3JrIGlkIGlmIEkgYW0gY29ubmVjdGVkLFxuXHRcdC8vIG9yIFwibG9jYWxcIiBpZiBub3Rcblx0XHRpZihDb25maWcuUmVtb3RlLmNvbm5lY3RlZCl7XG5cdFx0XHRyZXR1cm4gTmV0d29ya01vZGVsLm15X2lkO1xuXHRcdH1lbHNle1xuXHRcdFx0cmV0dXJuIFwibG9jYWxcIjtcblx0XHR9XG5cdH07XG5cdFxuXHRyZXR1cm4ge1xuXHRcdC8vIGRlY2xhcmUgcHVibGljXG5cdFx0aW5pdDogaW5pdCwgXG5cdFx0dXBkYXRlOiB1cGRhdGUsXG5cdFx0YWRkX3RvX25leHRfdXBkYXRlOiBhZGRfdG9fbmV4dF91cGRhdGUsXG5cdFx0Z2V0X2RhdGE6IGdldF9kYXRhLFxuXHRcdGNsZWFuX2RhdGE6IGNsZWFuX2RhdGEsXG5cdFx0Z2V0X25ldHdvcmtfaWQ6IGdldF9uZXR3b3JrX2lkLFxuXHRcdHNlbmRfdG86IHNlbmRfdG8sXG5cdH07XG59KSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE5ldHdvcmtDb250cm9sbGVyO1xuXG52YXIgSW5jbHVkZXMgPSByZXF1aXJlKFwiLi4vSW5jbHVkZXMuanNcIik7IHZhciBpbmNsdWRlX2RhdGEgPSBJbmNsdWRlcy5nZXRfaW5jbHVkZV9kYXRhKHtcblx0Y3VycmVudF9tb2R1bGU6IFwiTmV0d29ya0NvbnRyb2xsZXJcIiwgXG5cdGluY2x1ZGVfb3B0aW9uczogSW5jbHVkZXMuY2hvaWNlcy5ERUZBVUxUXG59KTsgZXZhbChpbmNsdWRlX2RhdGEubmFtZV9zdGF0ZW1lbnRzKTsgdmFyIGluY2x1ZGUgPSBmdW5jdGlvbigpe2V2YWwoaW5jbHVkZV9kYXRhLm1vZHVsZV9zdGF0ZW1lbnRzKTt9XG4iLCIvLyBOb3Rlczpcbi8vIG5vdGljZSB0aGF0IHlvdSBjYW4gcmV1c2UgYm9keSBkZWZpbml0aW9ucyBtdWx0aXBsZSB0aW1lcywgaXQgbWFrZXMgc2Vuc2UgdG8gaGF2ZVxuLy8gY29sbGVjdGlvbiBvZiBib2R5IGRlZmluaXRpb25zIHRoYXQgYXJlIGNvbW1vbmx5IHVzZSBhbmQgbWF5YmUgYWxsb3cgc29tZSBzb3J0IG9mIFxuLy8gaW5oZXJpdGFuY2UgKGkuZS4geW91IGNhbiBtYWtlIHNvbWUgZGVmaW5pdGlvbiBvbiB0b3Agb2YgdGhlIGFub3RoZXIgZGVmaW5pdGlvbilcbi8vIC8vIGJvZGllcyBhcmUgYWxsb3dlZCB0byBoYXZlIHVzZXJEYXRhIG9uIHRoZW0gdGhhdCBpcyBqdXN0IHJlZmVyZW5jZSB0byBzb21lIG9iamVjdC5cbi8vIG1heSBiZSB1c2VmdWwgaW4gc29tZSBzaXR1YXRpb25zXG4vL1xuLy8gUXVlc3Rpb246XG4vLyBkb2VzIGl0IG1ha2Ugc2Vuc2UgdG8gYWxsb3cgdXNlcnMgdG8gcGFzcyBhbnkgcHJvcGVydGllcyBhcyBwYXJ0IG9mIG9iamVjdCBkZWZpbml0aW9uXG4vLyBhbmQganVzdCBhcHBseSB0aG9zZSBwcm9wZXJ0aWVzIGF1dG9tYXRpY2FsbHkgdG8gdGhlIHVzZXJEYXRhIHByb3BlcnR5IG9mIGJvZHk/XG5cbnZhciBCMmRDb25maWc7XG5cbnZhciBQaHlzaWNzQ29udHJvbGxlciA9IChmdW5jdGlvbigpe1xuXG5cdHZhciBpbml0ID0gZnVuY3Rpb24oKXtcblx0XHRpbmNsdWRlKCk7XG5cblx0XHRCMmRDb25maWcgPSBDb25maWcuQjJEO1xuXG5cdFx0UGh5c2ljc01vZGVsLnNjYWxlID0gQjJkQ29uZmlnLlNDQUxFO1xuXHRcdFBoeXNpY3NNb2RlbC5zdGVwX2Ftb3VudCA9IDEvKEIyZENvbmZpZy5TUFMpO1xuXG5cdFx0UGh5c2ljc01vZGVsLmdyYXZpdHkgPSBuZXcgQjJkLmIyVmVjMigwLDMwKTsgLy8gZWFydGggZ3Jhdml0eVxuXHRcdFBoeXNpY3NNb2RlbC53b3JsZCA9IG5ldyBCMmQuYjJXb3JsZChQaHlzaWNzTW9kZWwuZ3Jhdml0eSwgdHJ1ZSk7XG5cblx0XHRpbml0X2NvbGxpc2lvbl9saXN0ZW5lcigpO1xuXG5cdH07XG5cdFxuXHR2YXIgc3RlcCA9IGZ1bmN0aW9uIChkZWx0YV9tcykge1xuXHRcdC8vICE/IHNob3VsZCBJIHNldCB1cHBlciBsaW1pdCBvbiBkZWx0YSB0byBwcmV2ZW50IHdvcmxkIGZyb21cblx0XHQvLyBmYXN0IGZvcndhcmRpbmcgaWYgdGhlIHRpY2tlciB3YXMgcGF1c2VkPyBvciB0aGF0IGlzIG5vdCBhIHByb2JsZW0gaW4gb3VyIGNhc2U/XG5cdFx0Ly8gaW52ZXN0aWdhdGlvbiBpcyBuZWVkZWRcblxuXHRcdHZhciBkZWx0YSA9IGRlbHRhX21zLzEwMDA7XG5cblx0XHRQaHlzaWNzTW9kZWwudGltZVRvQ292ZXIgKz0gZGVsdGE7XG5cblx0XHR3aGlsZSAoUGh5c2ljc01vZGVsLnRpbWVUb0NvdmVyID4gUGh5c2ljc01vZGVsLnN0ZXBfYW1vdW50KSB7XG5cdFx0XHRQaHlzaWNzTW9kZWwudGltZVRvQ292ZXIgLT0gUGh5c2ljc01vZGVsLnN0ZXBfYW1vdW50O1xuXHRcdFx0UGh5c2ljc01vZGVsLndvcmxkLlN0ZXAoXG5cdFx0XHRcdFBoeXNpY3NNb2RlbC5zdGVwX2Ftb3VudCxcblx0XHRcdFx0QjJkQ29uZmlnLlBPU0lUSU9OX0lUUiwgLy8gdmVsb2NpdHkgaXRlcmF0aW9uc1xuXHRcdFx0XHRCMmRDb25maWcuVkVMT0NJVFlfSVRSIC8vIHBvc2l0aW9uIGl0ZXJhdGlvbnNcblx0XHRcdCk7XG5cdFx0fVxuXHR9OyAgLy8gZW5kIHN0ZXAgXG5cblx0dmFyIGRyYXdfZGVidWcgPSBmdW5jdGlvbigpe1xuXHRcdGlmIChCMmRDb25maWcuZGVidWdfZHJhdykge1xuXHRcdFx0UGh5c2ljc01vZGVsLndvcmxkLkRyYXdEZWJ1Z0RhdGEoKTtcblx0XHR9XG5cdH07XG5cblx0dmFyIGdldF9wYXJlbnRfY2hhaW4gPSBmdW5jdGlvbih0ZW1wbGF0ZSwgZGVmYXVsdF9kZWYpe1xuXHRcdHZhciBuZXh0ID0gdGVtcGxhdGU7XG5cdFx0dmFyIGFuY2VzdG9ycyA9IFtdO1xuXG5cdFx0d2hpbGUobmV4dCAhPSBudWxsKXtcblx0XHRcdGFuY2VzdG9ycy5wdXNoKG5leHQpO1xuXHRcdFx0bmV4dCA9IG5leHRbXCJwYXJlbnRcIl07XG5cdFx0fVxuXG5cdFx0aWYoZGVmYXVsdF9kZWYpe1xuXHRcdFx0YW5jZXN0b3JzLnB1c2goZGVmYXVsdF9kZWYpO1xuXHRcdH1cblxuXHRcdHJldHVybiBhbmNlc3RvcnM7XG5cdFx0XG5cdH07XG5cblx0dmFyIGFwcGx5X3BhcmVudHMgPSBmdW5jdGlvbih0ZW1wbGF0ZV9uYW1lLCB0ZW1wbGF0ZV9jb2xsZWN0aW9uKXtcblx0XHQvLyBUT0RPOiByZWZhY3RvciB0aGUgY29kZSBzbyB0aGlzIHRoaW5nIGlzIGRvbmUgb25seSBvbmNlXG5cdFx0Ly8gYXQgdGhlIGxvYWQgdGltXG5cdFx0Ly8gdGhhdCBjb3VsZCBwcm9iYWJseSBiZSBkb25lIGV2ZW4gZm9yIG90aGVyIHRoaW5ncy5cblx0XHQvLyBpZGVhOiBzdG9yZSBjb21waWxlZCBib2R5L2ZpeHR1cmUgZXRjLiB0b2dldGhlciB3aXRoIHRoZVxuXHRcdC8vIHRlbXBsYXRlLiB0aGlzIHdheSB5b3UnbGwgaGF2ZSBlYXN5IGFjY2VzcyB0byB0aGUgYWxsIGRlZmluZWRcblx0XHQvLyBvcHRpb25zIGZvciBkZWJ1Z2dpbmc7XG5cdFx0XG5cdFx0dmFyIGRlZmF1bHRfdG1wbGF0ZSA9IHRlbXBsYXRlX2NvbGxlY3Rpb25bXCJkZWZhdWx0XCJdO1xuXG5cdFx0dmFyIGNoYWluID0gZ2V0X3BhcmVudF9jaGFpbih0ZW1wbGF0ZV9jb2xsZWN0aW9uW3RlbXBsYXRlX25hbWVdLCBkZWZhdWx0X3RtcGxhdGUpO1xuXG5cdFx0dmFyIGZpbmFsX2RlZmluaXRpb24gPSB7fTtcblxuXHRcdGZvcih2YXIgaSA9IGNoYWluLmxlbmd0aCAtIDE7IGkgPj0gMCA7IGktLSl7XG5cdFx0XHQvLyBtYXkgYmUgbmVlZGVkIHRvIGJlIG1hZGUgbW9yZSBlZmZpY2llbnQgYnkgbW92aW5nIHRoZSBvdGhlciB3YXlcblx0XHRcdC8vIGFuZCBub3QgY29uc2lkZXJpbmcgb3B0aW9ucyB0aGF0IHdlcmUgYWxyZWFkeSBlbmNvdW50ZXJlZCBpbiBjaGlsZHJlblxuXHRcdFx0dmFyIGN1cnJlbnQgPSBjaGFpbltpXTtcblxuXG5cdFx0XHRmb3IodmFyIHByb3AgaW4gY3VycmVudCl7XG5cdFx0XHRcdGZpbmFsX2RlZmluaXRpb25bcHJvcF0gPSBjdXJyZW50W3Byb3BdO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBmaW5hbF9kZWZpbml0aW9uO1xuXHR9OyAvLyBlbmQgYXBwbHlfcGFyZW50c1xuXHRcdFxuXHR2YXIgdGFyZ2V0X3Byb3BzID0ge1xuXHRcdGJvZHlfZGVmOiBbXG5cdFx0XHRcImFjdGl2ZVwiLFxuXHRcdFx0XCJhbGxvd1NsZWVwXCIsXG5cdFx0XHRcImFuZ2xlXCIsXG5cdFx0XHRcImFuZ3VsYXJEYW1waW5nXCIsXG5cdFx0XHRcImFuZ3VsYXJWZWxvY2l0eVwiLFxuXHRcdFx0XCJhd2FrZVwiLFxuXHRcdFx0XCJidWxsZXRcIixcblx0XHRcdFwiZml4ZWRSb3RhdGlvblwiLFxuXHRcdFx0XCJpbmVydGlhU2NhbGVcIixcblx0XHRcdFwibGluZWFyRGFtcGluZ1wiLFxuXHRcdFx0XCJsaW5lYXJWZWxvY2l0eVwiLFxuXHRcdFx0XCJwb3NpdGlvblwiLFxuXHRcdFx0XCJ0eXBlXCIsXG5cdFx0XHQvL1widXNlckRhdGFcIiAvLyBkb2Vzbid0IHNlZW0gdG8gcHJvcGVybHkgd29yaywgZG9pbmcgaXQgZGlmZmVyZW50bHlcblx0XHRdLFxuXHRcdGZpeHR1cmVfZGVmOiBbXG5cdFx0XHRcImRlbnNpdHlcIixcblx0XHRcdC8vXCJmaWx0ZXJcIiwgaW1wbGVtZW50IGxhdGVyIGlmIG5lZWRlZFxuXHRcdFx0XCJmcmljdGlvblwiLFxuXHRcdFx0XCJpc1NlbnNvclwiLFxuXHRcdFx0XCJyZXN0aXR1dGlvblwiLFxuXHRcdFx0XCJzaGFwZVwiLFxuXHRcdFx0XCJ1c2VyRGF0YVwiXG5cdFx0XVxuXHR9O1xuXG5cdHZhciBhcHBseV9wcm9wZXJ0eV9saXN0ID0gZnVuY3Rpb24oc291cmNlLCBkZXN0aW5hdGlvbiwgbGlzdCl7XG5cdFx0LyoqXG5cdFx0ICogdGFrZXMgdHdvIG9iamVjdHMgYW5kIHRoZSBsaXN0IG9mIHN0cmluZ3Ncblx0XHQgKiBjb3BpZXMgYWxsIHByb3BlcnRpZXMgd2l0aCBuYW1lcyBmb3VuZCBpbiB0aGUgbGlzdFxuXHRcdCAqIGZyb20gc291cmNlIHRvIGRlc3RpbmF0aW9uXG5cdFx0ICogc2NpcHMgcHJvcGVydGllcyB3aGljaCBhcmUgbnVsbC91bmRlZmluZWRcblx0XHQgKi9cblxuXHRcdGZvcih2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKXtcblx0XHRcdHZhciBwcm9wID0gbGlzdFtpXTtcblx0XHRcdGlmKHNvdXJjZVtwcm9wXSAhPSBudWxsKXtcblx0XHRcdFx0ZGVzdGluYXRpb25bcHJvcF0gPSBzb3VyY2VbcHJvcF07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGRlc3RpbmF0aW9uO1xuXHR9O1xuXG5cdHZhciBQcm9wZXJ0eVVuZGVmaW5lZCA9IGZ1bmN0aW9uIFByb3BlcnR5VW5kZWZpbmVkKHByb3BlcnR5X25hbWUpe1xuXHRcdHRoaXMubmFtZSA9IFwiUHJvcGVydHlVbmRlZmluZWRcIjtcblx0XHR0aGlzLm1lc3NhZ2UgPSBcIkVycm9yOiBcIiArIHByb3BlcnR5X25hbWUgKyBcIiBpcyBub3QgZGVmaW5lZFwiO1xuXHR9O1xuXHRQcm9wZXJ0eVVuZGVmaW5lZC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEVycm9yLnByb3RvdHlwZSk7XG5cdFByb3BlcnR5VW5kZWZpbmVkLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFByb3BlcnR5VW5kZWZpbmVkO1xuXG5cdHZhciBnZXRfZm9ybWFsX2JvZHlfZGVmID0gZnVuY3Rpb24obm9uX2Zvcm1hbF9kZWYpe1xuXHRcdC8qKlxuXHRcdCAqIHR1cm4gbm9uIGZvcm1hbCBkZWZpbml0aW9uIGludG8gdGhlIGZvcm1hbCBvbmVcblx0XHQgKiBub24tZm9ybWFsIGRlZmluaXRpb24gaXMgYW4gb2JqZWN0IHRoYXQgY29udGFpbnNcblx0XHQgKiBwcm9wZXJ0aWVzIFNPTUUgb2Ygd2hpY2ggYXJlIGJveDJkIHByb3BlcnRpZXMgb3IgYXJlIFxuXHRcdCAqIGludGVuZGVkIHRvIGJlIHRyYW5zZm9ybWVkIGludG8gc3VjaC4gRS5nLiB0aGUgbm9uLWZvcm1hbFxuXHRcdCAqIGRlZmluaXRpb24gbWF5IGNvbnRhaW4gcHJvcGVydGllcyB2eCBhbmQgdnkgd2hpY2ggd2lsbCBiZSB0cmFuc2Zvcm1lZFxuXHRcdCAqIGludG8gdGhlIGxpbmVhclZlbG9jaXR5IHZlY3RvciBpbiB0aGUgZm9ybWFsIGRlZmluaXRpb25cblx0XHQgKi9cblxuXHRcdHZhciBuZmRlZiA9IG5vbl9mb3JtYWxfZGVmO1xuXG5cdFx0dmFyIGRlZmluaXRpb24gPSBuZXcgQjJkLmIyQm9keURlZigpO1xuXG5cdFx0aWYobmZkZWYudnggIT0gbnVsbCAmJiBuZmRlZi52eSAhPSBudWxsKXtcblx0XHRcdC8vIGNoZWNrIGZvciBpbmZvcm1hbCBwYXJhbWV0ZXIgc3BlY2lmaWNhdGlvbiBmaXJzdFxuXHRcdFx0bmZkZWYubGluZWFyVmVsb2NpdHkgPSBuZXcgQjJkLmIyVmVjMihuZmRlZi52eCwgbmZkZWYudnkpO1xuXHRcdH1lbHNle1xuXHRcdFx0Ly8gbWF5YmUgdGhlIGxpbmVhclZlbG9jaXR5IHdhcyBzcGVjaWZpZWQgZGlyZWN0bHkgYXMgdmVjdG9yLFxuXHRcdFx0Ly8gYW5kIG5vdCB0aHJvdWdoIGluZm9ybWFsIHBhcmFtZXRlcnM7IGNoZWNraW5nIHRoYXQsIGFuZCBpZiBub3QsXG5cdFx0XHQvLyBleGNlcHRpb25cblx0XHRcdGlmKCEobmZkZWYubGluZWFyVmVsb2NpdHkpKXtcblx0XHRcdFx0dGhyb3cgbmV3IFByb3BlcnR5VW5kZWZpbmVkKFwibGluZWFyVmVsb2NpdHlcIik7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYobmZkZWYueCAhPSBudWxsICYmIG5mZGVmLnkgIT0gbnVsbCl7XG5cdFx0XHQvLyBzYW1lIHByb2NlZHVyZSBhcyBmb3IgdGhlIGxpbmVhciB2ZWxvY2l0eVxuXHRcdFx0Ly8gY2hlY2tpbmcgZm9yIGluZm9ybWFsIHNwZWNpZmljYXRpb24gaGVyZVxuXHRcdFx0Ly8gYW5kIGlmIHByZXNlbnQsIHR1cm5pbmcgaW50byB0aGUgZm9ybWFsXG5cdFx0XHRuZmRlZi5wb3NpdGlvbiA9IG5ldyBCMmQuYjJWZWMyKG5mZGVmLngsIG5mZGVmLnkpO1xuXHRcdH1lbHNle1xuXHRcdFx0Ly8gY2hlY2tpbmcgaWYgZm9ybWFsIHdhcyBzcGVjaWZpZWQgZGlyZWN0bHlcblx0XHRcdGlmKCEobmZkZWYucG9zaXRpb24pKXtcblx0XHRcdFx0Ly8gaWYgbm90LCB0aHJvdyBjdXN0b20gZXhjZXB0aW9uXG5cdFx0XHRcdHRocm93IG5ldyBQcm9wZXJ0eVVuZGVmaW5lZChcInBvc2l0aW9uXCIpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmKG5mZGVmLnR5cGUpe1xuXHRcdFx0bmZkZWYudHlwZSA9IHtcblx0XHRcdFx0XCJzdGF0aWNcIjogQjJkLmIyQm9keS5iMl9zdGF0aWNCb2R5LCBcblx0XHRcdFx0XCJkeW5hbWljXCI6IEIyZC5iMkJvZHkuYjJfZHluYW1pY0JvZHksXG5cdFx0XHRcdFwia2luZW1hdGljXCI6IEIyZC5iMkJvZHkuYjJfa2luZW1hdGljQm9keVxuXHRcdFx0fVtuZmRlZi50eXBlXTsgLy8gdHVybiBzdHJpbmctdHlwZSBpbnRvIGIyZCB0eXBlXG5cdFx0fWVsc2V7XG5cdFx0XHR0aHJvdyBuZXcgUHJvcGVydHlVbmRlZmluZWQoXCJ0eXBlXCIpO1xuXHRcdH1cblxuXHRcdGFwcGx5X3Byb3BlcnR5X2xpc3QobmZkZWYsIGRlZmluaXRpb24sIHRhcmdldF9wcm9wcy5ib2R5X2RlZik7XG5cblx0XHRyZXR1cm4gZGVmaW5pdGlvbjtcblxuXHR9O1xuXG5cdHZhciBnZXRfZm9ybWFsX2ZpeHR1cmVfZGVmID0gZnVuY3Rpb24obm9uX2Zvcm1hbF9kZWYpe1xuXHRcdC8qKlxuXHRcdCAqIHR1cm5zIG5vbi1mb3JtYWwgZGVmaW5pdGlvbiBpbnRvIHRoZSBmb3JtYWwgb25lXG5cdFx0ICogc2VlIGdldF9mcm9tYWxfYm9keV9kZWYgZm9yIGV4cGxhbmF0aW9uXG5cdFx0ICovXG5cblx0XHR2YXIgbmZkZWYgPSBub25fZm9ybWFsX2RlZjtcblx0XHR2YXIgc2hhcGUgPSBuZmRlZi5zaGFwZTtcblx0XHR2YXIgZml4dHVyZV9kZWYgPSBuZXcgQjJkLmIyRml4dHVyZURlZigpO1xuXG5cdFx0YXBwbHlfcHJvcGVydHlfbGlzdChub25fZm9ybWFsX2RlZiwgZml4dHVyZV9kZWYsIHRhcmdldF9wcm9wcy5maXh0dXJlX2RlZik7XG5cblx0XHRzd2l0Y2ggKHNoYXBlKSB7XG5cdFx0XHRjYXNlIFwicmVjdGFuZ2xlXCI6XG5cblx0XHRcdFx0aWYobmZkZWYud2lkdGggIT0gbnVsbCAmJiBuZmRlZi5oZWlnaHQgIT0gbnVsbCl7XG5cdFx0XHRcdFx0Zml4dHVyZV9kZWYuc2hhcGUgPSBuZXcgQjJkLmIyUG9seWdvblNoYXBlKCk7XG5cdFx0XHRcdFx0aWYgKG5mZGVmLm9mZnNldCAhPSBudWxsKXtcblx0XHRcdFx0XHRcdHZhciBvZmZzZXQgPSBuZXcgQjJkLmIyVmVjMihuZmRlZi5vZmZzZXQueCAsbmZkZWYub2Zmc2V0LnkpO1xuXHRcdFx0XHRcdFx0Zml4dHVyZV9kZWYuc2hhcGUuU2V0QXNPcmllbnRlZEJveChuZmRlZi53aWR0aC8yLCBuZmRlZi5oZWlnaHQvMiwgb2Zmc2V0LCAwKTtcblx0XHRcdFx0XHR9ZWxzZXtcblx0XHRcdFx0XHRcdGZpeHR1cmVfZGVmLnNoYXBlLlNldEFzQm94KG5mZGVmLndpZHRoLzIsIG5mZGVmLmhlaWdodC8yKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1lbHNle1xuXHRcdFx0XHRcdHRocm93IG5ldyBQcm9wZXJ0eVVuZGVmaW5lZChcIndpZHRoIG9yIGhlaWdodFwiKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgXCJwb2x5Z29uXCI6XG5cblx0XHRcdFx0aWYobmZkZWYucG9pbnRzICE9IG51bGwpe1xuXHRcdFx0XHRcdGZpeHR1cmVfZGVmLnNoYXBlID0gbmV3IEIyZC5iMlBvbHlnb25TaGFwZSgpO1xuXHRcdFx0XHRcdGZpeHR1cmVfZGVmLnNoYXBlLlNldEFzQXJyYXkobmZkZWYucG9pbnRzLCBuZmRlZi5wb2ludHMubGVuZ3RoKTtcblx0XHRcdFx0fWVsc2V7XG5cdFx0XHRcdFx0dGhyb3cgbmV3IFByb3BlcnR5VW5kZWZpbmVkKFwicG9pbnRzXCIpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSBcImNpcmNsZVwiOlxuXG5cdFx0XHRcdGlmKG5mZGVmLnJhZGl1cyAhPSBudWxsKXtcblx0XHRcdFx0XHRmaXh0dXJlX2RlZi5zaGFwZSA9IG5ldyBCMmQuYjJDaXJjbGVTaGFwZShuZmRlZi5yYWRpdXMpO1xuXHRcdFx0XHR9ZWxzZXtcblx0XHRcdFx0XHR0aHJvdyBuZXcgUHJvcGVydHlVbmRlZmluZWQoXCJyYWRpdXNcIik7XG5cdFx0XHRcdH1cblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHR0aHJvdyBcIkVycm9yOiBzaGFwZSBtdXN0IGJlIG9uZSBvZiB0aGUgZm9sbG93aW5nOiBcIiArIFxuXHRcdFx0XHRcdCdcInBvbHlnb25cIiwgXCJyZWN0YW5nbGVcIiwgXCJjaXJjbGVcIi4gWW91IHNwZWNpZmllZDogJyArXG5cdFx0XHRcdFx0U3RyaW5nKHNoYXBlKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZml4dHVyZV9kZWY7XG5cblx0fTtcblx0XG5cblx0dmFyIGdldF9ib2R5ID0gZnVuY3Rpb24obm9uX2Zvcm1hbF9kZWYsIGVudGl0eV9pbnN0YW5jZSl7XG5cdFx0LyoqXG5cdFx0ICogdGFrZXMgbm9uLWZvcm1hbCBkZWZpbml0aW9uXG5cdFx0ICogcmV0dXJucyBib2R5IGJhc2VkIG9uIHRoaXMgZGVmaW5pdGlvblxuXHRcdCAqXG5cdFx0ICovXG5cdFx0aWYgKGVudGl0eV9pbnN0YW5jZSA9PSBudWxsKXtcblx0XHR0aHJvdyBuZXcgUHJvcGVydHlVbmRlZmluZWQoXCJlbnRpdHlfaW5zdGFuY2VcIik7XG5cdFx0fVxuXHRcdHZhciBkZWZpbml0aW9uID0gZ2V0X2Zvcm1hbF9ib2R5X2RlZihub25fZm9ybWFsX2RlZik7XG5cblx0XHR2YXIgYm9keSA9IFBoeXNpY3NNb2RlbC53b3JsZC5DcmVhdGVCb2R5KGRlZmluaXRpb24pO1xuXG5cdFx0Ly9pZihib2R5LnVzZXJEYXRhID09IG51bGwpe1xuXHRcdFx0Ly9ib2R5LnVzZXJEYXRhID0ge307XG5cdFx0Ly99XG5cblx0XHQvLyBhcHBlbmQgcGFzc2VkIGRlZmluaXRpb24gdG8gdGhlIHVzZXIgZGF0YSBvZiB0aGUgYm9keVxuXHRcdC8vIGZvciBkZWJ1Z2dpbmcgcHVycG9zZXMsIGFuZCBhbHNvIHRvIGFsbG93IGVhc3kgc3BlY2lmaWNhdGlvbiBvZiBcblx0XHQvLyBjdXN0b20gcGFyYW1ldGVycyBkdXJpbmcgZGVmaW5pdGlvbi4gSWYgdGhpcyB3aWxsIGNhdXNlIGNvbmZ1c2lvbixcblx0XHQvLyBJJ2xsIHJlbW92ZSB0aGF0XG5cdFx0Ly9ib2R5LnVzZXJEYXRhLmRlZiA9IG5vbl9mb3JtYWxfZGVmO1xuXHRcdGJvZHkuU2V0VXNlckRhdGEoe2RlZjogbm9uX2Zvcm1hbF9kZWYsIGVudGl0eV9pbnN0YW5jZTogZW50aXR5X2luc3RhbmNlfSk7XG5cdFx0XG5cdFx0cmV0dXJuIGJvZHk7XG5cdFxuXHR9O1xuXG5cdHZhciBhdHRhY2hfZml4dHVyZSA9IGZ1bmN0aW9uKGJvZHksIG5vbl9mb3JtYWxfZGVmLCBmaXh0dXJlX25hbWUpe1xuXHRcdC8qKlxuXHRcdCAqIGdpdmVuIGIyZCBib2R5LCAobm9uLWZvcm1hbCkgZml4dHVyZSBkZWZpbml0aW9uIGFuZCAoT1BUSU9OQUwpIGZpeHR1cmVfbmFtZVxuXHRcdCAqIHRoaXMgZnVuY3Rpb24gYXR0YWNoZXMgZml4dHVyZSB0byB0aGUgYm9keVxuXHRcdCAqL1xuXG5cdFx0dmFyIGZpeHR1cmVfZGVmID0gZ2V0X2Zvcm1hbF9maXh0dXJlX2RlZihub25fZm9ybWFsX2RlZik7XG5cblx0XHRpZihmaXh0dXJlX2RlZi51c2VyRGF0YSA9PSBudWxsKXtcblx0XHRcdGZpeHR1cmVfZGVmLnVzZXJEYXRhID0ge307XG5cdFx0fVxuXG5cdFx0Zml4dHVyZV9kZWYudXNlckRhdGEuZGVmID0gbm9uX2Zvcm1hbF9kZWY7XG5cdFx0Zml4dHVyZV9kZWYudXNlckRhdGEubmFtZSA9IGZpeHR1cmVfbmFtZTtcblx0XHRcblx0XHRib2R5LkNyZWF0ZUZpeHR1cmUoZml4dHVyZV9kZWYpO1xuXHRcdFxuXHR9O1xuXG5cdHZhciBhdHRhY2hfc2Vuc29ycyA9IGZ1bmN0aW9uKGJvZHkpe1xuXHRcdHZhciBTRU5TT1JfVEhJQ0tORVNTID0gMC4xO1xuXHRcdFxuXHRcdC8vIGdldCB0aGUgd2lkdGggYW5kIGhlaWdodCBvZiB0aGUgYm9keSdzIG1haW4gZml4dHVyZVxuXHRcdC8vIGFuZCBjcmVhdGUgNCBzZW5zb3IgZml4dHVyZXMgYmFzZWQgb24gdGhvc2UgcGFyYW1ldGVyc1xuXHRcdC8vIGNhbGN1bGF0ZSBvZmZzZXQgb2Ygc2Vuc29ycyBzbyB0aGF0IHRoZXkgbWF0Y2ggdGhlIG1haW4gZml4dHVyZVxuXHRcdHZhciB4ID0gYm9keS5HZXRQb3NpdGlvbigpLng7XG5cdFx0dmFyIHkgPSBib2R5LkdldFBvc2l0aW9uKCkueTtcblxuXHRcdC8vIFRPRE86IGNoYW5nZSB0byBnZXR0aW5nIGRpbWVudGlvbnMgb2YgbWFpbiBmaXh0dXJlXG5cdFx0dmFyIGggPSBib2R5LkdldEZpeHR1cmVMaXN0KCkuR2V0QUFCQigpLkdldEV4dGVudHMoKS55O1xuXHRcdHZhciB3ID0gYm9keS5HZXRGaXh0dXJlTGlzdCgpLkdldEFBQkIoKS5HZXRFeHRlbnRzKCkueDtcblx0XHRcblx0XHQvL2F0dGFjaCB0b3AgZml4dHVyZVxuXHRcdHZhciB0b3Bfc2Vuc29yID0ge307XG5cdFx0dG9wX3NlbnNvci5zaGFwZSA9IFwicmVjdGFuZ2xlXCI7XG5cdFx0dG9wX3NlbnNvci5kZW5zaXR5ID0gMDtcblx0XHR0b3Bfc2Vuc29yLmlzU2Vuc29yID0gdHJ1ZTtcblx0XHR0b3Bfc2Vuc29yLmhlaWdodCA9IFNFTlNPUl9USElDS05FU1M7XG5cdFx0dG9wX3NlbnNvci53aWR0aCA9ICh3KjIgLSBTRU5TT1JfVEhJQ0tORVNTKjIpIC0gMC4zO1xuXHRcdHRvcF9zZW5zb3Iub2Zmc2V0ID0ge3g6MCwgeTogKC0xKmgpICsgU0VOU09SX1RISUNLTkVTUy8yfTtcblx0XHRhdHRhY2hfZml4dHVyZShib2R5LHRvcF9zZW5zb3IsXCJ0b3BcIik7XG5cdFx0XG5cdFx0Ly9hdHRhY2ggYm90dG9tIGZpeHR1cmVcblx0XHR2YXIgYm90dG9tX3NlbnNvciA9IHRvcF9zZW5zb3I7XG5cdFx0Ly9ib3R0b21fc2Vuc29yLndpZHRoICs9IDAuNDtcblx0XHRib3R0b21fc2Vuc29yLm9mZnNldCA9IHt4OjAsIHk6IGggLSBTRU5TT1JfVEhJQ0tORVNTLzJ9O1xuXHRcdGF0dGFjaF9maXh0dXJlKGJvZHksYm90dG9tX3NlbnNvcixcImJvdHRvbVwiKTtcblx0XHRcblx0XHQvL2F0dGFjaCBsZWZ0IGZpeHR1cmVcblx0XHR2YXIgbGVmdF9zZW5zb3IgPSB0b3Bfc2Vuc29yO1xuXHRcdGxlZnRfc2Vuc29yLmhlaWdodCA9IChoKjIgLSBTRU5TT1JfVEhJQ0tORVNTKjIpIC0gMC4zO1xuXHRcdGxlZnRfc2Vuc29yLndpZHRoID0gU0VOU09SX1RISUNLTkVTUztcblx0XHRsZWZ0X3NlbnNvci5vZmZzZXQgPSB7eDooLTEqdykgKyBTRU5TT1JfVEhJQ0tORVNTLzIseTowfTtcblx0XHRhdHRhY2hfZml4dHVyZShib2R5LGxlZnRfc2Vuc29yLFwibGVmdFwiKTtcblx0XHRcblx0XHQvL2F0dGFjaCByaWdodCBmaXh0dXJlXG5cdFx0dmFyIHJpZ2h0X3NlbnNvciA9IGxlZnRfc2Vuc29yO1xuXHRcdHJpZ2h0X3NlbnNvci5vZmZzZXQgPSB7eDp3IC0gU0VOU09SX1RISUNLTkVTUy8yLCB5OjB9O1xuXHRcdGF0dGFjaF9maXh0dXJlKGJvZHkscmlnaHRfc2Vuc29yLFwicmlnaHRcIik7XG5cdH07XG5cdFxuXHRcblx0XG5cblx0dmFyIGdldF9yZWN0YW5ndWxhciA9IGZ1bmN0aW9uKGRlZiwgZW50aXR5X2luc3RhbmNlKXtcblx0XHQvLyBnZXQgYXBwcm9wcmlhdGUgdGVtcGxhdGUgY29sbGVjdGlvbiB0byBkcmF3IGZyb21cblx0XHR2YXIgdGVtcGxhdGVfbmFtZSA9IGVudGl0eV9pbnN0YW5jZS50eXBlO1xuXHRcdHZhciB0ZW1wbGF0ZV9jb2xsZWN0aW9uID0gUGh5c2ljc01vZGVsLnJfdGVtcGxhdGVzO1xuXHRcdHZhciBjb21waWxlZF90ZW1wbGF0ZSA9IGFwcGx5X3BhcmVudHModGVtcGxhdGVfbmFtZSwgdGVtcGxhdGVfY29sbGVjdGlvbik7XG5cblx0XHQvLyBhcHBseSBjdXN0b20gb3ZlcnJpZGVcblx0XHR2YXIgZmluYWxfZGVmID0gY29tcGlsZWRfdGVtcGxhdGU7XG5cdFx0Zm9yKHZhciBwcm9wIGluIGRlZil7XG5cdFx0XHRmaW5hbF9kZWZbcHJvcF0gPSBkZWZbcHJvcF07XG5cdFx0fVxuXG5cdFx0ZmluYWxfZGVmLnNoYXBlID0gXCJyZWN0YW5nbGVcIjtcblxuXHRcdC8vIGZpbmFsX2RlZiBjb250YWlucyBhbGwgZmluYWwgZGF0YSwgYWJvdXQgYm9keSB3ZSBhcmUgYWJvdXQgdG8gY3JlYXRlXG5cdFx0Ly8gaXQgdGFrZXMgaW50byBhY2NvdW50IHRlbXBsYXRlIGdpdmVuIGFuZCBhbGwgaXQncyBwYXJlbnRzXG5cdFx0Ly8gYW5kIGFsc28gbWFudWFsbHkgc3BlY2lmaWVkIHBhcmFtZXRlcnMuIEhvd2V2ZXIsIHRoaXMgZGVmaW5pdGlvbiBpcyByYXcsXG5cdFx0Ly8gaS5lLiBzb21lIGRhdGEgaW4gaXQgbWF5IG5vdCBiZSBpbiBpdHMgZmluYWwgZm9ybSwgZS5nLiBsaW5lYXIgdmVsb2NpdHkgaXMgc3BlY2lmaWVkXG5cdFx0Ly8gYXMgdHdvIHBhcmFtZXRlcnMsIHZ4IGFuZCB2eSwgd2hpbGUgaXQgd2hvdWxkIGJlIGNvbnZlcnRlZCBpbnRvIHRoZSB2ZWN0b3Jcblx0XHQvLyBmb3IgYm94MmQuIHNvIGZpbmFsX2RlZiBpcyBhIGZpbmFsIGRlc2NyaXB0aW9uLCBidXQgbm90IGluIGZpbmFsIGZvcm1cblxuXG5cdFx0dmFyIGJvZHkgPSBnZXRfYm9keShmaW5hbF9kZWYsIGVudGl0eV9pbnN0YW5jZSk7XG5cdFx0IFxuXHRcdGF0dGFjaF9maXh0dXJlKGJvZHksIGZpbmFsX2RlZiwgXCJtYWluXCIpO1xuXHRcdFxuXHRcdC8vSWYgdGhlIG9iamVjdCBoYXMgZGlyZWN0aW9uYWwgc2Vuc29ycywgYXR0YWNoIHNlbnNvcnMgaGVyZVxuXHRcdGlmKGZpbmFsX2RlZi5ib3JkZXJfc2Vuc29ycyl7XG5cdFx0XHRhdHRhY2hfc2Vuc29ycyhib2R5KTtcblx0XHR9XG5cblx0XHRyZXR1cm4gYm9keTtcblx0fTtcblxuXHR2YXIgZ2V0X2NpcmN1bGFyID0gZnVuY3Rpb24oZGVmLCB0ZW1wbGF0ZSl7XG5cdFx0dmFyIHR5cGUgPSBcImNpcmN1bGFyXCI7XG5cdFx0Ly8gZG9udCcgZm9yZ2V0IGFib3V0IHJlZmFjdG9yaW5nIHNvbWUgc3R1ZmYgaW50byB0aGVcblx0XHQvLyBzZXRfY29tbW9uIGZ1bmN0aW9uXG5cdFx0XG5cdFx0dmFyIGRlZmluaXRpb24gPSBuZXcgQjJkLmIyQm9keURlZigpO1xuXHRcdFxuXHR9O1xuXHRcdFxuXHR2YXIgZ2V0X3BvbHlnb25hbCA9IGZ1bmN0aW9uKGRlZiwgdGVtcGxhdGUpe1xuXHRcdHZhciB0eXBlID0gXCJwb2x5Z29uYWxcIjtcblx0XHRcblx0XHR2YXIgZGVmaW5pdGlvbiA9IG5ldyBCMmQuYjJCb2R5RGVmKCk7XG5cdFx0XG5cdH07XG5cblx0dmFyIHNldF9kZWJ1Z19kcmF3ID0gZnVuY3Rpb24oZGVidWdfZHJhdyl7XG5cdFx0UGh5c2ljc01vZGVsLndvcmxkLlNldERlYnVnRHJhdyhkZWJ1Z19kcmF3KTtcblx0fTtcblxuXG5cdFxuXHR2YXIgbGlzdGVuX2Zvcl9jb250YWN0X3dpdGggPSBmdW5jdGlvbih3aGF0LCBjb2xsaXNpb25fZXZlbnRfbmFtZSwgY3VzdG9tX2Z1bmN0aW9uKXtcblx0XHQvKipcblx0XHQgKiBzZXR1cHMgY3VzdG9tX2Z1bmN0aW9uIHRvIGJlIGNhbGxlZCBlYWNoIHRpbWUgdGhlIGNvbGxpc2lvbiBldmVudCBcblx0XHQgKiBvY2N1cnMgYW5kIGludm9sdmVzID53aGF0PFxuXHRcdCAqIFRBS0VTOlxuXHRcdCAqIFx0PndoYXQ8XG5cdFx0ICogXHRcdHN0cmluZyBcblx0XHQgKiBcdFx0aWQgb2YgYW4gb2JqZWN0IChcIjM4M1wiKSBvciBpdCdzIHR5cGUgKFwicGxheWVyXCIpXG5cdFx0ICogXHQ+Y29sbGlzaW9uX2V2ZW50X25hbWU8XG5cdFx0ICogXHRcdHN0cmluZy4gb25lIG9mOlxuXHRcdCAqIFx0XHRCZWdpbkNvbnRhY3QsIEVuZENvbnRhY3QsIFByZVNvbHZlLCBQb3N0U29sdmVcblx0XHQgKiBcdD5jdXN0b21fZnVuY3Rpb248IFxuXHRcdCAqIFx0XHRmdW5jdGlvblxuXHRcdCAqIFx0XHRmdW5jdGlvbiB0byBiZSBjYWxsZWQgb24gb25lIG9mIHRob3NlIGV2ZW50c1xuXHRcdCAqIFx0XHRub3RpY2UgdGhhdCBmdW5jdGlvbiB3aWxsIGJlIHdyYXBwZWQsIHNvIGl0IHNob3VsZFxuXHRcdCAqIFx0XHRhY2NlcHQgZXh0cmEgcGFyYW1ldGVyID5pbmZvPCB0aGF0IHdpbGwgY29udGFpblxuXHRcdCAqIFx0XHR1bnBhY2tlZCBpbmZvcm1hdGlvbiBhYm91dCB0aGUgY29sbGlzaW9uXG5cdFx0ICovXG5cblxuXHRcdGlmKHdoYXQgPT0gbnVsbCl7XG5cdFx0XHR0aHJvdyBuZXcgUHJvcGVydHlVbmRlZmluZWQoXCJ3aGF0XCIpO1xuXHRcdH1cblxuXHRcdGlmKFxuXHRcdFx0Y29sbGlzaW9uX2V2ZW50X25hbWUgIT0gXCJCZWdpbkNvbnRhY3RcIiAmJiBjb2xsaXNpb25fZXZlbnRfbmFtZSAhPSBcIkVuZENvbnRhY3RcIiAmJlxuXHRcdFx0Y29sbGlzaW9uX2V2ZW50X25hbWUgIT0gXCJQcmVTb2x2ZVwiICYmIGNvbGxpc2lvbl9ldmVudF9uYW1lICE9IFwiUG9zdFNvbHZlXCIgXG5cdFx0KXtcblx0XHRcdHRocm93IFwiY29sbGlzaW9uX2V2ZW50X25hbWUgc2hvdWxkIGJlIG9uZSBvZjogUHJlU29sdmUsIFBvc3RTb2x2ZSwgRW5kQ29udGFjdCwgQmVnaW5Db250YWN0XCI7XG5cdFx0fVxuXG5cdFx0aWYoY3VzdG9tX2Z1bmN0aW9uID09IG51bGwgfHwgdHlwZW9mKGN1c3RvbV9mdW5jdGlvbikgIT0gXCJmdW5jdGlvblwiKXtcblx0XHRcdHRocm93IFwiUHJvcGVydHkgY3VzdG9tX2Z1bmN0aW9uIGlzIG5vdCBkZWZpbmVkIG9yIGlzbid0IGEgZnVuY3Rpb25cIlxuXHRcdH1cblxuXHRcdHZhciB0YXJnZXRfZnVuY3Rpb25fdGFibGUgPSBQaHlzaWNzTW9kZWwuYXdhaXRpbmdfY29udGFjdFtjb2xsaXNpb25fZXZlbnRfbmFtZV07IFxuXG5cdFx0aWYodGFyZ2V0X2Z1bmN0aW9uX3RhYmxlW3doYXRdID09IG51bGwpe1xuXHRcdFx0dGFyZ2V0X2Z1bmN0aW9uX3RhYmxlW3doYXRdID0gW2N1c3RvbV9mdW5jdGlvbl07XG5cdFx0fWVsc2V7XG5cdFx0XHR0YXJnZXRfZnVuY3Rpb25fdGFibGVbd2hhdF0ucHVzaChjdXN0b21fZnVuY3Rpb24pO1xuXHRcdH1cblx0XHRcblx0XHRcblx0fTtcblx0XG5cdFxuXHRcdFxuXHR2YXIgaW5pdF9jb2xsaXNpb25fbGlzdGVuZXIgPSBmdW5jdGlvbigpe1xuXHRcdFxuXHRcdC8qKlxuXHRcdCAqL1xuXHRcdFxuXHRcdHZhciBjYWxsX2FsbCA9IGZ1bmN0aW9uKGxpc3QsIGFyZ3Mpe1xuXHRcdFx0LyoqXG5cdFx0XHQgKiBjYWxsIGFsbCBmdW5jdGlvbnMgaW4gbGlzdCBwcm92aWRpbmcgYXJndW1lbnRzXG5cdFx0XHQgKiBmcm9tIHRoZSBhcnJheSBhcmdzXG5cdFx0XHQgKiBpZiBsaXN0IGdpdmUgaXMgbnVsbC91bmRlZmluZWQsIGRvIG5vdGhpbmdcblx0XHRcdCAqL1xuXG5cdFx0XHRpZihsaXN0ICE9IG51bGwpe1xuXHRcdFx0XHRmb3IodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKyl7XG5cdFx0XHRcdFx0bGlzdFtpXS5hcHBseSh0aGlzLCBhcmdzKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cblx0XHR2YXIgZ2V0X2lkID0gZnVuY3Rpb24ob2JqKXtcblx0XHRcdHVzZXJEYXRhID0gb2JqLkdldFVzZXJEYXRhKCk7XG5cdFx0XHRpZih1c2VyRGF0YSAhPSBudWxsICYmIHVzZXJEYXRhLmlkICE9IG51bGwpe1xuXHRcdFx0XHRyZXR1cm4gdXNlckRhdGEuaWQ7XG5cdFx0XHR9ZWxzZXtcblx0XHRcdFx0cmV0dXJuIFwiW05PX0lEXVwiXG5cdFx0XHR9XG5cdFx0XHRcblx0XHR9O1xuXG5cdFx0dmFyIGdldF90eXBlID0gZnVuY3Rpb24ob2JqKXtcblx0XHRcdHZhciB1c2VyRGF0YSA9IG9iai5HZXRVc2VyRGF0YSgpO1xuXHRcdFx0aWYodXNlckRhdGEgIT0gbnVsbCAmJiB1c2VyRGF0YS5lbnRpdHlfaW5zdGFuY2UudHlwZSAhPSBudWxsKXtcblx0XHRcdFx0cmV0dXJuIHVzZXJEYXRhLmVudGl0eV9pbnN0YW5jZS50eXBlO1xuXHRcdFx0fWVsc2V7XG5cdFx0XHRcdHJldHVybiBudWxsO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0fTtcblxuXHRcdHZhciB1bnBhY2tfY29udGFjdF9pbmZvID0gZnVuY3Rpb24oY29udGFjdCwgbXlfdHlwZSl7XG5cdFx0XHQvKipcblx0XHRcdCAqIHVucGFja3MgaW5mbyBhYm91dCB0aGUgY29sbGlzaW9uIGFuZCBcblx0XHRcdCAqIHJldHVybnMgaXRcblx0XHRcdCAqID5teV90eXBlPCBpcyBhbiB0eXBlIG9mIGFuIG9iamVjdCB0aGF0IHdpbGxcblx0XHRcdCAqIGdvIHVuZGVyIHRoZSA+TWU8IHBhcmFtZWV0ZXIgaW5zaWRlIG9mIGluZm9cblx0XHRcdCAqIChBcyBvcHBvc2VkIHRvIFRoZW0sIHdoaWNoIGlzIHRoZSBvdGhlciBvYmplY3QpXG5cdFx0XHQgKi9cblx0XHRcdGlmKG15X3R5cGUgPT0gbnVsbCl7XG5cdFx0XHRcdC8vID5teV90eXBlPCBpc24ndCBzdXBwb3NlZCB0byBiZSBudWxsL3VuZGVmaW5lZFxuXHRcdFx0XHR0aHJvdyBuZXcgUHJvcGVydHlVbmRlZmluZWQoXCJteV90eXBlXCIpO1xuXHRcdFx0fVxuXG5cdFx0XHR2YXIgQSA9IHt9O1xuXHRcdFx0dmFyIEIgPSB7fTtcblxuXHRcdFx0QS5maXh0dXJlID0gY29udGFjdC5tX2ZpeHR1cmVBO1xuXHRcdFx0Qi5maXh0dXJlID0gY29udGFjdC5tX2ZpeHR1cmVCO1xuXHRcdFx0QS5ib2R5ID0gQS5maXh0dXJlLkdldEJvZHkoKTtcblx0XHRcdEIuYm9keSA9IEIuZml4dHVyZS5HZXRCb2R5KCk7XG5cblx0XHRcdEEuaWQgPSBnZXRfaWQoQS5ib2R5KTtcblx0XHRcdEIuaWQgPSBnZXRfaWQoQi5ib2R5KTtcblxuXHRcdFx0Ly9BLmVudGl0eSA9IElkZW50aWZpY2F0aW9uQ29udHJvbGxlci5nZXRfYnlfaWQoQS5pZCk7XG5cdFx0XHQvL0IuZW50aXR5ID0gSWRlbnRpZmljYXRpb25Db250cm9sbGVyLmdldF9ieV9pZChCLmlkKTtcblx0XHRcdEEuZW50aXR5ID0gQS5ib2R5LkdldFVzZXJEYXRhKCkuZW50aXR5X2luc3RhbmNlO1xuXHRcdFx0Qi5lbnRpdHkgPSBCLmJvZHkuR2V0VXNlckRhdGEoKS5lbnRpdHlfaW5zdGFuY2U7XG5cblx0XHRcdEEudHlwZSA9IGdldF90eXBlKEEuYm9keSk7XG5cdFx0XHRCLnR5cGUgPSBnZXRfdHlwZShCLmJvZHkpO1xuXG5cdFx0XHRBLmZpeHR1cmVfbmFtZSA9IGdldF9jdXN0b21fcHJvcGVydHkoQS5maXh0dXJlLCBcIm5hbWVcIik7XG5cdFx0XHRCLmZpeHR1cmVfbmFtZSA9IGdldF9jdXN0b21fcHJvcGVydHkoQi5maXh0dXJlLCBcIm5hbWVcIik7XG5cblx0XHRcdC8vIFRPRE86IHVucGFjayBtb3JlIGluZm8gaWYgbmVjZXNzYXJ5XG5cblx0XHRcdHZhciBpbmZvID0ge307XG5cblx0XHRcdGlmKEEudHlwZSA9PSBteV90eXBlKXtcblx0XHRcdFx0aW5mby5NZSA9IEE7XG5cdFx0XHRcdGluZm8uVGhlbSA9IEI7XG5cdFx0XHR9ZWxzZXtcblx0XHRcdFx0aW5mby5NZSA9IEI7XG5cdFx0XHRcdGluZm8uVGhlbSA9IEE7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBpbmZvO1xuXHRcdFx0XG5cdFx0fTtcblx0XHRcblx0XHR2YXIgY29tbW9uX2NvbnRhY3QgPSBmdW5jdGlvbihjb250YWN0LCBhcmdzLCBsaXN0cyl7XG5cdFx0XHQvLyBjcmVhdGUgaW5mbywgY2FsbCByZXNwZWN0aXZlIGZ1bmN0aW9ucyBmb3IgZWFjaCBpZC4gdXNlIHByb3ZpZGVkIGFyZ3VtZW50cyA+YXJnczxcblx0XHRcdC8vIGxvb2t1cCBpZHMgaW4gdGhlIHByb3ZpZGVkIHRhYmxlIG9mIGxpc3RzID5saXN0czxcblx0XHRcdFxuXHRcdFx0LyogbmV4dCBhdmFpbGFibGUgaW5kZXggaW4gdGhlIGFyZ3MgYXJyYXkgXG5cdFx0XHQgKiBpdCdzIHVzZWQgdG8gZGV0ZXJtaW5lIGF0IHdoYXQgaW5kZXggdGhlIGluZm8gb2JqZWN0IHNob3VsZCBiZSBpbnNlcnRlZCBhcyovXG5cdFx0XHR2YXIgbmV4dF9hcmdfaW5kZXggPSBhcmdzLmxlbmd0aDsgXG5cblx0XHRcdHZhciB0eXBlMSA9IGdldF90eXBlKGNvbnRhY3QubV9maXh0dXJlQS5HZXRCb2R5KCkpO1xuXHRcdFx0dmFyIHR5cGUyID0gZ2V0X3R5cGUoY29udGFjdC5tX2ZpeHR1cmVCLkdldEJvZHkoKSk7XG5cblx0XHRcdGlmKHR5cGUxICE9IG51bGwpe1xuXHRcdFx0XHRcblx0XHRcdFx0YXJnc1tuZXh0X2FyZ19pbmRleF0gPSB1bnBhY2tfY29udGFjdF9pbmZvKGNvbnRhY3QsIHR5cGUxKTtcblx0XHRcdFx0Y2FsbF9hbGwobGlzdHNbdHlwZTFdLCBhcmdzKTtcblx0XHRcdH1cblxuXHRcdFx0aWYodHlwZTIgIT0gbnVsbCl7XG5cdFx0XHRcdGFyZ3NbbmV4dF9hcmdfaW5kZXhdID0gdW5wYWNrX2NvbnRhY3RfaW5mbyhjb250YWN0LCB0eXBlMik7XG5cdFx0XHRcdGNhbGxfYWxsKGxpc3RzW3R5cGUyXSwgYXJncyk7XG5cdFx0XHR9XG5cblx0XHR9O1xuXHRcdFxuXHRcdHZhciBQcmVTb2x2ZSA9IGZ1bmN0aW9uKGNvbnRhY3QsIGltcHVsc2Upe1xuXHRcdFx0XG5cdFx0XHR2YXIgbGlzdHMgPSBQaHlzaWNzTW9kZWwuYXdhaXRpbmdfY29udGFjdC5QcmVTb2x2ZTtcblxuXHRcdFx0dmFyIGFyZ3MgPSBbY29udGFjdCwgaW1wdWxzZV07XG5cblx0XHRcdGNvbW1vbl9jb250YWN0KGNvbnRhY3QsIGFyZ3MsIGxpc3RzKTtcblx0XG5cdFx0fTtcblx0XHRcblx0XHR2YXIgUG9zdFNvbHZlID0gZnVuY3Rpb24oY29udGFjdCwgb2xkTWFuaWZvbGQpe1xuXHRcdFx0dmFyIGxpc3RzID0gUGh5c2ljc01vZGVsLmF3YWl0aW5nX2NvbnRhY3QuUG9zdFNvbHZlO1xuXG5cdFx0XHR2YXIgYXJncyA9IFtjb250YWN0LCBvbGRNYW5pZm9sZF07XG5cblx0XHRcdGNvbW1vbl9jb250YWN0KGNvbnRhY3QsIGFyZ3MsIGxpc3RzKTtcblx0XHR9O1xuXG5cdFx0dmFyIEJlZ2luQ29udGFjdCA9IGZ1bmN0aW9uKGNvbnRhY3Qpe1xuXHRcdFx0dmFyIGxpc3RzID0gUGh5c2ljc01vZGVsLmF3YWl0aW5nX2NvbnRhY3QuQmVnaW5Db250YWN0O1xuXG5cdFx0XHR2YXIgYXJncyA9IFtjb250YWN0XTtcblxuXHRcdFx0Y29tbW9uX2NvbnRhY3QoY29udGFjdCwgYXJncywgbGlzdHMpO1xuXHRcdH07XG5cblx0XHR2YXIgRW5kQ29udGFjdCA9IGZ1bmN0aW9uKGNvbnRhY3Qpe1xuXHRcdFx0dmFyIGxpc3RzID0gUGh5c2ljc01vZGVsLmF3YWl0aW5nX2NvbnRhY3QuRW5kQ29udGFjdDtcblxuXHRcdFx0dmFyIGFyZ3MgPSBbY29udGFjdF07XG5cblx0XHRcdGNvbW1vbl9jb250YWN0KGNvbnRhY3QsIGFyZ3MsIGxpc3RzKTtcblx0XHR9O1xuXHRcdFxuXHRcdFxuXHRcdFxuXHRcdHZhciBsaXN0ZW5lciA9IG5ldyBCMmQuYjJDb250YWN0TGlzdGVuZXI7XG5cdFx0bGlzdGVuZXIuUHJlU29sdmUgPSBQcmVTb2x2ZTtcblx0XHRsaXN0ZW5lci5Qb3N0U29sdmUgPSBQb3N0U29sdmU7XG5cdFx0bGlzdGVuZXIuQmVnaW5Db250YWN0ID0gQmVnaW5Db250YWN0O1xuXHRcdGxpc3RlbmVyLkVuZENvbnRhY3QgPSBFbmRDb250YWN0O1xuXHRcdFxuXHRcdFBoeXNpY3NNb2RlbC53b3JsZC5TZXRDb250YWN0TGlzdGVuZXIobGlzdGVuZXIpO1xuXHRcblx0fTtcblxuXHR2YXIgZ2V0X2N1c3RvbV9wcm9wZXJ0eSA9IGZ1bmN0aW9uKGIyZF9vYmosIHByb3BlcnR5X25hbWUpe1xuXHRcdFxuXHRcdC8qKlxuXHRcdCAqIGdpdmVuIGFueSBib3gyZCBvYmplY3QgdGhhdCBoYXMgR2V0VXNlckRhdGEgbWV0aG9kXG5cdFx0ICogdGhpcyBmdW5jdGlvbiB3aWxsIHJldHVybiBjdXN0b20gcHJvcGVydHkgd2l0aCBnaXZlblxuXHRcdCAqIHByb3BlcnR5X25hbWUgaWYgdGhpcyBwcm9wZXJ0eSBpcyBzZXQgb24gdXNlckRhdGEgb2YgdGhlIG9iamVjdFxuXHRcdCAqIGlmIG5vdCwgdGhlIGZ1bmN0aW9uIHJldHVybnMgbnVsbFxuXHRcdCAqL1xuXHRcdHZhciB1c2VyX2RhdGEgPSBiMmRfb2JqLkdldFVzZXJEYXRhKCk7XG5cdFx0aWYodXNlcl9kYXRhICYmIHVzZXJfZGF0YVtwcm9wZXJ0eV9uYW1lXSl7XG5cdFx0XHRyZXR1cm4gdXNlcl9kYXRhW3Byb3BlcnR5X25hbWVdO1xuXHRcdH1lbHNle1xuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fVxuXHR9O1xuXHRcblx0dmFyIHJlbW92ZV9ib2R5ID0gZnVuY3Rpb24oYm9keSl7XG5cdFx0LyoqXG5cdFx0KiBkZXN0cm95IGdpdmVuIGJvZHkgKHJlbW92ZSBpdCBmcm9tIHdvcmxkIGFuZCByZW1vdmUgYWxsIHJlZmVyZW5jZXMgUGh5c2ljcyBoYXMgdG8gaXQpXG5cdFx0Ki9cblx0XHRcblx0XHQvLyBUT0RPOiBJTVBPUlRBTlQhISEgdXBkYXRlIHRoaXMgZnVuY3Rpb24gaWYgeW91IHN0b3JlIGV4dHJhIHJlZmVyZW5jZXNcblx0XHQvLyB0byB0aGUgYm9keSB3aXRoaW4gUGh5c2ljc01vZGVsL0NvbnRyb2xsZXIuXG5cdFx0Ly8gRXZlbiBhIHNpbmdsZSByZWZlcmVuY2UgdG8gdGhlIGJvZHkgbWF5IGtlZXAgaXQgZnJvbSBiZWluZyBkZWxldGVkXG5cdFx0Ly8gZnJvbSB0aGUgbWVtb3J5IFxuXHRcdFBoeXNpY3NNb2RlbC53b3JsZC5EZXN0cm95Qm9keShib2R5KTtcblx0fTtcblx0XG5cdC8vYSB2ZXJ5IGltcG9ydGFudCBmdW5jdGlvbiB0aGF0IEkgbmVlZCBmb3IgdGhlIGh5ZW5hXG5cdC8vcmV0dXJucyB0aGUgbnVtYmVyIG9mIHNoYXBlcyBpbiBjb250YWN0IHdpdGggYSBnaXZlbiBib3VuZGluZyBib3hcblx0dmFyIHF1ZXJ5X2FhYmIgPSBmdW5jdGlvbihhYWJiKXtcblx0XHR2YXIgY291bnQgPSAwO1xuXHRcdFBoeXNpY3NNb2RlbC53b3JsZC5RdWVyeUFBQkIoXG5cdFx0ZnVuY3Rpb24obWF4KXtcblx0XHRcdGNvdW50Kys7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9LFxuXHRcdGFhYmIpO1xuXHRcdHJldHVybiBjb3VudDtcblx0fTtcblx0XG5cdFxuXHRyZXR1cm4ge1xuXHRcdGdldF9ib2R5OiBnZXRfYm9keSxcblx0XHRnZXRfcmVjdGFuZ3VsYXI6IGdldF9yZWN0YW5ndWxhcixcblx0XHRzdGVwOiBzdGVwLFxuXHRcdGluaXQ6IGluaXQsXG5cdFx0c2V0X2RlYnVnX2RyYXc6IHNldF9kZWJ1Z19kcmF3LFxuXHRcdGRyYXdfZGVidWc6IGRyYXdfZGVidWcsXG5cdFx0bGlzdGVuX2Zvcl9jb250YWN0X3dpdGg6IGxpc3Rlbl9mb3JfY29udGFjdF93aXRoLFxuXHRcdHJlbW92ZV9ib2R5OiByZW1vdmVfYm9keSxcblx0XHRxdWVyeV9hYWJiOiBxdWVyeV9hYWJiLFxuXHR9O1xufSkoKTtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IFBoeXNpY3NDb250cm9sbGVyO1xuXG52YXIgSW5jbHVkZXMgPSByZXF1aXJlKFwiLi4vSW5jbHVkZXMuanNcIik7IHZhciBpbmNsdWRlX2RhdGEgPSBJbmNsdWRlcy5nZXRfaW5jbHVkZV9kYXRhKHtcblx0Y3VycmVudF9tb2R1bGU6IFwiUGh5c2ljc0NvbnRyb2xsZXJcIiwgXG5cdGluY2x1ZGVfb3B0aW9uczogSW5jbHVkZXMuY2hvaWNlcy5ERUZBVUxUXG59KTsgZXZhbChpbmNsdWRlX2RhdGEubmFtZV9zdGF0ZW1lbnRzKTsgdmFyIGluY2x1ZGUgPSBmdW5jdGlvbigpe2V2YWwoaW5jbHVkZV9kYXRhLm1vZHVsZV9zdGF0ZW1lbnRzKTt9XG5cbiIsIlxudmFyIFJlZ2lzdGVyQXNDb250cm9sbGVyID0gKGZ1bmN0aW9uKCl7XG5cdC8qIEFsbG93cyB5b3UgdG8gcmVnaXN0ZXIgb2JqZWN0IGFzIHNvbWV0aGluZyxcblx0ICogZm9yIG90aGVyIG1vZHVsZXMgdG8gYWNjZXNzXG5cdCAqIE9uZSB1c2UgY291bGQgYmUgcmVnaXN0ZXJpbmcgbmV3bHkgZ2VuZXJhdGVkIHRlcnJhaW4gc2xpY2UgZnJvbSB0aGUgc2xpY2UgY29udHJvbGxlcixcblx0ICogZm9yIHRoZSBHcmFwaGljc0NvbnRyb2xsZXIgdG8gbm90aWNlIGFuZCBnZW5lcmF0ZSBncmFwaGljcyBmb3IgaXRcblx0Ki9cblxuXHR2YXIgaW5pdCA9IGZ1bmN0aW9uKCl7XG5cdFx0LyogaXMgcmFuIGZyb20gdGhlIEluaXRDb250cm9sbGVyIG9uY2Ugd2hlbiB0aGUgZ2FtZSBpcyBsb2FkZWQgKi9cblxuXHRcdGluY2x1ZGUoKTsgLy8gc2F0aXNmeSByZXF1aXJlbWVudHNcblxuXHR9O1xuXG5cdHZhciB1cGRhdGUgPSBmdW5jdGlvbihkZWx0YSl7XG5cdFx0LyogaXMgcmFuIGVhY2ggdGljayBmcm9tIHRoZSBHYW1lQ29udHJvbGxlci51cGRhdGVfYWxsICovXG5cblx0XHQvLyBUT0RPOiBhdXRvbWF0aWNhbGx5IGRlbGV0ZSBzdHVmZiBkZXBlbmRpbmcgb24gdGltZW91dCBzdHVmZlxuXHRcdC8vIGNhbGN1bGF0ZSB0aW1lb3V0IG9mIFxuXHR9O1xuXG5cdHZhciByZWdpc3Rlcl9hcyA9IGZ1bmN0aW9uKHdoYXQsIG9iail7XG5cdFx0LyoqXG5cdFx0KiBzaW1wbGUgb25lIHRpbWUgbG9va3VwIHJlZ2lzdGVyaW5nIG9mIG9iamVjdFxuXHRcdCogPndoYXQ8IC0gc3RyaW5nLiBlLmcuIFwibmV3X3RlcnJhaW5fc2xpY2VcIlxuXHRcdCogPm9iajwgLSBvYmplY3QgdG8gcmVnaXN0ZXJcblx0XHQqL1xuXHRcdFxuXHRcdHZhciB0YWJsZSA9IFJlZ2lzdGVyQXNNb2RlbC5zaW1wbGVfb25lX3RpbWVfbG9va3VwO1xuXG5cdFx0aWYodGFibGVbd2hhdF0pe1xuXHRcdFx0dGFibGVbd2hhdF0ucHVzaChvYmopO1xuXHRcdH1lbHNle1xuXHRcdFx0dGFibGVbd2hhdF0gPSBbb2JqXTtcblx0XHR9XG5cdH07XG5cblx0dmFyIHJldHJpZXZlX3JlZ2lzdGVyZWRfYXMgPSBmdW5jdGlvbih3aGF0KXtcblx0XHQvKipcblx0XHQqIHJldHVybnMgcmVmZXJlbmNlIHRvIHRoZSBvYmplY3QgY29udGF0aW5pbmdcblx0XHQqIHRoaW5ncyBjdXJyZW50bHkgcmVnaXN0ZXJlZCBhcyA+d2hhdDxcblx0XHQqIHlvdSBhcmUgcmVzcG9uc2libGUgZm9yIHBvcHBpbmcgKG9yIG5vdCBwb3BwaW5nKSB0aGVtXG5cdFx0KiBmcm9tIHRoZSBhcnJheSB0byBubyBsb25nZXIgY29uc2llZGVyIChvciBjb250aW51ZSB0byBjb25zaWRlcilcblx0XHQqIHRoZW0gYXMgcmVnaXN0ZXJlZCBhcyA+d2hhdDxcblx0XHQqL1xuXHRcdHZhciBsaXN0ID0gUmVnaXN0ZXJBc01vZGVsLnNpbXBsZV9vbmVfdGltZV9sb29rdXBbd2hhdF07XG5cdFx0aWYobGlzdCl7XG5cdFx0XHRyZXR1cm4gbGlzdDtcblx0XHR9ZWxzZXtcblx0XHRcdHJldHVybiBbXTtcblx0XHR9XG5cdFx0XG5cdH07XG5cdFxuXHRcblx0cmV0dXJuIHtcblx0XHQvLyBkZWNsYXJlIHB1YmxpY1xuXHRcdGluaXQ6IGluaXQsIFxuXHRcdHVwZGF0ZTogdXBkYXRlLFxuXHRcdHJlZ2lzdGVyX2FzOiByZWdpc3Rlcl9hcyxcblx0XHRyZXRyaWV2ZV9yZWdpc3RlcmVkX2FzOiByZXRyaWV2ZV9yZWdpc3RlcmVkX2FzXG5cdH07XG59KSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlZ2lzdGVyQXNDb250cm9sbGVyO1xuXG52YXIgSW5jbHVkZXMgPSByZXF1aXJlKFwiLi4vSW5jbHVkZXMuanNcIik7IHZhciBpbmNsdWRlX2RhdGEgPSBJbmNsdWRlcy5nZXRfaW5jbHVkZV9kYXRhKHtcblx0Y3VycmVudF9tb2R1bGU6IFwiUmVnaXN0ZXJBc0NvbnRyb2xsZXJcIiwgXG5cdGluY2x1ZGVfb3B0aW9uczogSW5jbHVkZXMuY2hvaWNlcy5ERUZBVUxUXG59KTsgZXZhbChpbmNsdWRlX2RhdGEubmFtZV9zdGF0ZW1lbnRzKTsgdmFyIGluY2x1ZGUgPSBmdW5jdGlvbigpe2V2YWwoaW5jbHVkZV9kYXRhLm1vZHVsZV9zdGF0ZW1lbnRzKTt9XG5cbiIsImNvbmZpZyA9IHJlcXVpcmUgKFwiLi4vQ29uZmlnLmpzXCIpO1xuXG52YXIgVGVycmFpbkNvbnRyb2xsZXIgPSAoZnVuY3Rpb24oKXtcblx0LyogdGhpcyB3aWxsIGJlIHRoZSBwaHlzaWNhbCByZXByZXNlbnRhdGlvbiBvZiB0aGUgdGVycmFpblxuXHQgKiBjdXJyZW50bHkgaXQgY29udGFpbnMgZ3JhcGhpY2FsIGJpdHMsIGJ1dCB0aGF0IHdpbGwgY2hhbmdlXG5cdCAqL1xuXHRcblxuXHR2YXIgaW5pdCA9IGZ1bmN0aW9uKCl7XG5cdCAgICBpbmNsdWRlKCk7XG5cdCAgICBUZXJyYWluTW9kZWwuc2VlZCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSoyMDAwKSArIDEwMDA7Ly9wbGFjZWhvbGRlciBmb3Igc2VlZFxuXG5cdH07XG5cdFxuXHRcblx0dmFyIHVwZGF0ZSA9IGZ1bmN0aW9uKCl7XG5cdFx0Ly8gY2hlY2sgZm9yIGFueSBjaHVua3MgdG8gYmUgdW5sb2FkZWQvZGVsZXRlZCB3aWxsIGdvIGhlcmUsIGZvciBub3dcblx0XHQvLyBtYXliZSBpdCdsbCBjaGVjayBmb3IgYWxsIHBsYXllcnMgdG8gYmUgc3VmZmljaWVudGx5IGZhciB0byB0aGUgcmlnaHRcblx0XHQvLyBvZiBpdCwgbWF5YmUgb25lIGNodW5rIGluIGFkdmFuY2UsIG9yIHNtdGggbGlrZSB0aGF0XG5cdFx0Ly9pZiAoY29uZmlnLm1vdmVtZW50X2VkZ2UueCA+IHgpXG5cdFx0d2hpbGUoVGVycmFpbk1vZGVsLnRlcnJhaW5fc2xpY2VzX3F1ZXVlLmxlbmd0aCA8IDQpe1xuXHRcdFx0dmFyIHNsaWNlID0gTmV3VGVycmFpblNsaWNlKCk7XG5cdFx0XHRUZXJyYWluTW9kZWwudGVycmFpbl9zbGljZXNfcXVldWUucHVzaChzbGljZSk7XG5cdFx0fVxuXG5cdFx0dmFyIGNtZHMgPSBLZXlib2FyZENvbnRyb2xsZXIuZGVidWdfY29tbWFuZHMoKTtcblxuXHRcdGlmKGNtZHMoXCJuZXdfc2xpY2VcIikpe1xuXHRcdFx0Y29uc29sZS5sb2coVGVycmFpbk1vZGVsLnNlZWQpO1xuXHRcdFx0dmFyIHNsaWNlID0gTmV3VGVycmFpblNsaWNlKCk7XG5cdFx0XHRUZXJyYWluTW9kZWwudGVycmFpbl9zbGljZXNfcXVldWUucHVzaChzbGljZSk7XG5cdFx0fVxuXHRcdFxuXG5cdFx0aWYoV29ybGRDb250cm9sbGVyLmdldF9tb3ZlbWVudF9lZGdlKCkgPiAoVGVycmFpbk1vZGVsLnRlcnJhaW5fc2xpY2VzX3F1ZXVlLmxlbmd0aC0zKSooMjApKXtcblx0XHRcdHZhciBzbGljZSA9IE5ld1RlcnJhaW5TbGljZShUZXJyYWluTW9kZWwuc2VlZCk7XG5cdFx0XHRUZXJyYWluTW9kZWwudGVycmFpbl9zbGljZXNfcXVldWUucHVzaChzbGljZSk7XG5cdFx0XHRUZXJyYWluTW9kZWwuc2VlZCA9ICgoKFRlcnJhaW5Nb2RlbC5zZWVkKSAqIChUZXJyYWluTW9kZWwuc2VlZCkgLSBUZXJyYWluTW9kZWwuc2VlZCAvIDIpKSAlIDIwMDAgKyAxMDAxO1xuXHRcdFx0V29ybGRDb250cm9sbGVyLnNldF9zcGF3bigpO1xuXHRcdH07XG5cblx0XHRjaGVja19mb3Jfb2xkX3NsaWNlcygpO1xuXHR9O1xuXG5cdHZhciBnZXRfc2VlZCA9IGZ1bmN0aW9uKCl7XG5cdFx0cmV0dXJuIFRlcnJhaW5Nb2RlbC5zZWVkO1xuXHR9O1xuXHRcblx0dmFyIHNldF9zZWVkID0gZnVuY3Rpb24obmV3X3NlZWQpe1xuXHRcdFRlcnJhaW5Nb2RlbC5zZWVkID0gbmV3X3NlZWQ7XG5cdH07XG5cblx0dmFyIE5ld1RlcnJhaW5TbGljZSA9IGZ1bmN0aW9uKHNlZWQpe1xuXHRcdC8qIHRoaXMgdGFrZXMgY2FyZSBvZiBhcHBlbmRpbmcgbmV3IHRlcnJhaW4gc2xpY2UgdG8gdGhlIGdlbmVyYXRlZCB0ZXJyYWluXG5cdFx0ICogaXQgY2FsY3VsYXRlcyBpdCdzIG9yaWdpbiB4IGFuZCB5IHBvc2l0aW9ucyBhbmQgd2hhdGV2ZXIgb3RoZXIgc3R1ZmYsXG5cdFx0ICogZ2VuZXJhdGVzIHNsaWNlOyBzZXRzIHVwIGV2ZXJ5dGhpbmdcblx0XHQgKi9cblx0XHR2YXIgeF9vZmZzZXQgPSBUZXJyYWluTW9kZWwuc2xpY2VfY291bnRlciAqIENvbmZpZy5UZXJyYWluU2xpY2UuZ3JpZF9jb2x1bW5zO1xuXG5cdFx0VGVycmFpbk1vZGVsLnNsaWNlX2NvdW50ZXIrKzsgLy8gVE9ETzogY2hhbmdlIGhvdyBpdCB3b3JrcyB3aGVuIHRydWx5IGluZmluaXRlXG5cblx0XHRpZihUZXJyYWluTW9kZWwuaW5pdGlhbF9nZW5lcmF0ZWQgPCAzKXtcblx0XHRcdFRlcnJhaW5Nb2RlbC5pbml0aWFsX2dlbmVyYXRlZCsrO1xuXHRcdFx0dmFyIHNsaWNlID0gbmV3IFRlcnJhaW5TbGljZUNvbnRyb2xsZXIuZ2VuZXJhdGVfaW5pdGlhbCh4X29mZnNldCk7XG5cdFx0fWVsc2V7XG5cdFx0XHR2YXIgc2xpY2UgPSBuZXcgVGVycmFpblNsaWNlQ29udHJvbGxlci5nZW5lcmF0ZV9yYW5kb20oeF9vZmZzZXQsIHNlZWQpO1xuXHRcdH1cblxuXHRcdElkZW50aWZpY2F0aW9uQ29udHJvbGxlci5hc3NpZ25faWQoc2xpY2UpO1xuXG5cdFx0TWFya0FzTmV3VGVycmFpblNsaWNlKHNsaWNlKTsgXG5cblx0XHRyZXR1cm4gc2xpY2U7XG5cblx0fTtcblxuXHR2YXIgY2hlY2tfZm9yX29sZF9zbGljZXMgPSBmdW5jdGlvbigpe1xuXHRcdC8qKlxuXHRcdCogY2hlY2sgZm9yIHNsaWNlcyB0aGF0IGFyZSB0b28gZmFyIGJlaGluZCBhbmQgc2hvdWxkIGJlIHJlbW92ZWRcblx0XHQqL1xuXG5cdFx0dmFyIHRxdWV1ZSA9IFRlcnJhaW5Nb2RlbC50ZXJyYWluX3NsaWNlc19xdWV1ZTtcblx0XHR2YXIgY3V0X29mZl9pbmRleCA9IDA7IC8vIHdoYXQgYW1udCBvZiBzbGljZXMgc2hvdWxkIGdvIG9mZiB0aGUgcXVldWVcblxuXHRcdC8vIGZpbmQgdGhlIG9sZCBzbGljZXMgYW5kIGhhbmRsZSB0aGVpciBkZWxldGlvblxuXHRcdGZvcih2YXIgaSA9IDA7IGkgPCB0cXVldWUubGVuZ3RoOyBpKyspe1xuXHRcdFx0dmFyIHNsaWNlID0gdHF1ZXVlW2ldO1xuXHRcdFx0dmFyIHNsaWNlX2VuZF94ID0gc2xpY2Uub3JpZ2luLnggKyBzbGljZS5ncmlkX2NvbHVtbnMgKiBzbGljZS5jZWxsX3c7XG5cblx0XHRcdGlmKHNsaWNlX2VuZF94IDwgV29ybGRDb250cm9sbGVyLmdldF9tb3ZlbWVudF9lZGdlKXtcblx0XHRcdFx0Ly8gaWYgc2xpY2UgaXMgdW5yZWFjaGFibGUsIGRlbGV0ZSBpdCBcblx0XHRcdFx0Y3V0X29mZl9pbmRleCsrO1xuXHRcdFx0XHRkZWxldGVfc2xpY2Uoc2xpY2UpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIG5vdyByZW1vdmUgYWxsIGZvdW5kIG9sZCBzbGljZXMgZnJvbSB0aGUgcXVldWVcblx0XHRpZihjdXRfb2ZmX2luZGV4ID4gMCl7XG5cdFx0XHRUZXJyYWluTW9kZWwudGVycmFpbl9zbGljZXNfcXVldWUgPSB0cXVldWUuc2xpY2UoY3V0X29mZl9pbmRleCk7XG5cdFx0fVxuXHR9O1xuXHRcblx0XG5cblx0dmFyIGRlbGV0ZV9zbGljZSA9IGZ1bmN0aW9uKHNsaWNlKXtcblx0XHQvKipcblx0XHQqIGFzc3VtZXMgdGhhdCBzbGljZSB3aWxsIGJlIHBvcHBlZCBmcm9tIHRoZSB0ZXJyYWluIHNsaWNlIHF1ZXVlIGVsc2V3aGVyZVxuXHRcdCogKG9yIHdhcyBhbHJlYWR5KVxuXHRcdCogb3RoZXJ3aXNlIHRoZSBzbGljZSB3b24ndCBiZSBwcm9wZXJseSBkZWxldGVkXG5cdFx0Ki9cblx0XHRcdFxuXHRcdGNvbnNvbGUubG9nKFwiZGVsZXRpbmcgc2xpY2Ugd2l0aCBvcmlnaW5cIiwgc2xpY2Uub3JpZ2luKTtcblx0XHRcblx0XHR2YXIgZ3JpZCA9IHNsaWNlLmdyaWQ7XG5cdFx0XG5cdFx0Zm9yKHZhciBpID0gMDsgaSA8IGdyaWQubGVuZ3RoOyBpKyspe1xuXHRcdFx0dmFyIHJvdyA9IGdyaWRbaV07XG5cdFx0XHRmb3IodmFyIGogPSAwOyBqIDwgcm93Lmxlbmd0aDsgaisrKXtcblx0XHRcdFx0dmFyIGNlbGwgPSByb3dbal07XG5cdFx0XHRcdGlmKGNlbGwua2luZCAhPSAwKXtcblx0XHRcdFx0XHRQaHlzaWNzQ29udHJvbGxlci5yZW1vdmVfYm9keShjZWxsLmJvZHkpO1xuXHRcdFx0XHRcdElkZW50aWZpY2F0aW9uQ29udHJvbGxlci5yZW1vdmVfaWQoY2VsbC5pZCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRcblx0XHQvLyBGb3IgZ3JhcGhpY3MgdG8gcGljayB1cCBhbmQgZGVsZXRlIHVubmVlZGVkIGdyYXBoaWNzXG5cdFx0UmVnaXN0ZXJBc0NvbnRyb2xsZXIucmVnaXN0ZXJfYXMoXCJyZW1vdmVkX3NsaWNlXCIsIHNsaWNlKTtcblxuXHRcdC8vIGZyZWUgdGhlIGlkICh5ZXMsIHRlcnJhaW4gc2xpY2UgaGFzIGlkIGlkXG5cdFx0SWRlbnRpZmljYXRpb25Db250cm9sbGVyLnJlbW92ZV9pZChzbGljZS5pZCk7XG5cdH07XG5cdFxuXHRcblxuXHRcblx0dmFyIGZvcl9lYWNoX3RpbGUgPSBmdW5jdGlvbihmKXtcblx0XHQvLyB0YWtlcyBmdW5jdGlvbiA+ZjwgdGhhdCB0YWtlcyB0aHJlZSBwYXJhbWV0ZXJzOiB0aWxlIChlYXNlbGpzIG9iamVjdCksXG5cdFx0Ly8gdGVycmFpbl9sdmwgKGludCksIGFuZCB0aWxlX2luZGV4IChpbnQpXG5cdFx0Ly8gY2FsbHMgdGhpcyBmdW5jdGlvbiBmb3IgZXZlcnkgdGlsZSBvZiB0aGUgdGVycmFpblxuXHRcdFxuXHRcdHZhciBxdWV1ZXMgPSBUZXJyYWluTW9kZWwudGVycmFpbl9xdWV1ZXM7XG5cblx0XHQkLmVhY2gocXVldWVzLCBmdW5jdGlvbih0ZXJyYWluX2x2bCl7XG5cdFx0XHQkLmVhY2gocXVldWVzW3RlcnJhaW5fbHZsXSwgZnVuY3Rpb24odGlsZV9pbmRleCl7XG5cdFx0XHRcdGYocXVldWVzW3RlcnJhaW5fbHZsXVt0aWxlX2luZGV4XSwgdGVycmFpbl9sdmwsIHRpbGVfaW5kZXgpO1xuXHRcdFx0fSk7XG5cdFx0fSk7XG5cblx0fTtcblxuXHRcblx0dmFyIE1hcmtBc05ld1RlcnJhaW5TbGljZSA9IGZ1bmN0aW9uKHNsaWNlKXtcblx0XHQvL1RlcnJhaW5Nb2RlbC5uZXdfc2xpY2VzLnB1c2goc2xpY2UpO1xuXHRcdFJlZ2lzdGVyQXNDb250cm9sbGVyLnJlZ2lzdGVyX2FzKFwiYXdhaXRpbmdfZ3JhcGhpY3NfaW5pdGlhbGl6YXRpb25cIiwgc2xpY2UpO1xuXHR9O1xuXG5cdC8vdmFyIE5ld1NsaWNlc0F2YWlsYWJsZSA9IGZ1bmN0aW9uKCl7XG5cdFx0Ly9yZXR1cm4gKFRlcnJhaW5Nb2RlbC5uZXdfc2xpY2VzLmxlbmd0aCA+IDApO1xuXHQvL307XG5cblx0Ly92YXIgR2V0TmV3VGVycmFpblNsaWNlcyA9IGZ1bmN0aW9uKCl7XG5cdFx0Ly9yZXR1cm4gVGVycmFpbk1vZGVsLm5ld19zbGljZXM7XG5cdC8vfTtcblxuXHRyZXR1cm4ge1xuXHRcdHVwZGF0ZTogdXBkYXRlLFxuXHRcdGluaXQ6IGluaXQsXG5cdFx0TmV3VGVycmFpblNsaWNlOiBOZXdUZXJyYWluU2xpY2UsXG5cdFx0TWFya0FzTmV3VGVycmFpblNsaWNlOiBNYXJrQXNOZXdUZXJyYWluU2xpY2UsXG5cdFx0Z2V0X3NlZWQ6IGdldF9zZWVkLFxuXHRcdHNldF9zZWVkOiBzZXRfc2VlZCxcblx0XHQvL05ld1NsaWNlc0F2YWlsYWJsZTogTmV3U2xpY2VzQXZhaWxhYmxlLFxuXHRcdC8vR2V0TmV3VGVycmFpblNsaWNlczogR2V0TmV3VGVycmFpblNsaWNlcyxcblx0fVxufSkoKTtcblxubW9kdWxlLmV4cG9ydHMgPSBUZXJyYWluQ29udHJvbGxlcjtcblxudmFyIEluY2x1ZGVzID0gcmVxdWlyZShcIi4uL0luY2x1ZGVzLmpzXCIpOyB2YXIgaW5jbHVkZV9kYXRhID0gSW5jbHVkZXMuZ2V0X2luY2x1ZGVfZGF0YSh7XG5cdGN1cnJlbnRfbW9kdWxlOiBcIlRlcnJhaW5Db250cm9sbGVyXCIsIFxuXHRpbmNsdWRlX29wdGlvbnM6IEluY2x1ZGVzLmNob2ljZXMuREVGQVVMVFxufSk7IGV2YWwoaW5jbHVkZV9kYXRhLm5hbWVfc3RhdGVtZW50cyk7IHZhciBpbmNsdWRlID0gZnVuY3Rpb24oKXtldmFsKGluY2x1ZGVfZGF0YS5tb2R1bGVfc3RhdGVtZW50cyk7fVxuXG4iLCJcbnZhciBUZXJyYWluU2xpY2VDb250cm9sbGVyID0gKGZ1bmN0aW9uICgpIHtcblxuXHR2YXIgaW5pdCA9IGZ1bmN0aW9uKCl7XG5cdFx0LyogaXMgcmFuIGZyb20gdGhlIEluaXRDb250cm9sbGVyIG9uY2Ugd2hlbiB0aGUgZ2FtZSBpcyBsb2FkZWQgKi9cblx0XHRpbmNsdWRlKCk7IC8vIHNhdGlzZnkgcmVxdWlyZW1lbnRzXG5cdFx0SWRlbnRpZmljYXRpb25Db250cm9sbGVyLmFzc2lnbl90eXBlKFRlcnJhaW5TbGljZU1vZGVsLkNlbGwsIFwidGVycmFpbl9jZWxsXCIpO1xuXHRcdElkZW50aWZpY2F0aW9uQ29udHJvbGxlci5hc3NpZ25fdHlwZShUZXJyYWluU2xpY2VNb2RlbC5TbGljZSwgXCJ0ZXJyYWluX3NsaWNlXCIpO1xuXG5cdH07XG5cblx0dmFyIHVwZGF0ZSA9IGZ1bmN0aW9uKHNsaWNlKXtcblx0XHRcblxuXHR9O1xuXG5cdHZhciBnZXRfbmV4dF9vcmlnaW4gPSBmdW5jdGlvbigpe1xuXHR9O1xuXHRcblxuXHRcblx0dmFyIHNwYXduQmxvY2sgPSBmdW5jdGlvbih4LCB5LCBraW5kKXtcblx0XHQvL3NwYXduIGluc3RhbmNlIG9mIHRoaXMgZW50aXR5IGF0IHRoZSBnaXZlbiBjb29yZGluYXRlc1xuXHRcdHZhciBibG9jayA9IG5ldyBUZXJyYWluU2xpY2VNb2RlbC5DZWxsKGtpbmQlMyk7IC8va2luZCBpcyBhbiBpbnQsIDEgPSBibG9jaywgMiA9IHBsYXRmb3JtXG5cdFx0SWRlbnRpZmljYXRpb25Db250cm9sbGVyLmFzc2lnbl9pZChibG9jayk7IC8vZXZlbnR1YWxseSB3ZSBtYXkgd2FudCB0byByZW1vdmUgdGhpcyBmb3IgdGhlIHNha2Ugb2YgZWZmaWNpZW5jeVxuXHRcdGJsb2NrLmJvZHkgPSBQaHlzaWNzQ29udHJvbGxlci5nZXRfcmVjdGFuZ3VsYXIoe3g6IHgsIHk6IHl9LCBibG9jayk7XG5cdFx0cmV0dXJuIGJsb2NrO1xuXHR9O1xuXHRcblx0dmFyIHNwYXduU3Bpa2UgPSBmdW5jdGlvbih4LCB5KXtcblx0XHQvL3NwYXduIGluc3RhbmNlIG9mIHRoaXMgZW50aXR5IGF0IHRoZSBnaXZlbiBjb29yZGluYXRlc1xuXHRcdHZhciBzcGlrZSA9IG5ldyBUZXJyYWluU2xpY2VNb2RlbC5DZWxsKDMpOyAvL2tpbmQgPSAzIG1lYW5zIHNwaWtlc1xuXHRcdHNwaWtlLmNhbl9hdHRhY2sgPSB0cnVlO1xuXHRcdHNwaWtlLmRhbWFnZSA9IDQ7XG5cdFx0SWRlbnRpZmljYXRpb25Db250cm9sbGVyLmFzc2lnbl9pZChzcGlrZSk7IC8vZXZlbnR1YWxseSB3ZSBtYXkgd2FudCB0byByZW1vdmUgdGhpcyBmb3IgdGhlIHNha2Ugb2YgZWZmaWNpZW5jeVxuXHRcdHNwaWtlLmJvZHkgPSBQaHlzaWNzQ29udHJvbGxlci5nZXRfcmVjdGFuZ3VsYXIoe3g6IHgsIHk6IHl9LCBzcGlrZSk7XG5cdFx0cmV0dXJuIHNwaWtlO1xuXHR9O1xuXHRcblx0dmFyIHNwYXduR2FwID0gZnVuY3Rpb24oeCx5KXtcblx0XHQvLyAwIHdpbGwgYmUgdGhlIGlkIGZvciB0aGUgXCJhaXJcIiBpLmUuIG5vdGhpbmdcblx0XHR2YXIgZ2FwO1xuXHRcdGdhcCA9IG5ldyBUZXJyYWluU2xpY2VNb2RlbC5DZWxsKDApO1xuXHRcdC8vSWRlbnRpZmljYXRpb25Db250cm9sbGVyLmFzc2lnbl9pZChnYXApOyAvLyBETyBOT1QgQVNTSUdOIElEUyBUTyBFTVBUWSBTUEFDRVNcblx0XHRyZXR1cm4gZ2FwO1xuXHR9O1xuXHRcblx0dmFyIGdldFJhbmRvbU51bWJlciA9IGZ1bmN0aW9uIChzZWVkKSB7XG5cdFx0cmV0dXJuIChzZWVkKnNlZWQpJTIwMDAgKyAxMDAwO1xuXHR9O1xuXHRcblx0dmFyIGJ1aWxkVGVycmFpblNsaWNlXzAwID0gZnVuY3Rpb24oc2xpY2Usc2VlZCl7XG5cdFxuXHQgICAgLy9zZXQgdmFyaWFibGVzXG5cdCAgICAvL2NvbnNvbGUubG9nKHNlZWQpO1xuXHQgICAgdmFyIHNlZWQgPSBzZWVkO1xuXHRcdHZhciByb3dzID0gc2xpY2UuZ3JpZF9yb3dzO1xuXHRcdHZhciBjb2x1bW5zID0gc2xpY2UuZ3JpZF9jb2x1bW5zO1xuXHRcdHZhciBpLGo7XG5cdFx0dmFyIGdyb3VuZF9sdmwgPSByb3dzIC0gMzsgLy90aGUgcm93IHRoYXQgaXMgY29uc2lkZXJlZCBncm91bmQgbGV2ZWwuXG5cdFx0dmFyIHZnYXBfbWluID0gNztcblx0XHR2YXIgdmdhcF9sZW4gPSAwO1xuXHRcdHZhciBoZ2FwX21pbiA9IDEwO1x0XHRcdFx0Ly9taW5pbXVtIHNpemUgb2YgZ2FwcyBiZXR3ZWVuIHBsYXRmb3Jtc1xuXHRcdHZhciBoZ2FwX2xlbiA9IDA7IFx0XHQvL2N1cnJlbnQgbnVtYmVyIG9mIGNvbnNlY3V0aXZlIGhvcml6b250YWwgZ2Fwc1xuXHRcdHZhciBwaXRfbWF4ID0gODtcdFx0XHRcdC8vbWF4aW11bSBsZW4gb2YgcGl0cyBpbiBibG9ja3Ncblx0XHR2YXIgcGl0X2xlbiA9IDA7IFx0XHQvL2N1cnJlbnQgbnVtYmVyIG9mIGNvbnNlY3V0aXZlIHBpdHNcblx0XHR2YXIgaGFzX3BpdCA9IFtdO1xuXHRcdHZhciBwaXRfZnJlcXVlbmN5ID0gNjsgXHRcdC8vYmFzZSBwZXJjZW50YWdlIGNoYW5jZSBvZiBhIHBpdCBiZWluZyBkdWdcblx0XHR2YXIgcGxhdGZvcm1fbGVuX21heCA9IDc7XHQvL21heGltdW0gbGVuIG9mIGEgcGxhdGZvcm1cblx0XHR2YXIgcGxhdGZvcm1fbGVuX21pbiA9IDM7IC8vbWluaW11bSBsZW4gb2YgYSBwbGF0Zm9ybVxuXHRcdHZhciBwbGF0Zm9ybV9sZW4gPSAwOyBcdFx0Ly9sZW4gb2YgY3VycmVudGx5IGdlbmVyYXRlZCBwbGF0Zm9ybVxuXHRcdHZhciBwbGF0Zm9ybV9jb3VudF9tYXggPSAyOyAvL21heGltdW0gbnVtYmVyIG9mIHBsYXRmb3JtcyBwZXIgY29sdW1uXG5cdFx0dmFyIHBsYXRmb3JtX2NvdW50ID0gW107IFx0XHQvL2tlZXBzIHRyYWNrIG9mIHBsYXRmb3JtcyBwZXIgY29sdW1uXG5cdFx0dmFyIHBsYXRmb3JtX2ZyZXF1ZW5jeSA9IDE1Oy8vYmFzZSBwZXJjZW50YWdlIGNoYW5jZSBvZiBhIHBsYXRmb3JtIHRvIGJlIGdlbmVyYXRlZFxuXHRcdHZhciBzcGlrZV9mcmVxdWVuY3kgPSA1MDsvL2Jhc2UgcGVyY2VudGFnZSBjaGFuY2Ugb2YgYSBwbGF0Zm9ybSB0byBoYXZlIHNwaWtlc1xuXHRcdC8qXG5cdFx0dmFyIHNwaWtlIGZyZXF1ZW5jeVxuXHRcdHZhciBjb2x1bW4gZnJlcXVlbmN5XG5cdFx0ZXRjLlxuXHRcdCovXG5cdFx0Zm9yKGk9MDsgaTw9Y29sdW1ucztpKyspe1xuXHRcdFx0cGxhdGZvcm1fY291bnRbaV0gPSAwO1xuXHRcdFx0aGFzX3BpdFtpXSA9IGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vYnVpbGQgdGhlIHN0YWdlIGZyb20gdGhlIGJvdHRvbSB1cFxuXHRcdC8qXG5cdFx0QnVpbGQgU3RhZ2UgZnJvbSBib3R0b20gdXAsIGxlZnQgdG8gcmlnaHRcblx0XHRsb2FkIGJsb2NrcyBhbmQgZ2FwcyBpbnRvIHNsaWNlLmdyaWRbaV1bal1cblx0XHRcblx0XHQqL1xuXHRcdGZvcihpPXJvd3MtMTtpPj0wO2ktLSl7XG5cdFx0XHRzbGljZS5ncmlkW2ldID0gW107XG5cdFx0fVxuXHRcdFxuXHRcdGZvcihpPXJvd3MgLSAxO2k+PTA7aS0tKXsgLy9vdXRlciBsb29wOiBnZW5lcmF0ZSByb3dzIGJvdHRvbSB0byB0b3Bcblx0XHRcdGlmICh2Z2FwX2xlbiA8IHZnYXBfbWluKXtcblx0XHRcdFx0dmdhcF9sZW4rKztcblx0XHRcdH1cblx0XHRcdGlmIChzZWVkICUgMTAgPT0gMCkge1xuXHRcdFx0ICAgIHNlZWQgKz0gaTtcblx0XHRcdH1cblx0XHRcdGZvcihqPTA7ajxjb2x1bW5zO2orKyl7IC8vaW5uZXIgbG9vcDogZ2VuZXJhdGUgZnJvbSBsZWZ0IHRvIHJpZ2h0IHdpdGhpbiBjdXJyZW50IHJvd1xuXHRcdFx0XHR2YXIgeCA9IHNsaWNlLm9yaWdpbi54ICsgaiAqIHNsaWNlLmNlbGxfdyArIHNsaWNlLmNlbGxfdy8yO1xuXHRcdFx0XHR2YXIgeSA9IHNsaWNlLm9yaWdpbi55ICsgaSAqIHNsaWNlLmNlbGxfdyArIHNsaWNlLmNlbGxfdy8yO1xuXHRcdFx0XHRcblx0XHRcdFx0aWYgKGkgPj0gZ3JvdW5kX2x2bCl7XHQvL0lmIG9uIG9yIGJlbG93IGdyb3VuZCBsZXZlbCwgR2VuZXJhdGUgR3JvdW5kXG5cdFx0XHRcdCAgICBpZiAocGl0X2xlbiA8IHBpdF9tYXggJiYgKGdldFJhbmRvbU51bWJlcihzZWVkKSAlIGkgPCBwaXRfZnJlcXVlbmN5IHx8IHBpdF9sZW4gIT0gMCkgfHwgaGFzX3BpdFtqXSkge1xuXHRcdFx0XHRcdFx0c2xpY2UuZ3JpZFtpXVtqXSA9IHNwYXduR2FwKHgseSk7IC8vY3JlYXRlIGdhcFxuXHRcdFx0XHRcdFx0aGFzX3BpdFtqXSA9IHRydWU7XG5cdFx0XHRcdFx0XHRwaXRfbGVuKys7IC8vdGhlIHBpdCBnZXRzIHdpZGVyXG5cdFx0XHRcdFx0XHRzZWVkID0gZ2V0UmFuZG9tTnVtYmVyKHNlZWQpICsgNzE7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGVsc2V7XG5cdFx0XHRcdFx0XHRzbGljZS5ncmlkW2ldW2pdID0gc3Bhd25CbG9jayh4LHksMSk7Ly9jcmVhdGUgYSBncm91bmQgYmxvY2sgKDEgbWVhbnMgZ3JvdW5kKVxuXHRcdFx0XHRcdFx0cGl0X2xlbiA9IDA7IC8vYW55IHBpdHMgYmVpbmcgc3Bhd25lZCBoYXZlIGJlZW4gaW50ZXJydXB0ZWRcblx0XHRcdFx0XHRcdGlmIChpID09IGdyb3VuZF9sdmwpe1xuXHRcdFx0XHRcdFx0XHRzbGljZS5ncmlkW2ldW2pdLnBvc2l0aW9uID0gXCJzdXJmYWNlXCI7XG5cdFx0XHRcdFx0XHRcdGlmKGdldFJhbmRvbU51bWJlcihzZWVkKSUxMDAgPCBzcGlrZV9mcmVxdWVuY3kgJiYgaiA+IDApey8vY2hlY2sgZm9yIHJhbmRvbSBzcGlrZVxuXHRcdFx0XHRcdFx0XHRcdGlmKHNsaWNlLmdyaWRbaS0xXVtqLTFdID09IG51bGwgJiYgc2xpY2UuZ3JpZFtpXVtqLTFdLmtpbmQgIT0gMCl7XG5cdFx0XHRcdFx0XHRcdFx0XHRzbGljZS5ncmlkW2kgLSAxXVtqXSA9IHNwYXduU3Bpa2UoeCwgeSAtIHNsaWNlLmNlbGxfdyk7IC8vY3JlYXRlIGEgc3Bpa2UgYWJvdmUgdGhlIGN1cnJlbnQgYmxvY2tcblx0XHRcdFx0XHRcdFx0XHRcdHNlZWQgPSBnZXRSYW5kb21OdW1iZXIoc2VlZCkgKyAyMTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1lbHNle1xuXHRcdFx0XHRcdFx0c2xpY2UuZ3JpZFtpXVtqXS5wb3NpdGlvbiA9IFwidW5kZXJncm91bmRcIjtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1lbHNleyAvL0VsU0UgR2VuZXJhdGUgUGxhdGZvcm1zXG5cdFx0XHRcdFx0aWYoKGhnYXBfbGVuID49IGhnYXBfbWluIHx8IHBsYXRmb3JtX2xlbiA+IDApIC8vaWYgdGhlcmUgaXMgYSBsYXJnZSBnYXAgb3IgYSBwbGF0Zm9ybSBiZWluZyBidWlsdFxuXHRcdFx0XHRcdCYmIChwbGF0Zm9ybV9sZW4gPCBwbGF0Zm9ybV9sZW5fbWF4KSAvLyBhbmQgYW55IHBsYXRmb3JtIGJlaW5nIGJ1aWx0IGlzIGxlc3MgdGhhbiBtYXggbGVuXG5cdFx0XHRcdFx0JiYgKHBsYXRmb3JtX2NvdW50W2pdIDwgcGxhdGZvcm1fY291bnRfbWF4KSAvLyBhbmQgdGhlIGN1cnJlbnQgY29sdW1uJ3MgcGxhdGZvcm0gbGltaXQgaGFzIG5vdCBiZWVuIG1ldFxuXHRcdFx0XHRcdCYmICh2Z2FwX2xlbiA+PSB2Z2FwX21pbikgLy9pZiB0aGUgdmVydGljYWwgZ2FwIG1pbmltdW0gaGFzIGJlZW4gbWV0XG5cdFx0XHRcdFx0JiYgKHBsYXRmb3JtX2xlbiA+IDAgfHwgKGo8Y29sdW1ucy0xICYmIHBsYXRmb3JtX2NvdW50W2orMV0gPCBwbGF0Zm9ybV9jb3VudF9tYXgpKSl7IC8vYW5kIHRoZSBwbGF0Zm9ybSBpcyBub3QgZ29pbmcgdG8gYmUgYSBzaW5nbGV0b25cblx0XHRcdFx0XHRcdGlmIChnZXRSYW5kb21OdW1iZXIoc2VlZCklMTAwIDwgcGxhdGZvcm1fZnJlcXVlbmN5IHx8IChwbGF0Zm9ybV9sZW4gPiAwICYmIHBsYXRmb3JtX2xlbiA8PSBwbGF0Zm9ybV9sZW5fbWluKSl7XG5cdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdFx0c2xpY2UuZ3JpZFtpXVtqXSA9IHNwYXduQmxvY2soeCx5LDIpOy8vY3JlYXRlIHBsYXRmb3JtICgyIG1lYW5zIHBsYXRmb3JtKVxuXHRcdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdFx0Ly9jaGVjayBhZXN0aGV0aWMgc3R1ZmYsIGxpa2UgcGxhdGZvcm0gZWRnZXNcblx0XHRcdFx0XHRcdFx0aWYgKHBsYXRmb3JtX2xlbiA9PSAwKXtcblx0XHRcdFx0XHRcdFx0XHRzbGljZS5ncmlkW2ldW2pdLnBvc2l0aW9uID0gXCJsZWZ0XCI7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0ZWxzZXtcblx0XHRcdFx0XHRcdFx0XHRzbGljZS5ncmlkW2ldW2pdLnBvc2l0aW9uID0gXCJyaWdodFwiO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdGlmIChqPjApe2lmIChzbGljZS5ncmlkW2ldW2otMV0ua2luZCAhPSAwKXtcblx0XHRcdFx0XHRcdFx0XHRpZiAoc2xpY2UuZ3JpZFtpXVtqLTFdLnBvc2l0aW9uICE9IFwibGVmdFwiKXtcblx0XHRcdFx0XHRcdFx0XHRcdHNsaWNlLmdyaWRbaV1bai0xXS5wb3NpdGlvbiA9IFwibWlkZGxlXCI7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9fVxuXHRcdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdFx0c2VlZCA9IGdldFJhbmRvbU51bWJlcihzZWVkKTtcblx0XHRcdFx0XHRcdFx0cGxhdGZvcm1fbGVuKys7XHQvL3BsYXRmb3JtIGdldHMgbG9uZ2VyLCBhbmQgXG5cdFx0XHRcdFx0XHRcdHBsYXRmb3JtX2NvdW50W2pdKys7Ly90aGUgbnVtYmVyIG9mIHBsYXRmb3JtcyBpbiB0aGUgY3VycmVudCBjb2x1bW4gaW5jcmVhc2VzXG5cdFx0XHRcdFx0XHRcdGhnYXBfbGVuID0gMDsgXHRcdC8vcmVzZXQgdGhlIGdhcCBjb3VudGVyIHRvIDBcblx0XHRcdFx0XHRcdH1lbHNle1xuXHRcdFx0XHRcdFx0XHRpZiAoc2xpY2UuZ3JpZFtpXVtqXSA9PSBudWxsKXtcblx0XHRcdFx0XHRcdFx0XHRzbGljZS5ncmlkW2ldW2pdID0gc3Bhd25HYXAoeCx5KTsgLy9jcmVhdGUgYSBnYXBcblx0XHRcdFx0XHRcdFx0XHRwbGF0Zm9ybV9sZW4gPSAwOyAvL2lmIHRoZXJlIHdhcyBhIHBsYXRmb3JtLCBpdCBoYXMgYmVlbiBpbnRlcnJ1cHRlZFxuXHRcdFx0XHRcdFx0XHRcdGhnYXBfbGVuKys7IC8vdGhlIGdhcCBnZXRzIHdpZGVyXG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9ZWxzZXtcblx0XHRcdFx0XHRcdGlmIChzbGljZS5ncmlkW2ldW2pdID09IG51bGwpe1xuXHRcdFx0XHRcdFx0XHRzbGljZS5ncmlkW2ldW2pdID0gc3Bhd25HYXAoeCx5KTsgLy9jcmVhdGUgYSBnYXBcblx0XHRcdFx0XHRcdFx0cGxhdGZvcm1fbGVuID0gMDsgLy9pZiB0aGVyZSB3YXMgYSBwbGF0Zm9ybSwgaXQgaGFzIGJlZW4gaW50ZXJydXB0ZWRcblx0XHRcdFx0XHRcdFx0aGdhcF9sZW4rKzsgLy90aGUgZ2FwIGdldHMgd2lkZXJcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0c2VlZCA9IGdldFJhbmRvbU51bWJlcihzZWVkKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0dmdhcF9sZW4gPSB2Z2FwX2xlbiV2Z2FwX21pbjtcblx0XHR9XG5cdFx0cmV0dXJuIHNsaWNlO1xuXHR9O1xuXHRcblx0Ly9wcmVnZW5lcmF0ZWQgc2xpY2Vcblx0dmFyIGJ1aWxkVGVycmFpblNsaWNlXzAxID0gZnVuY3Rpb24oc2xpY2Usc2VlZCl7XG5cdFx0Ly9zZXQgdmFyaWFibGVzXG5cdFx0dmFyIHJvd3MgPSBzbGljZS5ncmlkX3Jvd3M7XG5cdFx0dmFyIGNvbHVtbnMgPSBzbGljZS5ncmlkX2NvbHVtbnM7XG5cdFx0dmFyIGksajtcblx0XHR2YXIgZ3JvdW5kX2x2bCA9IHJvd3MgLSAzOyAvL3RoZSByb3cgdGhhdCBpcyBjb25zaWRlcmVkIGdyb3VuZCBsZXZlbC5cblx0XHR2YXIgdmdhcF9taW4gPSA3O1xuXHRcdHZhciB2Z2FwX2xlbiA9IDA7XG5cdFx0dmFyIGhnYXBfbWluID0gMTA7XHRcdFx0XHQvL21pbmltdW0gc2l6ZSBvZiBnYXBzIGJldHdlZW4gcGxhdGZvcm1zXG5cdFx0dmFyIGhnYXBfbGVuID0gMDsgXHRcdC8vY3VycmVudCBudW1iZXIgb2YgY29uc2VjdXRpdmUgaG9yaXpvbnRhbCBnYXBzXG5cdFx0dmFyIHBpdF9tYXggPSAyMDtcdFx0XHRcdC8vbWF4aW11bSBsZW4gb2YgcGl0cyBpbiBibG9ja3Ncblx0XHR2YXIgcGl0X2xlbiA9IDA7IFx0XHQvL2N1cnJlbnQgbnVtYmVyIG9mIGNvbnNlY3V0aXZlIHBpdHNcblx0XHR2YXIgaGFzX3BpdCA9IFtdO1xuXHRcdHZhciBwaXRfZnJlcXVlbmN5ID0gMDsgXHRcdC8vYmFzZSBwZXJjZW50YWdlIGNoYW5jZSBvZiBhIHBpdCBiZWluZyBkdWdcblx0XHR2YXIgcGxhdGZvcm1fbGVuX21heCA9IDc7XHQvL21heGltdW0gbGVuIG9mIGEgcGxhdGZvcm1cblx0XHR2YXIgcGxhdGZvcm1fbGVuX21pbiA9IDM7IC8vbWluaW11bSBsZW4gb2YgYSBwbGF0Zm9ybVxuXHRcdHZhciBwbGF0Zm9ybV9sZW4gPSAwOyBcdFx0Ly9sZW4gb2YgY3VycmVudGx5IGdlbmVyYXRlZCBwbGF0Zm9ybVxuXHRcdHZhciBwbGF0Zm9ybV9jb3VudF9tYXggPSAyOyAvL21heGltdW0gbnVtYmVyIG9mIHBsYXRmb3JtcyBwZXIgY29sdW1uXG5cdFx0dmFyIHBsYXRmb3JtX2NvdW50ID0gW107IFx0XHQvL2tlZXBzIHRyYWNrIG9mIHBsYXRmb3JtcyBwZXIgY29sdW1uXG5cdFx0dmFyIHBsYXRmb3JtX2ZyZXF1ZW5jeSA9IDU7Ly9iYXNlIHBlcmNlbnRhZ2UgY2hhbmNlIG9mIGEgcGxhdGZvcm0gdG8gYmUgZ2VuZXJhdGVkXG5cdFx0Zm9yKGk9MDsgaTw9Y29sdW1ucztpKyspe1xuXHRcdFx0cGxhdGZvcm1fY291bnRbaV0gPSAwO1xuXHRcdFx0aGFzX3BpdFtpXSA9IGZhbHNlO1xuXHRcdH1cblx0XHRmb3IoaT1yb3dzIC0gMTtpPj0wO2ktLSl7IC8vb3V0ZXIgbG9vcDogZ2VuZXJhdGUgcm93cyBib3R0b20gdG8gdG9wXG5cdFx0XHRzbGljZS5ncmlkW2ldID0gW107XG5cdFx0XHRmb3Ioaj0wO2o8Y29sdW1ucztqKyspeyAvL2lubmVyIGxvb3A6IGdlbmVyYXRlIGZyb20gbGVmdCB0byByaWdodCB3aXRoaW4gY3VycmVudCByb3dcblx0XHRcdFx0dmFyIHggPSBzbGljZS5vcmlnaW4ueCArIGogKiBzbGljZS5jZWxsX3cgKyBzbGljZS5jZWxsX3cvMjtcblx0XHRcdFx0dmFyIHkgPSBzbGljZS5vcmlnaW4ueSArIGkgKiBzbGljZS5jZWxsX3cgKyBzbGljZS5jZWxsX3cvMjtcblx0XHRcdFx0aWYgKGkgPj0gZ3JvdW5kX2x2bCl7XHQvL0lmIG9uIG9yIGJlbG93IGdyb3VuZCBsZXZlbCwgR2VuZXJhdGUgR3JvdW5kXG5cdFx0XHRcdFx0c2xpY2UuZ3JpZFtpXVtqXSA9IHNwYXduQmxvY2soeCx5LDEpOy8vY3JlYXRlIGEgZ3JvdW5kIGJsb2NrICgxIG1lYW5zIGdyb3VuZClcblx0XHRcdFx0XHRpZiAoaSA9PSBncm91bmRfbHZsKVxuXHRcdFx0XHRcdFx0c2xpY2UuZ3JpZFtpXVtqXS5wb3NpdGlvbiA9IFwic3VyZmFjZVwiO1xuXHRcdFx0XHRcdGVsc2V7XG5cdFx0XHRcdFx0c2xpY2UuZ3JpZFtpXVtqXS5wb3NpdGlvbiA9IFwidW5kZXJncm91bmRcIjtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1lbHNle1xuXHRcdFx0XHRcdHNsaWNlLmdyaWRbaV1bal0gPSBzcGF3bkdhcCh4LHkpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiBzbGljZTtcblx0fTtcblx0XG5cdHZhciBnZW5lcmF0ZV9pbml0aWFsID0gZnVuY3Rpb24oeF9vZmZzZXQpe1xuXHRcdHZhciBzbGljZSA9IG5ldyBUZXJyYWluU2xpY2VNb2RlbC5TbGljZSgpO1xuXHRcdHNsaWNlLm9yaWdpbi54ID0geF9vZmZzZXQ7XG5cdFx0c2xpY2Uub3JpZ2luLnkgPSAwO1xuXHRcdHNsaWNlID0gYnVpbGRUZXJyYWluU2xpY2VfMDEoc2xpY2UpO1xuXHRcdFxuXHRcdHJldHVybiBzbGljZTtcblx0fVxuXHRcblx0dmFyIGdlbmVyYXRlX3JhbmRvbSA9IGZ1bmN0aW9uKHhfb2Zmc2V0LCBzZWVkKXtcblx0XHR2YXIgc2xpY2UgPSBuZXcgVGVycmFpblNsaWNlTW9kZWwuU2xpY2UoKTtcblx0XHRzbGljZS5vcmlnaW4ueCA9IHhfb2Zmc2V0O1xuXHRcdHNsaWNlLm9yaWdpbi55ID0gMDtcblx0XHQvL2dldCBhIHJhbmRvbSBraW5kIG9mIHNsaWNlXG5cdFx0aWYgKGdldFJhbmRvbU51bWJlcihzZWVkKSUxMDAgPCA5NSl7XG5cdFx0XHRzbGljZSA9IGJ1aWxkVGVycmFpblNsaWNlXzAwKHNsaWNlLHNlZWQpO1xuXHRcdH1lbHNle1xuXHRcdFx0c2xpY2UgPSBidWlsZFRlcnJhaW5TbGljZV8wMShzbGljZSxzZWVkKTtcblx0XHR9XG5cdFx0XG5cdFx0cmV0dXJuIHNsaWNlO1xuXHR9O1xuXHRcblxuXG5cblxuXHRyZXR1cm4ge1xuXHRcdC8vIGRlY2xhcmUgcHVibGljXG5cdFx0aW5pdDogaW5pdCwgXG5cdFx0dXBkYXRlOiB1cGRhdGUsXG5cdFx0Z2VuZXJhdGVfaW5pdGlhbDogZ2VuZXJhdGVfaW5pdGlhbCxcblx0XHRnZW5lcmF0ZV9yYW5kb206IGdlbmVyYXRlX3JhbmRvbSxcblx0fTtcbn0pKCk7XG5cbm1vZHVsZS5leHBvcnRzID0gVGVycmFpblNsaWNlQ29udHJvbGxlcjtcblxudmFyIEluY2x1ZGVzID0gcmVxdWlyZShcIi4uL0luY2x1ZGVzLmpzXCIpOyB2YXIgaW5jbHVkZV9kYXRhID0gSW5jbHVkZXMuZ2V0X2luY2x1ZGVfZGF0YSh7XG5cdGN1cnJlbnRfbW9kdWxlOiBcIlRlcnJhaW5TbGljZUNvbnRyb2xsZXJcIiwgXG5cdGluY2x1ZGVfb3B0aW9uczogSW5jbHVkZXMuY2hvaWNlcy5ERUZBVUxUXG59KTsgZXZhbChpbmNsdWRlX2RhdGEubmFtZV9zdGF0ZW1lbnRzKTsgdmFyIGluY2x1ZGUgPSBmdW5jdGlvbigpe2V2YWwoaW5jbHVkZV9kYXRhLm1vZHVsZV9zdGF0ZW1lbnRzKTt9XG5cbiIsInZhciBUZXN0Q29udHJvbGxlciA9IChmdW5jdGlvbigpe1xuXHQvLyBwbGFjZWhvbGRlciBmb3IgaW1wbGVtZW50aW5nIHRlc3Rpbmdcblx0Ly8gbWF5IGJlIGNoYW5nZWQvcmVtb3ZlZC91cGdyYWRlZCBkZXBlbmRpbmcgb24gaG93IHdlIHdpbGwgaGFuZGxlIG91ciB0ZXN0c1xuXHRcblx0XG5cdHZhciBwcmVpbml0X3Rlc3RzID0gZnVuY3Rpb24oKXtcblx0Ly9Gb3IgdGVzdHMgcmVxdWlyaW5nIHJ1biBiZWZvcmUgaW5pdCBpcyBjYWxsZWRcblx0XG5cdFxuXHR9O1xuXHRcblx0XG5cdHZhciB0ZXN0ID0gZnVuY3Rpb24oKXtcblx0XHQvLyBpZiB5b3UgbmVlZCBzb21lIHNvcnQgb2YgdGVzdHMgbGF1bmNoZWQsIHRoaXMgaXMgb25lIG9mIHRoZSBwbGFjZXMgdG8gZG8gaXRcblx0XHRRVW5pdC50ZXN0KCBcImhlbGxvIHRlc3RcIiwgZnVuY3Rpb24oIGFzc2VydCApIHtcblx0XHRcdGFzc2VydC5vayggMSA9PSBcIjFcIiwgXCJQYXNzZWQhXCIgKTtcblx0XHR9KTtcblx0XHRJbmNsdWRlcy5hdXRvbWF0ZWRfdGVzdHMoKTtcblx0fTtcblxuXHR2YXIgcG9zdF9sb2FkaW5nX3Rlc3RzID0gZnVuY3Rpb24oKXtcblx0XHQvLyBUT0RPOiBjYWxsIHdoZW4gbG9hZGluZyBhc3NldHMgaXMgY29tcGxldGVkIGlmIHRoZXJlIGFyZSBzb21lIHRlc3RzIHRoYXQgbmVlZFxuXHRcdC8vIHRvIGJlIGRvbmUgYXQgdGhhdCBtb21lbnQuIChSZWZlciB0byBJbml0Q29udHJvbGxlci5pbml0IGFuZCBcblx0XHQvLyBJbml0Q29udHJvbGxlci5zZXR1cF9hc3NldF9kZXBlbmRlbnQgbWV0aG9kc1xuXHR9O1xuXG5cdHZhciB0ZXN0TW9kZTtcblxuXHR2YXIgaW5pdCA9IGZ1bmN0aW9uKG1vZGUpe1xuXHRcdGluY2x1ZGUoKTtcblx0XHQvLyBTZXRzIHVwIHRoZSBkZWJ1ZyBjYW52YXMgZHVyaW5nIHRlc3Rpbmdcblx0XHRUZXN0TW9kZWwuZF9jYW52YXMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChDb25maWcuREVCVUdfQ0FOVkFTX05BTUUpO1xuXHRcdHRlc3RNb2RlID0gbW9kZTtcblxuXHRcdGlmKG1vZGUgPT0gXCJ0ZXN0XCIpe1xuXHRcdFx0VGVzdE1vZGVsLmNvbnRleHQgPSBUZXN0TW9kZWwuZF9jYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpO1xuXHRcdFx0XG5cdFx0XHRUZXN0TW9kZWwuZGVidWdEcmF3ID0gbmV3IEIyZC5iMkRlYnVnRHJhdygpO1xuXHRcdFx0VGVzdE1vZGVsLmRlYnVnRHJhdy5TZXRTcHJpdGUoVGVzdE1vZGVsLmNvbnRleHQpO1xuXHRcdFx0VGVzdE1vZGVsLmRlYnVnRHJhdy5TZXREcmF3U2NhbGUoQ29uZmlnLkIyRC5TQ0FMRSk7XG5cdFx0XHRUZXN0TW9kZWwuZGVidWdEcmF3LlNldEZpbGxBbHBoYSgwLjMpO1xuXHRcdFx0VGVzdE1vZGVsLmRlYnVnRHJhdy5TZXRMaW5lVGhpY2tuZXNzKDEuMCk7XG5cdFx0XHRUZXN0TW9kZWwuZGVidWdEcmF3LlNldEZsYWdzKEIyZC5iMkRlYnVnRHJhdy5lX3NoYXBlQml0IHwgQjJkLmIyRGVidWdEcmF3LmVfam9pbnRCaXQpO1xuXG5cdFx0XHRQaHlzaWNzQ29udHJvbGxlci5zZXRfZGVidWdfZHJhdyhUZXN0TW9kZWwuZGVidWdEcmF3KTtcblxuXHRcdFx0Q29uZmlnLkIyRC5kZWJ1Z19kcmF3ID0gdHJ1ZTtcblx0XHRcdC8vIFNjcmVlbl9XIHdhcyBzZXR1cCBvbmx5IGFmdGVyIHRoaXMgd2FzIGNhbGxlZFxuXG5cdFx0XHRUZXN0TW9kZWwuZF9jYW52YXMud2lkdGggPSBDb25maWcuU0NSRUVOX1c7XG5cdFx0XHRUZXN0TW9kZWwuZF9jYW52YXMuaGVpZ2h0ID0gQ29uZmlnLlNDUkVFTl9IO1xuXG5cdFx0XHQvLyQoJyMnK0NvbmZpZy5ERUJVR19DQU5WQVNfTkFNRSkuc2hvdygpO1xuXG5cdFx0fWVsc2V7XG5cdFx0XHQvL2RfY2FudmFzLmhpZGUoKTtcblx0XHR9XG5cdH07XG5cdFxuXHQvL3RoaXMgZnVuY3Rpb24gc2V0cyB0aGUgeCBhbmQgeSBvZmZzZXRzIG9mIHRoZSBkZWJ1ZyBjYW52YXNcblx0dmFyIHNldF9kZWJ1Z19vZmZzZXQgPSBmdW5jdGlvbih4X29mZnNldCwgeV9vZmZzZXQpe1xuXHQgICAgaWYgKHRlc3RNb2RlID09IFwidGVzdFwiKXtcblx0ICAgICAgICBjb250ZXh0ID0gVGVzdE1vZGVsLmNvbnRleHQ7XG5cdCAgICAgICAgY29udGV4dC5zYXZlKCk7XG5cdCAgICAgICAgY29udGV4dC5jbGVhclJlY3QoMCwgMCwgQ29uZmlnLlNDUkVFTl9XLCBDb25maWcuU0NSRUVOX0gpO1xuXHQgICAgICAgIGNvbnRleHQudHJhbnNsYXRlKHhfb2Zmc2V0LCB5X29mZnNldCk7XG5cdCAgICAgICAgUGh5c2ljc0NvbnRyb2xsZXIuZHJhd19kZWJ1ZygpO1xuXHQgICAgICAgIGNvbnRleHQucmVzdG9yZSgpO1xuXHQgICAgfVxuXHR9O1xuXG5cdHJldHVybiB7XG5cdFx0aW5pdDogaW5pdCwgXG5cdFx0dGVzdDogdGVzdCxcblx0XHRwb3N0X2xvYWRpbmdfdGVzdHM6IHBvc3RfbG9hZGluZ190ZXN0cyxcblx0XHRwcmVpbml0X3Rlc3RzOiBwcmVpbml0X3Rlc3RzLFxuXHRcdHNldF9kZWJ1Z19vZmZzZXQ6IHNldF9kZWJ1Z19vZmZzZXRcblx0fVxufSkoKTtcblxubW9kdWxlLmV4cG9ydHMgPSBUZXN0Q29udHJvbGxlcjtcblxudmFyIEluY2x1ZGVzID0gcmVxdWlyZShcIi4uL0luY2x1ZGVzLmpzXCIpOyB2YXIgaW5jbHVkZV9kYXRhID0gSW5jbHVkZXMuZ2V0X2luY2x1ZGVfZGF0YSh7XG5cdGN1cnJlbnRfbW9kdWxlOiBcIlRlc3RDb250cm9sbGVyXCIsIFxuXHRpbmNsdWRlX29wdGlvbnM6IEluY2x1ZGVzLmNob2ljZXMuREVGQVVMVFxufSk7IGV2YWwoaW5jbHVkZV9kYXRhLm5hbWVfc3RhdGVtZW50cyk7IHZhciBpbmNsdWRlID0gZnVuY3Rpb24oKXtldmFsKGluY2x1ZGVfZGF0YS5tb2R1bGVfc3RhdGVtZW50cyk7fVxuXG4iLCJcdFxudmFyIFdvcmxkQ29udHJvbGxlciA9IChmdW5jdGlvbigpe1xuXHQvKiBhbGwgdGhlIHBoeXNpY3MgY29udHJvbCBvZiB0aGUgd2hvbGUgd29ybGRcblx0Ki9cbiAgICB2YXIgbW92ZW1lbnRfZWRnZTtcbiAgICB2YXIgc3Bhd25fZW5lbXk7XG4gICAgdmFyIGRpZmZpY3VsdHk7XG5cdFx0dmFyIHNlYXNvbjtcblx0XHR2YXIgbW92ZW1lbnRfZWRnZV9idWZmZXI7XG5cdFx0dmFyIGJvZHlfdGVzdDtcblx0XHR2YXIgc2NvcmU7XG5cdFx0dmFyIHByb2dyZXNzO1xuXHQvL3ZhciB0ZW1wID0gMDtcblxuXHR2YXIgaW5pdCA9IGZ1bmN0aW9uKCl7XG5cdFx0LyogaXMgcmFuIGZyb20gdGhlIEluaXRDb250cm9sbGVyIG9uY2Ugd2hlbiB0aGUgZ2FtZSBpcyBsb2FkZWQgKi9cblxuXHRcdGluY2x1ZGUoKTsgLy8gc2F0aXNmeSByZXF1aXJlbWVudHNcblx0XHRtb3ZlbWVudF9lZGdlX2J1ZmZlciA9IDIwO1xuXHRcdG1vdmVtZW50X2VkZ2UgPSAwO1xuXHRcdHNlYXNvbiA9IDA7XG5cdFx0c2NvcmUgPSAwO1xuXHRcdHByb2dyZXNzID0gMjA7XG5cdFx0Ly9ib2R5X3Rlc3QgPSBuZXcgcGxhdGZvcm0oKTtcblx0XHQvL3ZhciBpZCA9IElkZW50aWZpY2F0aW9uQ29udHJvbGxlci5hc3NpZ25faWQoYm9keV90ZXN0KTtcblx0XHQvL3ZhciBib2R5X3Rlc3QgPSBQaHlzaWNzQ29udHJvbGxlci5nZXRfcmVjdGFuZ3VsYXIoe30sIGJvZHlfdGVzdCk7XG5cblx0fTtcblxuXHR2YXIgdXBkYXRlID0gZnVuY3Rpb24oZGVsdGEpe1xuXHRcdC8qIGlzIHJhbiBlYWNoIHRpY2sgZnJvbSB0aGUgR2FtZUNvbnRyb2xsZXIudXBkYXRlX2FsbCAqL1xuXHRcdFBoeXNpY3NDb250cm9sbGVyLnN0ZXAoZGVsdGEpO1xuXG5cdFx0dXBkYXRlX21vdmVtZW50X2VkZ2UoKTtcblx0XHR1cGRhdGVfcHJvZ3Jlc3MoKTtcblxuXHRcdGdldF9zcGF3bigpO1xuXHRcdC8vaWYodGVtcCsrID09IDApe1xuXHRcdFx0Ly9UZXJyYWluQ29udHJvbGxlci5OZXdUZXJyYWluU2xpY2UoKTtcblx0XHQvL31cblxuXHR9O1xuXG5cdHZhciB1cGRhdGVfcHJvZ3Jlc3MgPSBmdW5jdGlvbihhcmd1bWVudHMpe1xuXHRcdC8qKlxuXHRcdCogXG5cdFx0Ki9cblxuXHRcdHByb2dyZXNzID0gZ2V0X21vdmVtZW50X2VkZ2UoKTtcblx0XHRcblx0fTtcblx0XG5cdFxuXHRcblx0dmFyIHVwZGF0ZV9tb3ZlbWVudF9lZGdlID0gZnVuY3Rpb24oKXtcblx0XHR2YXIgaGVyb2VzID0gRW50aXR5Q29udHJvbGxlci5nZXRfYWxsX2hlcm9lcygpO1xuXHRcdHZhciBtaW5feCA9IEluZmluaXR5O1xuXG5cdFx0Zm9yKHZhciBuZXRfaWQgaW4gaGVyb2VzKXtcblx0XHRcdC8vIGl0ZXJhdGUgdGhyb3VnaCBhbGwgY29ubmVjdGVkIGhlcm9lc1xuXHRcdFx0Ly8gYW5kIGNob29zZSBtaW5pbXVtIG9mIHRoZWlyIHggcG9zaXRpb25zXG5cdFx0XHR2YXIgaGVyb194ID0gaGVyb2VzW25ldF9pZF0uYm9keS5HZXRXb3JsZENlbnRlcigpLng7XG5cdFx0XHRpZihoZXJvX3ggPCBtaW5feCl7XG5cdFx0XHRcdG1pbl94ID0gaGVyb194O1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmKChtb3ZlbWVudF9lZGdlIDwgbWluX3ggLSBtb3ZlbWVudF9lZGdlX2J1ZmZlcikgJiYgbWluX3ggIT0gSW5maW5pdHkpe1xuXHRcdFx0bW92ZW1lbnRfZWRnZSA9IG1pbl94IC0gbW92ZW1lbnRfZWRnZV9idWZmZXI7XG5cdFx0fVxuXHR9O1xuXHRcblx0dmFyIGdldF9tb3ZlbWVudF9lZGdlID0gZnVuY3Rpb24oKXtcblx0XHRyZXR1cm4gbW92ZW1lbnRfZWRnZTtcblx0fVxuXG5cdHZhciBnZXRfc3Bhd24gPSBmdW5jdGlvbiAoKSB7XG5cdCAgICBkaWZmaWN1bHR5ID0gTWF0aC5mbG9vcihwcm9ncmVzcyAvIDEwMCk7XG5cblx0ICAgIHZhciBzcGF3bl9udW07XG5cdCAgICBpZiAoc3Bhd25fZW5lbXkpIHtcblx0ICAgICAgICBmb3IgKGkgPSAwOyBpIDwgTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogNCkgOyBpKyspIHtcblx0ICAgICAgICAgICAgc3Bhd25fbnVtID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTAwMCk7XG5cdCAgICAgICAgICAgIC8vIGRlbW9uc3RyYXRpb24gcHVycG9zZXMgZm9yIGh5ZW5hXG5cdCAgICAgICAgICAgIGlmIChzcGF3bl9udW0gPD0gNSAqIGRpZmZpY3VsdHkpIHtcblx0ICAgICAgICAgICAgICAgIHZhciBuZXdfaHllbmEgPSBFbnRpdHlDb250cm9sbGVyLnNwYXduKDYwICsgZ2V0X21vdmVtZW50X2VkZ2UoKSwgMTAsIFwiSHllbmFcIik7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgLyogICAgLy8gZGVtb25zdHJhdGlvbiBwdXJwb3NlcyBmb3IgZ3JpZmZpblxuXHQgICAgICAgICAgICBlbHNlIGlmIChzcGF3bl9udW0gPD0gMTUgKiBFbnRpdHlNb2RlbC5kaWZmaWN1bHR5ICYmIENvdW50ID4gNSkge1xuXHQgICAgICAgICAgICAgICAgdmFyIG5ld19ncmlmZmluID0gc3Bhd24oNjAgKyBXb3JsZENvbnRyb2xsZXIuZ2V0X21vdmVtZW50X2VkZ2UoKSArIGksIC0yMCwgXCJHcmlmZmluXCIpO1xuXHQgICAgICAgICAgICAgICAgQ291bnQgPSAwO1xuXHQgICAgICAgICAgICB9Ki9cblx0ICAgICAgICAgICAgZWxzZSBpZiAoc3Bhd25fbnVtIDw9IDE1ICogZGlmZmljdWx0eSkge1xuXHQgICAgICAgICAgICAgICAgdmFyIG5ld19ncmlmZmluID0gRW50aXR5Q29udHJvbGxlci5zcGF3big2MCArIGdldF9tb3ZlbWVudF9lZGdlKCksIDEwLCBcIkdyaWZmaW5cIik7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIC8vIGRlbW9uc3RyYXRpb24gcHVycG9zZXMgZm9yIGFudFxuXHQgICAgICAgICAgICBlbHNlIHtcblx0ICAgICAgICAgICAgICAgIHZhciBuZXdfYW50ID0gRW50aXR5Q29udHJvbGxlci5zcGF3bihnZXRfbW92ZW1lbnRfZWRnZSgpICsgNjAsIDEwLCBcImFudFwiKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgICBzcGF3bl9lbmVteSA9IGZhbHNlO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIHNwYXduX251bTtcblx0fVxuXG5cdHZhciBzZXRfc3Bhd24gPSBmdW5jdGlvbiAoKSB7XG5cdCAgICBzcGF3bl9lbmVteSA9IHRydWU7XG5cdH1cblx0XG5cdHZhciBnZXRfc2Vhc29uID0gZnVuY3Rpb24oKXtcblx0XHRyZXR1cm4gc2Vhc29uO1xuXHR9XG5cdFxuXHR2YXIgc2V0X3NlYXNvbiA9IGZ1bmN0aW9uKGluZGV4KXtcblx0XHRzZWFzb24gPSBpbmRleDtcblx0fVxuXHRcblx0dmFyIE1hcmtBc05ld1RlcnJhaW5TbGljZSA9IGZ1bmN0aW9uKHNsaWNlKXtcblx0XHRcblx0fTtcblx0XG5cdHZhciBnZXRfcHJvZ3Jlc3MgPSBmdW5jdGlvbigpe1xuXHRcdHJldHVybiBwcm9ncmVzcztcblx0fTtcblx0XG5cdHZhciBpbmNyZWFzZV9wcm9ncmVzcyA9IGZ1bmN0aW9uKGFtb3VudCl7XG5cdFx0cHJvZ3Jlc3MgKz0gYW1vdW50O1xuXHR9O1xuXHRcblx0dmFyIGdldF9zY29yZSA9IGZ1bmN0aW9uKCl7XG5cdFx0cmV0dXJuIHNjb3JlO1xuXHR9O1xuXHRcblx0dmFyIGluY3JlYXNlX3Njb3JlID0gZnVuY3Rpb24oYW1vdW50KXtcblx0XHRpZihhbW91bnQgIT0gbnVsbCl7XG5cdFx0XHRzY29yZSArPSBhbW91bnQ7XG5cdFx0fWVsc2V7XG5cdFx0XHR0aHJvdyBcIkVycm9yOiA+YW1vdW50PCBpcyBub3QgZGVmaW5lZFwiO1xuXHRcdH1cblx0fTtcblxuXHRyZXR1cm4ge1xuXHRcdC8vIGRlY2xhcmUgcHVibGljXG5cdFx0aW5pdDogaW5pdCwgXG5cdFx0dXBkYXRlOiB1cGRhdGUsXG5cdFx0Z2V0X21vdmVtZW50X2VkZ2U6IGdldF9tb3ZlbWVudF9lZGdlLFxuXHRcdGdldF9zZWFzb246IGdldF9zZWFzb24sXG5cdFx0c2V0X3NlYXNvbjogc2V0X3NlYXNvbixcblx0XHRnZXRfc3Bhd246IGdldF9zcGF3bixcblx0XHRzZXRfc3Bhd246IHNldF9zcGF3bixcblx0XHRpbmNyZWFzZV9zY29yZTogaW5jcmVhc2Vfc2NvcmUsXG5cdFx0aW5jcmVhc2VfcHJvZ3Jlc3M6IGluY3JlYXNlX3Byb2dyZXNzLFxuXHRcdGdldF9zY29yZTogZ2V0X3Njb3JlLFxuXHRcdGdldF9wcm9ncmVzczogZ2V0X3Byb2dyZXNzLFxuXHR9O1xufSkoKTtcblxubW9kdWxlLmV4cG9ydHMgPSBXb3JsZENvbnRyb2xsZXI7XG5cbnZhciBJbmNsdWRlcyA9IHJlcXVpcmUoXCIuLi9JbmNsdWRlcy5qc1wiKTsgdmFyIGluY2x1ZGVfZGF0YSA9IEluY2x1ZGVzLmdldF9pbmNsdWRlX2RhdGEoe1xuXHRjdXJyZW50X21vZHVsZTogXCJXb3JsZENvbnRyb2xsZXJcIiwgXG5cdGluY2x1ZGVfb3B0aW9uczogSW5jbHVkZXMuY2hvaWNlcy5ERUZBVUxUXG59KTsgZXZhbChpbmNsdWRlX2RhdGEubmFtZV9zdGF0ZW1lbnRzKTsgdmFyIGluY2x1ZGUgPSBmdW5jdGlvbigpe2V2YWwoaW5jbHVkZV9kYXRhLm1vZHVsZV9zdGF0ZW1lbnRzKTt9XG5cbiIsInZhciBHYW1lVXRpbGl0eSA9IChmdW5jdGlvbigpXG57XG4gIGZ1bmN0aW9uIGFycm93X2tleV9zY3JvbGxpbmcoZmxhZykge1xuICAgIC8vIENvbmZpZ3VyZXMgYXJyb3cga2V5IHNjcm9sbGluZyBmb3IgY2FudmFzXG4gICAgaWYgKGZsYWcgPT0gZmFsc2UpIHtcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBmdW5jdGlvbiAoZSkgeyAvLyAuZ2V0RWxlbWVudEJ5SWQoXCJkaXNwbGF5X2NhbnZhc1wiKVxuICAgICAgICBhcnJvd3MgPSBbMzcsIDM4LCAzOSwgNDBdO1xuICAgICAgICBpZiAoYXJyb3dzLmluZGV4T2YoZS5rZXlDb2RlKSA+IC0xKSB7XG4gICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG5cdHZhciBsZyA9IGZ1bmN0aW9uKClcblx0e1xuXHRcdC8qXG5cdFx0ICogc2hvcnRjdXQgdG8gY29uc29sZS5sb2coKVxuXHRcdCAqIHByaW50cyBhbGwgYXJndW1lbnRzIHRvIGNvbnNvbGVcblx0XHQgKiBmaXJzdCBhcmd1bWVudCBpcyB1c2VkIGFzIGEgbGFiZWwgZm9yIHRoZSByZXN0XG5cdFx0ICpcblx0XHQgKiBlYWNoIGxhYmVsZWQgZ3JvdXAgaXMgZW5jbG9zZWQgaW50byB0aGUgY29sb3JlZCBkZWxpbWl0ZXJzXG5cdFx0ICogPj4+IGFuZCA8PDwgc28gaXQncyBlYXNpbHkgZGlzdGluZ3Vpc2hlZC4gSSBmb3VuZCBpdCBoZWxwZnVsLFxuXHRcdCAqIGlmIHlvdSBkb24ndCBsZXQgbWUga25vdywgb3IgdXNlIHNvbWV0aGluZyBlbHNlXG5cdFx0ICovXG5cdFx0Y29uc29sZS5sb2coXCIlcyAlYyAlc1wiLCBhcmd1bWVudHNbMF0sIFwiYmFja2dyb3VuZDogI0RBRjJCMVwiLCBcIj4+PlwiKTtcblx0XHRcblx0XHRmb3IodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKVxuXHRcdHtcblx0XHRcdGNvbnNvbGUubG9nKFwiXFx0XCIsIGFyZ3VtZW50c1tpXSk7XG5cdFx0fVxuXHRcdGNvbnNvbGUubG9nKFwiJWM8PDxcIiwgXCJiYWNrZ3JvdW5kOiAjREFGMkIxXCIpO1xuXG5cdH07XG5cblx0dmFyIHJhbmRvbV9jaG9pY2UgPSBmdW5jdGlvbihwcm9iYWJpbGl0aWVzLCBjaG9pY2VzKXtcblx0XHQvKlxuXHRcdCAgIHRha2VzIDIgYXJyYXlzIHdpdGggZWxlbWVudHMgYXQgY29ycmVzcG9uZGluZyBpbmRleGVzXG5cdFx0ICAgYmVpbmcgY2hvaWNlIGFuZCBpdCdzIHByb2JhYmlsaXR5LiBwaWNrcyByYW5kb20gb25lLlxuXHRcdCAgIGNob2ljZXMgYXJlIGFueXRoaW5nLCBwcm9iYWJpbGl0eSBpcyBpbnRlZ2VyIGEsIHN1Y2ggdGhhdFxuXHRcdCAgIHByb2JhYmlsaXR5IG9mIGEgY2hvaWNlIGlzIGEvMTAuIHdpdGggYSA8IDEwLCBvZiBjb3Vyc2Vcblx0XHQgICBhbmQgcHJvYmFiaWxpdGllcyBhZGRpbmcgdXAgdG8gMTAuIFxuXHRcdCAgIFllcywgaXQncyBub3QgdmVyeSBnb29kIGltcGxlbWVudGF0aW9uIChyZWFkOiB0ZXJyaWJsZSksIFxuXHRcdCAgIGFuZCBzaW5jZSB5b3Ugbm90aWNlZCwgbm93IGl0J3MgeW91ciBqb2IgdG8gaW1wcm92ZSBpdC5cblxuXHRcdCovXG5cblx0XHQvLyBhcnJheSB3aXRoIGNob2ljZXMgZHVwbGljYXRlZCBhIHByb3BlciBhbW91bnQgb2YgdGltZXMgYmFzZWQgb25cblx0XHQvLyB0aGVpciBwcm9iYWJpbGl0eVxuXHRcdHZhciBibGFoID0gW107IFxuXG5cdFx0Zm9yKHZhciBpID0gMDsgaSA8IGNob2ljZXMubGVuZ3RoOyBpKyspe1xuXHRcdFx0Zm9yKHZhciBqID0gMDsgaiA8IHByb2JhYmlsaXRpZXNbaV07IGorKyl7XG5cdFx0XHRcdGJsYWgucHVzaChjaG9pY2VzW2ldKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHR2YXIgcmFuZF9pbmRleCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGJsYWgubGVuZ3RoKTtcblxuXHRcdHJldHVybiBibGFoW3JhbmRfaW5kZXhdO1xuXHR9O1xuXG5cdFxuXG5cdHJldHVybiB7XG5cdFx0bGc6IGxnLFxuXHRcdHJhbmRvbV9jaG9pY2U6IHJhbmRvbV9jaG9pY2Vcblx0fTtcblxufSkoKTtcblxubW9kdWxlLmV4cG9ydHMgPSBHYW1lVXRpbGl0eTtcbiIsInZhciBJbmNsdWRlID0gZnVuY3Rpb24oKXtcblxuXHR2YXIgbW9kdWxlcztcblxuXHQvLyBzaW1wbGUgZW51bWVyYXRvciAvLyBvcHRpb24gY29kZXMgTVVTVCBiZSBwb3dlciBvZiAyIG9yIHN1bSBvZiBvdGhlciBvcHRpb25zICh3aXRoIDAgYmVpbmcgdGhlIG9ubHkgZXhjZXB0aW9uKSwgYW5kIHVuaXF1ZVxuXHR2YXIgY2hvaWNlcyA9IChmdW5jdGlvbigpe1xuXHRcdC8vIHNpbXBsZSBvcHRpb25zOiBudW1iZXJpYyB2YWx1ZSBtdXN0IGJlIDAgb3Igc29tZSBwb3dlciBvZiAyLCBuYW1lIHNob3VsZCBiZSBhbGwgY2FwcyBhbmQgdW5pcXVlXG5cdFx0dmFyIHJlc3VsdCA9IHtOT05FOiAwLCBBTExfQ09OVFJPTExFUlM6IDEsIEFMTF9NT0RFTFM6IDIsIE9XTl9NT0RFTDogNCwgT1RIRVJfU1RVRkY6IDgsIFJFTkRFUkVSUzogMTYsIExPR0lDOiAzMn07XG5cblx0XHQvLyBjb21wbGV4IG9wdGlvbnM6IHNob3VsZCBjb25zaXN0IG9mIHNpbXBsZSBvcHRpb25zLCBiaXR3aXNlKCEpIE9SJ2VkIG9yIEFORCdlZCB0b2dldGhlciBpbiBhbnkgZmFzaGlvblxuXHRcdHJlc3VsdC5ERUZBVUxUID0gKHJlc3VsdC5BTExfQ09OVFJPTExFUlMgfCByZXN1bHQuT1dOX01PREVMIHwgcmVzdWx0Lk9USEVSX1NUVUZGKTtcblx0XHRyZXN1bHQuQUxMID0gIChyZXN1bHQuQUxMX0NPTlRST0xMRVJTIHwgcmVzdWx0LkFMTF9NT0RFTFMgfCByZXN1bHQuT1RIRVJfU1RVRkYpOyBcblx0XHRyZXN1bHQuUkVOREVSRVJfU1BFQ0lGSUMgPSAocmVzdWx0LkFMTF9DT05UUk9MTEVSUyB8IHJlc3VsdC5PVEhFUl9TVFVGRik7XG5cdFx0cmVzdWx0LkxPR0lDX1NQRUNJRklDID0gKHJlc3VsdC5BTExfQ09OVFJPTExFUlMgfCByZXN1bHQuT1RIRVJfU1RVRkYpO1xuXG5cdFx0Ly8gb2JqZWN0IGlzIGltbXV0YWJsZVxuXHRcdHJldHVybiBPYmplY3QuZnJlZXplKHJlc3VsdCk7XG5cdH0pKCk7XG5cblx0dmFyIG1vZHVsZV9uYW1lcyA9IHtcblx0XHRDb250cm9sbGVyczogW1xuXHRcdFx0XCJBc3NldENvbnRyb2xsZXJcIixcblx0XHRcdFwiRW50aXR5Q29udHJvbGxlclwiLFxuXHRcdFx0XCJHYW1lQ29udHJvbGxlclwiLFxuXHRcdFx0XCJHcmFwaGljc0NvbnRyb2xsZXJcIixcblx0XHRcdFwiSW5pdENvbnRyb2xsZXJcIixcblx0XHRcdFwiS2V5Ym9hcmRDb250cm9sbGVyXCIsXG5cdFx0XHRcIlBoeXNpY3NDb250cm9sbGVyXCIsXG5cdFx0XHRcIlRlcnJhaW5Db250cm9sbGVyXCIsXG5cdFx0XHRcIlRlcnJhaW5TbGljZUNvbnRyb2xsZXJcIixcblx0XHRcdFwiVGVzdENvbnRyb2xsZXJcIixcblx0XHRcdFwiV29ybGRDb250cm9sbGVyXCIsXG5cdFx0XHRcIklkZW50aWZpY2F0aW9uQ29udHJvbGxlclwiLFxuXHRcdFx0XCJSZWdpc3RlckFzQ29udHJvbGxlclwiLFxuXHRcdFx0XCJOZXR3b3JrQ29udHJvbGxlclwiLFxuXHRcdFx0XCJNdWx0aXBsYXllclN5bmNDb250cm9sbGVyXCIsXG5cdFx0XSxcblxuXHRcdE1vZGVsczogW1xuXHRcdFxuXHRcdFx0XCJBc3NldE1vZGVsXCIsXG5cdFx0XHRcIkdhbWVNb2RlbFwiLFxuXHRcdFx0XCJHcmFwaGljc01vZGVsXCIsXG5cdFx0XHRcIktleWJvYXJkTW9kZWxcIixcblx0XHRcdFwiUGh5c2ljc01vZGVsXCIsXG5cdFx0XHRcIlRlcnJhaW5Nb2RlbFwiLFxuXHRcdFx0XCJUZXJyYWluU2xpY2VNb2RlbFwiLFxuXHRcdFx0XCJUZXN0TW9kZWxcIixcblx0XHRcdFwiV29ybGRNb2RlbFwiLFxuXHRcdFx0XCJFbnRpdHlNb2RlbFwiLFxuXHRcdFx0XCJSZWdpc3RlckFzTW9kZWxcIixcblx0XHRcdFwiTmV0d29ya01vZGVsXCIsXG5cdFx0XHRcIk11bHRpcGxheWVyU3luY01vZGVsXCIsXG5cdFx0XSxcblxuXHRcdE90aGVyOiBbXG5cdFx0XG5cdFx0XHRcIkIyZFwiLFxuXHRcdFx0XCJCb3gyRFwiLFxuXHRcdFx0XCJDb25maWdcIixcblx0XHRcdFwiR2FtZVV0aWxpdHlcIixcblx0XHRdLFxuXG5cdFx0UmVuZGVyZXJzOiBbXG5cdFx0XHRcIkFudFJlbmRlcmVyXCIsXG5cdFx0XHRcIkhlcm9SZW5kZXJlclwiLFxuICAgICAgICAgICAgXCJNZWR1c2FSZW5kZXJlclwiLFxuXHRcdFx0XCJUZXJyYWluQ2VsbFJlbmRlcmVyXCIsXG5cdFx0XHRcIkdyaWZmaW5SZW5kZXJlclwiLFxuXHRcdFx0XCJIeWVuYVJlbmRlcmVyXCIsXG5cdFx0XHRcIlRlcnJhaW5TbGljZVJlbmRlcmVyXCIsXG5cdFx0XHRcIkJhY2tncm91bmRSZW5kZXJlclwiLFxuXHRcdFx0XCJIVURSZW5kZXJlclwiLFxuICAgICAgICAgICAgXCJQaXp6YVJlbmRlcmVyXCIsXG5cdFx0XHRcIkVzdGVlbWVkQ29tcGFuaW9uUmVuZGVyZXJcIixcblx0XHRdLFxuXG5cdFx0TG9naWM6IFtcblx0XHRcdFwiQW50TG9naWNcIixcblx0XHRcdFwiSGVyb0xvZ2ljXCIsXG5cdFx0XHRcIkdyaWZmaW5Mb2dpY1wiLFxuICAgICAgICAgICAgXCJNZWR1c2FMb2dpY1wiLFxuXHRcdFx0XCJIeWVuYUxvZ2ljXCIsXG5cdFx0XHRcIkVzdGVlbWVkQ29tcGFuaW9uTG9naWNcIixcbiAgICAgICAgICAgIFwiUGl6emFMb2dpY1wiLFxuXHRcdF0sXG5cblx0fTsvL2VuZCBtb2R1bGVfbmFtZXNcblxuXG5cdHZhciBpbml0ID0gZnVuY3Rpb24oKXtcblxuXHRcdG1vZHVsZXMgPSB7XG5cdFx0XHRBc3NldENvbnRyb2xsZXI6IHJlcXVpcmUoXCIuL0NvbnRyb2xsZXJzL0Fzc2V0Q29udHJvbGxlci5qc1wiKSxcblx0XHRcdEdyYXBoaWNzQ29udHJvbGxlcjogcmVxdWlyZShcIi4vQ29udHJvbGxlcnMvR3JhcGhpY3NDb250cm9sbGVyLmpzXCIpLFxuXHRcdFx0S2V5Ym9hcmRDb250cm9sbGVyOiByZXF1aXJlKFwiLi9Db250cm9sbGVycy9LZXlib2FyZENvbnRyb2xsZXIuanNcIiksXG5cdFx0XHRQaHlzaWNzQ29udHJvbGxlcjogcmVxdWlyZShcIi4vQ29udHJvbGxlcnMvUGh5c2ljc0NvbnRyb2xsZXIuanNcIiksXG5cdFx0XHRUZXJyYWluQ29udHJvbGxlcjogcmVxdWlyZShcIi4vQ29udHJvbGxlcnMvVGVycmFpbkNvbnRyb2xsZXIuanNcIiksXG5cdFx0XHRUZXJyYWluU2xpY2VDb250cm9sbGVyOiByZXF1aXJlKFwiLi9Db250cm9sbGVycy9UZXJyYWluU2xpY2VDb250cm9sbGVyLmpzXCIpLFxuXHRcdFx0V29ybGRDb250cm9sbGVyOiByZXF1aXJlKFwiLi9Db250cm9sbGVycy9Xb3JsZENvbnRyb2xsZXIuanNcIiksXG5cdFx0XHRJbml0Q29udHJvbGxlcjogcmVxdWlyZShcIi4vQ29udHJvbGxlcnMvSW5pdENvbnRyb2xsZXIuanNcIiksXG5cdFx0XHRUZXN0Q29udHJvbGxlcjogcmVxdWlyZShcIi4vQ29udHJvbGxlcnMvVGVzdENvbnRyb2xsZXIuanNcIiksXG5cdFx0XHRHYW1lQ29udHJvbGxlcjogcmVxdWlyZShcIi4vQ29udHJvbGxlcnMvR2FtZUNvbnRyb2xsZXIuanNcIiksXG5cdFx0XHRFbnRpdHlDb250cm9sbGVyOiByZXF1aXJlKFwiLi9Db250cm9sbGVycy9FbnRpdHlDb250cm9sbGVyLmpzXCIpLFxuXHRcdFx0SWRlbnRpZmljYXRpb25Db250cm9sbGVyOiByZXF1aXJlKFwiLi9Db250cm9sbGVycy9JZGVudGlmaWNhdGlvbkNvbnRyb2xsZXIuanNcIiksXG5cdFx0XHRSZWdpc3RlckFzQ29udHJvbGxlcjogcmVxdWlyZShcIi4vQ29udHJvbGxlcnMvUmVnaXN0ZXJBc0NvbnRyb2xsZXIuanNcIiksXG5cdFx0XHRcblx0XHRcdE5ldHdvcmtDb250cm9sbGVyOiByZXF1aXJlKFwiLi9Db250cm9sbGVycy9OZXR3b3JrQ29udHJvbGxlci5qc1wiKSxcblx0XHRcdE11bHRpcGxheWVyU3luY0NvbnRyb2xsZXI6IHJlcXVpcmUoXCIuL0NvbnRyb2xsZXJzL011bHRpcGxheWVyU3luY0NvbnRyb2xsZXIuanNcIiksXG5cdFx0XHRcblx0XHRcdC8vIE1vZGVsc1xuXG5cdFx0XHRHYW1lTW9kZWw6IHJlcXVpcmUoXCIuL01vZGVscy9HYW1lTW9kZWwuanNcIiksXG5cdFx0XHRUZXJyYWluU2xpY2VNb2RlbDogcmVxdWlyZShcIi4vTW9kZWxzL1RlcnJhaW5TbGljZU1vZGVsLmpzXCIpLFxuXHRcdFx0QXNzZXRNb2RlbDogcmVxdWlyZShcIi4vTW9kZWxzL0Fzc2V0TW9kZWwuanNcIiksXG5cdFx0XHRQaHlzaWNzTW9kZWw6IHJlcXVpcmUoXCIuL01vZGVscy9QaHlzaWNzTW9kZWwuanNcIiksXG5cdFx0XHRHcmFwaGljc01vZGVsOiByZXF1aXJlKFwiLi9Nb2RlbHMvR3JhcGhpY3NNb2RlbC5qc1wiKSxcblx0XHRcdFRlcnJhaW5Nb2RlbDogcmVxdWlyZShcIi4vTW9kZWxzL1RlcnJhaW5Nb2RlbC5qc1wiKSxcblx0XHRcdFdvcmxkTW9kZWw6IHJlcXVpcmUoXCIuL01vZGVscy9Xb3JsZE1vZGVsLmpzXCIpLFxuXHRcdFx0S2V5Ym9hcmRNb2RlbDogcmVxdWlyZShcIi4vTW9kZWxzL0tleWJvYXJkTW9kZWwuanNcIiksXG5cdFx0XHRUZXN0TW9kZWw6IHJlcXVpcmUoXCIuL01vZGVscy9UZXN0TW9kZWwuanNcIiksXG5cdFx0XHRJZGVudGlmaWNhdGlvbk1vZGVsOiByZXF1aXJlKFwiLi9Nb2RlbHMvSWRlbnRpZmljYXRpb25Nb2RlbC5qc1wiKSxcblx0XHRcdEVudGl0eU1vZGVsOiByZXF1aXJlKFwiLi9Nb2RlbHMvRW50aXR5TW9kZWwuanNcIiksXG5cdFx0XHRSZWdpc3RlckFzTW9kZWw6IHJlcXVpcmUoXCIuL01vZGVscy9SZWdpc3RlckFzTW9kZWwuanNcIiksXG5cdFx0XHROZXR3b3JrTW9kZWw6IHJlcXVpcmUoXCIuL01vZGVscy9OZXR3b3JrTW9kZWwuanNcIiksXG5cdFx0XHRNdWx0aXBsYXllclN5bmNNb2RlbDogcmVxdWlyZShcIi4vTW9kZWxzL011bHRpcGxheWVyU3luY01vZGVsLmpzXCIpLFxuXHRcdFx0XHRcdFx0XG5cdFx0XHQvLyBPdGhlciBzdHVmZlxuXHRcdFx0XG5cdFx0XHRDb25maWc6IHJlcXVpcmUoXCIuL0NvbmZpZy5qc1wiKSxcblx0XHRcdEdhbWVVdGlsaXR5OiByZXF1aXJlKFwiLi9HYW1lVXRpbGl0eS5qc1wiKSxcblx0XHRcdEIyZDogcmVxdWlyZShcIi4vQjJkLmpzXCIpLFxuXHRcdFx0Qm94MkQ6IHJlcXVpcmUoXCJib3gyZHdlYlwiKSxcblx0XHRcdFxuXHRcdFx0Ly8gUmVuZGVyZXJzXG5cdFx0XHRcblx0XHRcdEFudFJlbmRlcmVyOiByZXF1aXJlKFwiLi9SZW5kZXJlcnMvQW50UmVuZGVyZXIuanNcIiksXG5cdFx0XHRHcmlmZmluUmVuZGVyZXI6IHJlcXVpcmUoXCIuL1JlbmRlcmVycy9HcmlmZmluUmVuZGVyZXIuanNcIiksXG4gICAgICAgICAgICBNZWR1c2FSZW5kZXJlcjogcmVxdWlyZShcIi4vUmVuZGVyZXJzL01lZHVzYVJlbmRlcmVyLmpzXCIpLFxuXHRcdFx0SHllbmFSZW5kZXJlcjogcmVxdWlyZShcIi4vUmVuZGVyZXJzL0h5ZW5hUmVuZGVyZXIuanNcIiksXG5cdFx0XHRIZXJvUmVuZGVyZXI6IHJlcXVpcmUoXCIuL1JlbmRlcmVycy9IZXJvUmVuZGVyZXIuanNcIiksXG5cdFx0XHRUZXJyYWluQ2VsbFJlbmRlcmVyOiByZXF1aXJlKFwiLi9SZW5kZXJlcnMvVGVycmFpbkNlbGxSZW5kZXJlci5qc1wiKSxcblx0XHRcdFRlcnJhaW5TbGljZVJlbmRlcmVyOiByZXF1aXJlKFwiLi9SZW5kZXJlcnMvVGVycmFpblNsaWNlUmVuZGVyZXIuanNcIiksXG5cdFx0XHRCYWNrZ3JvdW5kUmVuZGVyZXI6IHJlcXVpcmUoXCIuL1JlbmRlcmVycy9CYWNrZ3JvdW5kUmVuZGVyZXIuanNcIiksXG5cdFx0XHRIVURSZW5kZXJlcjogcmVxdWlyZShcIi4vUmVuZGVyZXJzL0hVRFJlbmRlcmVyLmpzXCIpLFxuXHRcdFx0UGl6emFSZW5kZXJlcjogcmVxdWlyZShcIi4vUmVuZGVyZXJzL1BpenphUmVuZGVyZXIuanNcIiksXG5cdFx0XHRcblx0XHRcdFxuXHRcdFx0XG5cdFx0XHRFc3RlZW1lZENvbXBhbmlvblJlbmRlcmVyOiByZXF1aXJlKFwiLi9SZW5kZXJlcnMvRXN0ZWVtZWRDb21wYW5pb25SZW5kZXJlci5qc1wiKSxcblx0XHRcdFxuXHRcdFx0Ly8gTG9naWNcblx0XHRcdEFudExvZ2ljOiByZXF1aXJlKFwiLi9Mb2dpYy9BbnRMb2dpYy5qc1wiKSxcblx0XHRcdEdyaWZmaW5Mb2dpYzogcmVxdWlyZShcIi4vTG9naWMvR3JpZmZpbkxvZ2ljLmpzXCIpLFxuICAgICAgICAgICAgTWVkdXNhTG9naWM6IHJlcXVpcmUoXCIuL0xvZ2ljL01lZHVzYUxvZ2ljLmpzXCIpLFxuXHRcdFx0SHllbmFMb2dpYzogcmVxdWlyZShcIi4vTG9naWMvSHllbmFMb2dpYy5qc1wiKSxcblx0XHRcdEhlcm9Mb2dpYzogcmVxdWlyZShcIi4vTG9naWMvSGVyb0xvZ2ljLmpzXCIpLFxuXHRcdFx0RXN0ZWVtZWRDb21wYW5pb25Mb2dpYzogcmVxdWlyZShcIi4vTG9naWMvRXN0ZWVtZWRDb21wYW5pb25Mb2dpYy5qc1wiKSxcblx0XHRcdFBpenphTG9naWM6IHJlcXVpcmUoXCIuL0xvZ2ljL1BpenphTG9naWMuanNcIiksXG5cblx0XHR9O1xuXG5cdH07IC8vIGVuZCBpbml0XG5cblx0dmFyIG9wdGlvbl9pc19zZXQgPSBmdW5jdGlvbih3aGF0X21vZHNfc2VsZWN0ZWQsIG9wdGlvbnMpe1xuXHRcdGlmKHdoYXRfbW9kc19zZWxlY3RlZCA9PSAwICYmIG9wdGlvbnMgPT0gMCl7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cdFx0Ly8gYmUgbWluZGZ1bCBvZiBiaXR3aXNlIG9wZXJhdG9yIGFoZWFkXG5cdFx0cmV0dXJuICh3aGF0X21vZHNfc2VsZWN0ZWQgJiBvcHRpb25zKTtcblx0fTsvL2VuZCBvcHRpb25faXNfc2V0XG5cblx0dmFyIGdldF9tb2R1bGUgPSBmdW5jdGlvbihuYW1lKXtcblx0XHQvLyBjYW4gYmUgbW9kaWZpZWQgdG8gdGhyb3cgb2JqZWN0IGVycm9yIGluc3RlYWQgb2Ygc2ltcGxlIG9uZVxuXHRcdC8vIGluIHRoYXQgY2FzZSBpdCBtYXkgY29udGFpbiBsaXN0IG9mIGRlZmluZWQgbW9kdWxlc1xuXHRcdC8vIG1heSBhbHNvIGJlIG1vZGlmaWVkIHRvIGNoZWNrIHdoZXRoZXIgbW9kdWxlIGlzIG1pc3NpbmcgZnJvbSBcblx0XHQvLyBtb2R1bGVfbmFtZXMsIG1vZHVsZXMsIG9yIGJvdGgsIGFuZCBnaXZlIG1vcmUgYWNjdXJhdGUgZGVzY3JpcHRpb25cblx0XHR2YXIgbWVzc2FnZSA9IFwiTW9kdWxlIFwiICsgbmFtZSArIFxuXHRcdFx0XCIgaXMgdW5kZWZpbmVkLiBOb3RlIHRoYXQgeW91IG11c3QgaGFyZGNvZGUgYWxsIG5ldyBtb2R1bGVzXCIgKyBcblx0XHRcdFwiIGludG8gdGhlIEluY2x1ZGVzLm1vZHVsZV9uYW1lcyBBTkQgSW5jbHVkZXMubW9kdWxlcy5cIlxuXHRcdFxuXHRcdGlmKG1vZHVsZXMpe1xuXHRcdFx0aWYobW9kdWxlc1tuYW1lXSl7XG5cdFx0XHRcdHJldHVybiBtb2R1bGVzW25hbWVdO1xuXHRcdFx0fWVsc2UgaWYoY29uc29sZS53YXJuKXsgLy8gY2hlY2sgaWYgY29uc29sZS53YXJuIGlzIGF2YWlsYWJsZVxuXHRcdFx0XHRjb25zb2xlLndhcm4obWVzc2FnZSk7XG5cdFx0XHR9ZWxzZXtcblx0XHRcdFx0dGhyb3cgbWVzc2FnZTtcblx0XHRcdH1cblx0XHR9ZWxzZXtcblx0XHRcdHRocm93IFwiRXJyb3I6IFlvdSBtdXN0IHJ1biB0aGUgSW5jbHVkZXMuaW5pdCgpIGJlZm9yZSB5b3UgY2FuIHVzZSBhbnkgbW9kdWxlc1wiO1xuXHRcdH1cblx0fTsvL2VuZCBnZXRfbW9kdWxlXG5cdFxuXG5cdHZhciBnZXRfbmFtZXMgPSBmdW5jdGlvbihjdXJyZW50X21vZHVsZV9uYW1lLCBvcHRpb25zX2NvZGUpe1xuXHRcdHZhciByZXN1bHQgPSB7TW9kZWxzOiBbXSwgQ29udHJvbGxlcnM6IFtdLCBPdGhlcjogW10sIFJlbmRlcmVyczogW10sIExvZ2ljOiBbXSx9O1xuXG5cdFx0aWYob3B0aW9uX2lzX3NldChjaG9pY2VzLk5PTkUsIG9wdGlvbnNfY29kZSkpe1xuXHRcdFx0cmV0dXJuIHJlc3VsdDtcblx0XHR9XG5cblx0XHRpZiAob3B0aW9uX2lzX3NldChjaG9pY2VzLkFMTF9DT05UUk9MTEVSUywgb3B0aW9uc19jb2RlKSl7XG5cblx0XHRcdHZhciBjb250cm9sbGVyX25hbWVzID0gbW9kdWxlX25hbWVzLkNvbnRyb2xsZXJzO1xuXG5cdFx0XHRmb3IodmFyIGkgPSAwOyBpIDwgY29udHJvbGxlcl9uYW1lcy5sZW5ndGg7IGkrKyl7XG5cblx0XHRcdFx0dmFyIGN0bF9uYW1lID0gY29udHJvbGxlcl9uYW1lc1tpXTtcblxuXHRcdFx0XHRpZihjdGxfbmFtZSAhPSBjdXJyZW50X21vZHVsZV9uYW1lKXtcblx0XHRcdFx0XHRyZXN1bHQuQ29udHJvbGxlcnMucHVzaChjdGxfbmFtZSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdFxuXHRcdH1cblxuXHRcdGlmIChvcHRpb25faXNfc2V0KGNob2ljZXMuQUxMX01PREVMUywgb3B0aW9uc19jb2RlKSl7XG5cdFx0XHRyZXN1bHQuTW9kZWxzID0gbW9kdWxlX25hbWVzLk1vZGVscztcblx0XHR9ZWxzZSBpZihvcHRpb25faXNfc2V0KGNob2ljZXMuT1dOX01PREVMLCBvcHRpb25zX2NvZGUpKXtcblx0XHRcdHZhciBvd25fbW9kZWwgPSBjdXJyZW50X21vZHVsZV9uYW1lLnJlcGxhY2UoXCJDb250cm9sbGVyXCIsIFwiTW9kZWxcIik7XG5cdFx0XHRyZXN1bHQuTW9kZWxzLnB1c2gob3duX21vZGVsKTtcblx0XHR9XG5cblx0XHRpZihvcHRpb25faXNfc2V0KGNob2ljZXMuT1RIRVJfU1RVRkYsIG9wdGlvbnNfY29kZSkpe1xuXHRcdFx0cmVzdWx0Lk90aGVyID0gbW9kdWxlX25hbWVzLk90aGVyO1xuXHRcdH1cblxuXHRcdGlmKG9wdGlvbl9pc19zZXQoY2hvaWNlcy5SRU5ERVJFUlMsIG9wdGlvbnNfY29kZSkpe1xuXHRcdFx0cmVzdWx0LlJlbmRlcmVycyA9IG1vZHVsZV9uYW1lcy5SZW5kZXJlcnM7XG5cdFx0fVxuXG5cdFx0aWYob3B0aW9uX2lzX3NldChjaG9pY2VzLkxPR0lDLCBvcHRpb25zX2NvZGUpKXtcblx0XHRcdHJlc3VsdC5Mb2dpYyA9IG1vZHVsZV9uYW1lcy5Mb2dpYztcblx0XHR9XG5cblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9Oy8vZW5kIGdldF9uYW1lc1xuXG5cdHZhciBzZWN0aW9ucyA9IFtcIk1vZGVsc1wiLCBcIkNvbnRyb2xsZXJzXCIsIFwiT3RoZXJcIiwgXCJSZW5kZXJlcnNcIiwgXCJMb2dpY1wiXTtcblx0dmFyIGdldF9uYW1lX3N0YXRlbWVudHMgPSBmdW5jdGlvbihuYW1lcyl7XG5cdFx0dmFyIHJlc3VsdCA9IFwiXCI7XG5cdFx0Zm9yKHZhciBzZWN0aW9uX2luZGV4ID0gMDsgc2VjdGlvbl9pbmRleCA8IHNlY3Rpb25zLmxlbmd0aDsgc2VjdGlvbl9pbmRleCsrKXtcblx0XHRcdHZhciBzZWN0aW9uID0gc2VjdGlvbnNbc2VjdGlvbl9pbmRleF07XG5cdFx0XHRmb3IodmFyIGkgPSAwOyBpIDwgbmFtZXNbc2VjdGlvbl0ubGVuZ3RoOyBpKyspe1xuXHRcdFx0XHRyZXN1bHQgKz0gKFwidmFyIFwiICsgbmFtZXNbc2VjdGlvbl1baV0gKyBcIjsgXCIpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiByZXN1bHQ7XG5cdFx0XG5cdH07Ly9lbmQgZ2V0X25hbWVfc3RhdGVtZW50c1xuXG5cdHZhciBnZXRfbW9kdWxlX3N0YXRlbWVudHMgPSBmdW5jdGlvbihuYW1lcyl7XG5cdFx0dmFyIHJlc3VsdCA9IFwiXCI7XG5cdFx0Zm9yKHZhciBzZWN0aW9uX2luZGV4ID0gMDsgc2VjdGlvbl9pbmRleCA8IHNlY3Rpb25zLmxlbmd0aDsgc2VjdGlvbl9pbmRleCsrKXtcblx0XHRcdHZhciBzZWN0aW9uID0gc2VjdGlvbnNbc2VjdGlvbl9pbmRleF07XG5cdFx0XHRmb3IodmFyIGkgPSAwOyBpIDwgbmFtZXNbc2VjdGlvbl0ubGVuZ3RoOyBpKyspe1xuXHRcdFx0XHRyZXN1bHQgKz0gKG5hbWVzW3NlY3Rpb25dW2ldICsgXCIgPSBJbmNsdWRlcy5nZXRfbW9kdWxlKFxcXCJcIiArIG5hbWVzW3NlY3Rpb25dW2ldICsgXCJcXFwiKTsgXCIpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiByZXN1bHQ7XG5cdH07Ly9lbmQgZ2V0X21vZHVsZV9zdGF0ZW1lbnRzXG5cblx0dmFyIGdldF9pbmNsdWRlX2RhdGEgPSBmdW5jdGlvbihwYXJhbXMpe1xuXHRcdHZhciBjdXJyZW50X21vZHVsZSA9IHBhcmFtcy5jdXJyZW50X21vZHVsZTtcblx0XHR2YXIgaW5jbHVkZV9vcHRpb25zID0gcGFyYW1zLmluY2x1ZGVfb3B0aW9ucztcblx0XHR2YXIgbmFtZXMgPSBnZXRfbmFtZXMoY3VycmVudF9tb2R1bGUsIGluY2x1ZGVfb3B0aW9ucyk7XG5cblx0XHR2YXIgbmFtZV9zdGF0ZW1lbnRzID0gZ2V0X25hbWVfc3RhdGVtZW50cyhuYW1lcyk7XG5cdFx0dmFyIG1vZHVsZV9zdGF0ZW1lbnRzID0gZ2V0X21vZHVsZV9zdGF0ZW1lbnRzKG5hbWVzKTtcblxuXHRcdHJldHVybiB7XG5cdFx0XHRpbXBvcnRlZF9tb2R1bGVzOiBuYW1lcyxcblx0XHRcdG5hbWVfc3RhdGVtZW50czogbmFtZV9zdGF0ZW1lbnRzLFxuXHRcdFx0bW9kdWxlX3N0YXRlbWVudHM6IG1vZHVsZV9zdGF0ZW1lbnRzLFxuXHRcdH07XG5cblx0fTsvL2VuZCBnZXRfaW5jbHVkZV9kYXRhXG5cblx0dmFyIGF1dG9tYXRlZF90ZXN0cyA9IGZ1bmN0aW9uKCl7XG5cdFx0XG5cdFx0UVVuaXQudGVzdChcIm9wdGlvbiBtYXRjaGluZyBmdW5jdGlvblwiLCBmdW5jdGlvbiggYXNzZXJ0KSB7XG5cblx0XHRcdC8vSWYgYm90aCBhcmUgbm9uZVxuXHRcdFx0YXNzZXJ0LmVxdWFsKG9wdGlvbl9pc19zZXQoY2hvaWNlcy5OT05FLCBjaG9pY2VzLk5PTkUpLCB0cnVlKTtcblxuXHRcdFx0YXNzZXJ0LnRocm93cyhvcHRpb25faXNfc2V0KGNob2ljZXMuTk9ORSwgLTEpKTtcblxuXHRcdFx0Ly9JZiBib3RoIG1hdGNoLCBpdCByZXR1cm5zIHRoZSB2YWx1ZSBvZiBjaG9pY2VzXG5cdFx0XHQvL0lmIHRoZXkgZG9uJ3QgbWF0Y2gsIGl0IHJldHVybnMgMFxuXHRcdFx0XG5cdFx0XHQvL01BVENIXG5cdFx0XHRhc3NlcnQuZXF1YWwob3B0aW9uX2lzX3NldChjaG9pY2VzLkFMTF9DT05UUk9MTEVSUywgY2hvaWNlcy5BTExfQ09OVFJPTExFUlMpLCAxKTtcblx0XHRcdGFzc2VydC5lcXVhbChvcHRpb25faXNfc2V0KGNob2ljZXMuQUxMX01PREVMUywgY2hvaWNlcy5BTExfTU9ERUxTKSwgMik7XG5cdFx0XHRhc3NlcnQuZXF1YWwob3B0aW9uX2lzX3NldChjaG9pY2VzLk9USEVSX1NUVUZGLCBjaG9pY2VzLk9USEVSX1NUVUZGKSwgOCk7XG5cblx0XHRcdC8vTWlzbWF0Y2hcblx0XHRcdGFzc2VydC5lcXVhbChvcHRpb25faXNfc2V0KGNob2ljZXMuTk9ORSwgY2hvaWNlcy5BTExfQ09OVFJPTExFUlMpLCAwKTtcblx0XHRcdGFzc2VydC5lcXVhbChvcHRpb25faXNfc2V0KGNob2ljZXMuT1RIRVJfU1RVRkYsIGNob2ljZXMuTk9ORSksIDApO1xuXHRcdFx0YXNzZXJ0LmVxdWFsKG9wdGlvbl9pc19zZXQoY2hvaWNlcy5BTExfTU9ERUxTLCBjaG9pY2VzLkFMTF9DT05UUk9MTEVSUyksIDApO1xuXHRcdFx0YXNzZXJ0LmVxdWFsKG9wdGlvbl9pc19zZXQoY2hvaWNlcy5PV05fTU9ERUwsIGNob2ljZXMuQUxMX01PREVMUyksIDApO1xuXHRcdH0pOy8vZW5kIG9wdGlvbiBtYXRjaGluZyB0ZXN0XG5cdFx0XG5cdH07Ly9lbmQgYXV0b21hdGVkX3Rlc3RzXG5cblxuXHRyZXR1cm4ge1xuXHRcdGluaXQ6IGluaXQsXG5cdFx0bW9kdWxlX25hbWVzOiBtb2R1bGVfbmFtZXMsXG5cdFx0Z2V0X21vZHVsZTogZ2V0X21vZHVsZSxcblx0XHRnZXRfaW5jbHVkZV9kYXRhOiBnZXRfaW5jbHVkZV9kYXRhLFxuXHRcdGNob2ljZXM6IGNob2ljZXMsXG5cdFx0YXV0b21hdGVkX3Rlc3RzOiBhdXRvbWF0ZWRfdGVzdHNcblx0fTtcblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBuZXcgSW5jbHVkZTtcblxuIiwidmFyIEFudExvZ2ljID0gKGZ1bmN0aW9uKCl7XG5cblx0dmFyIEFudCA9IGZ1bmN0aW9uKCl7XG5cdFx0LyogV2lsbCBiZSBpbnN0YW50aWF0ZWQgZm9yIGV2ZXJ5IGNyZWF0ZWQgZW50aXR5IHRvIGhvbGQgYWxsIHRoZSBpbmZvcm1hdGlvbiBcblx0XHRcdGFib3V0IHRoZSBwaHlzaWNhbCAobm90IGdyYXBoaWNhbCkgc3RhdGUgb2YgdGhlIGVudGl0eSBpbiBxdWVzdGlvbi4gXG5cdFx0XHRkZWNsYXJlIHRoZSBwcm9wZXJ0aWVzIGxpa2UgdGhpczpcblx0XHRcdHRoaXMuc29tZV9zdGF0ZV92YXJpYWJsZV9pbml0aWFsX3ZhbHVlID0gMDtcblx0XHRcdGluc3RhbnRpYXRlIChtb3N0IGxpa2VseSBpbiB0aGUgc3Bhd24gZnVuY3Rpb24pIGxpa2UgdGhhdDpcblx0XHRcdHZhciBuZXdfZW50aXR5X2luc3RhbmNlID0gbmV3IEFudCgpO1xuXHRcdCovXG5cdFx0dmFyIGVudGl0eSA9IEVudGl0eUNvbnRyb2xsZXIuY3JlYXRlX2Fic3RyYWN0X2VudGl0eSgpO1xuXHRcdFxuXHRcdGVudGl0eS5oZXJvX2h1cnRfbWUgPSBmYWxzZTtcblx0XHRlbnRpdHkubWVfaHVydF9oZXJvID0gZmFsc2U7XG5cdFx0ZW50aXR5LmRlYXRoX3RpY2sgPSAwO1xuXHRcdGVudGl0eS5ocCA9IDM7XG5cdFx0ZW50aXR5LnNwZWVkID0gMztcblx0XHRlbnRpdHkuZGFtYWdlID0gMTtcblx0XHRlbnRpdHkucG9pbnRfdmFsdWUgPSA1MDtcblx0XHRlbnRpdHkuY2FuX2F0dGFjayA9IHRydWU7XG5cdFx0ZW50aXR5LmFsaXZlZmxhZyA9IHRydWU7XG5cdFx0ZW50aXR5LnVuaHVydGZsYWcgPSB0cnVlO1xuXHRcdGVudGl0eS5zdGFydF93YWxraW5nID0gdHJ1ZTtcblx0XHRlbnRpdHkucG9wID0gNDA7XG5cdFx0ZW50aXR5LnBvcHVwID0gMDtcblx0XHRlbnRpdHkuYW5pbWF0aW9uID0gXCJ3YWxrXCI7XG5cdFx0ZW50aXR5LmRlY2F5X2R1cmF0aW9uID0gMDtcblx0XHRcblx0XHRyZXR1cm4gZW50aXR5O1xuXHR9O1xuXG5cdHZhciBpbml0ID0gZnVuY3Rpb24oKXtcblx0XHQvKiBJcyBydW4gZnJvbSB0aGUgRW50aXR5Q29udHJvbGxlci5pbml0IG9uY2UgZHVyaW5nIGdhbWUgbG9hZGluZyBcblx0XHQgXHR5b3Ugc2hvdWxkIGFzc2lnbiB0eXBlIHRvIHlvdXIgbW9kZWwgaGVyZSB1c2luZyB0aGUgaWRlbnRpZmljYXRpb24gY29udHJvbGxlclxuXHRcdCAqL1xuXHRcdGluY2x1ZGUoKTsgLy8gc2F0aXNmeSByZXF1aXJlbWVudHMsIEdPRVMgRklSU1Rcblx0XHRJZGVudGlmaWNhdGlvbkNvbnRyb2xsZXIuYXNzaWduX3R5cGUoQW50LCBcImFudFwiKTtcblx0fTtcblxuXHR2YXIgc3Bhd24gPSBmdW5jdGlvbih4LCB5KXtcblx0XHQvKiBzcGF3biBpbnN0YW5jZSBvZiB0aGlzIGVudGl0eSBhdCB0aGUgZ2l2ZW4gY29vcmRpbmF0ZXNcblx0XHRcdHlvdSB3aWxsIGhhdmUgdG8gY3JlYXRlIG5ldyBlbnRpdHkgaW5zdGFuY2UsIGFzc2lnbiBpdCBpZFxuXHRcdFx0dXNpbmcgdGhlIElkZW50aWZpY2F0aW9uQ29udHJvbGxlci5hc3NpZ25faWQoZW50aXR5X2luc3RhbmNlKSxcblx0XHRcdGFzc2lnbiBpdCBhIGJvZHkgd2hpY2ggeW91IGNhbiBnZXQgdGhyb3VnaCBQaHlzaWNzQ29udHJvbGxlclxuXHRcdFx0ZG8gYW55IG90aGVyIHN0dWZmIHlvdSB3YW50IHRvIGRvIGR1cmluZyBzcGF3bmluZyxcblx0XHRcdGFuZCBmaW5hbGx5IHlvdSBIQVZFIFRPKCEhISkgcmV0dXJuIHRoZSBpbnN0YW5jZSB5b3UganVzdCBjcmVhdGVkIGZyb20gdGhpcyBmdW5jdGlvblxuXHRcdCovXG5cblx0XHR2YXIgbmV3X2FudCA9IG5ldyBBbnQoKTtcblx0XHRuZXdfYW50LnR5cGUgPSBcImFudFwiO1xuXHRcdHZhciBpZCA9IElkZW50aWZpY2F0aW9uQ29udHJvbGxlci5hc3NpZ25faWQobmV3X2FudCk7XG5cblx0XHRuZXdfYW50LmJvZHkgPSBQaHlzaWNzQ29udHJvbGxlci5nZXRfcmVjdGFuZ3VsYXIoe3g6IHgsIHk6IHksIGJvcmRlcl9zZW5zb3JzOiB0cnVlfSwgbmV3X2FudCk7XHRcblxuXHRcdHJldHVybiBuZXdfYW50O1xuXG5cdH07XG5cblx0dmFyIHRpY2tfQUkgPSBmdW5jdGlvbihhbnQpe1xuXHRcdC8qIElzIHJhbiBlYWNoIHRpY2sgZnJvbSB0aGUgRW50aXR5Q29udHJvbGxlci51cGRhdGUgZm9yIGV2ZXJ5IHJlZ2lzdGVyZWRcblx0XHRcdGVudGl0eSBvZiB0aGlzIHR5cGUuIEkgZ2l2ZW4gZW50aXR5X2luc3RhbmNlXG5cdFx0Ki9cblxuXHQgICAgLy9pZiBlbmVteSBpcyBkZWFkLCBkaWVcblx0XHQvL2lmIChhbnQuYm9keS5HZXRXb3JsZENlbnRlcigpLnkgPiAyMiB8fCBhbnQuYm9keS5HZXRXb3JsZENlbnRlcigpLnggPCBDb25maWcuUGxheWVyLm1vdmVtZW50X2VkZ2UgLSAxKSB7XG5cdFx0XHQvL0VudGl0eUNvbnRyb2xsZXIuZGVsZXRlX2VudGl0eSgpO1xuXHRcdFx0Ly9jb25zb2xlLmxvZyhcImRyb3Agb2YgZGVhdGhcIik7XG5cdFx0Ly99XG5cdFx0Ly9cblx0XHRpZiAoYW50LmhwIDw9IDApe1xuXHRcdFx0YW50LmRpZSgpO1xuXHRcdH1lbHNle1xuXHRcdFx0aWYoYW50LmhwID09IDEpe1xuXHRcdFx0XHRhbnQucG9wdXArKztcblx0XHRcdFx0aWYoYW50LnBvcHVwID09IGFudC5wb3Ape1xuXHRcdFx0XHRcdGFudC5qdW1wKDEwLCAtMjApO1xuXHRcdFx0XHRcdGFudC5ocCsrO1xuXHRcdFx0XHRcdGFudC5wb3B1cCA9IDA7XG5cdFx0XHRcdFx0YW50LmNhbl9hdHRhY2sgPSB0cnVlO1xuXHRcdFx0XHRcdGFudC51bmh1cnRmbGFnID0gdHJ1ZTtcblx0XHRcdFx0XHRhbnQuY2hhbmdlX2FuaW1hdGlvbihcIndhbGtcIik7XG5cdFx0XHRcdH1cblx0XHRcdH1lbHNleyAvLyBocCA+IDFcblx0XHRcdFx0Ly9kbyBtYWludGVuYW5jZVxuXHRcdFx0XHRhbnQuZGlyZWN0aW9uX3ByZXZpb3VzID0gYW50LmRpcmVjdGlvbjtcblx0XHRcdFx0YW50LnhfcHJldmlvdXMgPSBhbnQuYm9keS5HZXRXb3JsZENlbnRlcigpLnhcblx0XHRcdFx0Ly9pZiBibG9ja2VkLCB0dXJuIGFyb3VuZFxuXHRcdFx0XHRpZigoIWFudC5wYXRoX2ZyZWUoKSB8fCBhbnQueHByZXZpb3VzID09IGFudC5ib2R5LkdldFdvcmxkQ2VudGVyKCkueCkgJiYgIWFudC5pbl9haXIoKSl7XG5cdFx0XHRcdFx0YW50LmRpcmVjdGlvbiA9ICFhbnQuZGlyZWN0aW9uO1xuXHRcdFx0XHR9XG5cdFx0XHRcdC8vbW92ZSBmb3J3YXJkXG5cdFx0XHRcdGFudC5tb3ZlKGFudC5zcGVlZCk7XG5cdFx0XHRcdGFudC5jaGFuZ2VfYW5pbWF0aW9uKFwid2Fsa1wiKTtcblx0XHRcdH1cblx0XHRcdGlmIChhbnQuZGFtYWdlX3Rha2VuKXtcblx0XHRcdFx0YW50LmNoYW5nZV9hbmltYXRpb24oXCJ1cHNpZGVfZG93blwiKTtcblx0XHRcdFx0YW50LnRha2VfZGFtYWdlKCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXG5cdC8vIC8vIC8vU2V0IHVwIENvbGxpc2lvbiBoYW5kbGVyXG5cdFxuXHRcblx0dmFyIGJlZ2luX2NvbnRhY3QgPSBmdW5jdGlvbihjb250YWN0LCBpbmZvKXtcblx0XHQvL2hhbmRsZSBjb2xsaXNpb25zIGhlcmVcblx0XHRcblx0XHRpZihpbmZvLlRoZW0udHlwZSA9PSBcImhlcm9cIil7XG5cdFx0XHRpZihpbmZvLlRoZW0uZml4dHVyZV9uYW1lICE9IFwiYm90dG9tXCIgJiYgaW5mby5NZS5lbnRpdHkuY2FuX2F0dGFjayl7XG5cdFx0XHRcdGluZm8uTWUuZW50aXR5Lm1lX2h1cnRfaGVybyA9IHRydWU7XG5cdFx0XHR9ZWxzZXtcblx0XHRcdFx0aW5mby5NZS5lbnRpdHkuaGl0X3Rha2VuID0gdHJ1ZTsvL3Rha2UgZGFtYWdlIGlmIGVuZW15IGNvbGxpZGVzIGZyb20gYWJvdmUgYW5kIGRpc3RhbmNlIDwgdnVsbmVyYWJpbGl0eSByYWRpdXNcblx0XHRcdFx0aW5mby5NZS5lbnRpdHkuZGFtYWdlX3Rha2VuID0gaW5mby5UaGVtLmVudGl0eS5kYW1hZ2U7XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXG5cdHZhciBlbmRfY29udGFjdCA9IGZ1bmN0aW9uKGNvbnRhY3QsIGluZm8pIHtcblx0XG5cdH07XG5cblx0XG5cdHJldHVybiB7XG5cdFx0Ly8gZGVjbGFyZSBwdWJsaWNcblx0XHRpbml0OiBpbml0LCBcblx0XHRzcGF3bjogc3Bhd24sXG5cdFx0dGlja19BSTogdGlja19BSSxcblx0XHRiZWdpbl9jb250YWN0OiBiZWdpbl9jb250YWN0LFxuXHRcdGVuZF9jb250YWN0OiBlbmRfY29udGFjdCxcblx0fTtcbn0pKCk7XG5cbm1vZHVsZS5leHBvcnRzID0gQW50TG9naWM7XG5cbnZhciBJbmNsdWRlcyA9IHJlcXVpcmUoXCIuLi9JbmNsdWRlcy5qc1wiKTsgdmFyIGluY2x1ZGVfZGF0YSA9IEluY2x1ZGVzLmdldF9pbmNsdWRlX2RhdGEoe1xuXHRjdXJyZW50X21vZHVsZTogXCJBbnRMb2dpY1wiLCBcblx0aW5jbHVkZV9vcHRpb25zOiBJbmNsdWRlcy5jaG9pY2VzLkxPR0lDX1NQRUNJRklDXG59KTsgZXZhbChpbmNsdWRlX2RhdGEubmFtZV9zdGF0ZW1lbnRzKTsgdmFyIGluY2x1ZGUgPSBmdW5jdGlvbigpe2V2YWwoaW5jbHVkZV9kYXRhLm1vZHVsZV9zdGF0ZW1lbnRzKTt9XG4iLCJ2YXIgRXN0ZWVtZWRDb21wYW5pb25Mb2dpYyA9IChmdW5jdGlvbigpe1xuXG5cdFx0XG5cdHZhciBDb21wYW5pb24gPSBmdW5jdGlvbigpe1xuXHRcdC8qIFdpbGwgYmUgaW5zdGFudGlhdGVkIGZvciBldmVyeSBjcmVhdGVkIGVudGl0eSB0byBob2xkIGFsbCB0aGUgaW5mb3JtYXRpb24gXG5cdFx0XHRhYm91dCB0aGUgcGh5c2ljYWwgKG5vdCBncmFwaGljYWwpIHN0YXRlIG9mIHRoZSBlbnRpdHkgaW4gcXVlc3Rpb24uIFxuXHRcdFx0ZGVjbGFyZSB0aGUgcHJvcGVydGllcyBsaWtlIHRoaXM6XG5cdFx0XHR0aGlzLnNvbWVfc3RhdGVfdmFyaWFibGVfaW5pdGlhbF92YWx1ZSA9IDA7XG5cdFx0XHRpbnN0YW50aWF0ZSAobW9zdCBsaWtlbHkgaW4gdGhlIHNwYXduIGZ1bmN0aW9uKSBsaWtlIHRoYXQ6XG5cdFx0XHR2YXIgbmV3X2VudGl0eV9pbnN0YW5jZSA9IG5ldyBFc3RlZW1lZENvbXBhbmlvbigpO1xuXHRcdCovXG5cdFx0dGhpcy5ocCA9IDEwMDtcblx0XHR0aGlzLndvdW5kID0gZmFsc2U7XG5cdFx0dGhpcy5qdW1wcyA9IDA7XG5cdFx0dGhpcy5zY29yZSA9IDA7XG5cdH07XG5cblx0dmFyIGluaXQgPSBmdW5jdGlvbigpe1xuXHRcdC8qIElzIHJhbiBmcm9tIHRoZSBFbnRpdHlDb250cm9sbGVyLmluaXQgb25jZSBkdXJpbmcgZ2FtZSBsb2FkaW5nIFxuXHRcdFx0eW91IHNob3VsZCBhc3NpZ24gdHlwZSB0byB5b3VyIG1vZGVsIGhlcmUgdXNpbmcgdGhlIGlkZW50aWZpY2F0aW9uIGNvbnRyb2xsZXJcblx0XHQqL1xuXHRcdGluY2x1ZGUoKTsgLy8gc2F0aXNmeSByZXF1aXJlbWVudHMsIEdPRVMgRklSU1Rcblx0XHRJZGVudGlmaWNhdGlvbkNvbnRyb2xsZXIuYXNzaWduX3R5cGUoQ29tcGFuaW9uLCBcImNvbXBhbmlvblwiKTtcblx0fTtcblxuXHR2YXIgc3Bhd24gPSBmdW5jdGlvbih4LCB5KXtcblx0XHQvKiBzcGF3biBpbnN0YW5jZSBvZiB0aGlzIGVudGl0eSBhdCB0aGUgZ2l2ZW4gY29vcmRpbmF0ZXNcblx0XHRcdHlvdSB3aWxsIGhhdmUgdG8gY3JlYXRlIG5ldyBlbnRpdHkgaW5zdGFuY2UsIGFzc2lnbiBpdCBpZFxuXHRcdFx0dXNpbmcgdGhlIElkZW50aWZpY2F0aW9uQ29udHJvbGxlci5hc3NpZ25faWQoZW50aXR5X2luc3RhbmNlKSxcblx0XHRcdGFzc2lnbiBpdCBhIGJvZHkgd2hpY2ggeW91IGNhbiBnZXQgdGhyb3VnaCBQaHlzaWNzQ29udHJvbGxlclxuXHRcdFx0ZG8gYW55IG90aGVyIHN0dWZmIHlvdSB3YW50IHRvIGRvIGR1cmluZyBzcGF3bmluZyxcblx0XHRcdGFuZCBmaW5hbGx5IHlvdSBIQVZFIFRPKCEhISkgcmV0dXJuIHRoZSBpbnN0YW5jZSB5b3UganVzdCBjcmVhdGVkIGZyb20gdGhpcyBmdW5jdGlvblxuXHRcdCovXG5cblx0XHR2YXIgY29tcGFuaW9uID0gbmV3IENvbXBhbmlvbigpO1xuXG5cdFx0Y29tcGFuaW9uLmJvZHkgPSBQaHlzaWNzQ29udHJvbGxlci5nZXRfcmVjdGFuZ3VsYXIoe3g6IHgsIHk6IHksIGJvcmRlcl9zZW5zb3JzOiB0cnVlfSwgY29tcGFuaW9uKTtcblxuXHRcdC8vdmFyIGlkID0gSWRlbnRpZmljYXRpb25Db250cm9sbGVyLmFzc2lnbl9pZChjb21wYW5pb24pO1xuXG5cdFx0Y29tcGFuaW9uLmhwID0gMTAwO1xuXHRcdGNvbXBhbmlvbi53b3VuZCA9IGZhbHNlO1xuXHRcdGNvbXBhbmlvbi5qdW1wcyA9IDA7XG5cdFx0Y29tcGFuaW9uLnNjb3JlID0gMDtcblxuXG5cdFx0cmV0dXJuIGNvbXBhbmlvbjtcblx0XG5cdH07XG5cblx0dmFyIHRpY2tfQUkgPSBmdW5jdGlvbihjb21wYW5pb24pe1xuXHRcdC8qIElzIHJhbiBlYWNoIHRpY2sgZnJvbSB0aGUgRW50aXR5Q29udHJvbGxlci51cGRhdGUgZm9yIGV2ZXJ5IHJlZ2lzdGVyZWRcblx0XHRcdGVudGl0eSBvZiB0aGlzIHR5cGUuIEkgZ2l2ZW4gZW50aXR5X2luc3RhbmNlXG5cdFx0Ki9cblxuXHRcdFxuXHRcdGNvbnNvbGUud2FybihcInRpY2tpbmcgY29tcGFuaW9uXCIpO1xuXG5cdFx0XG5cblx0XHR2YXIgY21kcyA9IEtleWJvYXJkQ29udHJvbGxlci5tb3ZlbWVudF9jb21tYW5kcygpO1xuXG5cdFx0dmFyIE1PVkVNRU5UX0VER0UgPSA1MDA7IC8vIHdoZXJlIHRlcnJhaW4gc3RhcnQgc2Nyb2xsaW5nXG5cblxuXHRcdC8vIFRFTVBPUkFSWVlZWVlZWVlZWVlZWVlZWVxuXG5cdFx0aWYoY29tcGFuaW9uLndvdW5kKVxuXHRcdHtcblx0XHRcdGNvbXBhbmlvbi5ocC0tO1xuXHRcdFx0Y29uc29sZS5sb2coXCJUYWtpbmcgZGFtYWdlXCIpO1xuXHRcdFx0R3JhcGhpY3NDb250cm9sbGVyLnVwZGF0ZV9oZWFsdGgoY29tcGFuaW9uLmhwKTtcblx0XHR9XG5cdFx0XG5cdFx0aWYoY29tcGFuaW9uLmhwIDw9IDApXG5cdFx0e1xuXHRcdFx0Y3JlYXRlanMuVGlja2VyLnBhdXNlZCA9IHRydWU7XG5cdFx0XHRjb25zb2xlLmxvZyhcIlBsYXllciBJcyBEZWFkXCIpO1xuXHRcdH1cblx0XHRHcmFwaGljc0NvbnRyb2xsZXIudXBkYXRlX3Njb3JlKGNvbXBhbmlvbi5zY29yZSk7XG5cdH07XG5cblx0dmFyIGJlZ2luX2NvbnRhY3QgPSBmdW5jdGlvbihjb250YWN0LCBpbmZvKXtcblx0XHQvL2NvbnNvbGUubG9nKGluZm8uTWUuaWQsIFwiOlwiLCBcIk15IGZpeHR1cmVcIiwgXCInXCIgKyBpbmZvLk1lLmZpeHR1cmVfbmFtZSArIFwiJ1wiLCBcImNhbWUgaW50byBjb250YWN0IHdpdGggZml4dHVyZVwiLCBcblx0XHRcdC8vXCInXCIgKyBpbmZvLlRoZW0uZml4dHVyZV9uYW1lICsgXCInXCIsIFwib2ZcIiwgaW5mby5UaGVtLmlkKTtcblx0XHRpZiAoaW5mby5NZS5maXh0dXJlX25hbWUgPT0gXCJib3R0b21cIil7XG5cdFx0XHRpbmZvLk1lLmVudGl0eS5qdW1wcyA9IDA7XG5cdFx0fVxuXHRcdGlmIChpbmZvLk1lLmZpeHR1cmVfbmFtZSA9PSBcInRvcFwiKXtcblx0XHRcdHRha2VfaGl0KGluZm8uTWUuZW50aXR5LCAxKTtcblx0XHR9XG5cdFx0XG5cdFx0aWYoaW5mby5NZS5maXh0dXJlX25hbWUgIT0gXCJib3R0b21cIiAmJiBpbmZvLlRoZW0uZW50aXR5LmNhbl9hdHRhY2spXG5cdFx0e1xuXHRcdCAgICBpbmZvLk1lLmVudGl0eS53b3VuZCA9IHRydWU7XG5cdFx0ICAgIGFkZF9zY29yZShpbmZvLk1lLmVudGl0eSwgMTAwKTtcblx0XHR9XG5cdFx0XHRcdFxuXHR9O1xuXHRcblx0dmFyIGFkZF9zY29yZSA9IGZ1bmN0aW9uIChjb21wYW5pb24sIGFtb3VudCkge1xuXHQgICAgY29tcGFuaW9uLnNjb3JlICs9IGFtb3VudDtcblx0fVxuXHRcblxuXHR2YXIgdGFrZV9oaXQgPSBmdW5jdGlvbihjb21wYW5pb24sIGFtb3VudCl7XG5cdCAgICBjb21wYW5pb24uaHAgLT0gYW1vdW50O1xuXHRcdC8vR3JhcGhpY3NDb250cm9sbGVyLnVwZGF0ZV9oZWFsdGgoY29tcGFuaW9uLmhwKTtcblx0fVxuXG5cdHZhciBlbmRfY29udGFjdCA9IGZ1bmN0aW9uKGNvbnRhY3QsIGluZm8pe1xuXHRcdFx0XG5cdFx0aW5mby5NZS5lbnRpdHkud291bmQgPSBmYWxzZTtcblx0fTtcblxuXHR2YXIgbW92ZV9yaWdodCA9IGZ1bmN0aW9uKGNvbXBhbmlvbil7XG5cdFx0dmFyIGJvZHkgPSBjb21wYW5pb24uYm9keTtcblx0XHR2YXIgdmVsb2NpdHkgPSBib2R5LkdldExpbmVhclZlbG9jaXR5KCk7XG5cdFx0dmVsb2NpdHkueCA9IDU7XG5cdFx0Ym9keS5TZXRMaW5lYXJWZWxvY2l0eSh2ZWxvY2l0eSk7IC8vIGJvZHkuU2V0TGluZWFyVmVsb2NpdHkobmV3IGIyVmVjMig1LCAwKSk7IHdvdWxkIHdvcmsgdG9vXG5cdFx0Ym9keS5TZXRBd2FrZSh0cnVlKTtcblx0XHQvL2NvbXBhbmlvbi54ICs9IDEwOyAvLyBvbGRcblx0XHQvL2NvbXBhbmlvbi54ID0gKGJvZHkuR2V0UG9zaXRpb24oKS54ICsgMS41LzIpICogMzAgOyBcblx0fTtcblxuXHR2YXIganVtcCA9IGZ1bmN0aW9uKGNvbXBhbmlvbil7XG5cdCAgICB2YXIgYm9keSA9IGNvbXBhbmlvbi5ib2R5O1xuXHRcdGlmIChjb21wYW5pb24uanVtcHMgPT0gMCl7XG5cdFx0ICAgIGJvZHkuQXBwbHlJbXB1bHNlKG5ldyBCMmQuYjJWZWMyKDAsIC0xMDApLCBib2R5LkdldFdvcmxkQ2VudGVyKCkpO1xuXHRcdCAgICBjb21wYW5pb24uanVtcHMgKz0gMTtcblx0XHR9XG5cdFx0ZWxzZSBpZiAoY29tcGFuaW9uLmp1bXBzID09IDEgJiYgYm9keS5HZXRMaW5lYXJWZWxvY2l0eSgpLnkgPiAtMSkge1xuXHRcdCAgICBib2R5LkFwcGx5SW1wdWxzZShuZXcgQjJkLmIyVmVjMigwLCAtMTAwKSwgYm9keS5HZXRXb3JsZENlbnRlcigpKTtcblx0XHQgICAgY29tcGFuaW9uLmp1bXBzICs9IDE7XG5cdFx0fVxuXG5cdFx0Ly9jb21wYW5pb24ueSA9IGJvZHkuR2V0UG9zaXRpb24oKS55ICogMzA7XG5cdFxuXHR9O1xuXG5cdHZhciBzZXRfY29vcmRpbmF0ZXMgPSBmdW5jdGlvbihwb3NpdGlvbl92ZWN0b3IsIGNvbXBhbmlvbil7XG5cdFx0Ly8gVE9ETzogcmVtb3ZlO1xuXHRcdC8vIHRlbXBvcmFyeS90ZXN0aW5nXG5cdFx0Y29tcGFuaW9uLnggPSAocG9zaXRpb25fdmVjdG9yLnggLSAxLjUvMikgKiAzMCA7XG5cdFx0Y29tcGFuaW9uLnkgPSAocG9zaXRpb25fdmVjdG9yLnkgKyAyLjUvMikgKiAzMCA7XG5cblx0fTtcblxuXHR2YXIgYjJiX2dldF9jb29yZGluYXRlcyA9IGZ1bmN0aW9uKGNvbXBhbmlvbil7XG5cdFx0cmV0dXJuIGNvbXBhbmlvbi5ib2R5LkdldFdvcmxkQ2VudGVyKCk7XG5cdH07XG5cblx0dmFyIG1vdmVfbGVmdCA9IGZ1bmN0aW9uKGNvbXBhbmlvbil7XG5cdFx0dmFyIHZlbG9jaXR5ID0gY29tcGFuaW9uLmJvZHkuR2V0TGluZWFyVmVsb2NpdHkoKTtcblx0XHR2ZWxvY2l0eS54ID0gLTU7XG5cdFx0Y29tcGFuaW9uLmJvZHkuU2V0TGluZWFyVmVsb2NpdHkodmVsb2NpdHkpOyAvLyBjb21wYW5pb24uU2V0TGluZWFyVmVsb2NpdHkobmV3IGIyVmVjMig1LCAwKSk7IHdvdWxkIHdvcmsgdG9vXG5cdFx0Y29tcGFuaW9uLmJvZHkuU2V0QXdha2UodHJ1ZSk7XG5cdH07XG5cblx0dmFyIG1vdmVfcmlnaHQgPSBmdW5jdGlvbihjb21wYW5pb24pe1xuXHRcdHZhciB2ZWxvY2l0eSA9IGNvbXBhbmlvbi5ib2R5LkdldExpbmVhclZlbG9jaXR5KCk7XG5cdFx0dmVsb2NpdHkueCA9ICs1O1xuXHRcdGNvbXBhbmlvbi5ib2R5LlNldExpbmVhclZlbG9jaXR5KHZlbG9jaXR5KTsgLy8gY29tcGFuaW9uLlNldExpbmVhclZlbG9jaXR5KG5ldyBiMlZlYzIoNSwgMCkpOyB3b3VsZCB3b3JrIHRvb1xuXHRcdGNvbXBhbmlvbi5ib2R5LlNldEF3YWtlKHRydWUpO1xuXHR9O1xuXG5cdHZhciBtb3ZlID0gZnVuY3Rpb24ob2Zmc2V0X3gsIG9mZnNldF95LCBjb21wYW5pb24pe1xuXHRcdC8vIHVuaW1wbGVtZW50ZWRcblx0XHQvLyBzaG91bGQgaXQgaGFyZC1zZXQgcG9zaXRpb24gKG5vdCBzYWZlISlcblx0XHQvLyBvciBqdXN0IGFsbG93IHRvIHNldCBhbnkgdmVsb2NpdHkvaW1wdWxzZSB2ZWN0b3I/XG5cdH07XG5cblx0cmV0dXJuIHtcblx0XHQvLyBkZWNsYXJlIHB1YmxpY1xuXHRcdGluaXQ6IGluaXQsIFxuXHRcdHNwYXduOiBzcGF3bixcblx0XHR0aWNrX0FJOiB0aWNrX0FJLFxuXHRcdGJlZ2luX2NvbnRhY3Q6IGJlZ2luX2NvbnRhY3QsXG5cdFx0ZW5kX2NvbnRhY3Q6IGVuZF9jb250YWN0LFxuXHR9O1xufSkoKTtcblxubW9kdWxlLmV4cG9ydHMgPSBFc3RlZW1lZENvbXBhbmlvbkxvZ2ljO1xuXG52YXIgSW5jbHVkZXMgPSByZXF1aXJlKFwiLi4vSW5jbHVkZXMuanNcIik7IHZhciBpbmNsdWRlX2RhdGEgPSBJbmNsdWRlcy5nZXRfaW5jbHVkZV9kYXRhKHtcblx0Y3VycmVudF9tb2R1bGU6IFwiRXN0ZWVtZWRDb21wYW5pb25Mb2dpY1wiLCBcblx0aW5jbHVkZV9vcHRpb25zOiBJbmNsdWRlcy5jaG9pY2VzLkxPR0lDX1NQRUNJRklDXG59KTsgZXZhbChpbmNsdWRlX2RhdGEubmFtZV9zdGF0ZW1lbnRzKTsgdmFyIGluY2x1ZGUgPSBmdW5jdGlvbigpe2V2YWwoaW5jbHVkZV9kYXRhLm1vZHVsZV9zdGF0ZW1lbnRzKTt9XG4iLCJ2YXIgR3JpZmZpbkxvZ2ljID0gKGZ1bmN0aW9uKCl7XG4gICBcblx0dmFyIEdyaWZmaW4gPSBmdW5jdGlvbigpe1xuXHRcdC8qIFdpbGwgYmUgaW5zdGFudGlhdGVkIGZvciBldmVyeSBjcmVhdGVkIGVudGl0eSB0byBob2xkIGFsbCB0aGUgaW5mb3JtYXRpb24gXG5cdFx0XHRhYm91dCB0aGUgcGh5c2ljYWwgKG5vdCBncmFwaGljYWwpIHN0YXRlIG9mIHRoZSBlbnRpdHkgaW4gcXVlc3Rpb24uIFxuXHRcdFx0ZGVjbGFyZSB0aGUgcHJvcGVydGllcyBsaWtlIGVudGl0eTpcblx0XHRcdGVudGl0eS5zb21lX3N0YXRlX3ZhcmlhYmxlX2luaXRpYWxfdmFsdWUgPSAwO1xuXHRcdFx0aW5zdGFudGlhdGUgKG1vc3QgbGlrZWx5IGluIHRoZSBzcGF3biBmdW5jdGlvbikgbGlrZSB0aGF0OlxuXHRcdFx0dmFyIG5ld19lbnRpdHlfaW5zdGFuY2UgPSBuZXcgR3JpZmZpbigpO1xuXHRcdCovXG5cdFx0dmFyIGVudGl0eSA9IEVudGl0eUNvbnRyb2xsZXIuY3JlYXRlX2Fic3RyYWN0X2VudGl0eSgpO1xuXHRcdFxuXHRcdGVudGl0eS5oZXJvX2h1cnRfbWUgPSBmYWxzZTtcblx0XHRlbnRpdHkubWVfaHVydF9oZXJvID0gZmFsc2U7XG5cdFx0ZW50aXR5LmRlYXRoX3RpY2sgPSAwO1xuXG5cdFx0Ly9zZXQgeW91ciBnYW1lIGxvZ2ljIHBhcmFtZXRlcnMgaGVyZVxuXHRcdC8vZW50aXR5Lm9iamVjdF9pZCA9IDE7IC8vaGFyZGNvZGUgYSB1bmlxdWUgaWRlbnRpZmllciBmb3IgZWFjaCBuZXcgZW5lbXkgY2xhc3Ncblx0XHRlbnRpdHkuaHAgPSAzO1xuXHRcdGVudGl0eS5zcGVlZCA9IDY7XG5cdFx0ZW50aXR5LmRhbWFnZSA9IDEwO1xuXHRcdGVudGl0eS5wb2ludF92YWx1ZSA9IDEwMDtcblx0XHQvL2VudGl0eS5hdHRhY2tfY29vbGRvd24gPSA0OyAvL3VzZSBlbnRpdHkgZm9yIGVuZW1pZXMgd2hvIG5lZWRcblx0XHRlbnRpdHkuY2FuX2F0dGFjayA9IHRydWU7Ly91c2UgZW50aXR5IGZvciBlbmVtaWVzIHdobyBhbHRlcm5hdGUgYmV0d2VlbiBcblx0XHQvL2VudGl0eS5jb29sZG93bl90aW1lcj0tMTtcblx0XHRlbnRpdHkuQUlfc3RhdGUgPSBcImZseVwiOy8vdXNlIGVudGl0eSB0byBrZWVwIHRyYWNrIG9mIHRoZSBlbmVteSdzIEFJIHN0YXRlXG5cdFx0ZW50aXR5LmFsaXZlZmxhZyA9IHRydWU7XG5cdFx0ZW50aXR5LnVuaHVydGZsYWcgPSB0cnVlO1xuXHRcdGVudGl0eS5uZWVkc19ncmFwaGljc191cGRhdGUgPSBmYWxzZTtcblxuXHRcdGVudGl0eS5kaXJlY3Rpb24gPSBmYWxzZTtcblx0XHRlbnRpdHkuZmx5X2ZvcmNlID0gMTAwO1xuXHRcdFxuXHRcdHJldHVybiBlbnRpdHk7XG5cdH07XG5cblx0dmFyIGluaXQgPSBmdW5jdGlvbigpe1xuXHRcdC8qIElzIHJhbiBmcm9tIHRoZSBFbnRpdHlDb250cm9sbGVyLmluaXQgb25jZSBkdXJpbmcgZ2FtZSBsb2FkaW5nIFxuXHRcdCBcdHlvdSBzaG91bGQgYXNzaWduIHR5cGUgdG8geW91ciBtb2RlbCBoZXJlIHVzaW5nIHRoZSBpZGVudGlmaWNhdGlvbiBjb250cm9sbGVyXG5cdFx0ICovXG5cdFx0aW5jbHVkZSgpOyAvLyBzYXRpc2Z5IHJlcXVpcmVtZW50cywgR09FUyBGSVJTVFxuXHRcdElkZW50aWZpY2F0aW9uQ29udHJvbGxlci5hc3NpZ25fdHlwZShHcmlmZmluLCBcIkdyaWZmaW5cIik7XG5cdH07XG5cblx0dmFyIHNwYXduID0gZnVuY3Rpb24oeCwgeSl7XG5cdFx0Lyogc3Bhd24gaW5zdGFuY2Ugb2YgdGhpcyBlbnRpdHkgYXQgdGhlIGdpdmVuIGNvb3JkaW5hdGVzXG5cdFx0XHR5b3Ugd2lsbCBoYXZlIHRvIGNyZWF0ZSBuZXcgZW50aXR5IGluc3RhbmNlLCBhc3NpZ24gaXQgaWRcblx0XHRcdHVzaW5nIHRoZSBJZGVudGlmaWNhdGlvbkNvbnRyb2xsZXIuYXNzaWduX2lkKGVudGl0eV9pbnN0YW5jZSksXG5cdFx0XHRhc3NpZ24gaXQgYSBib2R5IHdoaWNoIHlvdSBjYW4gZ2V0IHRocm91Z2ggUGh5c2ljc0NvbnRyb2xsZXJcblx0XHRcdGRvIGFueSBvdGhlciBzdHVmZiB5b3Ugd2FudCB0byBkbyBkdXJpbmcgc3Bhd25pbmcsXG5cdFx0XHRhbmQgZmluYWxseSB5b3UgSEFWRSBUTyghISEpIHJldHVybiB0aGUgaW5zdGFuY2UgeW91IGp1c3QgY3JlYXRlZCBmcm9tIHRoaXMgZnVuY3Rpb25cblx0XHQqL1xuXG5cdFx0dmFyIG5ld19HcmlmZmluID0gbmV3IEdyaWZmaW4oKTtcblx0XHRuZXdfR3JpZmZpbi50eXBlID0gXCJHcmlmZmluXCI7XG5cdFx0dmFyIGlkID0gSWRlbnRpZmljYXRpb25Db250cm9sbGVyLmFzc2lnbl9pZChuZXdfR3JpZmZpbik7XG5cblx0XHRuZXdfR3JpZmZpbi5ib2R5ID0gUGh5c2ljc0NvbnRyb2xsZXIuZ2V0X3JlY3Rhbmd1bGFyKHt4OiB4LCB5OiB5LCBib3JkZXJfc2Vuc29yczogdHJ1ZX0sIG5ld19HcmlmZmluKTtcdFxuXG5cdFx0cmV0dXJuIG5ld19HcmlmZmluO1xuXG5cdH07XG5cblx0dmFyIHRpY2tfQUkgPSBmdW5jdGlvbihHcmlmZmluKXtcblx0XHQvKiBJcyByYW4gZWFjaCB0aWNrIGZyb20gdGhlIEVudGl0eUNvbnRyb2xsZXIudXBkYXRlIGZvciBldmVyeSByZWdpc3RlcmVkXG5cdFx0XHRlbnRpdHkgb2YgdGhpcyB0eXBlLiBJIGdpdmVuIGVudGl0eV9pbnN0YW5jZVxuXHRcdCovXG5cblx0XHQvL2lmIGRlYWQsIGRpZVxuXHRcdGlmIChHcmlmZmluLmhwIDw9IDApIHtcblx0XHRcdEdyaWZmaW4uZGllKCk7XG5cdFx0fWVsc2V7IC8vIEdyaWZmaW4uaHAgPj0gMVxuXHRcdFx0aWYgKEdyaWZmaW4uaW5fYWlyKCkpe1xuXHRcdFx0XHRHcmlmZmluLmNoYW5nZV9hbmltYXRpb24oXCJmbHlcIik7XG5cdFx0XHR9ZWxzZXtcblx0XHRcdFx0R3JpZmZpbi5jaGFuZ2VfYW5pbWF0aW9uKFwid2Fsa1wiKTtcblx0XHRcdH1cblx0XHRcdGlmIChHcmlmZmluLmFuaW1hdGlvbiA9PSBcIndhbGtcIil7XG5cdFx0XHRcdEdyaWZmaW4ubW92ZShHcmlmZmluLnNwZWVkKTtcblx0XHRcdH1cblx0XHRcdGlmIChHcmlmZmluLmFuaW1hdGlvbiA9PSBcImZseVwiKXtcblx0XHRcdCAgICBHcmlmZmluLmp1bXAoKDIgKiBHcmlmZmluLmZseV9mb3JjZSAqIEdyaWZmaW4uZGlyZWN0aW9uKSAtIEdyaWZmaW4uZmx5X2ZvcmNlLCBHcmlmZmluLmZseV9mb3JjZS8yKTtcblx0XHRcdH1cblx0XHRcdGlmIChHcmlmZmluLmhpdF90YWtlbil7XG5cdFx0XHRcdEdyaWZmaW4udGFrZV9kYW1hZ2UoKTtcblx0XHRcdFx0R3JpZmZpbi5jaGFuZ2VfYW5pbWF0aW9uKFwiaW5qdXJ5XCIpO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcblxuXHQvLyAvLyAvL1NldCB1cCBDb2xsaXNpb24gaGFuZGxlclxuXHRcblx0XG5cdHZhciBiZWdpbl9jb250YWN0ID0gZnVuY3Rpb24oY29udGFjdCwgaW5mbyl7XG5cdFx0Ly9oYW5kbGUgY29sbGlzaW9ucyBoZXJlXG5cdFx0XG5cdFx0aWYoaW5mby5UaGVtLnR5cGUgPT0gXCJoZXJvXCIpe1xuXHRcdFx0aWYoaW5mby5UaGVtLmZpeHR1cmVfbmFtZSAhPSBcImJvdHRvbVwiICYmIGluZm8uTWUuZW50aXR5LmNhbl9hdHRhY2spe1xuXHRcdFx0XHRpbmZvLk1lLmVudGl0eS5tZV9odXJ0X2hlcm8gPSB0cnVlO1xuXHRcdFx0fWVsc2V7XG5cdFx0XHRcdGluZm8uTWUuZW50aXR5LmhpdF90YWtlbiA9IHRydWU7Ly90YWtlIGRhbWFnZSBpZiBlbmVteSBjb2xsaWRlcyBmcm9tIGFib3ZlIGFuZCBkaXN0YW5jZSA8IHZ1bG5lcmFiaWxpdHkgcmFkaXVzXG5cdFx0XHRcdGluZm8uTWUuZW50aXR5LmRhbWFnZV90YWtlbiA9IGluZm8uVGhlbS5lbnRpdHkuZGFtYWdlO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcblxuXHR2YXIgZW5kX2NvbnRhY3QgPSBmdW5jdGlvbihjb250YWN0LCBpbmZvKXtcblx0XG5cdH07XG5cblx0XG5cdHJldHVybiB7XG5cdFx0Ly8gZGVjbGFyZSBwdWJsaWNcblx0XHRpbml0OiBpbml0LCBcblx0XHRzcGF3bjogc3Bhd24sXG5cdFx0dGlja19BSTogdGlja19BSSxcblx0XHRiZWdpbl9jb250YWN0OiBiZWdpbl9jb250YWN0LFxuXHRcdGVuZF9jb250YWN0OiBlbmRfY29udGFjdCxcblx0fTtcbn0pKCk7XG5cbm1vZHVsZS5leHBvcnRzID0gR3JpZmZpbkxvZ2ljO1xuXG52YXIgSW5jbHVkZXMgPSByZXF1aXJlKFwiLi4vSW5jbHVkZXMuanNcIik7IHZhciBpbmNsdWRlX2RhdGEgPSBJbmNsdWRlcy5nZXRfaW5jbHVkZV9kYXRhKHtcblx0Y3VycmVudF9tb2R1bGU6IFwiR3JpZmZpbkxvZ2ljXCIsIFxuXHRpbmNsdWRlX29wdGlvbnM6IEluY2x1ZGVzLmNob2ljZXMuTE9HSUNfU1BFQ0lGSUNcbn0pOyBldmFsKGluY2x1ZGVfZGF0YS5uYW1lX3N0YXRlbWVudHMpOyB2YXIgaW5jbHVkZSA9IGZ1bmN0aW9uKCl7ZXZhbChpbmNsdWRlX2RhdGEubW9kdWxlX3N0YXRlbWVudHMpO31cbiIsInZhciBIZXJvTG9naWMgPSAoZnVuY3Rpb24oKXtcblxuXHR2YXIgSGVybyA9IGZ1bmN0aW9uKCl7XG5cdFx0LyogV2lsbCBiZSBpbnN0YW50aWF0ZWQgZm9yIGV2ZXJ5IGNyZWF0ZWQgZW50aXR5IHRvIGhvbGQgYWxsIHRoZSBpbmZvcm1hdGlvbiBcblx0XHRcdGFib3V0IHRoZSBwaHlzaWNhbCAobm90IGdyYXBoaWNhbCkgc3RhdGUgb2YgdGhlIGVudGl0eSBpbiBxdWVzdGlvbi4gXG5cdFx0XHRkZWNsYXJlIHRoZSBwcm9wZXJ0aWVzIGxpa2UgdGhpczpcblx0XHRcdHRoaXMuc29tZV9zdGF0ZV92YXJpYWJsZV9pbml0aWFsX3ZhbHVlID0gMDtcblx0XHRcdGluc3RhbnRpYXRlIChtb3N0IGxpa2VseSBpbiB0aGUgc3Bhd24gZnVuY3Rpb24pIGxpa2UgdGhhdDpcblx0XHRcdHZhciBuZXdfZW50aXR5X2luc3RhbmNlID0gbmV3IEhlcm8oKTtcblx0XHQqL1xuXHRcdGVudGl0eSA9IG5ldyBFbnRpdHlDb250cm9sbGVyLmNyZWF0ZV9hYnN0cmFjdF9lbnRpdHkoKTtcblx0XHRcblx0XHRlbnRpdHkuaHAgPSAxMDA7XG5cdFx0ZW50aXR5LnNwZWVkID0gODtcblx0XHRlbnRpdHkuaGl0X3Rha2VuID0gZmFsc2U7XG5cdFx0ZW50aXR5LmRhbWFnZV90YWtlbiA9IDA7XG5cdFx0ZW50aXR5LmRhbWFnZSA9IDE7XG5cdFx0ZW50aXR5LmlzX3dhbGtpbmcgPSBmYWxzZTtcblx0XHRcblx0XHRlbnRpdHkuanVtcHMgPSAwO1xuXHRcdGVudGl0eS5kZWNheV9kdXJhdGlvbiA9IDM1Oy8vdGltZSBiZXR3ZWVuIGRlY2F5IGFuaW1hdGlvbiBhbmQgZGVsZXRpb25cblx0XHRlbnRpdHkuZGVhdGhfZHVyYXRpb24gPSA2MDsvL3RpbWUgYmV0d2VlbiBkZWF0aCBhbmQgZGVsZXRpb25cblx0XHRlbnRpdHkuanVtcF90aWNrPTA7XG5cblx0XHRlbnRpdHkuZGlyZWN0aW9uID0gMTsgLy9kZWZhdWx0IGRpcmVjdGlvbiA9IGxlZnRcblx0XHRcblx0XHRlbnRpdHkubmVlZHNfZ3JhcGhpY3NfdXBkYXRlID0gZmFsc2U7IC8vYWNjZXNzZWQgYnkgcmVuZGVyZXIgZm9yIGFuaW1hdGlvbiBwdXJwb3Nlc1xuXHRcdGVudGl0eS5hbmltYXRpb24gPSBcInN0YW5kXCI7IC8vYWNjZXNzZWQgYnkgcmVuZGVyZXIgZm9yIGFuaW1hdGlvbiBwdXJwb3Nlc1xuXHRcdFxuXHRcdHJldHVybiBlbnRpdHk7XG5cdH07XG5cblx0dmFyIGluaXQgPSBmdW5jdGlvbigpe1xuXHRcdC8qIElzIHJhbiBmcm9tIHRoZSBFbnRpdHlDb250cm9sbGVyLmluaXQgb25jZSBkdXJpbmcgZ2FtZSBsb2FkaW5nIFxuXHRcdFx0eW91IHNob3VsZCBhc3NpZ24gdHlwZSB0byB5b3VyIG1vZGVsIGhlcmUgdXNpbmcgdGhlIGlkZW50aWZpY2F0aW9uIGNvbnRyb2xsZXJcblx0XHQqL1xuXHRcdGluY2x1ZGUoKTsgLy8gc2F0aXNmeSByZXF1aXJlbWVudHMsIEdPRVMgRklSU1Rcblx0XHRJZGVudGlmaWNhdGlvbkNvbnRyb2xsZXIuYXNzaWduX3R5cGUoSGVybywgXCJoZXJvXCIpO1xuXHR9O1xuXG5cdHZhciBzcGF3biA9IGZ1bmN0aW9uKHgsIHkpe1xuXHRcdC8qIHNwYXduIGluc3RhbmNlIG9mIHRoaXMgZW50aXR5IGF0IHRoZSBnaXZlbiBjb29yZGluYXRlc1xuXHRcdFx0eW91IHdpbGwgaGF2ZSB0byBjcmVhdGUgbmV3IGVudGl0eSBpbnN0YW5jZSwgYXNzaWduIGl0IGlkXG5cdFx0XHR1c2luZyB0aGUgSWRlbnRpZmljYXRpb25Db250cm9sbGVyLmFzc2lnbl9pZChlbnRpdHlfaW5zdGFuY2UpLFxuXHRcdFx0YXNzaWduIGl0IGEgYm9keSB3aGljaCB5b3UgY2FuIGdldCB0aHJvdWdoIFBoeXNpY3NDb250cm9sbGVyXG5cdFx0XHRkbyBhbnkgb3RoZXIgc3R1ZmYgeW91IHdhbnQgdG8gZG8gZHVyaW5nIHNwYXduaW5nLFxuXHRcdFx0YW5kIGZpbmFsbHkgeW91IEhBVkUgVE8oISEhKSByZXR1cm4gdGhlIGluc3RhbmNlIHlvdSBqdXN0IGNyZWF0ZWQgZnJvbSB0aGlzIGZ1bmN0aW9uXG5cdFx0Ki9cblxuXG5cdFx0dmFyIGhlcm8gPSBuZXcgSGVybygpO1xuXHRcdGhlcm8udHlwZSA9IFwiaGVyb1wiO1xuXHRcdGhlcm8uYm9keSA9IFBoeXNpY3NDb250cm9sbGVyLmdldF9yZWN0YW5ndWxhcih7eDogeCwgeTogeSwgYm9yZGVyX3NlbnNvcnM6IHRydWV9LCBoZXJvKTtcblxuXHRcdGhlcm8uaHAgPSAxMDA7XG5cdFx0aGVyby53b3VuZCA9IGZhbHNlO1xuXHRcdGhlcm8uanVtcHMgPSAwO1xuXHRcdGhlcm8uc2NvcmUgPSAwO1xuXG5cdFx0cmV0dXJuIGhlcm87XG5cdFxuXHR9O1xuXG5cdHZhciB0aWNrX0FJID0gZnVuY3Rpb24oaGVybyl7XG5cdFx0LyogSXMgcmFuIGVhY2ggdGljayBmcm9tIHRoZSBFbnRpdHlDb250cm9sbGVyLnVwZGF0ZSBmb3IgZXZlcnkgcmVnaXN0ZXJlZFxuXHRcdFx0ZW50aXR5IG9mIHRoaXMgdHlwZS4gSSBnaXZlbiBlbnRpdHlfaW5zdGFuY2Vcblx0XHQqL1xuXHRcdGlmKGhlcm8ucGxheWVyX2lkID09IE5ldHdvcmtDb250cm9sbGVyLmdldF9uZXR3b3JrX2lkKCkpe1xuXHRcdFx0dmFyIGNtZHMgPSBLZXlib2FyZENvbnRyb2xsZXIubW92ZW1lbnRfY29tbWFuZHMoKTtcblx0XHR9ZWxzZXtcblx0XHRcdHZhciBjbWRzID0gS2V5Ym9hcmRDb250cm9sbGVyLmdldF9yZW1vdGVfbW92ZW1lbnQoaGVyby5wbGF5ZXJfaWQpO1xuXHRcdH1cblxuXHRcdGhlcm8uZGlyZWN0aW9uX3ByZXZpb3VzID0gaGVyby5kaXJlY3Rpb247XG5cdFx0aGVyby54X3ByZXZpb3VzID0gaGVyby5ib2R5LkdldFdvcmxkQ2VudGVyKCkueDtcblx0XHRoZXJvLnlfcHJldmlvdXMgPSBoZXJvLmJvZHkuR2V0V29ybGRDZW50ZXIoKS55O1xuICAgICAgIFxuXHRcdGlmKGhlcm8uaHAgPD0gMCl7XG5cdFx0XHRoZXJvLmRpZSgpO1xuXHRcdH1lbHNle1xuXHRcdFx0aGVyby5pc193YWxraW5nID0gZmFsc2U7XHRcblx0XHRcdFxuXHRcdFx0aWYoY21kcyhcInJpZ2h0XCIpKXtcblx0XHRcdFx0IGlmKGhlcm8uanVtcHM9PTApe1xuXHRcdFx0XHRcdGhlcm8uY2hhbmdlX2FuaW1hdGlvbihcIndhbGtcIik7XG5cdFx0XHRcdFx0aGVyby5pc193YWxraW5nID0gdHJ1ZTtcblx0XHRcdFx0fVxuXHRcdFx0XHRoZXJvLmRpcmVjdGlvbiA9IHRydWU7Ly9kaXJlY3Rpb24gPSByaWdodFxuXHRcdFx0XHRoZXJvLm1vdmUoaGVyby5zcGVlZCk7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdGlmKGNtZHMoXCJsZWZ0XCIpKXtcblx0XHRcdFx0aWYoaGVyby5qdW1wcz09MCl7XG5cdFx0XHRcdFx0aGVyby5jaGFuZ2VfYW5pbWF0aW9uKFwid2Fsa1wiKTtcblx0XHRcdFx0XHRoZXJvLmlzX3dhbGtpbmcgPSB0cnVlO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGhlcm8uZGlyZWN0aW9uID0gZmFsc2U7Ly9kaXJlY3Rpb24gPSBsZWZ0XG5cdFx0XHRcdGhlcm8ubW92ZShoZXJvLnNwZWVkKTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0aWYoY21kcyhcImRvd25cIikpe1xuXHRcdFx0XHRzbGFtKGhlcm8pO1xuXHRcdFx0XHRzdG9wX2hlcm8oaGVybyk7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdGlmKGNtZHMoXCJ1cFwiKSl7XG5cdFx0XHRcdGp1bXAoaGVybyk7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdGlmKCFoZXJvLmlzX3dhbGtpbmcgJiYgaGVyby5hbmltYXRpb24gIT0gXCJqdW1wXCIgJiYgaGVyby5ib2R5LkdldExpbmVhclZlbG9jaXR5KCkueSA9PSAwKXtcblx0XHRcdFx0aGVyby5jaGFuZ2VfYW5pbWF0aW9uKFwic3RhbmRcIik7XG5cdFx0XHRcdGhlcm8uanVtcF90aWNrID0gMDtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0aWYoaGVyby5hbmltYXRpb249PVwianVtcFwiKXtcblx0XHRcdFx0aWYoaGVyby5qdW1wX3RpY2sgPT0gMSl7XG5cdFx0XHRcdFx0aGVyby5jaGFuZ2VfYW5pbWF0aW9uKFwianVtcFwiKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRoZXJvLmp1bXBfdGljaysrO1xuXHRcdFx0XHRpZihoZXJvLmp1bXBfdGljayA+PSAyMCl7XG5cdFx0XHRcdFx0aGVyby5jaGFuZ2VfYW5pbWF0aW9uKFwiZmluaXNoXCIpO1xuXHRcdFx0XHRcdGlmKGhlcm8uanVtcHMgPT0gMCl7XG5cdFx0XHRcdFx0XHRoZXJvLmFuaW1hdGlvbiA9IFwiZmluaXNoXCI7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XG5cdFx0XHRpZihoZXJvLmhpdF90YWtlbil7XG5cdFx0XHQgICAgaGVyby50YWtlX2RhbWFnZSgpO1xuXHRcdFx0ICAgIGNvbnNvbGUubG9nKFwiaG9sZCBvblwiKTtcblx0XHRcdH1cblx0XHRcblx0XHRcdGlmIChoZXJvLmJvZHkuR2V0V29ybGRDZW50ZXIoKS54IDwgV29ybGRDb250cm9sbGVyLmdldF9tb3ZlbWVudF9lZGdlKCkgKyBoZXJvLmJvZHkuR2V0VXNlckRhdGEoKS5kZWYud2lkdGgvMil7XG5cdFx0XHRcdHN0b3BfaGVybyhoZXJvKTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cblxuXHR2YXIgYmVnaW5fY29udGFjdCA9IGZ1bmN0aW9uKGNvbnRhY3QsIGluZm8pe1xuXHRcdHZhciBoZXJvID0gaW5mby5NZS5lbnRpdHk7XG5cdFx0dmFyIG90aGVyID0gaW5mby5UaGVtLmVudGl0eTtcblx0XHRpZiAob3RoZXIudHlwZSA9PSBcInBpenphXCIpIHtcblx0XHQgICAgaWYgKGhlcm8uaHAgPD0gOTApIHtcblx0XHQgICAgICAgIGhlcm8uZGFtYWdlX3Rha2VuID0gb3RoZXIucmVnZW47XG5cdFx0ICAgICAgICBoZXJvLmhpdF90YWtlbiA9IHRydWU7XG5cdFx0ICAgIH1cblx0XHQgICAgZWxzZSBpZiAoaGVyby5ocCAhPSAxMDApIHtcblx0XHQgICAgICAgIGhlcm8uZGFtYWdlX3Rha2VuID0gaGVyby5ocCAtIDEwMDtcblx0XHQgICAgICAgIGhlcm8uaGl0X3Rha2VuID0gdHJ1ZTtcblx0XHQgICAgfVxuXHRcdH1cblx0XHRpZiAoaW5mby5NZS5maXh0dXJlX25hbWUgPT0gXCJib3R0b21cIil7XG5cdFx0XHRpZihpbmZvLlRoZW0uZml4dHVyZV9uYW1lID09IFwidG9wXCIgfHwgb3RoZXIua2luZCA9PSAxIHx8IG90aGVyLmtpbmQgPT0gMil7XG5cdFx0XHRcdGhlcm8uanVtcHMgPSAwOy8vaWYgY29sbGlkaW5nIHdpdGggc3VyZmFjZSwgcmVzZXQganVtcHNcblx0XHRcdH1cblx0XHRcdGlmKG90aGVyLmtpbmQgPT0gMyl7XG5cdFx0XHRcdGlmIChoZXJvLmhwID4gMCl7XG5cdFx0XHRcdFx0aGVyby5oaXRfdGFrZW4gPSB0cnVlO1xuXHRcdFx0XHRcdGhlcm8uZGFtYWdlX3Rha2VuID0gb3RoZXIuZGFtYWdlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGlmKGluZm8uTWUuZml4dHVyZV9uYW1lICE9IFwiYm90dG9tXCIgJiYgb3RoZXIuY2FuX2F0dGFjayl7XG5cdFx0XHRpZihvdGhlci5raW5kID09IG51bGwpe1xuXHRcdFx0XHR2YXIgbXlfZXh0ZW50cyA9IGhlcm8uZ2V0X2ZpeHR1cmUoaGVybyxcIm1haW5cIikuR2V0QUFCQigpLkdldEV4dGVudHMoKTtcblx0XHRcdFx0dmFyIG15X2Nvb3JkaW5hdGVzID0gaGVyby5ib2R5LkdldFdvcmxkQ2VudGVyKCk7XG5cdFx0XHRcdHZhciBvdGhlcl9leHRlbnRzID0gaGVyby5nZXRfZml4dHVyZShvdGhlcixcIm1haW5cIikuR2V0QUFCQigpLkdldEV4dGVudHMoKTtcblx0XHRcdFx0dmFyIG90aGVyX2Nvb3JkaW5hdGVzID0gb3RoZXIuYm9keS5HZXRXb3JsZENlbnRlcigpO1xuXHRcdFx0XHQvL3ByZXZlbnRzIHRha2luZyBkYW1hZ2Ugd2hpbGUgb24gdG9wIG9mIGVuZW1pZXNcblx0XHRcdFx0aWYgKCEobXlfY29vcmRpbmF0ZXMueSA8PSBvdGhlcl9jb29yZGluYXRlcy55IC0gKG15X2V4dGVudHMueSArIG90aGVyX2V4dGVudHMueSAtIDAuNSkpKSB7XG5cdFx0XHRcdFx0aWYgKGhlcm8uaHAgPiAwKSB7XG5cdFx0XHRcdFx0XHRoZXJvLmhpdF90YWtlbiA9IHRydWU7XG5cdFx0XHRcdFx0XHRoZXJvLmRhbWFnZV90YWtlbiA9IG90aGVyLmRhbWFnZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1lbHNley8vaWYgdGhleSdyZSBzcGlrZXMsIHRha2UgZGFtYWdlIG5vIG1hdHRlciB3aGF0XG5cdFx0XHRcdGhlcm8uaGl0X3Rha2VuID0gdHJ1ZTtcblx0XHRcdFx0aGVyby5kYW1hZ2VfdGFrZW4gPSBvdGhlci5kYW1hZ2U7XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXG5cdHZhciBlbmRfY29udGFjdCA9IGZ1bmN0aW9uKGNvbnRhY3QsIGluZm8pe1xuXHRcdFx0XG5cdFx0Ly9pbmZvLk1lLmVudGl0eS5oaXRfdGFrZW4gPSBmYWxzZTtcblx0fTtcblxuXHR2YXIgc3RvcF9oZXJvID0gZnVuY3Rpb24gKGhlcm8pIHtcblx0XHQvL3ZhciBib2R5ID0gaGVyby5ib2R5O1xuXHRcdC8vdmFyIHZlbG9jaXR5ID0gYm9keS5HZXRMaW5lYXJWZWxvY2l0eSgpO1xuXHRcdC8vdmVsb2NpdHkueCA9IDA7XG5cdFx0Ly9ib2R5LlNldExpbmVhclZlbG9jaXR5KHZlbG9jaXR5KTsgLy8gYm9keS5TZXRMaW5lYXJWZWxvY2l0eShuZXcgYjJWZWMyKDUsIDApKTsgd291bGQgd29yayB0b29cblx0XHQvL2JvZHkuU2V0QXdha2UodHJ1ZSk7XG5cblx0XHR2YXIgYm9keSA9IGhlcm8uYm9keTtcblx0XHR2YXIgdyA9IGhlcm8uYm9keS5HZXRVc2VyRGF0YSgpLmRlZi53aWR0aC8yO1xuXHRcdHZhciBwb3MgPSBuZXcgQjJkLmIyVmVjMihXb3JsZENvbnRyb2xsZXIuZ2V0X21vdmVtZW50X2VkZ2UoKSArIHcsIGJvZHkuR2V0V29ybGRDZW50ZXIoKS55KVxuXHRcdHZhciB2ZWwgPSBib2R5LkdldExpbmVhclZlbG9jaXR5KCk7XG5cdFx0aWYodmVsLnggPCAwIHx8IGJvZHkuR2V0V29ybGRDZW50ZXIoKS54ID4gcG9zLngpe1xuXHRcdFx0dmFyIHZlbCA9IG5ldyBCMmQuYjJWZWMyKDAsIHZlbC55KTtcblx0XHRcdGJvZHkuU2V0TGluZWFyVmVsb2NpdHkodmVsKTtcblx0XHR9XG5cblx0ICAgIGJvZHkuU2V0QXdha2UodHJ1ZSk7XG5cdH1cblxuXHR2YXIgc2xhbSA9IGZ1bmN0aW9uKGhlcm8pe1xuXHQgICAgdmFyIGJvZHkgPSBoZXJvLmJvZHk7XG5cdCAgICBib2R5LkFwcGx5SW1wdWxzZShuZXcgQjJkLmIyVmVjMigwLCAyMCksIGJvZHkuR2V0V29ybGRDZW50ZXIoKSk7XG5cdH07XG5cdHZhciBtb3ZlX2xlZnQgPSBmdW5jdGlvbihoZXJvKXtcblx0XHR2YXIgYm9keSA9IGhlcm8uYm9keTtcblx0XHR2YXIgdmVsb2NpdHkgPSBib2R5LkdldExpbmVhclZlbG9jaXR5KCk7XG5cdFx0dmVsb2NpdHkueCA9IC01O1xuXHRcdGJvZHkuU2V0TGluZWFyVmVsb2NpdHkodmVsb2NpdHkpOyAvLyBib2R5LlNldExpbmVhclZlbG9jaXR5KG5ldyBiMlZlYzIoNSwgMCkpOyB3b3VsZCB3b3JrIHRvb1xuXHRcdGJvZHkuU2V0QXdha2UodHJ1ZSk7XG5cdFx0Ly9oZXJvLnggKz0gMTA7IC8vIG9sZFxuXHRcdC8vaGVyby54ID0gKGJvZHkuR2V0UG9zaXRpb24oKS54ICsgMS41LzIpICogMzAgOyBcblx0fTtcblxuXHR2YXIganVtcCA9IGZ1bmN0aW9uKGhlcm8pe1xuXHQgICAgdmFyIGJvZHkgPSBoZXJvLmJvZHk7XG5cdCAgICB2YXIgdyA9IGhlcm8uYm9keS5HZXRVc2VyRGF0YSgpLmRlZi53aWR0aCAvIDI7XG5cdCAgICB2YXIgcG9zID0gbmV3IEIyZC5iMlZlYzIoV29ybGRDb250cm9sbGVyLmdldF9tb3ZlbWVudF9lZGdlKCkgKyB3LCBib2R5LkdldFdvcmxkQ2VudGVyKCkueSlcblx0ICAgIHZhciB2ZWwgPSBib2R5LkdldExpbmVhclZlbG9jaXR5KCk7XG5cdFx0Ly9jb25zb2xlLmxvZyhoZXJvLmp1bXBzKTtcblx0XHRpZiAoaGVyby5qdW1wcyA9PSAwKXtcblx0XHRcdGhlcm8uY2hhbmdlX2FuaW1hdGlvbihcImp1bXBcIik7XG5cdFx0XHR2YXIgdmVsID0gbmV3IEIyZC5iMlZlYzIodmVsLngsIC0xOCk7XG5cdFx0XHRib2R5LlNldExpbmVhclZlbG9jaXR5KHZlbCk7XG5cdFx0XHRoZXJvLmJvZHkuU2V0QXdha2UodHJ1ZSk7XG5cdFx0ICAgIGhlcm8uanVtcHMgKz0gMTtcblx0XHR9XG5cdFx0ZWxzZSBpZiAoaGVyby5qdW1wcyA9PSAxICYmIGJvZHkuR2V0TGluZWFyVmVsb2NpdHkoKS55ID4gLTEpe1xuXHRcdFx0aGVyby5jaGFuZ2VfYW5pbWF0aW9uKFwianVtcFwiKTtcblx0XHRcdHZhciBtaW5fY2hlY2sgPSB2ZWwueSAtIDE4O1xuXHRcdFx0aWYgKG1pbl9jaGVjayA+IC05KXtcblx0XHRcdFx0bWluX2NoZWNrID0gLTk7XG5cdFx0XHR9XG5cdFx0XHR2YXIgdmVsID0gbmV3IEIyZC5iMlZlYzIodmVsLngsIG1pbl9jaGVjayk7XG5cdFx0XHRib2R5LlNldExpbmVhclZlbG9jaXR5KHZlbCk7XG5cdFx0XHRoZXJvLmJvZHkuU2V0QXdha2UodHJ1ZSk7XG5cdFx0XHRoZXJvLmp1bXBzICs9IDE7XG5cdFx0fVxuXHR9O1xuXG5cdFxuXHR2YXIgYjJiX2dldF9jb29yZGluYXRlcyA9IGZ1bmN0aW9uKGhlcm8pe1xuXHRcdHJldHVybiBoZXJvLmJvZHkuR2V0V29ybGRDZW50ZXIoKTtcblx0fTtcblxuXHQvL3ZhciBtb3ZlX2xlZnQgPSBmdW5jdGlvbihoZXJvKXtcblx0XHQvL3ZhciB2ZWxvY2l0eSA9IGhlcm8uYm9keS5HZXRMaW5lYXJWZWxvY2l0eSgpO1xuXHRcdC8vbW92ZShoZXJvLCB2ZWxvY2l0eS54IC0gNSwgdmVsb2NpdHkueSlcblxuXHQvL307XG5cblx0Ly92YXIgbW92ZV9yaWdodCA9IGZ1bmN0aW9uKGhlcm8pe1xuXHRcdC8vdmFyIHZlbG9jaXR5ID0gaGVyby5ib2R5LkdldExpbmVhclZlbG9jaXR5KCk7XG5cdFx0Ly9tb3ZlKGhlcm8sIHZlbG9jaXR5LnggKyA1LCB2ZWxvY2l0eS55KVxuXHQvL307XG5cblx0Ly92YXIgbW92ZSA9IGZ1bmN0aW9uKGhlcm8sIHgsIHkpe1xuXHRcdC8vdmFyIHZlbG9jaXR5ID0gbmV3IEIyZC5iMlZlYzIoeCwgeSk7XG5cdFx0Ly9oZXJvLmJvZHkuU2V0TGluZWFyVmVsb2NpdHkodmVsb2NpdHkpOyAvLyBoZXJvLlNldExpbmVhclZlbG9jaXR5KG5ldyBiMlZlYzIoNSwgMCkpOyB3b3VsZCB3b3JrIHRvb1xuXHRcdC8vaGVyby5ib2R5LlNldEF3YWtlKHRydWUpO1xuXHQvL307XG5cblx0cmV0dXJuIHtcblx0XHQvLyBkZWNsYXJlIHB1YmxpY1xuXHRcdGluaXQ6IGluaXQsIFxuXHRcdHNwYXduOiBzcGF3bixcblx0XHR0aWNrX0FJOiB0aWNrX0FJLFxuXHRcdGJlZ2luX2NvbnRhY3Q6IGJlZ2luX2NvbnRhY3QsXG5cdFx0ZW5kX2NvbnRhY3Q6IGVuZF9jb250YWN0LFxuXHR9O1xufSkoKTtcblxubW9kdWxlLmV4cG9ydHMgPSBIZXJvTG9naWM7XG5cbnZhciBJbmNsdWRlcyA9IHJlcXVpcmUoXCIuLi9JbmNsdWRlcy5qc1wiKTsgdmFyIGluY2x1ZGVfZGF0YSA9IEluY2x1ZGVzLmdldF9pbmNsdWRlX2RhdGEoe1xuXHRjdXJyZW50X21vZHVsZTogXCJIZXJvTG9naWNcIiwgXG5cdGluY2x1ZGVfb3B0aW9uczogSW5jbHVkZXMuY2hvaWNlcy5MT0dJQ19TUEVDSUZJQ1xufSk7IGV2YWwoaW5jbHVkZV9kYXRhLm5hbWVfc3RhdGVtZW50cyk7IHZhciBpbmNsdWRlID0gZnVuY3Rpb24oKXtldmFsKGluY2x1ZGVfZGF0YS5tb2R1bGVfc3RhdGVtZW50cyk7fVxuIiwiLyogXG5cdEVuZW15OiBIeWVuYSBcblx0Y2xhc3MgYW5kIGZ1bmN0aW9ucyBmb3IgdGhlIEh5ZW5hIHR5cGUgZW5lbXlcblx0cHVibGljIGZ1bmN0aW9uczpcblx0XHQtaW5pdCgpXG5cdFx0XHRpbml0aWFsaXplcyBkZWZhdWx0IGNsYXNzIGRhdGEgZm9yIGFsbCBpbnN0YW5jZXMgb2YgY2xhc3MgSHllbmFcblx0XHQtc3Bhd24oaW50IHgsIGludCB5KVxuXHRcdFx0cmV0dXJucyBhIG5ldyBpbnN0YW5jZSBvZiBjbGFzcyBIeWVuYSB3aXRoIHVuaXF1ZSBpbnN0YW5jZSBJRCBhdCBnbG9iYWwgY29vcmRpbmF0ZXMoeCx5KVxuXHRcdC10aWNrX0FJKClcblx0XHRcdHJ1bnMgaHllbmEgQUkgc2NyaXB0LCB0byBiZSBjYWxsZWQgZm9yIGVhY2ggaW5zdGFuY2Ugb24gZ2FtZSB0aWNrXG5cdFx0LWJlZ2luX2NvbnRhY3QoKVxuXHRcdFx0aGFuZGxlcyBjb2xsaXNpb25zLCBjYWxsZWQgb24gY29sbGlzaW9uIHdpdGggYW55IG9iamVjdFxuXHRcdC1lbmRfY29udGFjdCgpXG5cdFx0XHRjYWxsYmFjayBmdW5jdGlvbiBmb3IgYm94MmRcbiovXG5cbnZhciBIeWVuYUxvZ2ljID0gKGZ1bmN0aW9uKCl7XG5cdC8vSW5zdGFudGlhdGVkIGZvciBlYWNoIGluc3RhbmNlIG9mIGh5ZW5hIGF0IGNyZWF0aW9uXG5cdC8vY2FsbCBjb25zdHJ1Y3RvciB0aHJvdWdoIHdyYXBwZXIgZnVuY3Rpb24gc3Bhd24oKVxuXHR2YXIgSHllbmEgPSBmdW5jdGlvbigpe1xuXG5cdFx0dmFyIGVudGl0eSA9IEVudGl0eUNvbnRyb2xsZXIuY3JlYXRlX2Fic3RyYWN0X2VudGl0eSgpO1xuXG5cdFx0Ly9EZWNsYXJlIGluaXRpYWwgdmFyaWFibGVzIGZvciB0aGUgSHllbmFcblx0XG5cdFx0ZW50aXR5LmhwID0gMjtcblx0XHRlbnRpdHkuc3BlZWQgPSA3O1xuXHRcdGVudGl0eS5qdW1wX2ZvcmNlID0gMTI1O1xuXHRcdGVudGl0eS5kYW1hZ2UgPSA1O1xuXHRcdGVudGl0eS5wb2ludF92YWx1ZSA9IDIwMDtcblx0XHRlbnRpdHkuc2lnaHRfcmFuZ2UgPSAxNjsgLy9kaXN0YW5jZSBhdCB3aGljaCBoeWVuYSBkZXRlY3RzIGhlcm9lc1xuXHRcdGVudGl0eS5hdHRhY2tfcmFuZ2UgPSA4OyAvL2Rpc3RhbmNlIGF0IHdoaWNoIGh5ZW5hIGxlYXBzIGF0IHRoZSBoZXJvXG5cdFx0XG5cdFx0ZW50aXR5LmhpdF90YWtlbiA9IGZhbHNlOyAvL3doZXRoZXIgYSBoaXQgaGFzIGJlZW4gdGFrZW4gc2luY2UgdGhlIGxhc3QgdGlja1xuXHRcdGVudGl0eS5kYW1hZ2VfdGFrZW4gPSAwOyAvL3RoZSBhbW91bnQgb2YgZGFtYWdlIGluZmxpY3RlZCBieSBoaXRzIHNpbmNlIHRoZSBsYXN0IHRpY2tcblx0XHRcblx0XHRlbnRpdHkuZGlyZWN0aW9uID0gZmFsc2U7XHQvL2ZhbHNlPWxlZnQsIHRydWU9cmlnaHQ7XG5cdFx0ZW50aXR5LmRpcmVjdGlvbl9wcmV2aW91cyA9IGZhbHNlOy8vc3RvcmUgZGlyZWN0aW9uIGZyb20gZW5kIG9mIHByZXZpb3VzIHRpY2tcblx0XHRlbnRpdHkueF9wcmV2aW91cyA9IDA7XHRcdC8vc3RvcmUgeCB2YWx1ZSBmcm9tIGVuZCBvZiBwcmV2aW91cyB0aWNrXG5cdFx0XG5cdFx0ZW50aXR5LmlzX2lkbGUgPSB0cnVlOyAvL2RldGVybWluZXMgd2hldGhlciBoeWVuYSBpcyBhZ2dyZXNzaXZlIG9yIGlkbGVcblx0XHRlbnRpdHkuaWRsZV9kdXJhdGlvbiA9IDQwOyAvLyB0aW1lIGJ1ZmZlciBiZXR3ZWVuIGNoYW5naW5nIGlkbGUgc3RhdGVzXG5cdFx0ZW50aXR5LmlkbGVfdGltZXIgPSBlbnRpdHkuaWRsZV9kdXJhdGlvbjtcblx0XHRlbnRpdHkuaWRsZV9jb3VudGVyID0gMDsgLy91c2VkIHRvIG1hbmFnZSB0aGUgbnVtYmVyIG9mIHRpbWVzIHRoZSBoeWVuYSBoYXMgY2hhbmdlZCBzdGF0ZSB3aGlsZSBpZGxlXG5cdFx0ZW50aXR5LmlzX2FsaXZlID0gdHJ1ZTsgLy9kaXNhYmxlcyBhdHRhY2tpbmcgYW5kIHBsYXlzIGRlYXRoIGFuaW1hdGlvbiB3aGlsZSBmYWxzZVxuXHRcdGVudGl0eS5kZWF0aF9kdXJhdGlvbiA9IDMwOy8vdGltZSBiZXR3ZWVuIGRlYXRoIGFuZCBkZWxldGlvblxuXHRcdGVudGl0eS5kZWNheV9kdXJhdGlvbiA9IDIwOy8vdGltZSBiZXR3ZWVuIGRlY2F5IGFuaW1hdGlvbiBhbmQgZGVsZXRpb25cblx0XHRlbnRpdHkuZGVhdGhfdGltZXIgPSAtMTtcblx0XHRlbnRpdHkucnVubmluZ19hd2F5ID0gZmFsc2U7IC8vd2hldGhlciB0aGUgaHllbmEgaXMgcnVubmluZyBhd2F5XG5cdFx0ZW50aXR5LnJ1bl9hd2F5X2R1cmF0aW9uID0gMzA7IC8vc2V0IGNvd2FyZGljZSBsZXZlbFxuXHRcdGVudGl0eS5ydW5fYXdheV90aW1lciA9IC0xO1xuXHRcdGVudGl0eS5jYW5fYXR0YWNrID0gdHJ1ZTtcdC8vd2hldGhlciBhdHRhY2tpbmcgaXMgZW5hYmxlZFxuXHRcdGVudGl0eS5hdHRhY2tfY29vbGRvd24gPSAxMDsgLy9hdHRhY2sgY29vbGRvd25cblx0XHRlbnRpdHkuYXR0YWNrX2Nvb2xkb3duX3RpbWVyID0gLTE7XG5cdFx0ZW50aXR5LmNhbl9sZWFwID0gdHJ1ZTtcdFx0Ly9sZWFwaW5nIGVuYWJsZWRcblx0XHRlbnRpdHkubGVhcF9jb29sZG93biA9IDQwOy8vbWluaW11bSB0aW1lIGJldHdlZW4gbGVhcHNcblx0XHRlbnRpdHkubGVhcF9jb29sZG93bl90aW1lciA9IC0xOyBcblx0XHRlbnRpdHkuY2hhcmdlX2R1cmF0aW9uID0gODA7Ly9tYXhpbXVtIGxlbmd0aCBvZiBhIGNoYXJnZVxuXHRcdGVudGl0eS5jaGFyZ2VfdGltZXIgPSBlbnRpdHkuY2hhcmdlX2R1cmF0aW9uO1xuXHRcdGVudGl0eS5jaGFyZ2VfY29vbGRvd24gPSAyMDsvL21pbmltdW0gdGltZSBiZXR3ZWVuIGNoYXJnZXNcblx0XHRlbnRpdHkuY2hhcmdlX2Nvb2xkb3duX3RpbWVyID0gLTE7XG5cdFx0ZW50aXR5LmJsaW5raW5nID0gZmFsc2U7XHQvL3doZXRoZXIgaHllbmEgaXMgYmxpbmtpbmdcblx0XHRlbnRpdHkuYmxpbmtfZHVyYXRpb24gPSAyMDsvL2hvdyBsb25nIHRoZSBoeWVuYSBibGlua3MgYWZ0ZXIgdGFraW5nIGRhbWFnZVxuXHRcdGVudGl0eS5ibGlua190aW1lciA9IC0xO1xuXHRcdGVudGl0eS5tYWludGVuYW5jZV9mcmVxdWVuY3kgPSAyMDsvL3RpY2tzIGJldHdlZW4gcm91dGluZSBtYWludGVuYW5jZSBjaGVja3Ncblx0XHRlbnRpdHkubWFpbnRlbmFuY2VfdGltZXIgPSBlbnRpdHkubWFpbnRlbmFuY2VfZnJlcXVlbmN5O1xuXHRcdFxuXHRcdGVudGl0eS5iYXJlbHlfb2JzdHJ1Y3RlZCA9IGZhbHNlO1xuXHRcdGVudGl0eS5jb2xsaXNpb25fYnVmZmVyID0gMC4yXHQvL3RoZSByZWdpb24gb2Ygb3ZlcmxhcCBhY2NvdW50ZWQgZm9yIGR1cmluZyBjb2xsaXNpb24gY2hlY2tpbmdcblx0XHRlbnRpdHkucGF0aF9ibG9ja2VkID0gZmFsc2U7XHQvL2lzIGVudGl0eSBkZXByZWNhdGVkPyBzZXQgZHVyaW5nIGNvbGxpc2lvblxuXHRcdGVudGl0eS5vYnN0cnVjdGlvbl90b2xlcmFuY2UgPSA0Oy8vaG93IG1hbnkgdGltZXMgdGhlIGh5ZW5hIGNhbiBiZSBibG9ja2VkIGJlZm9yZSBoZSB0YWtlcyBhY3Rpb25cblx0XHRlbnRpdHkuYmxvY2tlZF9jb3VudCA9IDA7XHRcdFx0Ly90cmFja3MgbnVtYmVyIG9mIHRpbWVzIGJsb2NrZWQgYmV0d2VlbiBtYWludGVuYW5jZSBjaGVja3Ncblx0XHRcblx0XHRlbnRpdHkubmVlZHNfZ3JhcGhpY3NfdXBkYXRlID0gZmFsc2U7IC8vYWNjZXNzZWQgYnkgcmVuZGVyZXIgZm9yIGFuaW1hdGlvbiBwdXJwb3Nlc1xuXHRcdGVudGl0eS5hbmltYXRpb24gPSBcInN0YW5kXCI7IC8vYWNjZXNzZWQgYnkgcmVuZGVyZXIgZm9yIGFuaW1hdGlvbiBwdXJwb3Nlc1xuXHRcdFxuXHRcdHJldHVybiBlbnRpdHk7XG5cdH07XG5cblx0Ly9Jbml0aWFsaXplIGNsYXNzIHZhcmlhYmxlcywgY2FsbGVkIG9uY2UgaW4gRW50aXR5Q29udHJvbGxlci5pbml0KCkgZHVyaW5nIGdhbWUgbG9hZFxuXHR2YXIgaW5pdCA9IGZ1bmN0aW9uKCl7XG5cdFx0aW5jbHVkZSgpOyAvLyBzYXRpc2Z5IHJlcXVpcmVtZW50cywgR09FUyBGSVJTVFxuXHRcdElkZW50aWZpY2F0aW9uQ29udHJvbGxlci5hc3NpZ25fdHlwZShIeWVuYSwgXCJIeWVuYVwiKTsgLy9hc3NpZ24gY2xhc3MgaWRcblx0fTtcblxuXHQvL0luc3RhbnRpYXRlcyBjbGFzcyBIeWVuYVxuXHQvL1dyYXBwZXIgZm9yIGNvbnN0cnVjdG9yLCBhc3NpZ25zIHVuaXF1ZSBJRFxuXHR2YXIgc3Bhd24gPSBmdW5jdGlvbih4LCB5KXtcblx0XHR2YXIgbmV3X2h5ZW5hID0gbmV3IEh5ZW5hKCk7XG5cdFx0bmV3X2h5ZW5hLnR5cGUgPSBcIkh5ZW5hXCI7XG5cdFx0dmFyIGlkID0gSWRlbnRpZmljYXRpb25Db250cm9sbGVyLmFzc2lnbl9pZChuZXdfaHllbmEpO1xuXG5cdFx0bmV3X2h5ZW5hLmJvZHkgPSBQaHlzaWNzQ29udHJvbGxlci5nZXRfcmVjdGFuZ3VsYXIoe3g6IHgsIHk6IHksIGJvcmRlcl9zZW5zb3JzOiB0cnVlfSwgbmV3X2h5ZW5hKTtcdFxuXHRcdG5ld19oeWVuYS5QaHlzaWNzQ29udHJvbGxlciA9IFBoeXNpY3NDb250cm9sbGVyO1xuXHRcdFxuXHRcdHJldHVybiBuZXdfaHllbmE7XG5cdH07XG5cdFxuLy8uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi5DT01NRU5DRS4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi5cXFxcXG4vLy4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uQVJUSUZJQ0lBTC4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLlxcXFxcbi8vLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLkhZRU5BLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uXFxcXFxuLy8uLi4uLi4uLi4uLi4uLi4uLi4uLi4uSU5URUxMSUdFTkNFLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi5cXFxcXG5cdFxuXHQvLyBJcyBydW4gZWFjaCB0aWNrIGZyb20gdGhlIEVudGl0eUNvbnRyb2xsZXIudXBkYXRlIGZvciBldmVyeSByZWdpc3RlcmVkIGluc3RhbmNlXG5cdHZhciB0aWNrX0FJID0gZnVuY3Rpb24oSHllbmEpe1xuXHRcdC8vQ2hlY2sgaWYgRGVhZC4uLi4uLi4uXG5cdFx0Ly9JZiBIeWVuYSBpcyBjbG9zZSB0byB0aGUgbW92ZW1lbnQgZWRnZSwgbGVhcCBhd2F5XG5cdFx0aWYgKEh5ZW5hLmJvZHkuR2V0V29ybGRDZW50ZXIoKS54IDw9IFdvcmxkQ29udHJvbGxlci5nZXRfbW92ZW1lbnRfZWRnZSgpICsgMS4xMjUpe1xuXHRcdFx0SHllbmEuanVtcChIeWVuYS5qdW1wX2ZvcmNlLCAwKTtcblx0XHR9XG5cdFx0aWYgKEh5ZW5hLmhwIDw9IDApey8vaWYgbW9ydGFsbHkgd291bmRlZFxuXHRcdFx0SHllbmEuZGllKCk7IC8vZGllXG5cdFx0fWVsc2V7IC8vIERvIExpdmUgSHllbmEgU3R1ZmZcblx0XHRcdC8vTWFpbnRlbmFuY2UuLi4uXG5cdFx0XHRIeWVuYS5kaXJlY3Rpb25fcHJldmlvdXMgPSBIeWVuYS5kaXJlY3Rpb247XHRcdFx0XHQvL3JlbWVtYmVyIHdoYXQgaHllbmEncyBkaXJlY3Rpb24gd2FzIGF0IHN0YXJ0IG9mIHRpY2tcblx0XHRcdEh5ZW5hLnhfcHJldmlvdXMgPSBIeWVuYS5ib2R5LkdldFdvcmxkQ2VudGVyKCkueDsgLy9yZW1lbWJlciB3aGF0IGh5ZW5hJ3MgeCB3YXMgYXQgc3RhcnQgb2YgdGlja1xuXHRcdFx0SHllbmEubGVhcF9jb29sZG93bl90aW1lci0tO1x0XHRcdC8vZW5zdXJlIHRoZSBoeWVuYSBpcyBub3QgZXRlcm5hbGx5IGp1bXBpbmdcblx0XHRcdC8vbWFpbnRhaW4gYmxpbmtpbmdcblx0XHRcdGlmKEh5ZW5hLmJsaW5raW5nKXtcblx0XHRcdFx0SHllbmEuYmxpbmtfdGltZXItLTtcblx0XHRcdFx0aWYoSHllbmEuYmxpbmtfdGltZXIgPT0gMCl7XG5cdFx0XHRcdFx0SHllbmEuYmxpbmtpbmcgPSBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0Ly9tYWludGFpbiBhdHRhY2sgY29vbGRvd25cblx0XHRcdGlmKEh5ZW5hLmF0dGFja19jb29sZG93bl90aW1lciA+IDApeyBcblx0XHRcdFx0SHllbmEuYXR0YWNrX2Nvb2xkb3duX3RpbWVyLS07XG5cdFx0XHRcdEh5ZW5hLmNhbl9hdHRhY2sgPSAoSHllbmEuYXR0YWNrX2Nvb2xkb3duX3RpbWVyID09IDApO1xuXHRcdFx0fVxuXHRcdFx0Ly9tYWludGFpbiB0aGUgaHllbmEncyBhbHRlcm5hdGluZyBwaGFzZXMgb2YgcnVubmluZyBhbmQgc3RvcHBpbmdcblx0XHRcdGlmKEh5ZW5hLmNoYXJnZV90aW1lciA8PSAwKXtcblx0XHRcdFx0SHllbmEuY2hhcmdlX2Nvb2xkb3duX3RpbWVyLS07XG5cdFx0XHRcdGlmIChIeWVuYS5jaGFyZ2VfY29vbGRvd25fdGltZXIgPD0gMCl7XG5cdFx0XHRcdFx0SHllbmEuY2hhcmdlX3RpbWVyID0gSHllbmEuY2hhcmdlX2R1cmF0aW9uO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHQvL21haW50YWluIHRoZSBoeWVuYSdzIGNvd2FyZGx5IHRhY3RpY3Ncblx0XHRcdGlmIChIeWVuYS5ydW5uaW5nX2F3YXkpe1x0Ly9pZiBoeWVuYSBpcyBkZWxpYmVyYXRlbHkgcnVubmluZyBhd2F5XG5cdFx0XHRcdEh5ZW5hLnJ1bl9hd2F5X3RpbWVyLS07XHQvL3RpY2tkb3duIHJ1bl9hd2F5IHRpbWVyXG5cdFx0XHRcdGlmIChIeWVuYS5ydW5fYXdheV90aW1lciA9PSAwKXsgLy9tYXliZSBzdG9wIHJ1bm5pbmcgYXdheVxuXHRcdFx0XHRcdEh5ZW5hLnJ1bl9hd2F5X3RpbWVyID0gLTE7XG5cdFx0XHRcdFx0SHllbmEuZGlyZWN0aW9uID0gSHllbmEuZGlyZWN0aW9uX25lYXJlc3RfZW5lbXkoKTtcblx0XHRcdFx0XHRIeWVuYS5ydW5uaW5nX2F3YXkgPSBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0Ly9jaGVjayBwZXJpb2RpY2FsbHkgdG8gZW5zdXJlIHRoZSBoeWVuYSBpcyBub3Qgc3R1Y2sgaW4gYSBjb3JuZXIgYW5kIG90aGVyIHJvdXRpbmUgbWFpbnRlbmFuY2Vcblx0XHRcdEh5ZW5hLm1haW50ZW5hbmNlX3RpbWVyLS07XG5cdFx0XHRpZiAoSHllbmEubWFpbnRlbmFuY2VfdGltZXIgPT0gMCl7XG5cdFx0XHRcdGlmIChIeWVuYS5wYXRoX2ZyZWUoKSl7XG5cdFx0XHRcdFx0SHllbmEucGF0aF9ibG9ja2VkID0gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKEh5ZW5hLmJsb2NrZWRfY291bnQgPiBIeWVuYS5vYnN0cnVjdGlvbl90b2xlcmFuY2Upe1x0Ly95b3Uga25vdyBoZSdzIHN0dWNrIG5vd1xuXHRcdFx0XHRcdGlmIChIeWVuYS5jYW5fbGVhcCl7XG5cdFx0XHRcdFx0XHRIeWVuYS5wYXRoX2Jsb2NrZWQgPSB0cnVlO1xuXHRcdFx0XHRcdFx0bGVhcChIeWVuYSk7XHQvL3RpbWUgdG8ganVtcCBmb3IgaXRcblx0XHRcdFx0XHRcdEh5ZW5hLnBhdGhfYmxvY2tlZCA9IGZhbHNlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRIeWVuYS5ibG9ja2VkX2NvdW50ID0gMDtcblx0XHRcdFx0SHllbmEubWFpbnRlbmFuY2VfdGltZXIgPSBIeWVuYS5tYWludGVuYW5jZV9mcmVxdWVuY3k7IC8vcmVzZXQgY2hlY2sgdGltZXJcblx0XHRcdH1cblx0XHRcdC8vUnVuIE1haW4gQUkgU2NyaXB0Li4uLi5cblx0XHRcdGlmKCFIeWVuYS5pbl9haXIoKSB8fCBIeWVuYS5ib2R5LkdldExpbmVhclZlbG9jaXR5KCkueSA9PSAwKXsgLy9pZiBvbiBncm91bmQgT1IgaWYgd2Ugc3VzcGVjdCBoZSdzIHN0dWNrIG9uIGEgY29ybmVyXG5cdFx0XHRcdGlmIChIeWVuYS5lbmVteV9pbl9yYW5nZShIeWVuYS5zaWdodF9yYW5nZSkpeyAvL2lmIGVuZW15IG5lYXJieVxuXHRcdFx0XHRcdEh5ZW5hLmlkbGUgPSBmYWxzZTtcblx0XHRcdFx0XHRpZiAoSHllbmEuaGl0X3Rha2VuKXtcdC8vaWYgaHllbmEgd2FzIGF0dGFja2VkLFxuXHRcdFx0XHRcdFx0SHllbmEucnVubmluZ19hd2F5ID0gdHJ1ZTtcdC8vYmFjayBvZmZcblx0XHRcdFx0XHRcdEh5ZW5hLnJ1bl9hd2F5X3RpbWVyID0gSHllbmEucnVuX2F3YXlfZHVyYXRpb247XG5cdFx0XHRcdFx0XHRIeWVuYS5kaXJlY3Rpb24gPSAhKEh5ZW5hLmRpcmVjdGlvbik7XG5cdFx0XHRcdFx0fWVsc2UgaWYgKChIeWVuYS5lbmVteV9pbl9yYW5nZShIeWVuYS5hdHRhY2tfcmFuZ2UpIHx8IEh5ZW5hLnBhdGhfYmxvY2tlZCkgJiYgSHllbmEuY2FuX2xlYXAgJiYgSHllbmEubGVhcF9jb29sZG93bl90aW1lciA8PSAwKXsgLy9pZiBlbmVteSBpbiByYW5nZSBvciBwYXRoIGlzIGJsb2NrZWQsIGFuZCBsZWFwaW5nIGlzIGVuYWJsZWQsIGxlYXBcblx0XHRcdFx0XHRcdEh5ZW5hLmRpcmVjdGlvbiA9IEh5ZW5hLmRpcmVjdGlvbl9uZWFyZXN0X2VuZW15KCk7XG5cdFx0XHRcdFx0XHRsZWFwKEh5ZW5hKTtcblx0XHRcdFx0XHRcdEh5ZW5hLmNhbl9sZWFwID0gZmFsc2U7XG5cdFx0XHRcdFx0XHRIeWVuYS5sZWFwX2Nvb2xkb3duX3RpbWVyID0gSHllbmEubGVhcF9jb29sZG93bjtcblx0XHRcdFx0XHRcdEh5ZW5hLmNoYW5nZV9hbmltYXRpb24oXCJsZWFwXCIpO1xuXHRcdFx0XHRcdH1lbHNle1xuXHRcdFx0XHRcdFx0aWYoIUh5ZW5hLnJ1bm5pbmdfYXdheSAmJiAhSHllbmEuaW5fYWlyKCkpeyAvL2lmIGh5ZW5hIGlzbid0IGNvd2VyaW5nIG9yIGluIHRoZSBhaXIsIGZhY2UgdGhlIGVuZW15XG5cdFx0XHRcdFx0XHRcdEh5ZW5hLmRpcmVjdGlvbiA9IEh5ZW5hLmRpcmVjdGlvbl9uZWFyZXN0X2VuZW15KCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRpZiAoSHllbmEuY2hhcmdlX3RpbWVyID4gMCl7IC8vaWYgY2hhcmdlIGR1cmF0aW9uID4gMFxuXHRcdFx0XHRcdFx0XHRydW4oSHllbmEpO1xuXHRcdFx0XHRcdFx0XHRIeWVuYS5jaGFuZ2VfYW5pbWF0aW9uKFwicnVuXCIpOyAvL2NoYXJnZSB0aGUgZW5lbXlcblx0XHRcdFx0XHRcdFx0SHllbmEuY2hhcmdlX3RpbWVyLS07XG5cdFx0XHRcdFx0XHRcdGlmKEh5ZW5hLmNoYXJnZV90aW1lciA9PSAwKXtcblx0XHRcdFx0XHRcdFx0XHRIeWVuYS5jaGFyZ2VfY29vbGRvd25fdGltZXIgPSBIeWVuYS5jaGFyZ2VfY29vbGRvd247XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0aWYoSHllbmEueF9wcmV2aW91cyA9PSBIeWVuYS5ib2R5LkdldFdvcmxkQ2VudGVyKCkueCl7IC8vY2hlY2sgaWYgaHllbmEgaGFzIG1vdmVkIHN1Y2Nlc3NmdWxseVxuXHRcdFx0XHRcdFx0XHRcdEh5ZW5hLmJsb2NrZWRfY291bnQrKztcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fWVsc2V7Ly9lbHNlIHN0YW5kIGFnZ3Jlc3NpdmVseVxuXHRcdFx0XHRcdFx0XHRIeWVuYS5jaGFuZ2VfYW5pbWF0aW9uKFwic3RhbmRcIik7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9ZWxzZXtcblx0XHRcdFx0XHRIeWVuYS5pZGxlID0gdHJ1ZTsgLy9pZGxlIG1vZGVcblx0XHRcdFx0XHRIeWVuYS5pZGxlX3RpbWVyLS07XG5cdFx0XHRcdFx0aWYgKEh5ZW5hLmlkbGVfdGltZXIgPT0gMCl7XG5cdFx0XHRcdFx0XHRIeWVuYS5pZGxlX3RpbWVyID0gSHllbmEuaWRsZV9kdXJhdGlvbjtcblx0XHRcdFx0XHRcdEh5ZW5hLmlkbGVfY291bnRlciA9IChIeWVuYS5pZGxlX2NvdW50ZXIrMSklMjc7XG5cdFx0XHRcdFx0XHRpZiAoSHllbmEuaWRsZV9jb3VudGVyJTQgPT0gMCAmJiBIeWVuYS5pZGxlX2NvdW50ZXIlNSAhPSAwKXtcblx0XHRcdFx0XHRcdFx0SHllbmEuZGlyZWN0aW9uID0gIShIeWVuYS5kaXJlY3Rpb24pOy8vdXNlIHdlaXJkIG1vZHVsb3MgdG8gZ2V0IHJhbmRvbSBsb29raW5nIGlkbGUgYmVoYXZpb3Jcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKEh5ZW5hLmlkbGVfY291bnRlciUyID09IDAgfHwgSHllbmEuaWRsZV9jb3VudGVyJTMgPT0gMCl7IC8vdXNlIHdlaXJkIG1vZHVsb3MgdG8gZ2V0IHJhbmRvbSBsb29raW5nIGlkbGUgYmVoYXZpb3Jcblx0XHRcdFx0XHRcdHdhbGsoSHllbmEpO1xuXHRcdFx0XHRcdFx0SHllbmEuY2hhbmdlX2FuaW1hdGlvbihcIndhbGtcIik7Ly9wYWNlXG5cdFx0XHRcdFx0XHRpZihIeWVuYS54X3ByZXZpb3VzID09IEh5ZW5hLmJvZHkuR2V0V29ybGRDZW50ZXIoKS54KXsgLy9jaGVjayBpZiBoeWVuYSBoYXMgd2FuZGVyZWQgc3VjY2Vzc2Z1bGx5XG5cdFx0XHRcdFx0XHRcdEh5ZW5hLmJsb2NrZWRfY291bnQrKzsgLy9lbHNlIGNoZWNrIGZvciBiZWluZyBzdHVja1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1lbHNle1xuXHRcdFx0XHRcdFx0SHllbmEuY2hhbmdlX2FuaW1hdGlvbihcInN0YW5kXCIpOy8vbG9pdGVyXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9ZWxzZXsvL2lmIGluIHRoZSBhaXJcblx0XHRcdFx0aWYoSHllbmEubW92ZW1lbnRfdm9sdW50YXJ5KCkpe1xuXHRcdFx0XHRcdEh5ZW5hLmNoYW5nZV9hbmltYXRpb24oXCJsZWFwXCIpOy8vaWYgdm9sdW50YXJ5LCBsZWFwXG5cdFx0XHRcdH1lbHNle1xuXHRcdFx0XHRcdEh5ZW5hLmNoYW5nZV9hbmltYXRpb24oXCJmYWxsXCIpOy8vZWxzZSwgZmFsbFxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRpZiAoSHllbmEuaGl0X3Rha2VuKXtcblx0XHRcdFx0SHllbmEudGFrZV9kYW1hZ2UoKTsgLy9pZiBoaXQsIHRha2UgZGFtYWdlXG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuLy8uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi5FTkQuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uXFxcXFxuLy8uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi5BUlRJRklDSUFMLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uXFxcXFxuLy8uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLklOVEVMTElHRU5DRS4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uXFxcXFxuXG5cbi8vLi4uLi4uLi4uLi4uLi4uLi4uLi4uSEVMUEVSIEZVTkNUSU9OUy4uLi4uLi4uLi4uLi4uLi4uLi4uLi5cblx0XG5cdFxuXHQvL3J1blxuXHR2YXIgcnVuID0gZnVuY3Rpb24oaHllbmEpe1xuXHRcdGh5ZW5hLm1vdmUoaHllbmEuc3BlZWQpO1xuXHR9O1xuXHRcblx0Ly93YWxrXG5cdHZhciB3YWxrID0gZnVuY3Rpb24oaHllbmEpe1xuXHRcdGh5ZW5hLm1vdmUoaHllbmEuc3BlZWQvMyk7XG5cdH07XG5cdFxuXHQvL2xlYXBcblx0dmFyIGxlYXAgPSBmdW5jdGlvbihoeWVuYSl7XG5cdFx0aWYgKGh5ZW5hLnBhdGhfYmxvY2tlZCl7Ly9qdW1wIG91dCBvZiBhIGhvbGUgb3Igb3ZlciBhIHdhbGxcblx0XHRcdGh5ZW5hLmp1bXAoLTEwKygyMCpoeWVuYS5kaXJlY3Rpb24pLCAtMSpoeWVuYS5qdW1wX2ZvcmNlKTtcblx0XHR9ZWxzZXsgLy9sZWFwIHZpY2lvdXNseSBhdCBoZXJvXG5cdFx0XHRoeWVuYS5qdW1wKCgyKmh5ZW5hLmp1bXBfZm9yY2UqaHllbmEuZGlyZWN0aW9uKSAtIGh5ZW5hLmp1bXBfZm9yY2UsIC0xKmh5ZW5hLmp1bXBfZm9yY2UvMik7XG5cdFx0fVxuXHRcdGh5ZW5hLmNhbl9sZWFwID0gZmFsc2U7XG5cdH07XG5cdFxuXG4vLy4uLi4uLi4uLi4uLi4uLi4uLi4uLi5DT0xMSVNJT04gSEFORExFUlMuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi5cblx0Ly9jYWxsZWQgYXQgdGhlIGJlZ2lubmluZyBvZiB0aGUgY29sbGlzaW9uXG5cdHZhciBiZWdpbl9jb250YWN0ID0gZnVuY3Rpb24oY29udGFjdCwgaW5mbyl7XG5cdFx0dmFyIHR5cGUgPSBpbmZvLk1lLnR5cGU7XG5cdFx0dmFyIGh5ZW5hID0gaW5mby5NZS5lbnRpdHk7XG5cdFx0dmFyIGh5ZW5hX3ggPSBoeWVuYS5ib2R5LkdldFdvcmxkQ2VudGVyKCkueDtcblx0XHR2YXIgaHllbmFfeSA9IGh5ZW5hLmJvZHkuR2V0V29ybGRDZW50ZXIoKS54O1xuXHRcdHZhciBoeWVuYV93ID0gMS4xMjU7IC8vaGFsZiB3aWR0aCBvZiBoeWVuYVxuXHRcdHZhciBoeWVuYV9oID0gMC44NzU7IC8vaGFsZiB0aGUgaGVpZ2h0IG9mIGh5ZW5hXG5cdFx0dmFyIG90aGVyX3ggPSBpbmZvLlRoZW0uZW50aXR5LmJvZHkuR2V0V29ybGRDZW50ZXIoKS54O1xuXHRcdHZhciBvdGhlcl95ID0gaW5mby5UaGVtLmVudGl0eS5ib2R5LkdldFdvcmxkQ2VudGVyKCkueTtcblx0XHR2YXIgb3RoZXJfdyA9IGh5ZW5hLmdldF9maXh0dXJlKGluZm8uVGhlbS5lbnRpdHksXCJtYWluXCIpLkdldEFBQkIoKS5HZXRFeHRlbnRzKCkueDtcblx0XHR2YXIgb3RoZXJfaCA9IGh5ZW5hLmdldF9maXh0dXJlKGluZm8uVGhlbS5lbnRpdHksXCJtYWluXCIpLkdldEFBQkIoKS5HZXRFeHRlbnRzKCkueTtcblx0XHRcblx0XHQvKipcblx0XHQoaHllbmFfdyArIG90aGVyX3cgKyBidWZmZXIpID0gbWluaW11bSBob3Jpem9udGFsIGRpc3RhbmNlIGZvciBub24tdmVydGljYWxseSBzdGFja2VkIGVudGl0aWVzXG5cdFx0YWJzKHRoZW0ueCAtIG1lLngpID0gYWJzb2x1dGUgaG9yaXpvbnRhbCBkaXN0YW5jZVxuXHRcdChhYnNfaGRpc3RhbmNlIDwgbWluX2hkaXN0YW5jZSkgaW1wbGllcyB2ZXJ0aWNhbCBzdGFja2luZ1xuXHRcdFxuXHRcdChoeWVuYV9oICsgb3RoZXJfaCArIGJ1ZmZlcikgPSBtaW5pbXVtIHZlcnRpY2FsIGRpc3RhbmNlIGZvciBub24tYWRqYWNlbnQgZW50aXRpZXNcblx0XHQoYWJzX3ZkaXN0YW5jZSA8IG1pbl92ZGlzdGFuY2UpIGltcGxpZXMgYWRqYWNlbmN5XG5cdFx0XG5cdFx0KGh5ZW5hLnggLSBvdGhlci54KSA8IDAgaWYgKGh5ZW5hLnggPCBvdGhlci54KVxuXHRcdChoeWVuYS54IC0gb3RoZXIueCkgPSAwIGlmIChoeWVuYS54ID0gb3RoZXIueClcblx0XHQoaHllbmEueCAtIG90aGVyLngpID4gMCBpZiAoaHllbmEueCA+IG90aGVyLngpXG5cdFx0c21hbGxlciB4IGlzIHRvIHRoZSBsZWZ0IG9mIGJpZ2dlciB4XG5cdFx0c21hbGxlciB5IGlzIGFib3ZlIGJpZ2dlciB5XG5cdFx0MCA9IGxlZnQ7XG5cdFx0MSA9IHJpZ2h0O1xuXHRcdCgoaHllbmEueCAtIG90aGVyLngpID4gMCkgcmV0dXJucyB0cnVlIGlmIGh5ZW5hIGlzIHRvIHRoZSByaWdodCBvZiB0aGUgZW5lbXksIGVsc2UgZmFsc2Vcblx0XHQoKGh5ZW5hLnggLSBvdGhlci54KSA8IDApIHJldHVybnMgdHJ1ZSBpZiBvdGhlciBpcyB0byB0aGUgcmlnaHQgb2YgaHllbmEsIGVsc2UgZmFsc2Vcblx0XHRcblx0XHQoKGh5ZW5hLnkgLSBvdGhlci55KSA+IDApIHJldHVybnMgdHJ1ZSBpZiBoeWVuYSBpcyBiZWxvdyB0aGUgZW5lbXkgKGh5ZW5hX3kgPiBvdGhlcl95KSwgZWxzZSBmYWxzZVxuXHRcdCgoaHllbmEueSAtIG90aGVyLnkpIDwgMCkgcmV0dXJucyB0cnVlIGlmIG90aGVyIGlzIGFib3ZlIGh5ZW5hKGh5ZW5hX3kgPCBvdGhlcl95KSwgZWxzZSBmYWxzZVxuXHRcdCovXG5cdFx0XG5cdFx0Ly91bHRpbWF0ZSBjb2xsaXNpb24gZGV0ZWN0b3Jcblx0XHRpZiAoaW5mby5NZS5maXh0dXJlX25hbWUgPT0gXCJtYWluXCIpe1xuXHRcdFx0Ly9pZiBhZGphY2VudFxuXHRcdFx0aWYgKE1hdGguYWJzKGh5ZW5hX3kgLSBvdGhlcl95KSA8IChoeWVuYV9oICsgb3RoZXJfaCAtIGh5ZW5hLmNvbGxpc2lvbl9idWZmZXIpKXsgLy9pZiBhZGphY2VudFxuXHRcdFx0XHRpZiAoKGh5ZW5hX2grb3RoZXJfaCkgLSAob3RoZXJfeS1oeWVuYV95KSA8IGh5ZW5hLmNvbGxpc2lvbl9idWZmZXIpey8vaWYgdGhlIGh5ZW5hIGlzIGNsb3NlIGVub3VnaCB0byB0aGUgdG9wIHRoYXQgaGUgY291bGQgYWxtb3N0IHdhbGsgb3ZlciBpdC4uLlxuXHRcdFx0XHRcdGh5ZW5hLmJhcmVseV9vYnN0cnVjdGVkID0gdHJ1ZTsvL2NhbGwgZm9yIGEgdGlueSBidW1wXG5cdFx0XHRcdH1lbHNle1xuXHRcdFx0XHRcdGh5ZW5hLmJsb2NrZWRfY291bnQrKzsgLy9lbHNlIGNhbGwgZm9yIGEgcmVhbCBqdW1wXG5cdFx0XHRcdFx0aHllbmEucGF0aF9ibG9ja2VkID0gdHJ1ZTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoaW5mby5UaGVtLnR5cGUgPT0gXCJoZXJvXCIpey8vaWYgb3RoZXIgPSBoZXJvLCBkZWFsIGRhbWFnZVxuXHRcdFx0XHRcdGlmKGh5ZW5hLmNhbl9hdHRhY2spe1xuXHRcdFx0XHRcdFx0aHllbmEuYXR0YWNrX2Nvb2xkb3duX3RpbWVyID0gaHllbmEuYXR0YWNrX2Nvb2xkb3duOy8vc2V0IGNvb2xkb3duIHRpbWVyXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9ZWxzZXtcblx0XHRcdFx0Ly9pZiBvdGhlciBpcyBiZWxvd1xuXHRcdFx0XHRpZih0cnVlKXt9XG5cdFx0XHRcdFx0Ly9yZXNldCBqdW1wXG5cdFx0XHRcdFx0Ly9pZiBoZXJvLCBkZWFsIGRhbWFnZVxuXHRcdFx0XHRcblx0XHRcdFx0Ly9pZiBvdGhlciBpcyBhYm92ZTpcblx0XHRcdFx0XHQvL2lmIGhlcm8sIHRha2UgZGFtYWdlXG5cdFx0XHR9XG5cdFx0fVxuXHRcdFxuXHRcdHZhciB2dWxuZXJhYmlsaXR5X3JhZGl1cyA9ICgxLjEyNSArIDAuNDUgLSAwLjMpOy8vIGh5ZW5hX3dpZHRoLzIgKyBoZXJvX3dpZHRoLzIgLSBidWZmZXIsIGluIG1ldGVyc1xuXHRcdC8vaWYgYm90dG9tIGNvbGxpZGluZyB3aXRoIHRoZSBncm91bmQgb3IgdG9wIG9mIGFub3RoZXIgb2JqZWN0LCBlbmFibGUgbGVhcFxuXHRcdGlmIChpbmZvLk1lLmZpeHR1cmVfbmFtZSA9PSBcImJvdHRvbVwiICYmIChpbmZvLlRoZW0uZml4dHVyZV9uYW1lID09IFwidG9wXCIgfHwgaW5mby5UaGVtLmVudGl0eS5raW5kID09IDEgfHwgaW5mby5UaGVtLmVudGl0eS5raW5kID09IDIpKXtcblx0XHRcdGh5ZW5hLmNhbl9sZWFwID0gdHJ1ZTtcblx0XHR9XG5cdFx0XG5cdFx0Ly9pZiBjb2xsaWRpbmcgd2l0aCBhIHdhbGwsIGRldGVjdCBibG9ja2VkIHBhdGhcblx0XHRpZiAoKGluZm8uTWUuZml4dHVyZV9uYW1lID09IFwibGVmdFwiICYmICFoeWVuYS5kaXJlY3Rpb24pfHwoaW5mby5NZS5maXh0dXJlX25hbWUgPT0gXCJyaWdodFwiICYmIGh5ZW5hLmRpcmVjdGlvbikpe1xuXHRcdFx0aHllbmEucGF0aF9ibG9ja2VkID0gdHJ1ZTtcblx0XHRcdGh5ZW5hLmJsb2NrZWRfY291bnQrKztcblx0XHR9XG5cdFx0XG5cdFx0Ly9pZiBjb2xsaWRpbmcgd2l0aCBhIHBsYXllciwgY2hlY2sgZm9yIGRhbWFnZVxuXHRcdGlmKGluZm8uVGhlbS50eXBlID09IFwiaGVyb1wiKXtcblx0XHRcdGlmKGluZm8uVGhlbS5maXh0dXJlX25hbWUgIT0gXCJib3R0b21cIil7IC8vaWYgY2FuX2F0dGFjayBhbmQgY29sbGlkaW5nIHdpdGggYSBmaXh0dXJlIG90aGVyIHRoYW4gXCJib3R0b21cIlxuXHRcdFx0XHRpZihoeWVuYS5jYW5fYXR0YWNrKXtcblx0XHRcdFx0XHRoeWVuYS5hdHRhY2tfY29vbGRvd25fdGltZXIgPSBoeWVuYS5hdHRhY2tfY29vbGRvd247Ly9zZXQgY29vbGRvd24gdGltZXJcblx0XHRcdFx0fVxuXHRcdFx0fWVsc2UgaWYoTWF0aC5hYnMoaW5mby5UaGVtLmVudGl0eS5ib2R5LkdldFdvcmxkQ2VudGVyKCkueCAtIGh5ZW5hLmJvZHkuR2V0V29ybGRDZW50ZXIoKS54KSA8IHZ1bG5lcmFiaWxpdHlfcmFkaXVzICYmICFoeWVuYS5ibGlua2luZyl7XG5cdFx0XHRcdGh5ZW5hLmhpdF90YWtlbiA9IHRydWU7Ly90YWtlIGRhbWFnZSBpZiBlbmVteSBjb2xsaWRlcyBmcm9tIGFib3ZlIGFuZCBkaXN0YW5jZSA8IHZ1bG5lcmFiaWxpdHkgcmFkaXVzXG5cdFx0XHRcdGh5ZW5hLmRhbWFnZV90YWtlbiA9IGluZm8uVGhlbS5lbnRpdHkuZGFtYWdlO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcblxuXHQvL2NhbGxlZCB1cG9uIGVuZCBvZiBjb2xsaXNpb25cblx0dmFyIGVuZF9jb250YWN0ID0gZnVuY3Rpb24oY29udGFjdCwgaW5mbyl7XG5cdFx0XG5cdH07XG5cblxuLy8uLi4uLi4uLi4uLi4uLi4uLkRFQ0xBUkUgUFVCTElDIEZVTkNUSU9OUy4uLi4uLi4uLi4uLi4uLi4uLi4uLlxuXHRyZXR1cm4ge1xuXHRcdGluaXQ6IGluaXQsIFxuXHRcdHNwYXduOiBzcGF3bixcblx0XHR0aWNrX0FJOiB0aWNrX0FJLFxuXHRcdGJlZ2luX2NvbnRhY3Q6IGJlZ2luX2NvbnRhY3QsXG5cdFx0ZW5kX2NvbnRhY3Q6IGVuZF9jb250YWN0LFxuXHR9O1xufSkoKTtcblxubW9kdWxlLmV4cG9ydHMgPSBIeWVuYUxvZ2ljO1xuXG52YXIgSW5jbHVkZXMgPSByZXF1aXJlKFwiLi4vSW5jbHVkZXMuanNcIik7IHZhciBpbmNsdWRlX2RhdGEgPSBJbmNsdWRlcy5nZXRfaW5jbHVkZV9kYXRhKHtcblx0Y3VycmVudF9tb2R1bGU6IFwiSHllbmFMb2dpY1wiLCBcblx0aW5jbHVkZV9vcHRpb25zOiBJbmNsdWRlcy5jaG9pY2VzLkxPR0lDX1NQRUNJRklDXG59KTsgZXZhbChpbmNsdWRlX2RhdGEubmFtZV9zdGF0ZW1lbnRzKTsgdmFyIGluY2x1ZGUgPSBmdW5jdGlvbigpe2V2YWwoaW5jbHVkZV9kYXRhLm1vZHVsZV9zdGF0ZW1lbnRzKTt9XG4iLCJ2YXIgTWVkdXNhTG9naWMgPSAoZnVuY3Rpb24oKXtcbiAgIFxuXHR2YXIgTWVkdXNhID0gZnVuY3Rpb24oKXtcblx0XHQvKiBXaWxsIGJlIGluc3RhbnRpYXRlZCBmb3IgZXZlcnkgY3JlYXRlZCBlbnRpdHkgdG8gaG9sZCBhbGwgdGhlIGluZm9ybWF0aW9uIFxuXHRcdFx0YWJvdXQgdGhlIHBoeXNpY2FsIChub3QgZ3JhcGhpY2FsKSBzdGF0ZSBvZiB0aGUgZW50aXR5IGluIHF1ZXN0aW9uLiBcblx0XHRcdGRlY2xhcmUgdGhlIHByb3BlcnRpZXMgbGlrZSBlbnRpdHk6XG5cdFx0XHRlbnRpdHkuc29tZV9zdGF0ZV92YXJpYWJsZV9pbml0aWFsX3ZhbHVlID0gMDtcblx0XHRcdGluc3RhbnRpYXRlIChtb3N0IGxpa2VseSBpbiB0aGUgc3Bhd24gZnVuY3Rpb24pIGxpa2UgdGhhdDpcblx0XHRcdHZhciBuZXdfZW50aXR5X2luc3RhbmNlID0gbmV3IE1lZHVzYSgpO1xuXHRcdCovXG5cdFx0dmFyIGVudGl0eSA9IEVudGl0eUNvbnRyb2xsZXIuY3JlYXRlX2Fic3RyYWN0X2VudGl0eSgpO1xuXHRcdFxuXHRcdGVudGl0eS5oZXJvX2h1cnRfbWUgPSBmYWxzZTtcblx0XHRlbnRpdHkubWVfaHVydF9oZXJvID0gZmFsc2U7XG5cdFx0ZW50aXR5LmRlYXRoX3RpY2sgPSAwO1xuXG5cdFx0Ly9zZXQgeW91ciBnYW1lIGxvZ2ljIHBhcmFtZXRlcnMgaGVyZVxuXHRcdC8vZW50aXR5Lm9iamVjdF9pZCA9IDE7IC8vaGFyZGNvZGUgYSB1bmlxdWUgaWRlbnRpZmllciBmb3IgZWFjaCBuZXcgZW5lbXkgY2xhc3Ncblx0XHRlbnRpdHkuaHAgPSAzO1xuXHRcdGVudGl0eS5zcGVlZCA9IDY7XG5cdFx0ZW50aXR5LmRhbWFnZSA9IDEwO1xuXHRcdGVudGl0eS5wb2ludF92YWx1ZSA9IDEwMDtcblx0XHQvL2VudGl0eS5hdHRhY2tfY29vbGRvd24gPSA0OyAvL3VzZSBlbnRpdHkgZm9yIGVuZW1pZXMgd2hvIG5lZWRcblx0XHRlbnRpdHkuY2FuX2F0dGFjayA9IHRydWU7Ly91c2UgZW50aXR5IGZvciBlbmVtaWVzIHdobyBhbHRlcm5hdGUgYmV0d2VlbiBcblx0XHQvL2VudGl0eS5jb29sZG93bl90aW1lcj0tMTtcblx0XHRlbnRpdHkuQUlfc3RhdGUgPSBcImZseVwiOy8vdXNlIGVudGl0eSB0byBrZWVwIHRyYWNrIG9mIHRoZSBlbmVteSdzIEFJIHN0YXRlXG5cdFx0ZW50aXR5LmFsaXZlZmxhZyA9IHRydWU7XG5cdFx0ZW50aXR5LnVuaHVydGZsYWcgPSB0cnVlO1xuXHRcdGVudGl0eS5uZWVkc19ncmFwaGljc191cGRhdGUgPSBmYWxzZTtcblxuXHRcdGVudGl0eS5kaXJlY3Rpb24gPSBmYWxzZTtcblx0XHRlbnRpdHkuZmx5X2ZvcmNlID0gMTAwO1xuXHRcdFxuXHRcdHJldHVybiBlbnRpdHk7XG5cdH07XG5cblx0dmFyIGluaXQgPSBmdW5jdGlvbigpe1xuXHRcdC8qIElzIHJhbiBmcm9tIHRoZSBFbnRpdHlDb250cm9sbGVyLmluaXQgb25jZSBkdXJpbmcgZ2FtZSBsb2FkaW5nIFxuXHRcdCBcdHlvdSBzaG91bGQgYXNzaWduIHR5cGUgdG8geW91ciBtb2RlbCBoZXJlIHVzaW5nIHRoZSBpZGVudGlmaWNhdGlvbiBjb250cm9sbGVyXG5cdFx0ICovXG5cdFx0aW5jbHVkZSgpOyAvLyBzYXRpc2Z5IHJlcXVpcmVtZW50cywgR09FUyBGSVJTVFxuXHRcdElkZW50aWZpY2F0aW9uQ29udHJvbGxlci5hc3NpZ25fdHlwZShNZWR1c2EsIFwiTWVkdXNhXCIpO1xuXHR9O1xuXG5cdHZhciBzcGF3biA9IGZ1bmN0aW9uKHgsIHkpe1xuXHRcdC8qIHNwYXduIGluc3RhbmNlIG9mIHRoaXMgZW50aXR5IGF0IHRoZSBnaXZlbiBjb29yZGluYXRlc1xuXHRcdFx0eW91IHdpbGwgaGF2ZSB0byBjcmVhdGUgbmV3IGVudGl0eSBpbnN0YW5jZSwgYXNzaWduIGl0IGlkXG5cdFx0XHR1c2luZyB0aGUgSWRlbnRpZmljYXRpb25Db250cm9sbGVyLmFzc2lnbl9pZChlbnRpdHlfaW5zdGFuY2UpLFxuXHRcdFx0YXNzaWduIGl0IGEgYm9keSB3aGljaCB5b3UgY2FuIGdldCB0aHJvdWdoIFBoeXNpY3NDb250cm9sbGVyXG5cdFx0XHRkbyBhbnkgb3RoZXIgc3R1ZmYgeW91IHdhbnQgdG8gZG8gZHVyaW5nIHNwYXduaW5nLFxuXHRcdFx0YW5kIGZpbmFsbHkgeW91IEhBVkUgVE8oISEhKSByZXR1cm4gdGhlIGluc3RhbmNlIHlvdSBqdXN0IGNyZWF0ZWQgZnJvbSB0aGlzIGZ1bmN0aW9uXG5cdFx0Ki9cblxuXHRcdHZhciBuZXdfTWVkdXNhID0gbmV3IE1lZHVzYSgpO1xuXHRcdG5ld19NZWR1c2EudHlwZSA9IFwiTWVkdXNhXCI7XG5cdFx0dmFyIGlkID0gSWRlbnRpZmljYXRpb25Db250cm9sbGVyLmFzc2lnbl9pZChuZXdfTWVkdXNhKTtcblxuXHRcdG5ld19NZWR1c2EuYm9keSA9IFBoeXNpY3NDb250cm9sbGVyLmdldF9yZWN0YW5ndWxhcih7eDogeCwgeTogeSwgYm9yZGVyX3NlbnNvcnM6IHRydWV9LCBuZXdfTWVkdXNhKTtcdFxuXG5cdFx0cmV0dXJuIG5ld19NZWR1c2E7XG5cblx0fTtcblxuXHR2YXIgdGlja19BSSA9IGZ1bmN0aW9uKE1lZHVzYSl7XG5cdFx0LyogSXMgcmFuIGVhY2ggdGljayBmcm9tIHRoZSBFbnRpdHlDb250cm9sbGVyLnVwZGF0ZSBmb3IgZXZlcnkgcmVnaXN0ZXJlZFxuXHRcdFx0ZW50aXR5IG9mIHRoaXMgdHlwZS4gSSBnaXZlbiBlbnRpdHlfaW5zdGFuY2Vcblx0XHQqL1xuXG5cdFx0Ly9pZiBkZWFkLCBkaWVcblx0XHRpZiAoTWVkdXNhLmhwIDw9IDApIHtcblx0XHRcdE1lZHVzYS5kaWUoKTtcblx0XHR9ZWxzZXsgLy8gTWVkdXNhLmhwID49IDFcblx0XHRcdGlmIChNZWR1c2EuaW5fYWlyKCkpe1xuXHRcdFx0XHRNZWR1c2EuY2hhbmdlX2FuaW1hdGlvbihcImZseVwiKTtcblx0XHRcdH1lbHNle1xuXHRcdFx0XHRNZWR1c2EuY2hhbmdlX2FuaW1hdGlvbihcIndhbGtcIik7XG5cdFx0XHR9XG5cdFx0XHRpZiAoTWVkdXNhLmFuaW1hdGlvbiA9PSBcIndhbGtcIil7XG5cdFx0XHRcdE1lZHVzYS5tb3ZlKE1lZHVzYS5zcGVlZCk7XG5cdFx0XHR9XG5cdFx0XHRpZiAoTWVkdXNhLmFuaW1hdGlvbiA9PSBcImZseVwiKXtcblx0XHRcdCAgICBNZWR1c2EuanVtcCgoMiAqIE1lZHVzYS5mbHlfZm9yY2UgKiBNZWR1c2EuZGlyZWN0aW9uKSAtIE1lZHVzYS5mbHlfZm9yY2UsIE1lZHVzYS5mbHlfZm9yY2UvMik7XG5cdFx0XHR9XG5cdFx0XHRpZiAoTWVkdXNhLmhpdF90YWtlbil7XG5cdFx0XHRcdE1lZHVzYS50YWtlX2RhbWFnZSgpO1xuXHRcdFx0XHRNZWR1c2EuY2hhbmdlX2FuaW1hdGlvbihcImluanVyeVwiKTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cblx0Ly8gLy8gLy9TZXQgdXAgQ29sbGlzaW9uIGhhbmRsZXJcblx0XG5cdFxuXHR2YXIgYmVnaW5fY29udGFjdCA9IGZ1bmN0aW9uKGNvbnRhY3QsIGluZm8pe1xuXHRcdC8vaGFuZGxlIGNvbGxpc2lvbnMgaGVyZVxuXHRcdFxuXHRcdGlmKGluZm8uVGhlbS50eXBlID09IFwiaGVyb1wiKXtcblx0XHRcdGlmKGluZm8uVGhlbS5maXh0dXJlX25hbWUgIT0gXCJib3R0b21cIiAmJiBpbmZvLk1lLmVudGl0eS5jYW5fYXR0YWNrKXtcblx0XHRcdFx0aW5mby5NZS5lbnRpdHkubWVfaHVydF9oZXJvID0gdHJ1ZTtcblx0XHRcdH1lbHNle1xuXHRcdFx0XHRpbmZvLk1lLmVudGl0eS5oaXRfdGFrZW4gPSB0cnVlOy8vdGFrZSBkYW1hZ2UgaWYgZW5lbXkgY29sbGlkZXMgZnJvbSBhYm92ZSBhbmQgZGlzdGFuY2UgPCB2dWxuZXJhYmlsaXR5IHJhZGl1c1xuXHRcdFx0XHRpbmZvLk1lLmVudGl0eS5kYW1hZ2VfdGFrZW4gPSBpbmZvLlRoZW0uZW50aXR5LmRhbWFnZTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cblx0dmFyIGVuZF9jb250YWN0ID0gZnVuY3Rpb24oY29udGFjdCwgaW5mbyl7XG5cdFxuXHR9O1xuXG5cdFxuXHRyZXR1cm4ge1xuXHRcdC8vIGRlY2xhcmUgcHVibGljXG5cdFx0aW5pdDogaW5pdCwgXG5cdFx0c3Bhd246IHNwYXduLFxuXHRcdHRpY2tfQUk6IHRpY2tfQUksXG5cdFx0YmVnaW5fY29udGFjdDogYmVnaW5fY29udGFjdCxcblx0XHRlbmRfY29udGFjdDogZW5kX2NvbnRhY3QsXG5cdH07XG59KSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE1lZHVzYUxvZ2ljO1xuXG52YXIgSW5jbHVkZXMgPSByZXF1aXJlKFwiLi4vSW5jbHVkZXMuanNcIik7IHZhciBpbmNsdWRlX2RhdGEgPSBJbmNsdWRlcy5nZXRfaW5jbHVkZV9kYXRhKHtcblx0Y3VycmVudF9tb2R1bGU6IFwiTWVkdXNhTG9naWNcIiwgXG5cdGluY2x1ZGVfb3B0aW9uczogSW5jbHVkZXMuY2hvaWNlcy5MT0dJQ19TUEVDSUZJQ1xufSk7IGV2YWwoaW5jbHVkZV9kYXRhLm5hbWVfc3RhdGVtZW50cyk7IHZhciBpbmNsdWRlID0gZnVuY3Rpb24oKXtldmFsKGluY2x1ZGVfZGF0YS5tb2R1bGVfc3RhdGVtZW50cyk7fVxuIiwidmFyIFBpenphTG9naWMgPSAoZnVuY3Rpb24gKCkge1xuXG4gICAgdmFyIFBpenphID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAvKiBXaWxsIGJlIGluc3RQaXp6YWlhdGVkIGZvciBldmVyeSBjcmVhdGVkIGVudGl0eSB0byBob2xkIGFsbCB0aGUgaW5mb3JtYXRpb24gXG5cdFx0XHRhYm91dCB0aGUgcGh5c2ljYWwgKG5vdCBncmFwaGljYWwpIHN0YXRlIG9mIHRoZSBlbnRpdHkgaW4gcXVlc3Rpb24uIFxuXHRcdFx0ZGVjbGFyZSB0aGUgcHJvcGVydGllcyBsaWtlIHRoaXM6XG5cdFx0XHR0aGlzLnNvbWVfc3RhdGVfdmFyaWFibGVfaW5pdGlhbF92YWx1ZSA9IDA7XG5cdFx0XHRpbnN0UGl6emFpYXRlIChtb3N0IGxpa2VseSBpbiB0aGUgc3Bhd24gZnVuY3Rpb24pIGxpa2UgdGhhdDpcblx0XHRcdHZhciBuZXdfZW50aXR5X2luc3RhbmNlID0gbmV3IFBpenphKCk7XG5cdFx0Ki9cbiAgICAgICAgdmFyIGVudGl0eSA9IEVudGl0eUNvbnRyb2xsZXIuY3JlYXRlX2Fic3RyYWN0X2VudGl0eSgpO1xuXG4gICAgICAgIGVudGl0eS5hbmltYXRpb24gPSBcIm5vcm1hbFwiO1xuICAgICAgICBlbnRpdHkuY2FuX2F0dGFjayA9IGZhbHNlO1xuICAgICAgICBlbnRpdHkudXNlZCA9IGZhbHNlO1xuICAgICAgICBlbnRpdHkucG9pbnRfdmFsdWUgPSAwO1xuICAgICAgICBlbnRpdHkuaXNfYWxpdmUgPSBmYWxzZTtcbiAgICAgICAgZW50aXR5LnJlZ2VuID0gLTEwO1xuXG4gICAgICAgIHJldHVybiBlbnRpdHk7XG4gICAgfTtcblxuICAgIHZhciBpbml0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAvKiBJcyBydW4gZnJvbSB0aGUgRW50aXR5Q29udHJvbGxlci5pbml0IG9uY2UgZHVyaW5nIGdhbWUgbG9hZGluZyBcblx0XHQgXHR5b3Ugc2hvdWxkIGFzc2lnbiB0eXBlIHRvIHlvdXIgbW9kZWwgaGVyZSB1c2luZyB0aGUgaWRlbnRpZmljYXRpb24gY29udHJvbGxlclxuXHRcdCAqL1xuICAgICAgICBpbmNsdWRlKCk7IC8vIHNhdGlzZnkgcmVxdWlyZW1lbnRzLCBHT0VTIEZJUlNUXG4gICAgICAgIElkZW50aWZpY2F0aW9uQ29udHJvbGxlci5hc3NpZ25fdHlwZShQaXp6YSwgXCJwaXp6YVwiKTtcbiAgICB9O1xuXG4gICAgdmFyIHNwYXduID0gZnVuY3Rpb24gKHgsIHkpIHtcbiAgICAgICAgLyogc3Bhd24gaW5zdGFuY2Ugb2YgdGhpcyBlbnRpdHkgYXQgdGhlIGdpdmVuIGNvb3JkaW5hdGVzXG5cdFx0XHR5b3Ugd2lsbCBoYXZlIHRvIGNyZWF0ZSBuZXcgZW50aXR5IGluc3RhbmNlLCBhc3NpZ24gaXQgaWRcblx0XHRcdHVzaW5nIHRoZSBJZGVudGlmaWNhdGlvbkNvbnRyb2xsZXIuYXNzaWduX2lkKGVudGl0eV9pbnN0YW5jZSksXG5cdFx0XHRhc3NpZ24gaXQgYSBib2R5IHdoaWNoIHlvdSBjYW4gZ2V0IHRocm91Z2ggUGh5c2ljc0NvbnRyb2xsZXJcblx0XHRcdGRvIGFueSBvdGhlciBzdHVmZiB5b3Ugd1BpenphIHRvIGRvIGR1cmluZyBzcGF3bmluZyxcblx0XHRcdGFuZCBmaW5hbGx5IHlvdSBIQVZFIFRPKCEhISkgcmV0dXJuIHRoZSBpbnN0YW5jZSB5b3UganVzdCBjcmVhdGVkIGZyb20gdGhpcyBmdW5jdGlvblxuXHRcdCovXG5cbiAgICAgICAgdmFyIG5ld19QaXp6YSA9IG5ldyBQaXp6YSgpO1xuICAgICAgICBuZXdfUGl6emEudHlwZSA9IFwicGl6emFcIjtcbiAgICAgICAgdmFyIGlkID0gSWRlbnRpZmljYXRpb25Db250cm9sbGVyLmFzc2lnbl9pZChuZXdfUGl6emEpO1xuXG4gICAgICAgIG5ld19QaXp6YS5ib2R5ID0gUGh5c2ljc0NvbnRyb2xsZXIuZ2V0X3JlY3Rhbmd1bGFyKHsgeDogeCwgeTogeSwgYm9yZGVyX3NlbnNvcnM6IGZhbHNlIH0sIG5ld19QaXp6YSk7XG5cbiAgICAgICAgcmV0dXJuIG5ld19QaXp6YTtcblxuICAgIH07XG5cbiAgICB2YXIgdGlja19BSSA9IGZ1bmN0aW9uIChQaXp6YSkge1xuICAgICAgICAvKiBJcyByYW4gZWFjaCB0aWNrIGZyb20gdGhlIEVudGl0eUNvbnRyb2xsZXIudXBkYXRlIGZvciBldmVyeSByZWdpc3RlcmVkXG5cdFx0XHRlbnRpdHkgb2YgdGhpcyB0eXBlLiBJIGdpdmVuIGVudGl0eV9pbnN0YW5jZVxuXHRcdCovXG5cbiAgICAgICAgLy9pZiBlbmVteSBpcyBkZWFkLCBkaWVcbiAgICAgICAgLy9pZiAoUGl6emEuYm9keS5HZXRXb3JsZENlbnRlcigpLnkgPiAyMiB8fCBQaXp6YS5ib2R5LkdldFdvcmxkQ2VudGVyKCkueCA8IENvbmZpZy5QbGF5ZXIubW92ZW1lbnRfZWRnZSAtIDEpIHtcbiAgICAgICAgLy9FbnRpdHlDb250cm9sbGVyLmRlbGV0ZV9lbnRpdHkoKTtcbiAgICAgICAgLy9jb25zb2xlLmxvZyhcImRyb3Agb2YgZGVhdGhcIik7XG4gICAgICAgIC8vfVxuICAgICAgICAvL1xuICAgICAgICBpZiAoUGl6emEudXNlZCkge1xuICAgICAgICAgICAgUGl6emEuZGllKCk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLy8gLy8gLy9TZXQgdXAgQ29sbGlzaW9uIGhhbmRsZXJcblxuXG4gICAgdmFyIGJlZ2luX2NvbnRhY3QgPSBmdW5jdGlvbiAoY29udGFjdCwgaW5mbykge1xuICAgICAgICAvL2hhbmRsZSBjb2xsaXNpb25zIGhlcmVcbiAgICAgICAgaWYgKGluZm8uVGhlbS5lbnRpdHkudHlwZSA9PSBcImhlcm9cIiAmJiBpbmZvLlRoZW0uZW50aXR5LmhwIDwgMTAwKSB7XG4gICAgICAgICAgICBpbmZvLk1lLmVudGl0eS51c2VkID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIHZhciBlbmRfY29udGFjdCA9IGZ1bmN0aW9uIChjb250YWN0LCBpbmZvKSB7XG5cbiAgICB9O1xuXG5cbiAgICByZXR1cm4ge1xuICAgICAgICAvLyBkZWNsYXJlIHB1YmxpY1xuICAgICAgICBpbml0OiBpbml0LFxuICAgICAgICBzcGF3bjogc3Bhd24sXG4gICAgICAgIHRpY2tfQUk6IHRpY2tfQUksXG4gICAgICAgIGJlZ2luX2NvbnRhY3Q6IGJlZ2luX2NvbnRhY3QsXG4gICAgICAgIGVuZF9jb250YWN0OiBlbmRfY29udGFjdCxcbiAgICB9O1xufSkoKTtcblxubW9kdWxlLmV4cG9ydHMgPSBQaXp6YUxvZ2ljO1xuXG52YXIgSW5jbHVkZXMgPSByZXF1aXJlKFwiLi4vSW5jbHVkZXMuanNcIik7IHZhciBpbmNsdWRlX2RhdGEgPSBJbmNsdWRlcy5nZXRfaW5jbHVkZV9kYXRhKHtcbiAgICBjdXJyZW50X21vZHVsZTogXCJQaXp6YUxvZ2ljXCIsXG4gICAgaW5jbHVkZV9vcHRpb25zOiBJbmNsdWRlcy5jaG9pY2VzLkxPR0lDX1NQRUNJRklDXG59KTsgZXZhbChpbmNsdWRlX2RhdGEubmFtZV9zdGF0ZW1lbnRzKTsgdmFyIGluY2x1ZGUgPSBmdW5jdGlvbiAoKSB7IGV2YWwoaW5jbHVkZV9kYXRhLm1vZHVsZV9zdGF0ZW1lbnRzKTsgfVxuIiwidmFyIEFzc2V0TW9kZWwgPSBuZXcgZnVuY3Rpb24oKXtcblx0Ly8gQXMgYWx3YXlzLCBhbG1vc3QgYW55dGhpbmcgaXMgaW5pdGlhbGl6ZWQgaW4gdGhlIEluaXRDb250cm9sbGVyXG5cdFxuXHR0aGlzLmxvYWRlcjtcbi8vbWFja2VyZWxcblx0dGhpcy5tYW5pZmVzdCA9IFsgLy8gZGVmaW5pbmcgcmVzb3VyY2VzIHRvIGJlIGxvYWRlZCBpbiBidWxrIHdpdGggcHJlbG9hZC5qc1xuXHRcdFx0e3NyYzogXCJncmVla193YXJyaW9yLnBuZ1wiLCBpZDogXCJncmVla193YXJyaW9yXCJ9LFxuXHRcdFx0Ly97c3JjOiwgaWQ6fSxcblx0XHRcdHtzcmM6IFwibWlkZGxlX3RlcnJhaW4ucG5nXCIsIGlkOlwibWlkZGxlX3RlcnJhaW5cIn0sXG5cdFx0XHR7c3JjOiBcImJvdHRvbV90ZXJyYWluLnBuZ1wiLCBpZDogXCJib3R0b21fdGVycmFpblwifSxcblx0XHRcdHtzcmM6IFwiZ3Jhc3Nfc3VtbWVyLnBuZ1wiLCBpZDogXCJncmFzc19zdW1tZXJcIiB9LFxuXHRcdFx0e3NyYzogXCJncmFzc193aW50ZXIucG5nXCIsIGlkOiBcImdyYXNzX3dpbnRlclwiIH0sXG5cdFx0XHR7c3JjOiBcImdyYXNzX2ZhbGwucG5nXCIsIGlkOiBcImdyYXNzX2ZhbGxcIiB9LFxuXHRcdFx0e3NyYzogXCJncmFzc19zcHJpbmcucG5nXCIsIGlkOiBcImdyYXNzX3NwcmluZ1wiIH0sXG5cdFx0XHR7c3JjOiBcIkFudENob21wZXJzLnBuZ1wiLCBpZDogXCJBbnQxXCJ9LFxuXHRcdFx0e3NyYzogXCJBbnRDaG9tcGVyczIucG5nXCIsIGlkOiBcIkFudDJcIn0sXG5cdFx0XHR7c3JjOiBcIkFudENob21wZXJzRGVhdGgucG5nXCIsIGlkOiBcIkFudDNcIn0sXG5cdFx0XHR7c3JjOiBcIkdyZWVrIExhbmRzY2FwZSBmYWxsLnBuZ1wiLCBpZDogXCJGYWxsXCJ9LFxuXHRcdFx0e3NyYzogXCJHcmVlayBMYW5kc2NhcGUgc3ByaW5nLnBuZ1wiLCBpZDogXCJTcHJpbmdcIn0sXG5cdFx0XHR7c3JjOiBcIkdyZWVrIExhbmRzY2FwZSB3aW50ZXIucG5nXCIsIGlkOiBcIldpbnRlclwifSxcblx0XHRcdHtzcmM6IFwiR3JlZWsgTGFuZHNjYXBlIHN1bW1lci5wbmdcIiwgaWQ6IFwiU3VtbWVyXCJ9LFxuXHRcdFx0e3NyYzogXCJncmlmZmluUGhhc2UxU21hbGwucG5nXCIsIGlkOiBcIkdyaWZmaW4xXCIgfSxcblx0XHRcdHtzcmM6IFwiZ3JpZmZpblBoYXNlMlNtYWxsLnBuZ1wiLCBpZDogXCJHcmlmZmluMlwiIH0sXG5cdFx0XHR7c3JjOiBcImdyaWZmaW5QaGFzZTNTbWFsbC5wbmdcIiwgaWQ6IFwiR3JpZmZpbjNcIiB9LFxuXHRcdFx0eyBzcmM6IFwiZ3JpZmZpbkRlYXRoU21hbGwucG5nXCIsIGlkOiBcIkdyaWZmaW5EZWF0aFwiIH0sXG4gICAgICAgICAgICB7IHNyYzogXCJncmlmZmluRGVhdGhTbWFsbDIucG5nXCIsIGlkOiBcIkdyaWZmaW5EZWF0aDJcIiB9LFxuICAgICAgICAgICAgeyBzcmM6IFwiZ3JpZmZpbkRlYXRoU21hbGwzLnBuZ1wiLCBpZDogXCJHcmlmZmluRGVhdGgzXCIgfSxcblx0XHRcdHsgc3JjOiBcIk1lZHVzYVNoZWV0LnBuZ1wiLCBpZDogXCJNZWR1c2ExXCIgfSxcblx0XHRcdHtzcmM6IFwicGxhdGZvcm1fbGVmdC5wbmdcIiwgaWQ6IFwibGVmdF9wbGF0Zm9ybVwiIH0sXG5cdFx0XHR7c3JjOiBcInBsYXRmb3JtX21pZGRsZS5wbmdcIiwgaWQ6IFwibWlkZGxlX3BsYXRmb3JtXCIgfSxcblx0XHRcdHtzcmM6IFwicGxhdGZvcm1fcmlnaHQucG5nXCIsIGlkOiBcInJpZ2h0X3BsYXRmb3JtXCIgfSxcblx0XHRcdHtzcmM6IFwiSHllbmFQaGFzZTMucG5nXCIsIGlkOiBcIkh5ZW5hU3ByaXRlXCIgfSxcblx0XHRcdHtzcmM6IFwicGxhdGZvcm1fc3Bpa2VzLnBuZ1wiLCBpZDogXCJwbGF0Zm9ybV9zcGlrZXNcIiB9LFxuXHRcdFx0e3NyYzogXCJIZXJvLnBuZ1wiLCBpZDogXCJIZXJvXCJ9LFxuXHRcdFx0e3NyYzogXCJIZXJvSGl0UmVkLnBuZ1wiLCBpZDogXCJIZXJvUlwifSxcblx0XHRcdHtzcmM6IFwiSGVyb0hpdFdoaXRlLnBuZ1wiLCBpZDogXCJIZXJvV1wifSxcblx0XHRcdHtzcmM6IFwiSGVyb1JlZC5wbmdcIiwgaWQ6IFwiSGVyb1JlZFwifSxcblx0XHRcdHtzcmM6IFwiSGVyb1BpbmsucG5nXCIsIGlkOiBcIkhlcm9QaW5rXCJ9LFxuXHRcdFx0e3NyYzogXCJIZXJvQmx1ZS5wbmdcIiwgaWQ6IFwiSGVyb0JsdWVcIn0sXG5cdFx0XHR7c3JjOiBcIkhlcm9MUHVycGxlLnBuZ1wiLCBpZDogXCJIZXJvTFB1cnBsZVwifSxcblx0XHRcdHtzcmM6IFwiSGVyb09yYW5nZS5wbmdcIiwgaWQ6IFwiSGVyb09yYW5nZVwifSxcblx0XHRcdHtzcmM6IFwiSGVyb0xCLnBuZ1wiLCBpZDogXCJIZXJvTGlnaHRCbHVlXCJ9LFxuXHRcdFx0e3NyYzogXCJIZXJvTEcucG5nXCIsIGlkOiBcIkhlcm9MaWdodEdyZWVuXCJ9LFxuXHRcdFx0e3NyYzogXCJIZXJvR3JlZW4ucG5nXCIsIGlkOiBcIkhlcm9HcmVlblwifSxcbiAgICAgICAgICAgIHtzcmM6IFwicGl6emEucG5nXCIsIGlkOiBcInBpenphXCJ9LFxuXG5cdFx0XHRcblx0XHRdOyBcblx0XHQvLyBUT0RPIG1ha2UgYWRkaW5nIHJlc291cmNlcyBlYXNpZXI/IEF1dG9tYXRpYyBsb2FkaW5nIFxuXHRcdC8vIG9mIGV2ZXJ5dGhpbmcgZnJvbSBhc3NldHMsIGF1dG9tYXRpYyBuYW1lcyBldGMuP1xuXG5cdHRoaXMuc2hhcGVzID0ge307IC8vIG1heWJlIHRoaXMgYXJlbid0IG5lZWRlZFxuXG5cdHRoaXMuYml0bWFwcyA9IHt9O1xuXG5cdHRoaXMuYW5pbWF0aW9ucyA9IHt9O1xuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEFzc2V0TW9kZWw7XG4iLCJ2YXIgRW50aXR5TW9kZWwgPSBmdW5jdGlvbigpe1x0XG5cdC8vIGFzc29jaWF0ZXMgdHlwZSB3aXRoIHRoZSBBSVxuXHR0aGlzLnR5cGVfdG9fQUkgPSB7fTtcblxuXHR0aGlzLmZvcl9sb2dpY191cGRhdGUgPSB7fTsgLy8ga2V5OiB0eXBlLCB2YWx1ZTogdGFibGUgb2Ygb2JqZWN0cyB3aXRoIGlkIGZvciBrZXksIG9iamVjdCBmb3IgdmFsdWVcblx0XG5cdFxuXHR0aGlzLmhlcm9fc3Bhd25lZCA9IGZhbHNlO1xuXG5cdC8vIGFzc2ljaWF0ZXMgcGxheWVyIG5ldHdvcmsgaWQgd2l0aCB0aGUgaGVybyBlbnRpdHkgaW5zdGFuY2Vcblx0dGhpcy5oZXJvZXMgPSB7fTtcblxuXHQvLyBsYXN0IHZlbG9jaXR5IGZvciBteSBoZXJvXG5cdC8vIHVzZWQgdG8gY2hlY2sgaG93IG11Y2ggdmVsb2NpdHkgY2hhbmdlZCBzaW5jZSB0aGUgbGFzdCB0aWNrXG5cdHRoaXMuaGVyb19sYXN0X3ZlbG9jaXR5ID0ge3g6IDAsIHk6IDB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBuZXcgRW50aXR5TW9kZWw7XG5cbiIsInZhciBHYW1lTW9kZWwgPSBuZXcgZnVuY3Rpb24oKXsgLy8gbWFpbiBtb2RlbFxuICAgIHRoaXMucGF1c2VDb3VudGVyID0gMDtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gR2FtZU1vZGVsO1xuIiwidmFyIEdyYXBoaWNzTW9kZWwgPSBmdW5jdGlvbigpe1xuXHR0aGlzLnN0YWdlOyAvLyBtYWluIHN0YWdlIHRvIHdoZXJlIGV2ZXJ5dGhpbmcgd2lsbCBiZSBkcmF3blxuXHQvLyBub3RlIHRoYXQgZXZlcnkgZ3JhcGhpY3Mgb2JqZWN0IG11c3QgYmUgYXVnbWVudGVkIHdpdGhcblx0Ly8gdGhlIHJlZmVyZW5jZSB0byB0aGUgY29ycmVzcG9uZGluZyBwaHlzaWNzIG9iamVjdCwgaWYgYW55XG5cdHRoaXMub3RoZXJfcGxheWVycyA9IFtdOyAvLyBhcnJheSBvZiBwbGF5ZXJzIG90aGVyIHRoZW4gaGVybyBmb3IgbXVsdGlwbGF5ZXJcblxuXHQvLyBhbGwgb2JqZWN0IHJlZ2lzdGVyZWQgZm9yIGNvbnRpbmlvdXMgdXBkYXRlIHRvIG1hdGNoIHRoZWlyIHBoeXNpY2FsIGJvZHlcblx0Ly8gcG9zaXRpb24gXG5cdHRoaXMuYWxsX3BoeXNpY2FsID0ge307IFxuXHR0aGlzLnNwZWNpYWxfcmVuZGVyID0ge307IC8vIG1hdGNoZXMgdHlwZSB3aXRoIGFycmF5IG9mIGFsbCBvYmplY3RzIG9mIHRoYXQgdHlwZSB0byBiZSByZW5kZXJlZFxuXG5cdC8vIGFsbCBzcHJpdGVzaGVldCBkZWZpbml0aW9ucyAoYWRkZWQgYXQgdGhlIGluaXRpYWxpemF0aW9uIHN0YWdlXG5cdC8vIGJlY2F1c2UgdGhleSBuZWVkIGFzc2V0cyB0byBiZSBsb2FkZWQpXG5cdHRoaXMuc3ByaXRlc2hlZXRzID0ge307IFxuXG5cdHRoaXMuY2FtZXJhID0ge1xuXHRcdC8vIHNob3VsZCBiZSBlYXNlbGpzIG9iamVjdCBvciBudWxsXG5cdFx0Zm9sbG93aW5nOiBudWxsLFxuXG5cdFx0Ly8gaW50ZXJuYWwgY2FtZXJhIGltcGxlbWVudGF0aW9uIHRoaW5nIHRvIGtub3cgaG93IGZhciB0byBvZmZzZXQgZnJvbSB0aGVcblx0XHQvLyBpbml0aWFsIHBvc2l0aW9uXG5cdFx0b2Zmc2V0OiB7eDogMCwgeTogMH0sXG5cblx0XHQvLyB0aGUgb2Zmc2V0IG9mIHRoZSBjYW1lcmEgZnJvbSB0aGUgZm9sbG93ZWQgb2JqZWN0XG5cdFx0Ly8gZS5nLiBvZmZzZXQgb2Yge3g6IDEwMCwgeTogMTAwfSB3aWxsIGNlbnRlciBjYW1lcmFcblx0XHQvLyAxMDAgcGl4ZWxzIHRvIHRoZSByaWdodCBhbmQgMTAwIHBpeGVscyBiZWxvdyB0aGUgZm9sbG93ZWQgb2JqZWN0XG5cdFx0b2Zmc2V0X2Zyb21fZm9sbG93ZWQ6IHsgeDogNDAwLCB5OiAtMTAwIH0sXG5cdFx0Ly9vZmZzZXRfZnJvbV9mb2xsb3dlZDoge3g6IDMzMCwgeTogLTIwNX0sIC8vRk9SIEdBTUUgUEFHRVxuXHRcdC8vIHRoaXMgaXMgY2VudGVyIG9mIHRoZSBzY3JlZW4gaW4gcGl4ZWxzLiBnZXRzIGR5bmFtaWNhbGx5IHJlY2FsY3VsYXRlZCBcblx0XHQvLyBkdXJpbmcgdGhlIGNhbWVyYSB1cGRhdGUgc28gaWYgaXQncyBldmVyIGNoYW5nZWQsIGNhbWVyYSBzdGlsbCB3b3JrcyBhcyBleHBlY3RlZFxuXHRcdGNlbnRlcjoge3g6IDAsIHk6IDB9XG5cblx0fTtcblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBuZXcgR3JhcGhpY3NNb2RlbDtcblxuIiwiXG52YXIgSWRlbnRpZmljYXRpb25Nb2RlbCA9IGZ1bmN0aW9uKCl7XG5cdFxuXHQvLyBuZXh0IHVuaXF1ZSBpZCB0byBiZSBnaXZlbiBpZiBub3QgZnJlZSBpZCdzIHJlbWFpblxuXHR0aGlzLm5leHRfaWQgPSAwO1xuXG5cdC8vIGFycmF5IG9mIGZyZWUgaWQncy4gcHVzaCB3aGVuIGZyZWVkLCBwb3Agd2hlbiBmcmVlIGlkIGlzIG5lZWRlZFxuXHQvLyBpZiBhcnJheSBpcyBlbXB0eSwgZ2V0IG5leHQgaWQgdXNpbmcgPm5leHRfaWQ8XG5cdHRoaXMuZnJlZV9pZHMgPSBbXTtcblxuXHQvLyBhcnJheSBtYXRjaGVzIGlkcyB0byB0aGVpciBjb3JyZXNwb25kaW5nIG9iamVjdHNcblx0dGhpcy5pZF9tYXRjaGluZyA9IFtdO1xuXG5cdC8vIHJlZ2lzdHJ5IG9mIHR5cGVzIHRvIG1ha2Ugc3VyZSB0aGF0IG5vIHR5cGUgaXMgcmVnaXN0ZXJkIHR3aWNlXG5cdC8vIGFuZCBlbmFibGUgcGVvcGxlIHRvIGdldCB0aGUgbW9kZWwgYnkgdHlwZSBuYW1lXG5cdHRoaXMudHlwZXMgPSB7fVxuXG5cdC8vbGlzdCBvZiBoZXJvZXMgYW5kIGNvbXBhbmlvbnMgc3Bhd25lZFxuXHR0aGlzLmhlcm87XG5cdHRoaXMuY29tcGFuaW9ucyA9IFtdO1xuXG5cdHRoaXMucmVzZXJ2ZWQgPSBbXTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gbmV3IElkZW50aWZpY2F0aW9uTW9kZWw7XG5cblxuIiwidmFyIEtleWJvYXJkTW9kZWwgPSBmdW5jdGlvbigpe1xuXG5cdC8vIG93biBrZXlzIHRoYXQgYXJlIGN1cnJlbnRseSBhY3RpdmVcblx0dGhpcy5rZXlzID0ge1xuXHR9O1xuXG5cdHRoaXMuc3RhdGVfY2hhbmdlZCA9IGZhbHNlO1xuXG5cdC8vIHRhYmxlIG9mIGFsbCBrZXlzIHRoYXQgaGF2ZVxuXHQvLyBjaGFuZ2VkIHNpbmNlIHRoZSBsYXN0IHRpY2tcblx0Ly8ga2V5IGlzIGtleWNvZGUsIHZhbHVlIGlzIGJvb2xlYW5cblx0Ly8gaW5kaWNhdGluZyB3aGV0aGVyIGtleSB3YXMgcHJlc3NlZCBvciByZWxlYXNlZFxuXHQvLyBUT0RPOiBpbXBsZW1lbnQ7XG5cdC8vIGlkZWEgaXMgdGhhdCBvbmx5IGNvbW1hbmRzIGZvciByZWxldmFudCB0YWJsZXMgd2lsbCBiZSBzZW50XG5cdC8vIG92ZXJzZWFzXG5cdHRoaXMuY2hhbmdlZF9rZXlzID0ge307XG5cblx0Ly8gb3duIGtleXMgdGhhdCB3ZXJlIGFjdGl2ZSBwcmV2aW91cyB0aWNrXG5cdC8vdGhpcy5vbGRfa2V5cyA9IHtcblx0Ly99O1xuXG5cdC8vIHRhYmxlIG9mIG5ldHdvcmsgcGxheWVyIGlkcyBhc3NvY2lhdGVkXG5cdC8vIHdpdGggdGhlIGxhc3QgcmVnaXN0ZXJlZCBzdGF0ZSBvZiB0aGVpciBrZXlib3JhZHNcblx0dGhpcy5hbGxfa2V5Ym9hcmRfc3RhdGVzID0ge1xuXHR9XG5cblx0dGhpcy50cmFuc2xhdGlvbl90YWJsZXMgPSB7XG5cdFx0Y29kZV90b19uYW1lOiB7XG5cdFx0XHQ4OiAgIFwiYmFja3NwYWNlXCIsIC8vICBiYWNrc3BhY2Vcblx0XHRcdDk6ICAgXCJ0YWJcIiwgLy8gIHRhYlxuXHRcdFx0MTM6ICBcImVudGVyXCIsIC8vICBlbnRlclxuXHRcdFx0MTY6ICBcInNoaWZ0XCIsIC8vICBzaGlmdFxuXHRcdFx0MTc6ICBcImN0cmxcIiwgLy8gIGN0cmxcblx0XHRcdDE4OiAgXCJhbHRcIiwgLy8gIGFsdFxuXHRcdFx0MTk6ICBcInBhdXNlL2JyZWFrXCIsIC8vICBwYXVzZS9icmVha1xuXHRcdFx0MjA6ICBcImNhcHMgbG9ja1wiLCAvLyAgY2FwcyBsb2NrXG5cdFx0XHQyNzogIFwiZXNjYXBlXCIsIC8vICBlc2NhcGVcblx0XHRcdDMzOiAgXCJwYWdlIHVwXCIsIC8vIHBhZ2UgdXAsIHRvIGF2b2lkIGRpc3BsYXlpbmcgYWx0ZXJuYXRlIGNoYXJhY3RlciBhbmQgY29uZnVzaW5nIHBlb3BsZVxuXHRcdFx0MzQ6ICBcInBhZ2UgZG93blwiLCAvLyBwYWdlIGRvd25cblx0XHRcdDM1OiAgXCJlbmRcIiwgLy8gZW5kXG5cdFx0XHQzNjogIFwiaG9tZVwiLCAvLyBob21lXG5cdFx0XHQzNzogIFwibGVmdCBhcnJvd1wiLCAvLyBsZWZ0IGFycm93XG5cdFx0XHQzODogIFwidXAgYXJyb3dcIiwgLy8gdXAgYXJyb3dcblx0XHRcdDM5OiAgXCJyaWdodCBhcnJvd1wiLCAvLyByaWdodCBhcnJvd1xuXHRcdFx0NDA6ICBcImRvd24gYXJyb3dcIiwgLy8gZG93biBhcnJvd1xuXHRcdFx0NDU6ICBcImluc2VydFwiLCAvLyBpbnNlcnRcblx0XHRcdDQ2OiAgXCJkZWxldGVcIiwgLy8gZGVsZXRlXG5cdFx0XHQ0ODogIFwiMFwiLFxuXHRcdFx0NDk6ICBcIjFcIixcblx0XHRcdDUwOiAgXCIyXCIsXG5cdFx0XHQ1MTogIFwiM1wiLFxuXHRcdFx0NTI6ICBcIjRcIixcblx0XHRcdDUzOiAgXCI1XCIsXG5cdFx0XHQ1NDogIFwiNlwiLFxuXHRcdFx0NTU6ICBcIjdcIixcblx0XHRcdDU2OiAgXCI4XCIsXG5cdFx0XHQ1NzogIFwiOVwiLFxuXHRcdFx0NjU6ICBcImFcIixcblx0XHRcdDY2OiAgXCJiXCIsXG5cdFx0XHQ2NzogIFwiY1wiLFxuXHRcdFx0Njg6ICBcImRcIixcblx0XHRcdDY5OiAgXCJlXCIsXG5cdFx0XHQ3MDogIFwiZlwiLFxuXHRcdFx0NzE6ICBcImdcIixcblx0XHRcdDcyOiAgXCJoXCIsXG5cdFx0XHQ3MzogIFwiaVwiLFxuXHRcdFx0NzQ6ICBcImpcIixcblx0XHRcdDc1OiAgXCJrXCIsXG5cdFx0XHQ3NjogIFwibFwiLFxuXHRcdFx0Nzc6ICBcIm1cIixcblx0XHRcdDc4OiAgXCJuXCIsXG5cdFx0XHQ3OTogIFwib1wiLFxuXHRcdFx0ODA6ICBcInBcIixcblx0XHRcdDgxOiAgXCJxXCIsXG5cdFx0XHQ4MjogIFwiclwiLFxuXHRcdFx0ODM6ICBcInNcIixcblx0XHRcdDg0OiAgXCJ0XCIsXG5cdFx0XHQ4NTogIFwidVwiLFxuXHRcdFx0ODY6ICBcInZcIixcblx0XHRcdDg3OiAgXCJ3XCIsXG5cdFx0XHQ4ODogIFwieFwiLFxuXHRcdFx0ODk6ICBcInlcIixcblx0XHRcdDkwOiAgXCJ6XCIsXG5cdFx0XHQ5MTogIFwibGVmdCB3aW5kb3dcIiwgLy8gbGVmdCB3aW5kb3dcblx0XHRcdDkyOiAgXCJyaWdodCB3aW5kb3dcIiwgLy8gcmlnaHQgd2luZG93XG5cdFx0XHQ5MzogIFwic2VsZWN0IGtleVwiLCAvLyBzZWxlY3Qga2V5XG5cdFx0XHQ5NjogIFwibnVtcGFkIDBcIiwgLy8gbnVtcGFkIDBcblx0XHRcdDk3OiAgXCJudW1wYWQgMVwiLCAvLyBudW1wYWQgMVxuXHRcdFx0OTg6ICBcIm51bXBhZCAyXCIsIC8vIG51bXBhZCAyXG5cdFx0XHQ5OTogIFwibnVtcGFkIDNcIiwgLy8gbnVtcGFkIDNcblx0XHRcdDEwMDogXCJudW1wYWQgNFwiLCAvLyBudW1wYWQgNFxuXHRcdFx0MTAxOiBcIm51bXBhZCA1XCIsIC8vIG51bXBhZCA1XG5cdFx0XHQxMDI6IFwibnVtcGFkIDZcIiwgLy8gbnVtcGFkIDZcblx0XHRcdDEwMzogXCJudW1wYWQgN1wiLCAvLyBudW1wYWQgN1xuXHRcdFx0MTA0OiBcIm51bXBhZCA4XCIsIC8vIG51bXBhZCA4XG5cdFx0XHQxMDU6IFwibnVtcGFkIDlcIiwgLy8gbnVtcGFkIDlcblx0XHRcdDEwNjogXCJtdWx0aXBseVwiLCAvLyBtdWx0aXBseVxuXHRcdFx0MTA3OiBcImFkZFwiLCAvLyBhZGRcblx0XHRcdDEwOTogXCJzdWJ0cmFjdFwiLCAvLyBzdWJ0cmFjdFxuXHRcdFx0MTEwOiBcImRlY2ltYWwgcG9pbnRcIiwgLy8gZGVjaW1hbCBwb2ludFxuXHRcdFx0MTExOiBcImRpdmlkZVwiLCAvLyBkaXZpZGVcblx0XHRcdDExMjogXCJGMVwiLCAvLyBGMVxuXHRcdFx0MTEzOiBcIkYyXCIsIC8vIEYyXG5cdFx0XHQxMTQ6IFwiRjNcIiwgLy8gRjNcblx0XHRcdDExNTogXCJGNFwiLCAvLyBGNFxuXHRcdFx0MTE2OiBcIkY1XCIsIC8vIEY1XG5cdFx0XHQxMTc6IFwiRjZcIiwgLy8gRjZcblx0XHRcdDExODogXCJGN1wiLCAvLyBGN1xuXHRcdFx0MTE5OiBcIkY4XCIsIC8vIEY4XG5cdFx0XHQxMjA6IFwiRjlcIiwgLy8gRjlcblx0XHRcdDEyMTogXCJGMTBcIiwgLy8gRjEwXG5cdFx0XHQxMjI6IFwiRjExXCIsIC8vIEYxMVxuXHRcdFx0MTIzOiBcIkYxMlwiLCAvLyBGMTJcblx0XHRcdDE0NDogXCJudW0gbG9ja1wiLCAvLyBudW0gbG9ja1xuXHRcdFx0MTQ1OiBcInNjcm9sbCBsb2NrXCIsIC8vIHNjcm9sbCBsb2NrXG5cdFx0XHQxODY6IFwiO1wiLCAvLyBzZW1pLWNvbG9uXG5cdFx0XHQxODc6IFwiPVwiLCAvLyBlcXVhbC1zaWduXG5cdFx0XHQxODg6IFwiLFwiLCAvLyBjb21tYVxuXHRcdFx0MTg5OiBcIi1cIiwgLy8gZGFzaFxuXHRcdFx0MTkwOiBcIi5cIiwgLy8gcGVyaW9kXG5cdFx0XHQxOTE6IFwiL1wiLCAvLyBmb3J3YXJkIHNsYXNoXG5cdFx0XHQxOTI6IFwiYFwiLCAvLyBncmF2ZSBhY2NlbnRcblx0XHRcdDIxOTogXCJbXCIsIC8vIG9wZW4gYnJhY2tldFxuXHRcdFx0MjIwOiBcIlxcXFxcIiwgLy8gYmFjayBzbGFzaFxuXHRcdFx0MjIxOiBcIl1cIiwgLy8gY2xvc2UgYnJhY2tldFxuXHRcdFx0MjIyOiBcIidcIiwgLy8gc2luZ2xlIHF1b3RlXG5cdFx0fSxcblxuXHRcdG1vdmVtZW50OiB7XG5cdFx0XHRcImxlZnQgYXJyb3dcIjogXCJsZWZ0XCIsXG5cdFx0XHRcInVwIGFycm93XCI6IFwidXBcIixcblx0XHRcdFwiZG93biBhcnJvd1wiOiBcImRvd25cIixcblx0XHRcdFwicmlnaHQgYXJyb3dcIjogXCJyaWdodFwiLFxuXHRcdH0sXG5cblx0XHRwYXVzZToge1xuXHRcdCAgICBcInBcIjogXCJwYXVzZVwiLFxuXHRcdH0sXG5cdFx0XG5cdFx0ZGVidWc6IHtcblx0XHRcdFwiYVwiOiBcInNwYXduX2FudFwiLFxuXHRcdFx0XCJtXCI6IFwic3Bhd25fbWVkdXNhXCIsXG5cdFx0XHRcInpcIjogXCJzZWFzb25cIixcblx0XHRcdFwiZ1wiOiBcInNwYXduX2dyaWZmaW5cIixcblx0XHRcdFwic1wiOiBcIm5ld19zbGljZVwiLFxuXHRcdFx0XCJoXCI6IFwic3Bhd25faHllbmFcIixcblx0XHRcdFwiY1wiOiBcImNvbm5lY3RcIixcblx0XHRcdFwidlwiOiBcInJlcXVlc3RfaGVyb1wiLFxuXHRcdFx0XCJpXCI6IFwic2hvd19pZHNcIixcbiAgICAgICAgICAgIFwia1wiOiBcInNwYXduX3BpenphXCIsXG5cdFx0fSxcblxuXHR9XG5cblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBuZXcgS2V5Ym9hcmRNb2RlbDtcblxuIiwidmFyIE11bHRpcGxheWVyU3luY01vZGVsID0gZnVuY3Rpb24oKXtcblx0dGhpcy5oZXJvID0gbnVsbDtcblxuXHR0aGlzLm9wX3BhY2tldHNfdGFibGUgPSB7fTtcblx0XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IG5ldyBNdWx0aXBsYXllclN5bmNNb2RlbDtcblxuXG4iLCJ2YXIgTmV0d29ya01vZGVsID0gZnVuY3Rpb24oKXtcblx0dGhpcy5jb25uZWN0ZWQgPSBmYWxzZTsgLy8gZmxhZyB0byBpbmRpY2F0ZSBpZiBhbHJlYWR5IGNvbm5lY3RlZCB0byB0aGUgbmV0d29ya1xuXG5cdC8vIGZsYWcgdG8gaW5kaWNhdGUgd2hldGhlciB0byBkaXNhbGxvdyBjb25uZWN0aW9ucywgdXNlZnVsIHRvIHByZXZlbnRcblx0Ly8gbW9yZSBhdHRlbXB0cyB0byBjb25uZWN0IHdoZW4gY29ubmVjdGlvbiBpcyBhbHJlYWR5IGJlaW5nIGVzdGFibGlzaGVkXG5cdHRoaXMuYmxvY2tfY29ubmVjdGlvbnM7IFxuXG5cdHRoaXMubXlfcGVlciA9IG51bGw7XG5cdHRoaXMubXlfaWQgPSBudWxsO1xuXG5cdHRoaXMubWFzdGVyX2lkID0gbnVsbDsgLy8gaWQgb2YgdGhlIG1hc3RlciB3aXRoIHdob21lIGV2ZXJ5b25lIHN5bmNlc1xuXG5cdC8vIHRoaXMgaXMgZm9yIHN0YW5kYXJ0IChub24tdGVzdCkgbW9kZVxuXHQvLyBJIHBsYW4gdG8gbWFrZSB0ZXN0IG1vZGUgdXNlIHRoaXMgdG9vLCBldmVudHVhbGx5XG5cdHRoaXMucGVlcnNfdG9fY29ubmVjdCA9IG51bGw7XG5cdFxuXG5cdC8vIHBsYXllcl9pZCBhc3NvY2lhdGVkIHdpdGggdGhlIGNvbm5lY3Rpb24gb2JqZWN0XG5cdHRoaXMuY29ubmVjdGlvbnMgPSBudWxsO1xuXG5cdHRoaXMuc2VuZF9hcnJheSA9IG51bGw7XG5cdHRoaXMucmVjaWV2ZV9hcnJheSA9IG51bGw7XG5cblx0dGhpcy5vbmVfcGFja2V0ID0gbnVsbDsgLy8gdXNlZCB0byBzdG9yZSBvbmUgcGFja2V0LCBmb3Igb25lIHBhY2tldCBjb21tdW5pY2F0aW9uXG5cblx0dGhpcy5pbnB1dF9jZWxsID0gbnVsbDtcblx0dGhpcy5vdXRwdXRfY2VsbCA9IG51bGw7XG5cdHRoaXMuY291bnRlciA9IDA7IC8vIHRlbXBcblxuXHQvLyBsaW5rZWQgbGlzdCB0byBzdG9yZSB0aGUgYmFja2xvZyBvZiBwYWNrZXRzIGZvciB0aGUgY29tbXVuaWNhdGlvbiB0aGF0IG5lZWRzIHRoYXRcblx0dGhpcy5wYWNrYWdlX2JhY2tsb2cgPSB7SEVBRDogbnVsbCwgVEFJTDogbnVsbH0gXG5cblx0Ly8gVElNRSBcblx0XHR0aGlzLmJlZ2luX3RpbWUgPSBudWxsOyAvLyBzZWNvbmRzXG5cdFx0dGhpcy50aW1lb3V0X2lkID0gbnVsbDtcblx0Ly8gRU5EIFRJTUVcblx0XG5cdC8vIFRFU1RJTkcgTU9ERSBTVFVGRi4gU0hPVUxEIEJFIE1FUkdFRCBXSVRIIEdFTkVSQUwgU1RVRkYgSUYgUE9TU0lCTEVcblx0XG5cdHRoaXMubm9uX2ZyZWVfaWRzID0gW1xuXHRdO1xuXG5cdHRoaXMuZnJlZV9pZHMgPSBbXG5cdF07XG5cblx0Ly8gRU5EIFRFU1RJTkcgTU9ERSBTVFVGRlxuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IG5ldyBOZXR3b3JrTW9kZWw7XG5cblxuIiwiXG52YXIgUGh5c2ljc01vZGVsID0gZnVuY3Rpb24oKSB7XG5cdFxuXHR0aGlzLmdyYXZpdHk7XG5cdHRoaXMud29ybGQ7XG4gXG5cdC8vIGdldHRpbmcgY29udGV4dCBvZiB0aGUgZGVidWcgY2FudmFzLCBmb3IgYm94MmQgdG8gZHJhdyBkZWJ1Z2dpbiBib3hlc1xuXG5cdC8vIHRpbWVUb0NvdmVyIGlzIHRoZSB0aW1lIHRoYXQgc2ltdWxhdGlvbiBtdXN0IGNvdmVyIHRvIGNhdGNoIHVwIHRvIHRoZSByZWFsIHdvcmxkIHRpbWU7XG5cdC8vIHNpbmNlIGNyZWF0ZWpzIHRpY2tlciBpcyB3aGF0IHdlIHVzZSBmb3IgdGltaW5nLCBhbmQgYm94MmQgdGlja3Ncblx0Ly8gbXVzdCBiZSBvZiBjb25zdGFudCBsZW5ndGggYW5kIGluZGVwZW5kZW50IGZyb20gdGhlIGdyYXBoaWNzIGZyYW1lcmF0ZSxcblx0Ly8gd2Uga2VlcCB0cmFjayBvZiB0aW1lIHRoYXQgcGFzc2VkIHNpbmNlIGxhc3QgYm94MmQgc3RlcCBieSBhZGRpbmcgdGltZSBkZWx0YXNcblx0Ly8gdG8gdGhlIHRpbWVUb0NvdmVyLiBUaGVuLCB3aGVuIHRpbWVUb0NvdmVyIGV4Y2VlZHMgZGVzaXJlZCBib3gyZCBzdGVwIGxlbmd0aCxcblx0Ly8gd2UgcGVyZm9ybSB0aGUgc3RlcCBhbmQgc3VidHJhY3QgdGhlIGNvcnJlc3BvbmRpbmcgdGltZSBmcm9tIHRoZSB0aW1lVG9Db3Zlcjtcblx0Ly8gSWYgYW55dGhpbmcgaXMgc3RpbGwgdW5jbGVhciwgYXNrIG1lIChBSyk7XG5cdFx0dGhpcy50aW1lVG9Db3ZlciA9IDA7IFxuXG5cdHRoaXMuc3RlcF9hbW91bnQ7XG5cblx0dGhpcy5hd2FpdGluZ19jb250YWN0ID0ge1xuXHRcdFByZVNvbHZlOiB7fSxcblx0XHRQb3N0U29sdmU6IHt9LFxuXHRcdEJlZ2luQ29udGFjdDoge30sXG5cdFx0RW5kQ29udGFjdDoge30sXG5cdH07XG5cbn07IFxuXG4vKlxuICogUGFyYW1ldGVycyBmb3IgYjJkIGJvZHkgZGVmaW5pdGlvblxuXHRhY3RpdmU6IHRydWVcblx0YWxsb3dTbGVlcDogdHJ1ZVxuXHRhbmdsZTogMFxuXHRhbmd1bGFyRGFtcGluZzogMFxuXHRhbmd1bGFyVmVsb2NpdHk6IDBcblx0YXdha2U6IHRydWVcblx0YnVsbGV0OiBmYWxzZVxuXHRmaXhlZFJvdGF0aW9uOiBmYWxzZVxuXHRpbmVydGlhU2NhbGU6IDFcblx0bGluZWFyRGFtcGluZzogMFxuXHRsaW5lYXJWZWxvY2l0eTogYjJWZWMyXG5cdHBvc2l0aW9uOiBiMlZlYzJcblx0dHlwZTogMFxuXHR1c2VyRGF0YTogbnVsbFxuKi9cblxuLypcbiAqIEZpeHR1cmUgZGVmaW5pdGlvbiBwYXJhbWV0ZXJzOlxuXHRkZW5zaXR5OiAwXG5cdGZpbHRlcjogYjJGaWx0ZXJEYXRhXG5cdGZyaWN0aW9uOiAwLjJcblx0aXNTZW5zb3I6IGZhbHNlXG5cdHJlc3RpdHV0aW9uOiAwXG5cdHNoYXBlOiBudWxsXG5cdHVzZXJEYXRhOiBudWxsXG4gKi9cblxuLy8gcmVjdGFuZ3VsYXJcblBoeXNpY3NNb2RlbC5wcm90b3R5cGUucl90ZW1wbGF0ZXMgPSByX3RlbXBsYXRlcyA9IHt9O1xuLy8gY2lyY3VsYXJcblBoeXNpY3NNb2RlbC5wcm90b3R5cGUuY190ZW1wbGF0ZXMgPSBjX3RlbXBsYXRlcyA9IHt9O1xuLy8gcG9seWdvbmFsXG5QaHlzaWNzTW9kZWwucHJvdG90eXBlLnBfdGVtcGxhdGVzID0gcF90ZW1wbGF0ZXMgPSB7fTtcblxuXG5cbnJfdGVtcGxhdGVzW1wiZGVmYXVsdFwiXSA9IHtcblxuXHQvL3NoYXBlOiBcInJlY3RhbmdsZVwiLCAvLyBpbXBsaWVkIGZyb20gdGhlIHRlbXBsYXRlIHR5cGVcblx0eDogMyxcblx0eTogMyxcblx0dng6IDAsXG5cdHZ5OiAwLFxuXG5cdHdpZHRoOiA1LFxuXHRoZWlnaHQ6IDUsXG5cdGRlbnNpdHk6IDIsXG5cdGZyaWN0aW9uOiAxLFxuXHRyZXN0aXR1dGlvbjogMC4yLFxuXHRpc1NlbnNvcjogZmFsc2UsXG5cblxuXHRhY3RpdmU6IHRydWUsXG5cdGFsbG93U2xlZXA6IHRydWUsXG5cdGFuZ2xlOiAwLFxuXHRhbmd1bGFyVmVsb2NpdHk6IDAsXG5cdGF3YWtlOiB0cnVlLFxuXHRidWxsZXQ6IGZhbHNlLFxuXHRmaXhlZFJvdGF0aW9uOiBmYWxzZSxcblx0dHlwZTogXCJkeW5hbWljXCIsXG5cbn07XG5cbnJfdGVtcGxhdGVzLmxpdmluZyA9IHtcblx0Zml4ZWRSb3RhdGlvbjogdHJ1ZSxcblx0YXdha2U6IHRydWUsXG5cdGlzU2Vuc29yOiBmYWxzZSxcblx0Ly9tb2JleHArK1xufTtcblxucl90ZW1wbGF0ZXMudGVycmFpbl9jZWxsID0ge1xuXHR0eXBlOiBcInN0YXRpY1wiLFxuXHR3aWR0aDogMSxcblx0aGVpZ2h0OiAxLFxuXHRmcmljdGlvbjogMixcblx0Ly9tb2JleHArK1xufTtcblxucl90ZW1wbGF0ZXMuaGVybyA9IHtcblx0cGFyZW50OiByX3RlbXBsYXRlcy5saXZpbmcsXG5cdHdpZHRoOiAwLjksXG5cdGhlaWdodDogMS43LFxuXHRkZW5zaXR5OiA0LjUsXG5cdHR5cGU6IFwiZHluYW1pY1wiLFxuXHQvL21vYmV4cCsrXG59O1xuXG5yX3RlbXBsYXRlcy5jb21wYW5pb24gPSB7XG5cdHBhcmVudDogcl90ZW1wbGF0ZXMubGl2aW5nLFxuXHR3aWR0aDogMS41LFxuXHRoZWlnaHQ6IDIuNSxcblx0dHlwZTogXCJkeW5hbWljXCIsXG5cdC8vbW9iZXhwKytcbn07XG5cbnJfdGVtcGxhdGVzLmFudCA9IHtcblx0cGFyZW50OiByX3RlbXBsYXRlcy5saXZpbmcsXG5cdHdpZHRoOiAxLFxuXHRoZWlnaHQ6IDAuNSxcblx0dHlwZTogXCJkeW5hbWljXCIsXG5cdHg6IDQwLFxuXHR5OiAxMCxcblx0Ly9tb2JleHArK1xufTtcblxucl90ZW1wbGF0ZXMuR3JpZmZpbiA9IHtcblx0cGFyZW50OiByX3RlbXBsYXRlcy5saXZpbmcsXG5cdHdpZHRoOiA0LFxuXHRoZWlnaHQ6IDIuNSxcblx0dHlwZTogXCJkeW5hbWljXCIsXG5cdHg6IDY1LFxuXHR5OiAxMCxcblx0Ly9tb2JleHArK1xufTtcblxucl90ZW1wbGF0ZXMuSHllbmEgPSB7XG5cdHBhcmVudDogcl90ZW1wbGF0ZXMubGl2aW5nLFxuXHR3aWR0aDogMi4yNSxcblx0aGVpZ2h0OiAxLjc1LFxuXHR0eXBlOiBcImR5bmFtaWNcIixcblx0eDogNjUsXG5cdHk6IDEwLFxuXHQvL21vYmV4cCsrXG59O1xuXG5yX3RlbXBsYXRlcy50ZXN0ID0ge1xuXHR3aWR0aDogMSxcblx0aGVpZ2h0OiAyLFxuXHRmaXhlZFJvdGF0aW9uOiBmYWxzZSxcblx0Ly9tb2JleHArK1xufVxuXG5yX3RlbXBsYXRlcy5wbGF0Zm9ybSA9IHtcbiAgICB4OiAxMCxcbiAgICB5OiAxMSxcbiAgICB3aWR0aDogMTAsXG4gICAgaGVpZ2h0OiAuNSxcbiAgICB0eXBlOiBcInN0YXRpY1wiLFxufVxuXG5yX3RlbXBsYXRlcy5waXp6YSA9IHtcbiAgICBpc1NlbnNvcjogdHJ1ZSxcbiAgICB0eXBlOiBcInN0YXRpY1wiLFxuICAgIGhlaWdodDogLjUsXG4gICAgd2lkdGg6IC41LFxuICAgIHg6IDEwLFxuICAgIHk6IDExLFxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG5ldyBQaHlzaWNzTW9kZWw7XG4iLCJ2YXIgUmVnaXN0ZXJBc01vZGVsID0gZnVuY3Rpb24oKXtcblx0XG5cdC8vIHJlZ2lzdGVyIHN0dWZmIGZvciBvbmUgdGltZSBsb29rdXBcblx0Ly8gdGhlIG9uZSByZXF1ZXN0aW5nIHN0dWZmIGlzIHN1cHBvc2VkIHRvIHBvcCB0aGUgZWFjaCBleGFtaW5lZCBlbGVtZW50XG5cdC8vIHRoZXJlIGlzIG5vIHRpbWVvdXRzIG9yIGF1dG9tYXRpYyBjbGVhbnVwXG5cdHRoaXMuc2ltcGxlX29uZV90aW1lX2xvb2t1cCA9IHt9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBuZXcgUmVnaXN0ZXJBc01vZGVsO1xuXG4iLCJ2YXIgVGVycmFpbk1vZGVsID0gZnVuY3Rpb24oKXtcblx0Ly9UaGlzIGlzIHBoeXNpY3MsIGZvciBncmFwaGljcyBsb29rIGludG8gdGhlIEdyYXBoaWNzQ29udHJvbGxlci9Nb2RlbFxuXHR0aGlzLnRlcnJhaW5fc2xpY2VzX3F1ZXVlID0gW107XG5cdC8vdGhpcy5uZXdfc2xpY2VzID0gW107XG5cdHRoaXMuc2VlZDtcblxuXHQvLyBob3cgbWFueSBpbml0aWFsIChub24tcmFuZG9tKSB0ZXJyYWluIHNsaWNlc1xuXHQvLyB3ZXJlIGdlbmVyYXRlZCBhbHJlYWR5P1xuXHR0aGlzLmluaXRpYWxfZ2VuZXJhdGVkID0gMDtcblxuXG5cdC8vIHVzZWQgdG8gZGV0ZXJtaW5lIHggb2Zmc2V0IG9mIHRoZSBuZXh0IHNsaWNlXG5cdC8vIFRPRE86IHVwZGF0ZSB0aGlzIHdoZW4gdHJ1bHkgaW5maW5pdGUgdGVycmFpbiB3aWxsIGJlIGltcGxlbWVudGVkXG5cdHRoaXMuc2xpY2VfY291bnRlciA9IDA7XG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gbmV3IFRlcnJhaW5Nb2RlbDtcbiIsIlRlcnJhaW5TbGljZUNvbmZpZyA9IHJlcXVpcmUgKFwiLi4vQ29uZmlnLmpzXCIpLlRlcnJhaW5TbGljZTtcblxudmFyIFRlcnJhaW5TbGljZU1vZGVsID0gZnVuY3Rpb24oKXtcblxuXHR0aGlzLlNsaWNlID0gZnVuY3Rpb24oKXtcblx0XHQvKipcblx0XHQqIHNsaWNlIFwibW9kZWxcIiB0byBiZSBpbnN0YW50aWF0ZWRcblx0XHQqL1xuXHRcdFxuXHRcdFxuXHRcdHRoaXMubnVtID0gVGVycmFpblNsaWNlQ29uZmlnLm5leHRfc2xpY2VfaWQrKzsgLy8gYXV0b21hdGljYWxsIGFzc2lnbiBpZCBhbmQgaW5jcmVtZW50IFxuXG5cdFx0dGhpcy5ncmlkX2NvbHVtbnMgPSBUZXJyYWluU2xpY2VDb25maWcuZ3JpZF9jb2x1bW5zO1xuXHRcdHRoaXMuZ3JpZF9yb3dzID0gVGVycmFpblNsaWNlQ29uZmlnLmdyaWRfcm93cztcblx0XHR0aGlzLmNlbGxfdyA9IFRlcnJhaW5TbGljZUNvbmZpZy5jZWxsX3c7XG5cdFx0dGhpcy5jZWxsX2ggPSB0aGlzLmNlbGxfdzs7XG5cdFx0XG5cdFx0Ly8gZ3JpZFtpXVtqXSBpcyB0aGUgZWxlbWVudCBpbiB0aGUgaSdzIGNvbHVtbiBhbmQgaidzIHJvd1xuXHRcdC8vIHRoZSBncmlkIGlzIG1haWQgdG8gbWF0Y2ggdGhlIHNjcmVlbiBjb29yZGluYXRlcyBhbmQgdGhlIGN1cnJlbnQgYm94MmQgY29vcmRpbmF0ZXNcblx0XHQvLyBpLmUuIGdyaWRbMF1bMF0gaXMgdGhlIG9uZSBpbiB0aGUgdG9wIGxlZnQgY29ybmVyIG9mIHRoZSB0ZXJyYWluIHNsaWNlXG5cdFx0Ly8gZG8gd2Ugd2FudCB0byBjaGFuZ2UgaXQ/IHdvdWxkIGl0IGJlIGVhc2llciB0byBnZW5lcmF0ZSB0ZXJyYWluIGlmIHdlIHN0YXJ0IGF0IHRoZSBib3R0b20/XG5cdFx0Ly8gaWYgeWVzLCB0aGVuIHdoYXQgbWFrZXMgbW9yZSBzZW5zZSwgY2hhbmdpbmcgY29vcmRpbmF0ZSBzeXN0ZW1zIG9yIGp1c3Qgc3dpdGNoaW5nIGdlbmVyYXRpb25cblx0XHQvLyBsb29wcyBhcm91bmQ/IGRpc2N1c3Ncblx0XHQvL1xuXHRcdC8vIG5vdGljZSB0aGF0IHRoZSBncmlkIGlzIGEgdGVycmFpbiBnZW5lcmF0aW9uIGRldmljZSBvbmx5LiBvbmNlIHRlcnJhaW4gc2xpY2UgaXMgbG9hZGVkLFxuXHRcdC8vIGJveDJkIHBoeXNpY3Mgc2ltdWxhdGlvbiBtYXkgKGFuZCB3aWxsKSBnbyBudXRzIG9uIGl0LCBjaGFuZ2luZyB3aGF0ZXZlciBpdCB3YW50cyxcblx0XHQvLyBhbmQgY2hhbmdlcyB3b24ndCBhbnlob3cgYmUgcmVmbGVjdGVkIGluIHRoZSBncmlkLiB0byBrZWVwIHRyYWNrIG9mIGFsbCB0aGUgYm9kaWVzXG5cdFx0Ly8gaW4gdGhlIHRlcnJhaW4gc2xpY2UsIGlmIHRoYXQgd2lsbCBiZSBuZWVkZWQsIG90aGVyIG1lY2hhbmlzbXMgc2hvdWxkIGJlIHVzZWQuXG5cdFx0Ly8gaWRlYTogaGF2ZSBhIGNvbGxlY3Rpb25zIG9mIGJvZGllcyBieSB0eXBlLCBhbmQgc2V0dXAgc2Vuc29yIGNvbGxpc2lvbiBiZWFtc1xuXHRcdC8vIGF0IHRoZSB0ZXJyYWluIHNsaWNlcycgYm91bmRhcmllcyB0byBrZWVwIHRyYWNrIG9mIGJvZGllcyBmbHlpbmcgb3ZlciBmcm9tIG9uZVxuXHRcdC8vIHRlcnJhaW4gc2xpY2UgdG8gYW5vdGhlci4gQnR3LCBBbGksIEkgaGF0ZSB5b3UgZm9yIG1ha2luZyBtZSB0byB0eXBlIFwidGVycmFpbiBzbGljZVwiXG5cdFx0Ly8gaW5zdGVhZCBvZiB0aGUgXCJjaHVua1wiIFxuXHRcdHRoaXMuZ3JpZCA9IFtdO1xuXHRcdFxuXHRcdHRoaXMub3JpZ2luID0ge3g6IG51bGwsIHk6IG51bGx9O1xuXG5cdH07XG5cblx0dGhpcy5DZWxsID0gZnVuY3Rpb24oa2luZCl7XG5cdFx0dGhpcy5raW5kID0ga2luZDtcblx0XHR0aGlzLmJvZHk7XG5cdH1cblxuXHRcbn07XG5cblRlcnJhaW5TbGljZU1vZGVsLnByb3RvdHlwZS5sdmxfcHJvYiA9IFtcblx0WzcsIDIsIDFdLFxuXHRbMCwgNywgM10sXG5cdFswLCAxLCA5XVxuXVxuXG5tb2R1bGUuZXhwb3J0cyA9IG5ldyBUZXJyYWluU2xpY2VNb2RlbDtcbiIsInZhciBUZXN0TW9kZWwgPSBmdW5jdGlvbigpe1xuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IG5ldyBUZXN0TW9kZWw7XG5cbiIsInZhciBXb3JsZE1vZGVsID0gZnVuY3Rpb24oKXtcblx0XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IG5ldyBXb3JsZE1vZGVsO1xuXG4iLCJ2YXIgQW50UmVuZGVyZXIgPSAoZnVuY3Rpb24oKXtcblxuXHR2YXIgc3ByaXRlc2hlZXRzID0ge307XG5cdHZhciBhbnRfYW5pbWF0aW9uO1xuXG5cdHZhciBpbml0ID0gZnVuY3Rpb24oKXtcblx0XHQvKiBpcyByYW4gZnJvbSBHcmFwaGljc0NvbnRyb2xsZXIuaW5pdCBvbmNlIGR1cmluZyBnYW1lIGxvYWRpbmdcblx0XHQgXHR1c2UgdGhpcyBmdW5jdGlvbiB0byBjcmVhdGUgc3ByaXRlc2hlZXRzIGFuZCBzdWNoXG5cdFx0XHRsaWtlIHNwcml0ZXNoZWV0cy5maXJzdCA9IG5ldyBjcmVhdGVqcy5TcHJpdGVzaGVldCguLi4pO1xuXHRcdCovXG5cblx0XHRpbmNsdWRlKCk7IC8vIHNhdGlzZnkgcmVxdWlyZW1lbnRzLCBHT0VTIEZJUlNUXG5cdFx0dmFyIGdldF9hc3NldCA9IEFzc2V0Q29udHJvbGxlci5nZXRfYXNzZXQ7XG5cblx0XHRzcHJpdGVzaGVldHNbXCJhbnRcIl0gPSBuZXcgY3JlYXRlanMuU3ByaXRlU2hlZXQoe1xuXHRcdFx0XCJmcmFtZXJhdGVcIjogMSxcblx0XHRcdFwiaW1hZ2VzXCI6IFtnZXRfYXNzZXQoXCJBbnQxXCIpLCBnZXRfYXNzZXQoXCJBbnQyXCIpLCBnZXRfYXNzZXQoXCJBbnQzXCIpXSxcblx0XHRcdFwiZnJhbWVzXCI6IHsgXCJyZWdYXCI6IDMsIFwicmVnWVwiOiA2LCBcImhlaWdodFwiOiAyNSwgXCJ3aWR0aFwiOiA1MCwgXCJjb3VudFwiOiA2fSxcblx0XHRcdFwiYW5pbWF0aW9uc1wiOiB7XG5cdFx0XHRcdFwid2Fsa1wiOiBbMCwgMSwgXCJ3YWxrXCJdLFxuXHRcdFx0XHRcInVwc2lkZV9kb3duXCI6IFsyLCAzLCBcInVwc2lkZV9kb3duXCJdLFxuXHRcdFx0XHRcImRlYXRoXCI6IFs0LCA1LCBcImRlYXRoXCJdXG5cdFx0XHR9XG5cdFx0fSlcblxuXHR9O1xuXG5cdHZhciByZWdpc3RlciA9IGZ1bmN0aW9uKGVudGl0eV9hbnQpe1xuXHRcdC8qIGlzIHJhbiBmb3IgZXZlcnkgZW50aXR5IG9mIHRoaXMgdHlwZSB0aGF0IHdhcyBqdXN0IGNyZWF0ZWQgYW5kIHNob3VsZFxuXHRcdGdldCBncmFwaGljcyByZXByZXNlbnRhdGlvbi4gWW91IGFyZSBnaXZlbiB0aGUgZW50aXR5IGluc3RhbmNlIGFuZCBpcyBzdXBwb3NlZFxuXHRcdHRvIGNyZXRlIGdyYXBoaWNzIGluc3RhbmNlLCBhbmQgR3JhcGhpY3NDb250cm9sbGVyLnJlZ19mb3JfcmVuZGVyKGdyYXBoaWNzX2luc3RhbmNlLCBlbnRpdHlfaW5zdGFuY2UpOyBpdCBcblx0XHQqL1xuXG5cdFx0YW50X2FuaW1hdGlvbiA9IEdyYXBoaWNzQ29udHJvbGxlci5yZXF1ZXN0X2FuaW1hdGVkKHNwcml0ZXNoZWV0c1tcImFudFwiXSwgXCJ3YWxrXCIpO1xuXHRcdEdyYXBoaWNzQ29udHJvbGxlci5zZXRfcmVnX3Bvc2l0aW9uKGFudF9hbmltYXRpb24sIDAsIDApOyAvLyBjaGFuZ2UgdGhhdCB0byBhZGp1c3Qgc3ByaXRlIHBvc2l0aW9uIHJlbGF0aXZlIHRvIHRoZSBib2R5XG5cdFx0R3JhcGhpY3NDb250cm9sbGVyLnJlZ19mb3JfcmVuZGVyKGFudF9hbmltYXRpb24sIGVudGl0eV9hbnQpOyAvLyBzZXRzIGFudF9hbmltYXRpb24ncyBwb3NpdGlvbiB0byB0cmFjayB0aGUgYW50J3MgcG9zaXRpb24gKHVwZGF0ZXMgZWFjaCB0aWNrKVxuXG5cdFx0XG5cdH07XG5cblx0dmFyIHJlbmRlciA9IGZ1bmN0aW9uKGFudCl7XG5cdFx0LyogXHRpcyByYW4gZWFjaCB0aWNrIGZyb20gR3JhcGhpY3NDb250cm9sbGVyLCBmb3IgZXZlcnkgcmVnaXN0ZXJlZCBvYmplY3Qgb2YgdGhpcyB0eXBlXG5cdFx0XHRpcyBnaXZlbiA+Z3JhcGhpY3NfaW5zdGFuY2U8IHBhcmFtZXRlciwgd2hpY2ggaXMgYWxzbyBzdXBwb3NlZCB0byBjb250YWluXG5cdFx0XHRwaHlzaWNhbF9pbnN0YW5jZSBwcm9wZXJ0eSBjb250YWluaW5nIGVudGl0eV9pbnN0YW5jZSwgaWYgaXQgd2FzIGF0dGNoZWQgY29ycmVjdGx5XG5cdFx0Ki9cblxuXHRcdGFudF9hbmltYXRlKGFudCk7IFxuXHR9O1xuXHR2YXIgYW50X2FuaW1hdGUgPSBmdW5jdGlvbihhbnQpe1xuXHRcdC8vc2V0IGdyYXBoaWNhbCByZXByZXNlbnRhdGlvbiBiYXNlZCBvbiB0aGUgYW5pbWF0aW9uIHZhcmlhYmxlIGRldGVybWluZWQgYnkgdGhlIEFJXG5cdFx0Ly9zZXQgYW5pbWF0aW9uXG5cdFx0aWYoYW50LnBoeXNpY2FsX2luc3RhbmNlLm5lZWRzX2dyYXBoaWNzX3VwZGF0ZSl7XG5cdFx0XHR2YXIgYW5pbWF0aW9uID0gYW50LnBoeXNpY2FsX2luc3RhbmNlLmFuaW1hdGlvbjtcblx0XHRcdGFudC5nb3RvQW5kUGxheShhbmltYXRpb24pXG5cdFx0fVxuXHRcdFxuXHRcdC8vc2V0IGRpcmVjdGlvblxuXHRcdGlmIChhbnQucGh5c2ljYWxfaW5zdGFuY2UuZGlyZWN0aW9uKXsgLy9pZiBkaXJlY3Rpb24gPT0gcmlnaHQsIGZsaXAgcmlnaHRcblx0XHRcdGFudC5zY2FsZVggPSAtMTtcblx0XHR9ZWxzZXsgLy9lbHNlIGZsaXAgbGVmdFxuXHRcdFx0YW50LnNjYWxlWCA9IDE7XG5cdFx0fVxuXG5cdFx0Ly9zZXQgYWxwaGEgaWYgYmxpbmtpbmdcblx0XHRpZihhbnQucGh5c2ljYWxfaW5zdGFuY2UuYmxpbmtpbmcgJiYgYW50LnBoeXNpY2FsX2luc3RhbmNlLmJsaW5rX3RpbWVyJTIgPT0gMSl7XG5cdFx0XHRhbnQuYWxwaGEgPSAwO1xuXHRcdH1lbHNle1xuXHRcdFx0YW50LmFscGhhID0gMTtcblx0XHR9XG5cdH07XG5cdC8qXG5cdHZhciBhbnRfc3BlY2lhbF9yZW5kZXJfdGVtcCA9IGZ1bmN0aW9uKGFudCl7XG5cdFx0XG5cblx0XHRcblx0XHRpZihhbnQucGh5c2ljYWxfaW5zdGFuY2UuQUlfc3RhdGUgPT0gXCJkZWF0aFwiJiYgYW50LnBoeXNpY2FsX2luc3RhbmNlLmFsaXZlZmxhZyl7XG5cdFx0XHRhbnQuZ290b0FuZFBsYXkoXCJkZWF0aFwiKTtcblx0XHRcdGFudC5waHlzaWNhbF9pbnN0YW5jZS5hbGl2ZWZsYWcgPSBmYWxzZTtcblx0XHRcdFxuXHRcdFx0XG5cdFx0fVxuXG5cdFx0aWYoYW50LnBoeXNpY2FsX2luc3RhbmNlLkFJX3N0YXRlID09IFwidXBzaWRlX2Rvd25cIiAmJiBhbnQucGh5c2ljYWxfaW5zdGFuY2UudW5odXJ0ZmxhZylcblx0XHR7XG5cdFx0XHRhbnQuZ290b0FuZFBsYXkoXCJ1cHNpZGVfZG93blwiKTtcblx0XHRcdGFudC5waHlzaWNhbF9pbnN0YW5jZS51bmh1cnRmbGFnID0gZmFsc2U7XG5cdFx0XHRcblx0XHRcdFxuXHRcdH1cblx0XHRpZihhbnQucGh5c2ljYWxfaW5zdGFuY2UuQUlfc3RhdGUgPT0gXCJ3YWxrXCIgJiYgYW50LnBoeXNpY2FsX2luc3RhbmNlLnN0YXJ0X3dhbGtpbmcpXG5cdFx0e1xuXHRcdFx0YW50LmdvdG9BbmRQbGF5KFwid2Fsa1wiKTtcblx0XHRcdC8vYW50LnBoeXNpY2FsX2luc3RhbmNlLmhwICs9IDE7XG5cdFx0XHRhbnQucGh5c2ljYWxfaW5zdGFuY2Uuc3RhcnRfd2Fsa2luZyA9IGZhbHNlO1xuXHRcdFx0XG5cdFx0XHRcblx0XHR9XG5cblx0fTtcblx0Ki9cblxuXHRyZXR1cm4ge1xuXHRcdC8vIGRlY2xhcmUgcHVibGljXG5cdFx0aW5pdDogaW5pdCwgXG5cdFx0cmVnaXN0ZXI6IHJlZ2lzdGVyLFxuXHRcdHJlbmRlcjogcmVuZGVyLFxuXHR9O1xufSkoKTtcblxubW9kdWxlLmV4cG9ydHMgPSBBbnRSZW5kZXJlcjtcblxudmFyIEluY2x1ZGVzID0gcmVxdWlyZShcIi4uL0luY2x1ZGVzLmpzXCIpOyB2YXIgaW5jbHVkZV9kYXRhID0gSW5jbHVkZXMuZ2V0X2luY2x1ZGVfZGF0YSh7XG5cdGN1cnJlbnRfbW9kdWxlOiBcIkFudFJlbmRlcmVyXCIsIFxuXHRpbmNsdWRlX29wdGlvbnM6IEluY2x1ZGVzLmNob2ljZXMuUkVOREVSRVJfU1BFQ0lGSUNcbn0pOyBldmFsKGluY2x1ZGVfZGF0YS5uYW1lX3N0YXRlbWVudHMpOyB2YXIgaW5jbHVkZSA9IGZ1bmN0aW9uKCl7ZXZhbChpbmNsdWRlX2RhdGEubW9kdWxlX3N0YXRlbWVudHMpO31cbiIsInZhciBCYWNrZ3JvdW5kUmVuZGVyZXIgPSAoZnVuY3Rpb24oKXtcblxuXHR2YXIgc2Vhc29uX2FycmF5O1xuXHR2YXIgc2Vhc29uX2ltYWdlO1xuXHR2YXIgc2Vhc29uX3RocmVzaG9sZDtcblx0XG5cdHZhciBzZWFzb25fcHJvZ3Jlc3M7XG5cdHZhciBzZWFzb25fcHJvZ3Jlc3NfdG9fbGV2ZWw7XG5cdHZhciBoZXJvX2N1cnJlbnRfbGV2ZWw7XG5cdFx0XG5cdHZhciBpbml0ID0gZnVuY3Rpb24oKXtcblx0XHRpbmNsdWRlKCk7IC8vc2V0cyB1cCBkZXBlbmRlbmNpZXMgTVVTVCBHTyBGSVJTVFxuXHRcdFxuXHRcdHNlYXNvbl9hcnJheSA9IFtdOy8vc3RvcmVzIHNlYXNvbiBzcHJpdGVzXG5cdFx0c2Vhc29uX2ltYWdlID0gW1wiV2ludGVyXCIsIFwiU3ByaW5nXCIsIFwiU3VtbWVyXCIsIFwiRmFsbFwiXTtcblx0XHRzZWFzb25fdGhyZXNob2xkID0gMjsgLy9TbyBzZWFzb25zIG9ubHkgdXBkYXRlIG9uY2Vcblx0XHRcblx0XHRzZWFzb25fcHJvZ3Jlc3MgPSAwO1xuXHRcdHNlYXNvbl9wcm9ncmVzc190b19sZXZlbCA9IDE5OTsvL3NlYXNvbl9pbWFnZVtjeWNsZV0ud2lkdGgqMiArIENvbmZpZy5TQ1JFRU5fVy8yO1xuXHRcdGhlcm9fY3VycmVudF9sZXZlbCA9IHNlYXNvbl9wcm9ncmVzc190b19sZXZlbDtcblx0XHRcblx0XHRnZW5lcmF0ZV9zZWFzb24oXCJXaW50ZXJcIiwgR3JhcGhpY3NDb250cm9sbGVyLmdldF9zdGFnZSgpLmNhbnZhcy53aWR0aCwgMCk7XG5cdH07XG5cdFxuXHR2YXIgcmVuZGVyID0gZnVuY3Rpb24oKXtcblxuXHRcdGlmKE1hdGgucm91bmQoV29ybGRDb250cm9sbGVyLmdldF9wcm9ncmVzcygpKSA+IGhlcm9fY3VycmVudF9sZXZlbCl7XG5cdFx0XHRzZWFzb25fcHJvZ3Jlc3MrKztcblx0XHRcdGhlcm9fY3VycmVudF9sZXZlbCArPSBzZWFzb25fcHJvZ3Jlc3NfdG9fbGV2ZWw7XG5cdFx0XHRXb3JsZENvbnRyb2xsZXIuaW5jcmVhc2Vfc2NvcmUoc2Vhc29uX3Byb2dyZXNzKjUwMCk7XG5cdFx0fVxuXHRcdFxuXHRcdC8vUG90ZW50aWFsbHkgY2hhbmdlIHNlYXNvbnMgYmFzZWQgb24gaGVybyBwcm9ncmVzc1xuXHRcdGNoYW5nZV9zZWFzb25zKHNlYXNvbl9wcm9ncmVzcyk7XG5cdFx0XG5cdFx0Ly9wZXJmb3JtIHBhcmFsbGF4IGVmZmVjdCB3aXRoIGJhY2tncm91bmRcblx0XHRiYWNrZ3JvdW5kX2xvb3AoV29ybGRDb250cm9sbGVyLmdldF9wcm9ncmVzcygpLHNlYXNvbl9wcm9ncmVzcyk7XG5cdH07XG5cdFxuXHQvL0dlbmVyYXRlcyB0aWxlZCBiYWNrZ3JvdW5kIGZvciBzZWFzb25cblx0dmFyIGdlbmVyYXRlX3NlYXNvbiA9IGZ1bmN0aW9uKHNlYXNvbl9pbWFnZSwgY2FudmFzX3dpZHRoLCBzdGFydCl7XG5cdFx0Zm9yKGk9MDsgaTwzOyBpKyspey8vY3JlYXRlIHRpbGVzIDMgYXQgYSB0aW1lXG5cdFx0XHR2YXIgc2Vhc29uID0gR3JhcGhpY3NDb250cm9sbGVyLnJlcXVlc3RfYml0bWFwKHNlYXNvbl9pbWFnZSk7XG5cdFx0XHRzZWFzb24ucmVnWSAtPSBzZWFzb24uaW1hZ2UuaGVpZ2h0LzI7XG5cdFx0XHQvL2NyZWF0ZSBhIG5ldyB0aWxlIHdpdGggb2Zmc2V0XG5cdFx0XHRzZWFzb24ueCA9IHN0YXJ0ICsgaSpzZWFzb24uaW1hZ2Uud2lkdGg7XG5cdFx0XHRHcmFwaGljc0NvbnRyb2xsZXIuZ2V0X3N0YWdlKCkuYWRkQ2hpbGRBdChzZWFzb24sIDApO1xuXHRcdFx0c2Vhc29uX2FycmF5LnB1c2goc2Vhc29uKTtcblx0XHR9XG5cdH07XG5cdFxuXHQvL2NoZWNrcyBmb3IgYW5kIGhhbmRsZXMgcG90ZW50aWFsIHNlYXNvbiBjaGFuZ2Vcblx0dmFyIGNoYW5nZV9zZWFzb25zID0gZnVuY3Rpb24ocHJvZ3Jlc3Mpe1xuXHRcdHZhciBmbGFnID0gZmFsc2U7XG5cdFx0aWYocHJvZ3Jlc3MgPT0gc2Vhc29uX3RocmVzaG9sZCl7IC8vc2Vhc29ucyB3aWxsIGNoYW5nZSBldmVyeSBldmVuIHByb2dyZXNzIG51bWJlclxuXHRcdFx0c2Vhc29uX3RocmVzaG9sZCArPSAyO1xuXHRcdFx0ZmxhZyA9IHRydWU7XG5cdFx0fVxuXHRcdGlmKGZsYWcpe1xuXHRcdFx0Y29uc29sZS5sb2coXCJnZW5lcmF0aW5nIHNlYXNvblwiKTtcblx0XHRcdGRlbGV0ZV9hbGxfc2Vhc29uKCk7XG5cdFx0XHRXb3JsZENvbnRyb2xsZXIuc2V0X3NlYXNvbigoV29ybGRDb250cm9sbGVyLmdldF9zZWFzb24oKSsxKSU0KTtcblx0XHRcdGdlbmVyYXRlX3NlYXNvbihzZWFzb25faW1hZ2VbV29ybGRDb250cm9sbGVyLmdldF9zZWFzb24oKV0sIEdyYXBoaWNzQ29udHJvbGxlci5nZXRfc3RhZ2UoKS5jYW52YXMud2lkdGgsIFdvcmxkQ29udHJvbGxlci5nZXRfbW92ZW1lbnRfZWRnZSgpIC8gMzApO1xuXHRcdH1cblx0fTtcblx0XG5cdC8vc2Nyb2xscyB0aGUgYmFja2dyb3VuZCBhbG9uZyB3aXRoIHRoZSBwbGF5ZXJcblx0dmFyIGJhY2tncm91bmRfbG9vcCA9IGZ1bmN0aW9uKGhlcm9feCwgcHJvZ3Jlc3Mpe1xuXHRcdGZvcihpPTA7IGk8c2Vhc29uX2FycmF5Lmxlbmd0aDsgaSsrKXtcblx0XHRcdC8vc2Vhc29uX2FycmF5W2ldLnggPSAoaSAqIDc5OSkgKyBHcmFwaGljc01vZGVsLmNhbWVyYS5vZmZzZXQueDtcblx0XHRcdC8vc2Vhc29uX2FycmF5W2ldLnkgPSBHcmFwaGljc01vZGVsLmNhbWVyYS5vZmZzZXQueTtcblx0XHRcdHNlYXNvbl9hcnJheVtpXS54ID0gKChpICsgcHJvZ3Jlc3MpICogNzk5KSAtIChoZXJvX3ggKiA0KTtcblx0XHRcdHNlYXNvbl9hcnJheVtpXS55ID0gR3JhcGhpY3NDb250cm9sbGVyLmdldF9jYW1lcmEoKS5vZmZzZXQueTtcblx0XHR9XG5cdH07XG5cblx0Ly9kZWxldGVzIGFsbCBiYWNrZ3JvdW5kIG9iamVjdHNcblx0dmFyIGRlbGV0ZV9hbGxfc2Vhc29uID0gZnVuY3Rpb24oKXtcblx0XHRmb3IodmFyIGkgPSAwOyBpIDwgc2Vhc29uX2FycmF5Lmxlbmd0aDsgaSsrKXtcblx0XHRcdEdyYXBoaWNzQ29udHJvbGxlci5nZXRfc3RhZ2UoKS5yZW1vdmVDaGlsZChzZWFzb25fYXJyYXlbaV0pO1xuXHRcdH1cblx0XHRzZWFzb25fYXJyYXkgPSBbXTtcblx0fTtcblx0XG5cdHZhciByZWdpc3RlciA9IGZ1bmN0aW9uKGJhY2tncm91bmQpe1xuXHRcdC8qIGlzIHJhbiBmb3IgZXZlcnkgZW50aXR5IG9mIHRoaXMgdHlwZSB0aGF0IHdhcyBqdXN0IGNyZWF0ZWQgYW5kIHNob3VsZFxuXHRcdGdldCBncmFwaGljcyByZXByZXNlbnRhdGlvbi4gWW91IGFyZSBnaXZlbiB0aGUgZW50aXR5IGluc3RhbmNlIGFuZCBpcyBzdXBwb3NlZFxuXHRcdHRvIGNyZXRlIGdyYXBoaWNzIGluc3RhbmNlLCBhbmQgR3JhcGhpY3NDb250cm9sbGVyLnJlZ19mb3JfcmVuZGVyKGdyYXBoaWNzX2luc3RhbmNlLCBlbnRpdHlfaW5zdGFuY2UpOyBpdCBcblx0XHQqL1xuXG5cdFx0XG5cdH07XG5cblx0cmV0dXJuIHtcblx0XHQvLyBkZWNsYXJlIHB1YmxpY1xuXHRcdGluaXQ6IGluaXQsIFxuXHRcdHJlZ2lzdGVyOiByZWdpc3Rlcixcblx0XHRyZW5kZXI6IHJlbmRlcixcblx0fTtcbn0pKCk7XG5cbm1vZHVsZS5leHBvcnRzID0gQmFja2dyb3VuZFJlbmRlcmVyO1xuXG52YXIgSW5jbHVkZXMgPSByZXF1aXJlKFwiLi4vSW5jbHVkZXMuanNcIik7IHZhciBpbmNsdWRlX2RhdGEgPSBJbmNsdWRlcy5nZXRfaW5jbHVkZV9kYXRhKHtcblx0Y3VycmVudF9tb2R1bGU6IFwiQmFja2dyb3VuZFJlbmRlcmVyXCIsIFxuXHRpbmNsdWRlX29wdGlvbnM6IEluY2x1ZGVzLmNob2ljZXMuUkVOREVSRVJfU1BFQ0lGSUNcbn0pOyBldmFsKGluY2x1ZGVfZGF0YS5uYW1lX3N0YXRlbWVudHMpOyB2YXIgaW5jbHVkZSA9IGZ1bmN0aW9uKCl7ZXZhbChpbmNsdWRlX2RhdGEubW9kdWxlX3N0YXRlbWVudHMpO31cblxuXG4iLCJ2YXIgRXN0ZWVtZWRDb21wYW5pb25SZW5kZXJlciA9IChmdW5jdGlvbigpe1xuXG5cdHZhciBzcHJpdGVzaGVldHMgPSB7fTsgLy8gdG8gc3RvcmUgc3ByaXRlc2hlZXRzIHVzZWQgYnkgdGhpcyBlbnRpdHlcblxuXHR2YXIgaW5pdCA9IGZ1bmN0aW9uKCl7XG5cdFx0LyogaXMgcmFuIGZyb20gR3JhcGhpY3NDb250cm9sbGVyLmluaXQgb25jZSBkdXJpbmcgZ2FtZSBsb2FkaW5nXG5cdFx0XHR1c2UgdGhpcyBmdW5jdGlvbiB0byBjcmVhdGUgc3ByaXRlc2hlZXRzIGFuZCBzdWNoXG5cdFx0XHRsaWtlIHNwcml0ZXNoZWV0cy5maXJzdCA9IG5ldyBjcmVhdGVqcy5TcHJpdGVzaGVldCguLi4pO1xuXHRcdCovXG5cdFx0aW5jbHVkZSgpOyAvLyBzYXRpc2Z5IHJlcXVpcmVtZW50cywgR09FUyBGSVJTVFxuXHR9O1xuXG5cdHZhciByZWdpc3RlciA9IGZ1bmN0aW9uKGVudGl0eV9jb21wYW5pb24pe1xuXHRcdC8qIGlzIHJhbiBmb3IgZXZlcnkgZW50aXR5IG9mIHRoaXMgdHlwZSB0aGF0IHdhcyBqdXN0IGNyZWF0ZWQgYW5kIHNob3VsZFxuXHRcdGdldCBncmFwaGljcyByZXByZXNlbnRhdGlvbi4gWW91IGFyZSBnaXZlbiB0aGUgZW50aXR5IGluc3RhbmNlIGFuZCBpcyBzdXBwb3NlZFxuXHRcdHRvIGNyZXRlIGdyYXBoaWNzIGluc3RhbmNlLCBhbmQgR3JhcGhpY3NDb250cm9sbGVyLnJlZ19mb3JfcmVuZGVyKGdyYXBoaWNzX2luc3RhbmNlLCBlbnRpdHlfaW5zdGFuY2UpOyBpdCBcblx0XHQqL1xuXG5cdFx0dmFyIGNvbXBhbmlvbiA9IEdyYXBoaWNzQ29udHJvbGxlci5yZXF1ZXN0X2JpdG1hcChcImdyZWVrX3dhcnJpb3JcIik7XG5cblx0XHRHcmFwaGljc0NvbnRyb2xsZXIuc2V0X3JlZ19wb3NpdGlvbihjb21wYW5pb24sIC0yMCwgKzEwKTtcblx0XHRHcmFwaGljc0NvbnRyb2xsZXIucmVnX2Zvcl9yZW5kZXIoY29tcGFuaW9uLCBlbnRpdHlfY29tcGFuaW9uKTtcblxuXHR9O1xuXG5cdHZhciByZW5kZXIgPSBmdW5jdGlvbihjb21wYW5pb24pe1xuXHRcdC8qIFx0aXMgcmFuIGVhY2ggdGljayBmcm9tIEdyYXBoaWNzQ29udHJvbGxlciwgZm9yIGV2ZXJ5IHJlZ2lzdGVyZWQgb2JqZWN0IG9mIHRoaXMgdHlwZVxuXHRcdFx0aXMgZ2l2ZW4gPmdyYXBoaWNzX2luc3RhbmNlPCBwYXJhbWV0ZXIsIHdoaWNoIGlzIGFsc28gc3VwcG9zZWQgdG8gY29udGFpblxuXHRcdFx0cGh5c2ljYWxfaW5zdGFuY2UgcHJvcGVydHkgY29udGFpbmluZyBlbnRpdHlfaW5zdGFuY2UsIGlmIGl0IHdhcyBhdHRjaGVkIGNvcnJlY3RseVxuXHRcdCovXG5cdFx0R3JhcGhpY3NDb250cm9sbGVyLnVwZGF0ZV9oZWFsdGgoY29tcGFuaW9uLnBoeXNpY2FsX2luc3RhbmNlLmhwKTtcblx0fTtcblxuXHRyZXR1cm4ge1xuXHRcdC8vIGRlY2xhcmUgcHVibGljXG5cdFx0aW5pdDogaW5pdCwgXG5cdFx0cmVnaXN0ZXI6IHJlZ2lzdGVyLFxuXHRcdHJlbmRlcjogcmVuZGVyLFxuXHR9O1xufSkoKTtcblxubW9kdWxlLmV4cG9ydHMgPSBFc3RlZW1lZENvbXBhbmlvblJlbmRlcmVyO1xuXG52YXIgSW5jbHVkZXMgPSByZXF1aXJlKFwiLi4vSW5jbHVkZXMuanNcIik7IHZhciBpbmNsdWRlX2RhdGEgPSBJbmNsdWRlcy5nZXRfaW5jbHVkZV9kYXRhKHtcblx0Y3VycmVudF9tb2R1bGU6IFwiRXN0ZWVtZWRDb21wYW5pb25cIiwgXG5cdGluY2x1ZGVfb3B0aW9uczogSW5jbHVkZXMuY2hvaWNlcy5SRU5ERVJFUl9TUEVDSUZJQ1xufSk7IGV2YWwoaW5jbHVkZV9kYXRhLm5hbWVfc3RhdGVtZW50cyk7IHZhciBpbmNsdWRlID0gZnVuY3Rpb24oKXtldmFsKGluY2x1ZGVfZGF0YS5tb2R1bGVfc3RhdGVtZW50cyk7fVxuIiwidmFyIEdyaWZmaW5SZW5kZXJlciA9IChmdW5jdGlvbigpe1xuXG5cdHZhciBzcHJpdGVzaGVldHMgPSB7fTtcblx0dmFyIEdyaWZmaW5fYW5pbWF0aW9uO1xuXG5cdHZhciBpbml0ID0gZnVuY3Rpb24oKXtcblx0XHQvKiBpcyByYW4gZnJvbSBHcmFwaGljc0NvbnRyb2xsZXIuaW5pdCBvbmNlIGR1cmluZyBnYW1lIGxvYWRpbmdcblx0XHQgXHR1c2UgdGhpcyBmdW5jdGlvbiB0byBjcmVhdGUgc3ByaXRlc2hlZXRzIGFuZCBzdWNoXG5cdFx0XHRsaWtlIHNwcml0ZXNoZWV0cy5maXJzdCA9IG5ldyBjcmVhdGVqcy5TcHJpdGVzaGVldCguLi4pO1xuXHRcdCovXG5cblx0XHRpbmNsdWRlKCk7IC8vIHNhdGlzZnkgcmVxdWlyZW1lbnRzLCBHT0VTIEZJUlNUXG5cdFx0dmFyIGdldF9hc3NldCA9IEFzc2V0Q29udHJvbGxlci5nZXRfYXNzZXQ7XG5cblx0XHRzcHJpdGVzaGVldHNbXCJHcmlmZmluXCJdID0gbmV3IGNyZWF0ZWpzLlNwcml0ZVNoZWV0KHtcblx0XHRcdFwiZnJhbWVyYXRlXCI6IDEsXG5cdFx0XHRcImltYWdlc1wiOiBbZ2V0X2Fzc2V0KFwiR3JpZmZpbjFcIiksIGdldF9hc3NldChcIkdyaWZmaW4yXCIpLCBnZXRfYXNzZXQoXCJHcmlmZmluM1wiKSwgZ2V0X2Fzc2V0KFwiR3JpZmZpbkRlYXRoXCIpXSwgLy8sIGdldF9hc3NldChcIkdyaWZmaW5EZWF0aDJcIiksIGdldF9hc3NldChcIkdyaWZmaW5EZWF0aDNcIilcblx0XHRcdFx0XCJmcmFtZXNcIjogeyBcInJlZ1hcIjogNSwgXCJyZWdZXCI6IDE0LCBcImhlaWdodFwiOiAyMDcsIFwid2lkdGhcIjogMjEwLCBcImNvdW50XCI6IDZ9LFxuXHRcdFx0XHRcImFuaW1hdGlvbnNcIjoge1xuXHRcdFx0XHRcIndhbGtcIjogWzAsIDIsIFwid2Fsa1wiLCAwLjJdLFxuXHRcdFx0XHRcImluanVyeVwiOiB7XG5cdFx0XHRcdCAgICBmcmFtZXM6IFsyLCA0LCAuMjVdXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiZGVhdGhcIjogWzMsIDQsIFwiZGVhdGhcIiwgMC42XSxcbiAgICAgICAgICAgICAgICBcImZseVwiOiBbMSwgMiwgXCJmbHlcIiwgLjRdLFxuXHRcdFx0fVxuXHRcdH0pXG5cblx0fTtcblxuXHR2YXIgcmVnaXN0ZXIgPSBmdW5jdGlvbihlbnRpdHlfR3JpZmZpbil7XG5cdFx0LyogaXMgcmFuIGZvciBldmVyeSBlbnRpdHkgb2YgdGhpcyB0eXBlIHRoYXQgd2FzIGp1c3QgY3JlYXRlZCBhbmQgc2hvdWxkXG5cdFx0Z2V0IGdyYXBoaWNzIHJlcHJlc2VudGF0aW9uLiBZb3UgYXJlIGdpdmVuIHRoZSBlbnRpdHkgaW5zdGFuY2UgYW5kIGlzIHN1cHBvc2VkXG5cdFx0dG8gY3JldGUgZ3JhcGhpY3MgaW5zdGFuY2UsIGFuZCBHcmFwaGljc0NvbnRyb2xsZXIucmVnX2Zvcl9yZW5kZXIoZ3JhcGhpY3NfaW5zdGFuY2UsIGVudGl0eV9pbnN0YW5jZSk7IGl0IFxuXHRcdCovXG5cblx0XHRHcmlmZmluX2FuaW1hdGlvbiA9IEdyYXBoaWNzQ29udHJvbGxlci5yZXF1ZXN0X2FuaW1hdGVkKHNwcml0ZXNoZWV0c1tcIkdyaWZmaW5cIl0sIFwid2Fsa1wiKTtcblx0XHRHcmFwaGljc0NvbnRyb2xsZXIuc2V0X3JlZ19wb3NpdGlvbihHcmlmZmluX2FuaW1hdGlvbiwgMCwgMCk7IC8vIGNoYW5nZSB0aGF0IHRvIGFkanVzdCBzcHJpdGUgcG9zaXRpb24gcmVsYXRpdmUgdG8gdGhlIGJvZHlcblx0XHRHcmFwaGljc0NvbnRyb2xsZXIucmVnX2Zvcl9yZW5kZXIoR3JpZmZpbl9hbmltYXRpb24sIGVudGl0eV9HcmlmZmluKTsgLy8gc2V0cyBncmlmZmluX2FuaW1hdGlvbidzIHBvc2l0aW9uIHRvIHRyYWNrIHRoZSBncmlmZmluJ3MgcG9zaXRpb24gKHVwZGF0ZXMgZWFjaCB0aWNrKVxuXG5cdFx0XG5cdH07XG5cblx0dmFyIHJlbmRlciA9IGZ1bmN0aW9uKEdyaWZmaW4pe1xuXHRcdC8qIFx0aXMgcmFuIGVhY2ggdGljayBmcm9tIEdyYXBoaWNzQ29udHJvbGxlciwgZm9yIGV2ZXJ5IHJlZ2lzdGVyZWQgb2JqZWN0IG9mIHRoaXMgdHlwZVxuXHRcdFx0aXMgZ2l2ZW4gPmdyYXBoaWNzX2luc3RhbmNlPCBwYXJhbWV0ZXIsIHdoaWNoIGlzIGFsc28gc3VwcG9zZWQgdG8gY29udGFpblxuXHRcdFx0cGh5c2ljYWxfaW5zdGFuY2UgcHJvcGVydHkgY29udGFpbmluZyBlbnRpdHlfaW5zdGFuY2UsIGlmIGl0IHdhcyBhdHRjaGVkIGNvcnJlY3RseVxuXHRcdCovXG5cblx0XHRHcmlmZmluX3NwZWNpYWxfcmVuZGVyX3RlbXAoR3JpZmZpbik7IFxuXHR9O1xuXG5cdHZhciBHcmlmZmluX3NwZWNpYWxfcmVuZGVyX3RlbXAgPSBmdW5jdGlvbihHcmlmZmluKXtcblx0XHQvKiBob3cgdG8gaGFuZGxlIHNwZWNpYWwgcmVuZGVyPyBURU1QT1JBUlkgKi9cblxuXHRcdC8vc2V0IGdyYXBoaWNhbCByZXByZXNlbnRhdGlvbiBiYXNlZCBvbiB0aGUgYW5pbWF0aW9uIHZhcmlhYmxlIGRldGVybWluZWQgYnkgdGhlIEFJXG5cdFx0Ly9zZXQgYW5pbWF0aW9uXG5cdFx0aWYoR3JpZmZpbi5waHlzaWNhbF9pbnN0YW5jZS5uZWVkc19ncmFwaGljc191cGRhdGUpe1xuXHRcdFx0dmFyIGFuaW1hdGlvbiA9IEdyaWZmaW4ucGh5c2ljYWxfaW5zdGFuY2UuYW5pbWF0aW9uO1xuXHRcdFx0R3JpZmZpbi5nb3RvQW5kUGxheShhbmltYXRpb24pXG5cdFx0fVxuXHRcdFxuXHRcdC8vc2V0IGRpcmVjdGlvblxuXHRcdGlmIChHcmlmZmluLnBoeXNpY2FsX2luc3RhbmNlLmRpcmVjdGlvbil7IC8vaWYgZGlyZWN0aW9uID09IHJpZ2h0LCBmbGlwIHJpZ2h0XG5cdFx0XHRHcmlmZmluLnNjYWxlWCA9IC0xO1xuXHRcdH1lbHNleyAvL2Vsc2UgZmxpcCBsZWZ0XG5cdFx0XHRHcmlmZmluLnNjYWxlWCA9IDE7XG5cdFx0fVxuXG5cdFx0Ly9zZXQgYWxwaGEgaWYgYmxpbmtpbmdcblx0XHRpZihHcmlmZmluLnBoeXNpY2FsX2luc3RhbmNlLmJsaW5raW5nICYmIEdyaWZmaW4ucGh5c2ljYWxfaW5zdGFuY2UuYmxpbmtfdGltZXIlMiA9PSAxKXtcblx0XHRcdEdyaWZmaW4uYWxwaGEgPSAwO1xuXHRcdH1lbHNle1xuXHRcdFx0R3JpZmZpbi5hbHBoYSA9IDE7XG5cdFx0fVxuXHR9O1xuXG5cdHJldHVybiB7XG5cdFx0Ly8gZGVjbGFyZSBwdWJsaWNcblx0XHRpbml0OiBpbml0LCBcblx0XHRyZWdpc3RlcjogcmVnaXN0ZXIsXG5cdFx0cmVuZGVyOiByZW5kZXIsXG5cdH07XG59KSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEdyaWZmaW5SZW5kZXJlcjtcblxudmFyIEluY2x1ZGVzID0gcmVxdWlyZShcIi4uL0luY2x1ZGVzLmpzXCIpOyB2YXIgaW5jbHVkZV9kYXRhID0gSW5jbHVkZXMuZ2V0X2luY2x1ZGVfZGF0YSh7XG5cdGN1cnJlbnRfbW9kdWxlOiBcIkdyaWZmaW5SZW5kZXJlclwiLCBcblx0aW5jbHVkZV9vcHRpb25zOiBJbmNsdWRlcy5jaG9pY2VzLlJFTkRFUkVSX1NQRUNJRklDXG59KTsgZXZhbChpbmNsdWRlX2RhdGEubmFtZV9zdGF0ZW1lbnRzKTsgdmFyIGluY2x1ZGUgPSBmdW5jdGlvbigpe2V2YWwoaW5jbHVkZV9kYXRhLm1vZHVsZV9zdGF0ZW1lbnRzKTt9XG4iLCJ2YXIgSFVEUmVuZGVyZXIgPSAoZnVuY3Rpb24oKXtcblx0XG5cdHZhciBzY29yZTtcblx0dmFyIGhlYWx0aDtcblx0dmFyIHNjb3JlX3RpdGxlO1xuXHR2YXIgaGVhbHRoX3RpdGxlO1xuXG5cdHZhciBpbml0ID0gZnVuY3Rpb24oKXtcblx0XHRcblx0XHRpbmNsdWRlKCk7XG5cdFx0XG5cdFx0c2NvcmUgPSBuZXcgY3JlYXRlanMuVGV4dCgpO1xuXHRcdEdyYXBoaWNzQ29udHJvbGxlci5yZWdfZm9yX3JlbmRlcihzY29yZSk7XG5cdFx0aGVhbHRoID0gbmV3IGNyZWF0ZWpzLlRleHQoKTtcblx0XHRHcmFwaGljc0NvbnRyb2xsZXIucmVnX2Zvcl9yZW5kZXIoaGVhbHRoKTtcblx0XHRzY29yZV90aXRsZSA9IG5ldyBjcmVhdGVqcy5UZXh0KCk7XG5cdFx0R3JhcGhpY3NDb250cm9sbGVyLnJlZ19mb3JfcmVuZGVyKHNjb3JlX3RpdGxlKTtcblx0XHRoZWFsdGhfdGl0bGUgPSBuZXcgY3JlYXRlanMuVGV4dCgpO1xuXHRcdEdyYXBoaWNzQ29udHJvbGxlci5yZWdfZm9yX3JlbmRlcihoZWFsdGhfdGl0bGUpO1xuXG5cdFx0aGVhbHRoX3RpdGxlLnRleHQgPSBcIkhlYWx0aDogXCI7XG5cdFx0aGVhbHRoX3RpdGxlLnggPSAxMDtcblx0XHRoZWFsdGhfdGl0bGUueSA9IDMwO1xuXHRcdGhlYWx0aC50ZXh0ID0gXCIxMDBcIjtcblx0XHRoZWFsdGgueCA9IDgwO1xuXHRcdGhlYWx0aC55ID0gMzA7XG5cdFx0aGVhbHRoLmZvbnQgPSBcIjIwcHggQXJpYWxcIjtcblx0XHRoZWFsdGhfdGl0bGUuZm9udCA9IFwiMjBweCBBcmlhbFwiO1xuXHRcdGhlYWx0aC5jb2xvciA9IFwiI2ZmMDAwMFwiO1xuXHRcdGhlYWx0aF90aXRsZS5jb2xvciA9IFwiI2ZmMDAwMFwiO1xuXHRcdHNjb3JlX3RpdGxlLnRleHQgPSBcIlNjb3JlOiBcIjtcblx0XHRzY29yZV90aXRsZS54ID0gMTA7XG5cdFx0c2NvcmVfdGl0bGUueSA9IDEwO1xuXHRcdHNjb3JlLnRleHQgPSBcIjBcIjtcblx0XHRzY29yZS54ID0gODA7XG5cdFx0c2NvcmUueSA9IDEwO1xuXHRcdHNjb3JlLmZvbnQgPSBcIjIwcHggQXJpYWxcIjtcblx0XHRzY29yZV90aXRsZS5mb250ID0gXCIyMHB4IEFyaWFsXCI7XG5cdH07XG5cdFxuXHR2YXIgcmVuZGVyID0gZnVuY3Rpb24oKXtcblx0XHR2YXIgY2FtZXJhID0gR3JhcGhpY3NDb250cm9sbGVyLmdldF9jYW1lcmEoKTtcblx0XHR2YXIgaGVybyA9IEVudGl0eUNvbnRyb2xsZXIuZ2V0X215X2hlcm8oKTtcblx0XHRcblx0XHR1cGRhdGVfc2NvcmUoV29ybGRDb250cm9sbGVyLmdldF9zY29yZSgpKTtcblx0XHRpZihoZXJvKXtcblx0XHRcdHVwZGF0ZV9oZWFsdGgoaGVyby5ocCk7XG5cdFx0fVxuXHRcdFxuXHR9O1xuXHRcblx0dmFyIHVwZGF0ZV9zY29yZSA9IGZ1bmN0aW9uKG5ld19zY29yZSl7XG5cdFx0c2NvcmUudGV4dCA9IHBhcnNlSW50KG5ld19zY29yZSk7XG5cdH07XG5cdFxuXHR2YXIgdXBkYXRlX2hlYWx0aCA9IGZ1bmN0aW9uKG5ld19oZWFsdGgpe1xuXHRcdGhlYWx0aC50ZXh0ID0gcGFyc2VJbnQobmV3X2hlYWx0aCk7XG5cdH07XG5cdFxuXHRyZXR1cm4ge1xuXHRcdC8vIGRlY2xhcmUgcHVibGljXG5cdFx0aW5pdDogaW5pdCwgXG5cdFx0cmVuZGVyOiByZW5kZXIsXG5cdH07XG59KSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEhVRFJlbmRlcmVyO1xuXG52YXIgSW5jbHVkZXMgPSByZXF1aXJlKFwiLi4vSW5jbHVkZXMuanNcIik7IHZhciBpbmNsdWRlX2RhdGEgPSBJbmNsdWRlcy5nZXRfaW5jbHVkZV9kYXRhKHtcblx0Y3VycmVudF9tb2R1bGU6IFwiSFVEUmVuZGVyZXJcIiwgXG5cdGluY2x1ZGVfb3B0aW9uczogSW5jbHVkZXMuY2hvaWNlcy5SRU5ERVJFUl9TUEVDSUZJQ1xufSk7IGV2YWwoaW5jbHVkZV9kYXRhLm5hbWVfc3RhdGVtZW50cyk7IHZhciBpbmNsdWRlID0gZnVuY3Rpb24oKXtldmFsKGluY2x1ZGVfZGF0YS5tb2R1bGVfc3RhdGVtZW50cyk7fVxuXG4iLCJ2YXIgSGVyb1JlbmRlcmVyID0gKGZ1bmN0aW9uKCl7XG5cblx0dmFyIHNwcml0ZXNoZWV0cyA9IHt9OyAvLyB0byBzdG9yZSBzcHJpdGVzaGVldHMgdXNlZCBieSB0aGlzIGVudGl0eVxuXG5cdHZhciBpbml0ID0gZnVuY3Rpb24oKXtcblx0XHQvKiBpcyByYW4gZnJvbSBHcmFwaGljc0NvbnRyb2xsZXIuaW5pdCBvbmNlIGR1cmluZyBnYW1lIGxvYWRpbmdcblx0XHRcdHVzZSB0aGlzIGZ1bmN0aW9uIHRvIGNyZWF0ZSBzcHJpdGVzaGVldHMgYW5kIHN1Y2hcblx0XHRcdGxpa2Ugc3ByaXRlc2hlZXRzLmZpcnN0ID0gbmV3IGNyZWF0ZWpzLlNwcml0ZXNoZWV0KC4uLik7XG5cdFx0Ki9cblx0XHRpbmNsdWRlKCk7IC8vIHNhdGlzZnkgcmVxdWlyZW1lbnRzLCBHT0VTIEZJUlNUXG5cdFx0dmFyIGdldF9hc3NldCA9IEFzc2V0Q29udHJvbGxlci5nZXRfYXNzZXQ7XG5cdFx0c3ByaXRlc2hlZXRzW1wiaGVyb1wiXSA9IG5ldyBjcmVhdGVqcy5TcHJpdGVTaGVldCh7XG5cdFx0XHRcImZyYW1lcmF0ZVwiOiAxLFxuXHRcdFx0XCJpbWFnZXNcIjogW2dldF9hc3NldChcIkhlcm9cIildLCAvL2dldF9hc3NldChcIkhlcm9SXCIpLCBnZXRfYXNzZXQoXCJIZXJvV1wiKVxuXHRcdFx0XCJmcmFtZXNcIjogeyBcInJlZ1hcIjogMjUsIFwicmVnWVwiOiAyNSwgXCJoZWlnaHRcIjogNTAsIFwid2lkdGhcIjogNTAsIFwiY291bnRcIjogMTZ9LFxuXHRcdFx0XCJhbmltYXRpb25zXCI6IHtcblx0XHRcdFx0XCJzdGFuZFwiOiB7XG5cdFx0XHRcdGZyYW1lczogWzBdXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiZmluaXNoXCI6IHtcblx0XHRcdFx0XHRmcmFtZXM6IFs4XVxuXHRcdFx0XHR9LFx0XHRcdFx0XG5cdFx0XHRcdFwid2Fsa1wiOiB7XG5cdFx0XHRcdFx0IGZyYW1lczogWzAsMSwgMl0sXG5cdFx0XHRcdFx0IHNwZWVkOiAwLjRcblx0XHRcdFx0IH0sXG5cdFx0XHRcdFwianVtcFwiOiB7XG5cdFx0XHRcdFx0ZnJhbWVzOiBbMywgNCwgNSwgNiwgNywgOF0sXG5cdFx0XHRcdFx0c3BlZWQ6IDAuM1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImRlYXRoXCI6IHtcblx0XHRcdFx0XHRmcmFtZXM6IFs5LCAxMCwgMTEsIDEyLCAxMywgMTQsIDE1XSxcblx0XHRcdFx0XHRzcGVlZDogMC4zLFxuXHRcdFx0XHRcdG5leHQ6IFwiZGVhdGhcIlxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImRlY2F5XCI6IHtcblx0XHRcdFx0XHRmcmFtZXM6IFsxNV1cblx0XHRcdFx0fSxcblx0XHRcdH1cblx0XHR9KVxuXHRcdC8vU3ByaXRlU2hlZXRVdGlscy5hZGRGbGlwcGVkRnJhbWVzKHNwcml0ZVNoZWV0c1tcIkhlcm9cIl0sIHRydWUsIGZhbHNlLCBmYWxzZSk7XG5cdH07XG5cblx0dmFyIHJlZ2lzdGVyID0gZnVuY3Rpb24oZW50aXR5X2hlcm8pe1xuXHRcdC8qIGlzIHJhbiBmb3IgZXZlcnkgZW50aXR5IG9mIHRoaXMgdHlwZSB0aGF0IHdhcyBqdXN0IGNyZWF0ZWQgYW5kIHNob3VsZFxuXHRcdGdldCBncmFwaGljcyByZXByZXNlbnRhdGlvbi4gWW91IGFyZSBnaXZlbiB0aGUgZW50aXR5IGluc3RhbmNlIGFuZCBpcyBzdXBwb3NlZFxuXHRcdHRvIGNyZXRlIGdyYXBoaWNzIGluc3RhbmNlLCBhbmQgR3JhcGhpY3NDb250cm9sbGVyLnJlZ19mb3JfcmVuZGVyKGdyYXBoaWNzX2luc3RhbmNlLCBlbnRpdHlfaW5zdGFuY2UpOyBpdCBcblx0XHQqL1xuXG5cdFx0aGVyb19hbmltYXRpb24gPSBHcmFwaGljc0NvbnRyb2xsZXIucmVxdWVzdF9hbmltYXRlZChzcHJpdGVzaGVldHNbXCJoZXJvXCJdLCBcInN0YW5kXCIpO1xuXHRcdGhlcm9fYW5pbWF0aW9uLmdyYXBoaWNzX2lkID0gXCJoZXJvXCI7XG5cdFx0R3JhcGhpY3NDb250cm9sbGVyLnNldF9yZWdfcG9zaXRpb24oaGVyb19hbmltYXRpb24sIC0yNSwgLTI1KTtcblx0XHRHcmFwaGljc0NvbnRyb2xsZXIucmVnX2Zvcl9yZW5kZXIoaGVyb19hbmltYXRpb24sIGVudGl0eV9oZXJvKTtcblx0XHRpZihlbnRpdHlfaGVyby5wbGF5ZXJfaWQgPT0gTmV0d29ya0NvbnRyb2xsZXIuZ2V0X25ldHdvcmtfaWQoKSl7XG5cdFx0XHRHcmFwaGljc0NvbnRyb2xsZXIuZm9sbG93KGVudGl0eV9oZXJvLmlkKTtcblx0XHR9XG5cblx0fTtcblx0Lypcblx0dmFyIHJlbmRlciA9IGZ1bmN0aW9uKGhlcm8pe1xuXG5cdFx0aWYoaGVyby5waHlzaWNhbF9pbnN0YW5jZS5zdGF0ZT09XCJ3YWxrXCImJmhlcm8ucGh5c2ljYWxfaW5zdGFuY2UuaXNfd2FsayA9PSB0cnVlKXtcblx0XHRcdGlmKGhlcm8ucGh5c2ljYWxfaW5zdGFuY2Uud2Fsa190aWNrID09MSl7XG5cdFx0XHRcdGhlcm8uZ290b0FuZFBsYXkoXCJ3YWxrXCIpO1xuXHRcdFx0fVxuXHRcdFx0aGVyby5waHlzaWNhbF9pbnN0YW5jZS53YWxrX3RpY2srKztcblx0XHRcdGlmKGhlcm8ucGh5c2ljYWxfaW5zdGFuY2Uud2Fsa190aWNrID09MTApe1xuXHRcdFx0XHRoZXJvLnBoeXNpY2FsX2luc3RhbmNlLnN0YXRlPSBcInN0YW5kXCI7XG5cdFx0XHRcdGhlcm8ucGh5c2ljYWxfaW5zdGFuY2UuaXNfd2FsayA9IGZhbHNlO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRcblx0XHRpZihoZXJvLnBoeXNpY2FsX2luc3RhbmNlLnN0YXRlPT1cImp1bXBcIil7XG5cdFx0XHRpZihoZXJvLnBoeXNpY2FsX2luc3RhbmNlLmp1bXBfdGljayA9PTEpe1xuXHRcdFx0XHRoZXJvLmdvdG9BbmRQbGF5KFwianVtcFwiKTtcblx0XHRcdH1cblx0XHRcdGhlcm8ucGh5c2ljYWxfaW5zdGFuY2UuanVtcF90aWNrKys7XG5cdFx0XHRpZihoZXJvLnBoeXNpY2FsX2luc3RhbmNlLmp1bXBfdGljayA+PSAyMCl7XG5cdFx0XHRcdGhlcm8uZ290b0FuZFBsYXkoXCJmaW5pc2hcIik7XG5cdFx0XHRcdGlmKGhlcm8ucGh5c2ljYWxfaW5zdGFuY2UuanVtcHM9PTApe1xuXHRcdFx0XHRcdGhlcm8ucGh5c2ljYWxfaW5zdGFuY2Uuc3RhdGU9XCJmaW5pc2hcIjtcblx0XHRcdFx0fVxuXHRcdFx0XHRcblx0XHRcdH1cblx0XHR9XG5cdFx0XG5cdFx0aWYoaGVyby5waHlzaWNhbF9pbnN0YW5jZS5zdGF0ZT09XCJmaW5pc2hcIil7XG5cdFx0XHRoZXJvLmdvdG9BbmRQbGF5KFwiZmluaXNoXCIpO1xuXHRcdH1cblx0XHRpZihoZXJvLnBoeXNpY2FsX2luc3RhbmNlLnN0YXRlPT1cImRlYXRoRmluYWxcIil7XG5cdFx0XHRoZXJvLmdvdG9BbmRQbGF5KFwiZGVhdGhGaW5hbFwiKTtcblx0XHR9XG5cdFx0aWYoaGVyby5waHlzaWNhbF9pbnN0YW5jZS5zdGF0ZT09XCJzdGFuZFwiKXtcblx0XHRcdGhlcm8uZ290b0FuZFBsYXkoXCJzdGFuZFwiKTtcblx0XHR9XG5cdFx0Ly9jb25zb2xlLmxvZyhoZXJvLnBoeXNpY2FsX2luc3RhbmNlLnN0YXRlKTtcblx0XHRpZiAoaGVyby5waHlzaWNhbF9pbnN0YW5jZS5zdGF0ZSA9PSBcImRlYXRoXCIpIHtcblx0XHRcdC8vY29uc29sZS5sb2coaGVyby5waHlzaWNhbF9pbnN0YW5jZS5kZWF0aF90aWNrKTtcblx0XHRcdGlmKGhlcm8ucGh5c2ljYWxfaW5zdGFuY2UuZGVhdGhfdGljayA9PTEpe1xuXHRcdFx0ICAgIGhlcm8uZ290b0FuZFBsYXkoXCJkZWF0aFwiKTtcblx0XHRcdH1cblx0XHRcdGVsc2UgaWYoaGVyby5waHlzaWNhbF9pbnN0YW5jZS5kZWF0aF90aWNrID49MjApe1xuXHRcdFx0XHRoZXJvLnBoeXNpY2FsX2luc3RhbmNlLnN0YXRlPVwiZGVhdGhGaW5hbFwiO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRcblx0XHQvL3NldCBkaXJlY3Rpb25cblx0XHRpZiAoaGVyby5waHlzaWNhbF9pbnN0YW5jZS5sZWZ0KXsgLy9pZiBkaXJlY3Rpb24gPT0gcmlnaHQsIGZsaXAgcmlnaHRcblx0XHRcdGhlcm8uc2NhbGVYID0gLTE7XG5cdFx0fWVsc2V7IC8vZWxzZSBmbGlwIGxlZnRcblx0XHRcdGhlcm8uc2NhbGVYID0gMTtcblx0XHR9XG5cdH07XG5cdCovXG5cblx0cmV0dXJuIHtcblx0XHQvLyBkZWNsYXJlIHB1YmxpY1xuXHRcdGluaXQ6IGluaXQsIFxuXHRcdHJlZ2lzdGVyOiByZWdpc3Rlcixcblx0XHQvL3JlbmRlcjogcmVuZGVyLFxuXHR9O1xufSkoKTtcblxubW9kdWxlLmV4cG9ydHMgPSBIZXJvUmVuZGVyZXI7XG5cbnZhciBJbmNsdWRlcyA9IHJlcXVpcmUoXCIuLi9JbmNsdWRlcy5qc1wiKTsgdmFyIGluY2x1ZGVfZGF0YSA9IEluY2x1ZGVzLmdldF9pbmNsdWRlX2RhdGEoe1xuXHRjdXJyZW50X21vZHVsZTogXCJIZXJvUmVuZGVyZXJcIiwgXG5cdGluY2x1ZGVfb3B0aW9uczogSW5jbHVkZXMuY2hvaWNlcy5SRU5ERVJFUl9TUEVDSUZJQ1xufSk7IGV2YWwoaW5jbHVkZV9kYXRhLm5hbWVfc3RhdGVtZW50cyk7IHZhciBpbmNsdWRlID0gZnVuY3Rpb24oKXtldmFsKGluY2x1ZGVfZGF0YS5tb2R1bGVfc3RhdGVtZW50cyk7fVxuIiwidmFyIEh5ZW5hUmVuZGVyZXIgPSAoZnVuY3Rpb24oKXtcblxuXHR2YXIgc3ByaXRlc2hlZXRzID0ge307XG5cdHZhciBIeWVuYV9hbmltYXRpb247XG5cblx0dmFyIGluaXQgPSBmdW5jdGlvbigpe1xuXHRcdC8qIGlzIHJhbiBmcm9tIEdyYXBoaWNzQ29udHJvbGxlci5pbml0IG9uY2UgZHVyaW5nIGdhbWUgbG9hZGluZ1xuXHRcdCBcdHVzZSB0aGlzIGZ1bmN0aW9uIHRvIGNyZWF0ZSBzcHJpdGVzaGVldHMgYW5kIHN1Y2hcblx0XHRcdGxpa2Ugc3ByaXRlc2hlZXRzLmZpcnN0ID0gbmV3IGNyZWF0ZWpzLlNwcml0ZXNoZWV0KC4uLik7XG5cdFx0Ki9cblxuXHRcdGluY2x1ZGUoKTsgLy8gc2F0aXNmeSByZXF1aXJlbWVudHMsIEdPRVMgRklSU1Rcblx0XHR2YXIgZ2V0X2Fzc2V0ID0gQXNzZXRDb250cm9sbGVyLmdldF9hc3NldDtcblxuXHRcdHNwcml0ZXNoZWV0c1tcIkh5ZW5hXCJdID0gbmV3IGNyZWF0ZWpzLlNwcml0ZVNoZWV0KHtcblx0XHRcdFwiZnJhbWVyYXRlXCI6IDEsXG5cdFx0XHRcImltYWdlc1wiOiBbZ2V0X2Fzc2V0KFwiSHllbmFTcHJpdGVcIildLFxuXHRcdFx0XCJmcmFtZXNcIjogeyBcInJlZ1hcIjogMCwgXCJyZWdZXCI6IDgsIFwiaGVpZ2h0XCI6IDY0LCBcIndpZHRoXCI6IDY0LCBcImNvdW50XCI6IDE3fSxcblx0XHRcdFwiYW5pbWF0aW9uc1wiOiB7XG5cdFx0XHRcdFwicnVuXCI6IFswLDMsIFwicnVuXCIsIDAuNV0sXG5cdFx0XHRcdFwic3RhbmRcIjogWzQsNSwgXCJzdGFuZFwiLCAwLjI1XSxcblx0XHRcdFx0XCJ3YWxrXCI6IFs4LDExLCBcIndhbGtcIiwgMC4yXSxcblx0XHRcdFx0XCJsZWFwXCI6IFs2XSxcblx0XHRcdFx0XCJmYWxsXCI6IFs3XSxcblx0XHRcdFx0XCJkZWF0aFwiOiBbMTIsMTQsIFwiZGVjYXlcIiwgMC4yNV0sXG5cdFx0XHRcdFwiZGVjYXlcIjogWzE1LDE2LCBcImRlY2F5XCIsIDAuMjVdLFxuXHRcdFx0fVxuXHRcdH0pXG5cblx0fTtcblxuXHR2YXIgcmVnaXN0ZXIgPSBmdW5jdGlvbihlbnRpdHlfaHllbmEpe1xuXHRcdC8qIGlzIHJ1biBmb3IgZXZlcnkgZW50aXR5IG9mIHRoaXMgdHlwZSB0aGF0IHdhcyBqdXN0IGNyZWF0ZWQgYW5kIHNob3VsZFxuXHRcdGdldCBncmFwaGljcyByZXByZXNlbnRhdGlvbi4gWW91IGFyZSBnaXZlbiB0aGUgZW50aXR5IGluc3RhbmNlIGFuZCBpcyBzdXBwb3NlZFxuXHRcdHRvIGNyZWF0ZSBncmFwaGljcyBpbnN0YW5jZSwgYW5kIEdyYXBoaWNzQ29udHJvbGxlci5yZWdfZm9yX3JlbmRlcihncmFwaGljc19pbnN0YW5jZSwgZW50aXR5X2luc3RhbmNlKTsgaXQgXG5cdFx0Ki9cblxuXHRcdGh5ZW5hX2FuaW1hdGlvbiA9IEdyYXBoaWNzQ29udHJvbGxlci5yZXF1ZXN0X2FuaW1hdGVkKHNwcml0ZXNoZWV0c1tcIkh5ZW5hXCJdLCBcIndhbGtcIik7XG5cdFx0R3JhcGhpY3NDb250cm9sbGVyLnNldF9yZWdfcG9zaXRpb24oaHllbmFfYW5pbWF0aW9uLCAwLCAwKTsgLy8gY2hhbmdlIHRoYXQgdG8gYWRqdXN0IHNwcml0ZSBwb3NpdGlvbiByZWxhdGl2ZSB0byB0aGUgYm9keVxuXHRcdEdyYXBoaWNzQ29udHJvbGxlci5yZWdfZm9yX3JlbmRlcihoeWVuYV9hbmltYXRpb24sIGVudGl0eV9oeWVuYSk7IC8vIHNldHMgaHllbmFfYW5pbWF0aW9uJ3MgcG9zaXRpb24gdG8gdHJhY2sgdGhlIGh5ZW5hJ3MgcG9zaXRpb24gKHVwZGF0ZXMgZWFjaCB0aWNrKVxuXHRcdC8qXG5cdFx0aHllbmFfYW5pbWF0aW9uIGlzIHRoZSBlYXNlbGpzX29iaiBwYXNzZWQgdGhyb3VnaCBncmFwaGljc0NvbnRyb2xsZXJcblx0XHRlbnRpdHlfaHllbmEgaXMgdGhlIHBoeXNpY2FsIG9iamVjdCBzcGF3bmVkIGluIEh5ZW5hTG9naWNcblx0XHRyZXF1ZXN0X2FuaW1hdGVkIHJldHVybnMgYW4gZWFzZWxqcyBvYmplY3Qgb2YgdHlwZSBTcHJpdGVcblx0XHR0aGlzIFNwcml0ZSBpcyB0aGUgb2JqZWN0IHBhc3NlZCB0byByZW5kZXJcblx0XHQqL1xuXHRcdFxuXHR9O1xuXG5cdHZhciByZW5kZXIgPSBmdW5jdGlvbihoeWVuYSl7XG5cdFx0LyogXHRpcyBydW4gZWFjaCB0aWNrIGZyb20gR3JhcGhpY3NDb250cm9sbGVyLCBmb3IgZXZlcnkgcmVnaXN0ZXJlZCBvYmplY3Qgb2YgdGhpcyB0eXBlXG5cdFx0XHRpcyBnaXZlbiA+Z3JhcGhpY3NfaW5zdGFuY2U8IHBhcmFtZXRlciwgd2hpY2ggaXMgYWxzbyBzdXBwb3NlZCB0byBjb250YWluXG5cdFx0XHRwaHlzaWNhbF9pbnN0YW5jZSBwcm9wZXJ0eSBjb250YWluaW5nIGVudGl0eV9pbnN0YW5jZSwgaWYgaXQgd2FzIGF0dGFjaGVkIGNvcnJlY3RseVxuXHRcdCovXG5cblx0XHRoeWVuYV9hbmltYXRlKGh5ZW5hKTsgXG5cdH07XG5cblx0dmFyIGh5ZW5hX2FuaW1hdGUgPSBmdW5jdGlvbihoeWVuYSl7XG5cdFx0Ly9zZXQgZ3JhcGhpY2FsIHJlcHJlc2VudGF0aW9uIGJhc2VkIG9uIHRoZSBhbmltYXRpb24gdmFyaWFibGUgZGV0ZXJtaW5lZCBieSB0aGUgQUlcblx0XHQvL3NldCBhbmltYXRpb25cblx0XHRpZihoeWVuYS5waHlzaWNhbF9pbnN0YW5jZS5uZWVkc19ncmFwaGljc191cGRhdGUpe1xuXHRcdFx0dmFyIGFuaW1hdGlvbiA9IGh5ZW5hLnBoeXNpY2FsX2luc3RhbmNlLmFuaW1hdGlvbjtcblx0XHRcdGh5ZW5hLmdvdG9BbmRQbGF5KGFuaW1hdGlvbilcblx0XHR9XG5cdFx0XG5cdFx0Ly9zZXQgZGlyZWN0aW9uXG5cdFx0aWYgKGh5ZW5hLnBoeXNpY2FsX2luc3RhbmNlLmRpcmVjdGlvbil7IC8vaWYgZGlyZWN0aW9uID09IHJpZ2h0LCBmbGlwIHJpZ2h0XG5cdFx0XHRoeWVuYS5zY2FsZVggPSAtMTtcblx0XHR9ZWxzZXsgLy9lbHNlIGZsaXAgbGVmdFxuXHRcdFx0aHllbmEuc2NhbGVYID0gMTtcblx0XHR9XG5cblx0XHQvL3NldCBhbHBoYSBpZiBibGlua2luZ1xuXHRcdGlmKGh5ZW5hLnBoeXNpY2FsX2luc3RhbmNlLmJsaW5raW5nICYmIGh5ZW5hLnBoeXNpY2FsX2luc3RhbmNlLmJsaW5rX3RpbWVyJTIgPT0gMSl7XG5cdFx0XHRoeWVuYS5hbHBoYSA9IDA7XG5cdFx0fWVsc2V7XG5cdFx0XHRoeWVuYS5hbHBoYSA9IDE7XG5cdFx0fVxuXHR9O1xuXHRcblx0cmV0dXJuIHtcblx0XHQvLyBkZWNsYXJlIHB1YmxpY1xuXHRcdGluaXQ6IGluaXQsIFxuXHRcdHJlZ2lzdGVyOiByZWdpc3Rlcixcblx0XHRyZW5kZXI6IHJlbmRlcixcblx0fTtcbn0pKCk7XG5cbm1vZHVsZS5leHBvcnRzID0gSHllbmFSZW5kZXJlcjtcblxudmFyIEluY2x1ZGVzID0gcmVxdWlyZShcIi4uL0luY2x1ZGVzLmpzXCIpOyB2YXIgaW5jbHVkZV9kYXRhID0gSW5jbHVkZXMuZ2V0X2luY2x1ZGVfZGF0YSh7XG5cdGN1cnJlbnRfbW9kdWxlOiBcIkh5ZW5hUmVuZGVyZXJcIiwgXG5cdGluY2x1ZGVfb3B0aW9uczogSW5jbHVkZXMuY2hvaWNlcy5SRU5ERVJFUl9TUEVDSUZJQ1xufSk7IGV2YWwoaW5jbHVkZV9kYXRhLm5hbWVfc3RhdGVtZW50cyk7IHZhciBpbmNsdWRlID0gZnVuY3Rpb24oKXtldmFsKGluY2x1ZGVfZGF0YS5tb2R1bGVfc3RhdGVtZW50cyk7fVxuIiwidmFyIE1lZHVzYVJlbmRlcmVyID0gKGZ1bmN0aW9uKCl7XG5cblx0dmFyIHNwcml0ZXNoZWV0cyA9IHt9O1xuXHR2YXIgTWVkdXNhX2FuaW1hdGlvbjtcblxuXHR2YXIgaW5pdCA9IGZ1bmN0aW9uKCl7XG5cdFx0LyogaXMgcmFuIGZyb20gR3JhcGhpY3NDb250cm9sbGVyLmluaXQgb25jZSBkdXJpbmcgZ2FtZSBsb2FkaW5nXG5cdFx0IFx0dXNlIHRoaXMgZnVuY3Rpb24gdG8gY3JlYXRlIHNwcml0ZXNoZWV0cyBhbmQgc3VjaFxuXHRcdFx0bGlrZSBzcHJpdGVzaGVldHMuZmlyc3QgPSBuZXcgY3JlYXRlanMuU3ByaXRlc2hlZXQoLi4uKTtcblx0XHQqL1xuXG5cdFx0aW5jbHVkZSgpOyAvLyBzYXRpc2Z5IHJlcXVpcmVtZW50cywgR09FUyBGSVJTVFxuXHRcdHZhciBnZXRfYXNzZXQgPSBBc3NldENvbnRyb2xsZXIuZ2V0X2Fzc2V0O1xuXG5cdFx0c3ByaXRlc2hlZXRzW1wiTWVkdXNhXCJdID0gbmV3IGNyZWF0ZWpzLlNwcml0ZVNoZWV0KHtcblx0XHRcdFwiZnJhbWVyYXRlXCI6IDEsXG5cdFx0XHRcImltYWdlc1wiOiBbZ2V0X2Fzc2V0KFwiTWVkdXNhMVwiKSxdLCAvL01lZHVzYVNwcml0ZVNoZWV0XG5cdFx0XHRcImZyYW1lc1wiOiB7IFwicmVnWFwiOiA1LCBcInJlZ1lcIjogMTQsIFwiaGVpZ2h0XCI6IDIwNywgXCJ3aWR0aFwiOiAyMTAsIFwiY291bnRcIjogNn0sXG5cdFx0XHRcdFwiYW5pbWF0aW9uc1wiOiB7XG5cdFx0XHRcdFwid2Fsa1wiOiBbMCwgMiwgXCJ3YWxrXCIsIDAuMl0sXG5cdFx0XHRcdFwiaW5qdXJ5XCI6IHtcblx0XHRcdFx0ICAgIGZyYW1lczogWzIsIDMsIC4yNV1cblx0XHRcdFx0fSxcblx0XHRcdFx0XCJkZWF0aFwiOiBbMiwgMywgXCJkZWF0aFwiLCAwLjZdLFxuICAgICAgICAgICAgICAgIFxuXHRcdFx0fVxuXHRcdH0pXG5cblx0fTtcblxuXHR2YXIgcmVnaXN0ZXIgPSBmdW5jdGlvbihlbnRpdHlfTWVkdXNhKXtcblx0XHQvKiBpcyByYW4gZm9yIGV2ZXJ5IGVudGl0eSBvZiB0aGlzIHR5cGUgdGhhdCB3YXMganVzdCBjcmVhdGVkIGFuZCBzaG91bGRcblx0XHRnZXQgZ3JhcGhpY3MgcmVwcmVzZW50YXRpb24uIFlvdSBhcmUgZ2l2ZW4gdGhlIGVudGl0eSBpbnN0YW5jZSBhbmQgaXMgc3VwcG9zZWRcblx0XHR0byBjcmV0ZSBncmFwaGljcyBpbnN0YW5jZSwgYW5kIEdyYXBoaWNzQ29udHJvbGxlci5yZWdfZm9yX3JlbmRlcihncmFwaGljc19pbnN0YW5jZSwgZW50aXR5X2luc3RhbmNlKTsgaXQgXG5cdFx0Ki9cblxuXHRcdE1lZHVzYV9hbmltYXRpb24gPSBHcmFwaGljc0NvbnRyb2xsZXIucmVxdWVzdF9hbmltYXRlZChzcHJpdGVzaGVldHNbXCJNZWR1c2FcIl0sIFwid2Fsa1wiKTtcblx0XHRHcmFwaGljc0NvbnRyb2xsZXIuc2V0X3JlZ19wb3NpdGlvbihNZWR1c2FfYW5pbWF0aW9uLCAwLCAwKTsgLy8gY2hhbmdlIHRoYXQgdG8gYWRqdXN0IHNwcml0ZSBwb3NpdGlvbiByZWxhdGl2ZSB0byB0aGUgYm9keVxuXHRcdEdyYXBoaWNzQ29udHJvbGxlci5yZWdfZm9yX3JlbmRlcihNZWR1c2FfYW5pbWF0aW9uLCBlbnRpdHlfTWVkdXNhKTsgLy8gc2V0cyBtZWR1c2FfYW5pbWF0aW9uJ3MgcG9zaXRpb24gdG8gdHJhY2sgdGhlIG1lZHVzYSdzIHBvc2l0aW9uICh1cGRhdGVzIGVhY2ggdGljaylcblxuXHRcdFxuXHR9O1xuXG5cdHZhciByZW5kZXIgPSBmdW5jdGlvbihNZWR1c2Epe1xuXHRcdC8qIFx0aXMgcmFuIGVhY2ggdGljayBmcm9tIEdyYXBoaWNzQ29udHJvbGxlciwgZm9yIGV2ZXJ5IHJlZ2lzdGVyZWQgb2JqZWN0IG9mIHRoaXMgdHlwZVxuXHRcdFx0aXMgZ2l2ZW4gPmdyYXBoaWNzX2luc3RhbmNlPCBwYXJhbWV0ZXIsIHdoaWNoIGlzIGFsc28gc3VwcG9zZWQgdG8gY29udGFpblxuXHRcdFx0cGh5c2ljYWxfaW5zdGFuY2UgcHJvcGVydHkgY29udGFpbmluZyBlbnRpdHlfaW5zdGFuY2UsIGlmIGl0IHdhcyBhdHRjaGVkIGNvcnJlY3RseVxuXHRcdCovXG5cblx0XHRNZWR1c2Ffc3BlY2lhbF9yZW5kZXJfdGVtcChNZWR1c2EpOyBcblx0fTtcblxuXHR2YXIgTWVkdXNhX3NwZWNpYWxfcmVuZGVyX3RlbXAgPSBmdW5jdGlvbihNZWR1c2Epe1xuXHRcdC8qIGhvdyB0byBoYW5kbGUgc3BlY2lhbCByZW5kZXI/IFRFTVBPUkFSWSAqL1xuXG5cdFx0Ly9zZXQgZ3JhcGhpY2FsIHJlcHJlc2VudGF0aW9uIGJhc2VkIG9uIHRoZSBhbmltYXRpb24gdmFyaWFibGUgZGV0ZXJtaW5lZCBieSB0aGUgQUlcblx0XHQvL3NldCBhbmltYXRpb25cblx0XHRpZihNZWR1c2EucGh5c2ljYWxfaW5zdGFuY2UubmVlZHNfZ3JhcGhpY3NfdXBkYXRlKXtcblx0XHRcdHZhciBhbmltYXRpb24gPSBNZWR1c2EucGh5c2ljYWxfaW5zdGFuY2UuYW5pbWF0aW9uO1xuXHRcdFx0TWVkdXNhLmdvdG9BbmRQbGF5KGFuaW1hdGlvbilcblx0XHR9XG5cdFx0XG5cdFx0Ly9zZXQgZGlyZWN0aW9uXG5cdFx0aWYgKE1lZHVzYS5waHlzaWNhbF9pbnN0YW5jZS5kaXJlY3Rpb24peyAvL2lmIGRpcmVjdGlvbiA9PSByaWdodCwgZmxpcCByaWdodFxuXHRcdFx0TWVkdXNhLnNjYWxlWCA9IC0xO1xuXHRcdH1lbHNleyAvL2Vsc2UgZmxpcCBsZWZ0XG5cdFx0XHRNZWR1c2Euc2NhbGVYID0gMTtcblx0XHR9XG5cblx0XHQvL3NldCBhbHBoYSBpZiBibGlua2luZ1xuXHRcdGlmKE1lZHVzYS5waHlzaWNhbF9pbnN0YW5jZS5ibGlua2luZyAmJiBNZWR1c2EucGh5c2ljYWxfaW5zdGFuY2UuYmxpbmtfdGltZXIlMiA9PSAxKXtcblx0XHRcdE1lZHVzYS5hbHBoYSA9IDA7XG5cdFx0fWVsc2V7XG5cdFx0XHRNZWR1c2EuYWxwaGEgPSAxO1xuXHRcdH1cblx0fTtcblxuXHRyZXR1cm4ge1xuXHRcdC8vIGRlY2xhcmUgcHVibGljXG5cdFx0aW5pdDogaW5pdCwgXG5cdFx0cmVnaXN0ZXI6IHJlZ2lzdGVyLFxuXHRcdHJlbmRlcjogcmVuZGVyLFxuXHR9O1xufSkoKTtcblxubW9kdWxlLmV4cG9ydHMgPSBNZWR1c2FSZW5kZXJlcjtcblxudmFyIEluY2x1ZGVzID0gcmVxdWlyZShcIi4uL0luY2x1ZGVzLmpzXCIpOyB2YXIgaW5jbHVkZV9kYXRhID0gSW5jbHVkZXMuZ2V0X2luY2x1ZGVfZGF0YSh7XG5cdGN1cnJlbnRfbW9kdWxlOiBcIk1lZHVzYVJlbmRlcmVyXCIsIFxuXHRpbmNsdWRlX29wdGlvbnM6IEluY2x1ZGVzLmNob2ljZXMuUkVOREVSRVJfU1BFQ0lGSUNcbn0pOyBldmFsKGluY2x1ZGVfZGF0YS5uYW1lX3N0YXRlbWVudHMpOyB2YXIgaW5jbHVkZSA9IGZ1bmN0aW9uKCl7ZXZhbChpbmNsdWRlX2RhdGEubW9kdWxlX3N0YXRlbWVudHMpO31cbiIsInZhciBQaXp6YVJlbmRlcmVyID0gKGZ1bmN0aW9uICgpIHtcblxuICAgIHZhciBzcHJpdGVzaGVldHMgPSB7fTsgLy8gdG8gc3RvcmUgc3ByaXRlc2hlZXRzIHVzZWQgYnkgdGhpcyBlbnRpdHlcblxuICAgIHZhciBpbml0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpbmNsdWRlKCk7IC8vIHNhdGlzZnkgcmVxdWlyZW1lbnRzLCBHT0VTIEZJUlNUXG4gICAgICAgIHZhciBnZXRfYXNzZXQgPSBBc3NldENvbnRyb2xsZXIuZ2V0X2Fzc2V0O1xuICAgICAgICBzcHJpdGVzaGVldHNbXCJwaXp6YVwiXSA9IG5ldyBjcmVhdGVqcy5TcHJpdGVTaGVldCh7XG4gICAgICAgICAgICBcImZyYW1lcmF0ZVwiOiAxLFxuICAgICAgICAgICAgXCJpbWFnZXNcIjogW2dldF9hc3NldChcInBpenphXCIpXSxcbiAgICAgICAgICAgIFwiZnJhbWVzXCI6IHsgXCJyZWdYXCI6IDAsIFwicmVnWVwiOiAwLCBcImhlaWdodFwiOiAxNSwgXCJ3aWR0aFwiOiAxNSwgXCJjb3VudFwiOiAxIH0sXG4gICAgICAgICAgICBcImFuaW1hdGlvbnNcIjoge1xuICAgICAgICAgICAgICAgIFwibm9ybWFsXCI6IFsxLCBcIndhbGtcIl1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICB9O1xuXG4gICAgdmFyIHJlZ2lzdGVyID0gZnVuY3Rpb24gKGVudGl0eV9waXp6YSkge1xuICAgICAgICBwaXp6YV9hbmltYXRpb24gPSBHcmFwaGljc0NvbnRyb2xsZXIucmVxdWVzdF9hbmltYXRlZChzcHJpdGVzaGVldHNbXCJwaXp6YVwiXSwgXCJub3JtYWxcIik7XG4gICAgICAgIEdyYXBoaWNzQ29udHJvbGxlci5zZXRfcmVnX3Bvc2l0aW9uKHBpenphX2FuaW1hdGlvbiwgMCwgMCk7IC8vIGNoYW5nZSB0aGF0IHRvIGFkanVzdCBzcHJpdGUgcG9zaXRpb24gcmVsYXRpdmUgdG8gdGhlIGJvZHlcbiAgICAgICAgR3JhcGhpY3NDb250cm9sbGVyLnJlZ19mb3JfcmVuZGVyKHBpenphX2FuaW1hdGlvbiwgZW50aXR5X3BpenphKTsgLy8gc2V0cyBhbnRfYW5pbWF0aW9uJ3MgcG9zaXRpb24gdG8gdHJhY2sgdGhlIGFudCdzIHBvc2l0aW9uICh1cGRhdGVzIGVhY2ggdGljaylcbiAgICB9O1xuXG4gICAgdmFyIHJlbmRlciA9IGZ1bmN0aW9uIChjZWxsKSB7XG5cbiAgICB9O1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgLy8gZGVjbGFyZSBwdWJsaWNcbiAgICAgICAgaW5pdDogaW5pdCxcbiAgICAgICAgcmVnaXN0ZXI6IHJlZ2lzdGVyLFxuICAgICAgICByZW5kZXI6IHJlbmRlcixcbiAgICB9O1xufSkoKTtcblxubW9kdWxlLmV4cG9ydHMgPSBQaXp6YVJlbmRlcmVyO1xuXG52YXIgSW5jbHVkZXMgPSByZXF1aXJlKFwiLi4vSW5jbHVkZXMuanNcIik7IHZhciBpbmNsdWRlX2RhdGEgPSBJbmNsdWRlcy5nZXRfaW5jbHVkZV9kYXRhKHtcbiAgICBjdXJyZW50X21vZHVsZTogXCJUZXJyYWluQ2VsbFJlbmRlcmVyXCIsXG4gICAgaW5jbHVkZV9vcHRpb25zOiBJbmNsdWRlcy5jaG9pY2VzLlJFTkRFUkVSX1NQRUNJRklDXG59KTsgZXZhbChpbmNsdWRlX2RhdGEubmFtZV9zdGF0ZW1lbnRzKTsgdmFyIGluY2x1ZGUgPSBmdW5jdGlvbiAoKSB7IGV2YWwoaW5jbHVkZV9kYXRhLm1vZHVsZV9zdGF0ZW1lbnRzKTsgfVxuXG4iLCJ2YXIgVGVycmFpbkNlbGxSZW5kZXJlciA9IChmdW5jdGlvbigpe1xuXG5cdHZhciBzcHJpdGVzaGVldHMgPSB7fTsgLy8gdG8gc3RvcmUgc3ByaXRlc2hlZXRzIHVzZWQgYnkgdGhpcyBlbnRpdHlcblxuXHR2YXIgaW5pdCA9IGZ1bmN0aW9uKCl7XG5cdFx0LyogaXMgcmFuIGZyb20gR3JhcGhpY3NDb250cm9sbGVyLmluaXQgb25jZSBkdXJpbmcgZ2FtZSBsb2FkaW5nXG5cdFx0XHR1c2UgdGhpcyBmdW5jdGlvbiB0byBjcmVhdGUgc3ByaXRlc2hlZXRzIGFuZCBzdWNoXG5cdFx0XHRsaWtlIHNwcml0ZXNoZWV0cy5maXJzdCA9IG5ldyBjcmVhdGVqcy5TcHJpdGVzaGVldCguLi4pO1xuXHRcdCovXG5cdFx0aW5jbHVkZSgpOyAvLyBzYXRpc2Z5IHJlcXVpcmVtZW50cywgR09FUyBGSVJTVFxuXG5cdH07XG5cblx0dmFyIHJlZ2lzdGVyID0gZnVuY3Rpb24oZW50aXR5X2NlbGwpe1xuXHRcdC8qIGlzIHJhbiBmb3IgZXZlcnkgZW50aXR5IG9mIHRoaXMgdHlwZSB0aGF0IHdhcyBqdXN0IGNyZWF0ZWQgYW5kIHNob3VsZFxuXHRcdGdldCBncmFwaGljcyByZXByZXNlbnRhdGlvbi4gWW91IGFyZSBnaXZlbiB0aGUgZW50aXR5IGluc3RhbmNlIGFuZCBpcyBzdXBwb3NlZFxuXHRcdHRvIGNyZXRlIGdyYXBoaWNzIGluc3RhbmNlLCBhbmQgR3JhcGhpY3NDb250cm9sbGVyLnJlZ19mb3JfcmVuZGVyKGdyYXBoaWNzX2luc3RhbmNlLCBlbnRpdHlfaW5zdGFuY2UpOyBpdCBcblx0XHQqL1xuXG5cdFx0XG5cdH07XG5cblx0dmFyIHJlbmRlciA9IGZ1bmN0aW9uKGNlbGwpe1xuXHRcdC8qIFx0aXMgcmFuIGVhY2ggdGljayBmcm9tIEdyYXBoaWNzQ29udHJvbGxlciwgZm9yIGV2ZXJ5IHJlZ2lzdGVyZWQgb2JqZWN0IG9mIHRoaXMgdHlwZVxuXHRcdFx0aXMgZ2l2ZW4gPmdyYXBoaWNzX2luc3RhbmNlPCBwYXJhbWV0ZXIsIHdoaWNoIGlzIGFsc28gc3VwcG9zZWQgdG8gY29udGFpblxuXHRcdFx0cGh5c2ljYWxfaW5zdGFuY2UgcHJvcGVydHkgY29udGFpbmluZyBlbnRpdHlfaW5zdGFuY2UsIGlmIGl0IHdhcyBhdHRjaGVkIGNvcnJlY3RseVxuXHRcdCovXG5cblx0fTtcblxuXHRyZXR1cm4ge1xuXHRcdC8vIGRlY2xhcmUgcHVibGljXG5cdFx0aW5pdDogaW5pdCwgXG5cdFx0cmVnaXN0ZXI6IHJlZ2lzdGVyLFxuXHRcdHJlbmRlcjogcmVuZGVyLFxuXHR9O1xufSkoKTtcblxubW9kdWxlLmV4cG9ydHMgPSBUZXJyYWluQ2VsbFJlbmRlcmVyO1xuXG52YXIgSW5jbHVkZXMgPSByZXF1aXJlKFwiLi4vSW5jbHVkZXMuanNcIik7IHZhciBpbmNsdWRlX2RhdGEgPSBJbmNsdWRlcy5nZXRfaW5jbHVkZV9kYXRhKHtcblx0Y3VycmVudF9tb2R1bGU6IFwiVGVycmFpbkNlbGxSZW5kZXJlclwiLCBcblx0aW5jbHVkZV9vcHRpb25zOiBJbmNsdWRlcy5jaG9pY2VzLlJFTkRFUkVSX1NQRUNJRklDXG59KTsgZXZhbChpbmNsdWRlX2RhdGEubmFtZV9zdGF0ZW1lbnRzKTsgdmFyIGluY2x1ZGUgPSBmdW5jdGlvbigpe2V2YWwoaW5jbHVkZV9kYXRhLm1vZHVsZV9zdGF0ZW1lbnRzKTt9XG5cbiIsInZhciBUZXJyYWluU2xpY2VSZW5kZXJlciA9IChmdW5jdGlvbigpe1xuXG5cdHZhciBzcHJpdGVzaGVldHMgPSB7fTsgLy8gdG8gc3RvcmUgc3ByaXRlc2hlZXRzIHVzZWQgYnkgdGhpcyBlbnRpdHlcblxuXHR2YXIgaW5pdCA9IGZ1bmN0aW9uKCl7XG5cdFx0LyogaXMgcmFuIGZyb20gR3JhcGhpY3NDb250cm9sbGVyLmluaXQgb25jZSBkdXJpbmcgZ2FtZSBsb2FkaW5nXG5cdFx0XHR1c2UgdGhpcyBmdW5jdGlvbiB0byBjcmVhdGUgc3ByaXRlc2hlZXRzIGFuZCBzdWNoXG5cdFx0XHRsaWtlIHNwcml0ZXNoZWV0cy5maXJzdCA9IG5ldyBjcmVhdGVqcy5TcHJpdGVzaGVldCguLi4pO1xuXHRcdCovXG5cdFx0aW5jbHVkZSgpOyAvLyBzYXRpc2Z5IHJlcXVpcmVtZW50cywgR09FUyBGSVJTVFxuXG5cdH07XG5cblx0dmFyIHJlZ2lzdGVyID0gZnVuY3Rpb24oc2xpY2UsIFByaXZhdGVHcmFwaGljcyl7XG5cdFx0LyogaXMgcmFuIGZvciBldmVyeSBlbnRpdHkgb2YgdGhpcyB0eXBlIHRoYXQgd2FzIGp1c3QgY3JlYXRlZCBhbmQgc2hvdWxkXG5cdFx0Z2V0IGdyYXBoaWNzIHJlcHJlc2VudGF0aW9uLiBZb3UgYXJlIGdpdmVuIHRoZSBlbnRpdHkgaW5zdGFuY2UgYW5kIGlzIHN1cHBvc2VkXG5cdFx0dG8gY3JldGUgZ3JhcGhpY3MgaW5zdGFuY2UsIGFuZCBHcmFwaGljc0NvbnRyb2xsZXIucmVnX2Zvcl9yZW5kZXIoZ3JhcGhpY3NfaW5zdGFuY2UsIGVudGl0eV9pbnN0YW5jZSk7IGl0IFxuXHRcdCovXG5cblx0XHQvLyBUT0RPOiBjaGFuZ2UgdGhhdCBwcml2YXRlIGNyYXAgdG8gc210aCBtb3JlIHVzZWZ1bFxuXHRcdC8vIGxpa2UgbWFrZSBncmFwaGljcyBjb250cm9sbGVyIHNwZWNpYWwgY2FzZSBpbiBpbmNsdWRlcyxcblx0XHQvLyBzbyB0aGF0IG9ubHkgaW50ZXJlc3RlZCBwZW9wbGUgY2FuIGdldCBpdFxuXHRcdHZhciByZXF1ZXN0X2FuaW1hdGVkID0gUHJpdmF0ZUdyYXBoaWNzLnJlcXVlc3RfYW5pbWF0ZWQ7XG5cdFx0dmFyIHJlcXVlc3RfYml0bWFwID0gUHJpdmF0ZUdyYXBoaWNzLnJlcXVlc3RfYml0bWFwO1xuXHRcdHZhciB0cmFuc194eSA9IFByaXZhdGVHcmFwaGljcy50cmFuc194eTtcblx0XHR2YXIgcmVnX2Zvcl9yZW5kZXIgPSBQcml2YXRlR3JhcGhpY3MucmVnX2Zvcl9yZW5kZXI7XG5cblx0XHRmb3IodmFyIGkgPSAwOyBpIDwgc2xpY2UuZ3JpZF9yb3dzOyBpKyspe1xuXHRcdFx0XHRmb3IodmFyIGogPSAwOyBqIDwgc2xpY2UuZ3JpZF9jb2x1bW5zOyBqKyspe1xuXHRcdFx0XHRcdHZhciBraW5kID0gc2xpY2UuZ3JpZFtpXVtqXS5raW5kO1xuXHRcdFx0XHRcdGlmKGtpbmQgIT0gMCl7XG5cdFx0XHRcdFx0XHQvLyBUT0RPOiBzaG91bGQgbWFrZSBwcm9wZXIgdGVycmFpbiBjb2xsZWN0aW9uIHRoaW5nIHRvIHB1bGwgZnJvbVxuXHRcdFx0XHRcdFx0Lypcblx0XHRcdFx0XHRcdHZhciB0aWxlX3RleHR1cmUgPSBbXCJncmFzc1wiLCBcIm1pZGRsZV90ZXJyYWluXCIsIFwiYm90dG9tX3RlcnJhaW5cIl1ba2luZC0xXTtcblx0XHRcdFx0XHRcdHZhciB0aWxlID0gcmVxdWVzdF9iaXRtYXAodGlsZV90ZXh0dXJlKTtcblx0XHRcdFx0XHRcdCovXG5cdFx0XHRcdFx0XHR2YXIgc3VyZmFjZV90ZXh0dXJlcyA9IFtcImdyYXNzX3dpbnRlclwiLFwiZ3Jhc3Nfc3ByaW5nXCIsXCJncmFzc19zdW1tZXJcIixcImdyYXNzX2ZhbGxcIl07XG5cdFx0XHRcdFx0XHR2YXIgcG9zaXRpb24gPSBzbGljZS5ncmlkW2ldW2pdLnBvc2l0aW9uO1xuXHRcdFx0XHRcdFx0aWYgKGtpbmQgPT0gMSl7IC8vaWYgdGlsZSBpcyBwYXJ0IG9mIHRoZSBncm91bmRcblx0XHRcdFx0XHRcdFx0c3dpdGNoIChwb3NpdGlvbil7XG5cdFx0XHRcdFx0XHRcdFx0XHRjYXNlIFwic3VyZmFjZVwiOlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRjb25zb2xlLmxvZyhXb3JsZENvbnRyb2xsZXIuZ2V0X3NlYXNvbigpKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0dmFyIHRpbGVfdGV4dHVyZSA9IHN1cmZhY2VfdGV4dHVyZXNbV29ybGRDb250cm9sbGVyLmdldF9zZWFzb24oKV07XG5cdFx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0XHRjYXNlIFwidW5kZXJncm91bmRcIjpcblx0XHRcdFx0XHRcdFx0XHRcdHZhciB0aWxlX3RleHR1cmUgPSBcImJvdHRvbV90ZXJyYWluXCI7XG5cdFx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0aWYgKGtpbmQgPT0gMil7IC8vaWYgdGlsZSBpcyBwYXJ0IG9mIGEgcGxhdGZvcm1cblx0XHRcdFx0XHRcdFx0c3dpdGNoIChwb3NpdGlvbil7XG5cdFx0XHRcdFx0XHRcdFx0Y2FzZSBcImxlZnRcIjpcblx0XHRcdFx0XHRcdFx0XHRcdHZhciB0aWxlX3RleHR1cmUgPSBcImxlZnRfcGxhdGZvcm1cIjs7XG5cdFx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0XHRjYXNlIFwibWlkZGxlXCI6XG5cdFx0XHRcdFx0XHRcdFx0XHR2YXIgdGlsZV90ZXh0dXJlID0gXCJtaWRkbGVfcGxhdGZvcm1cIjtcblx0XHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHRcdGNhc2UgXCJyaWdodFwiOlxuXHRcdFx0XHRcdFx0XHRcdFx0dmFyIHRpbGVfdGV4dHVyZSA9IFwicmlnaHRfcGxhdGZvcm1cIjtcblx0XHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRpZiAoa2luZCA9PSAzKXsvL2lmIHRpbGUgaXMgYWN0dWFsbHkganVzdCBzcGlrZXNcblx0XHRcdFx0XHRcdFx0dmFyIHRpbGVfdGV4dHVyZSA9IFwicGxhdGZvcm1fc3Bpa2VzXCI7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR2YXIgdGlsZSA9IHJlcXVlc3RfYml0bWFwKHRpbGVfdGV4dHVyZSk7XG5cdFx0XHRcdFx0XHR2YXIgcGh5c2ljYWxfaW5zdGFuY2UgPSBzbGljZS5ncmlkW2ldW2pdO1xuXHRcdFx0XHRcdFx0dmFyIGJvZHlfcG9zaXRpb24gPSBwaHlzaWNhbF9pbnN0YW5jZS5ib2R5LkdldFdvcmxkQ2VudGVyKCk7XG5cdFx0XHRcdFx0XHR2YXIgdHJhbnNfcG9zID0gdHJhbnNfeHkoYm9keV9wb3NpdGlvbik7XG5cdFx0XHRcdFx0XHR0aWxlLnggPSB0cmFuc19wb3MueDtcblx0XHRcdFx0XHRcdHRpbGUueSA9IHRyYW5zX3Bvcy55O1xuXHRcdFx0XHRcdFx0cmVnX2Zvcl9yZW5kZXIodGlsZSwgcGh5c2ljYWxfaW5zdGFuY2UpO1xuXHRcdFx0XHRcdH0gLy8gZW5kIHRpbGVfdGV4dHVyZSBhc3NpZ25tZW50XG5cdFx0XHRcdH0gLy8gZW5kIGZvclxuXHRcdFx0fS8vZW5kIGZvclxuXHRcdFxuXHR9O1xuXG5cdHZhciByZW5kZXIgPSBmdW5jdGlvbihzbGljZSl7XG5cdFx0LyogXHRpcyByYW4gZWFjaCB0aWNrIGZyb20gR3JhcGhpY3NDb250cm9sbGVyLCBmb3IgZXZlcnkgcmVnaXN0ZXJlZCBvYmplY3Qgb2YgdGhpcyB0eXBlXG5cdFx0XHRpcyBnaXZlbiA+Z3JhcGhpY3NfaW5zdGFuY2U8IHBhcmFtZXRlciwgd2hpY2ggaXMgYWxzbyBzdXBwb3NlZCB0byBjb250YWluXG5cdFx0XHRwaHlzaWNhbF9pbnN0YW5jZSBwcm9wZXJ0eSBjb250YWluaW5nIGVudGl0eV9pbnN0YW5jZSwgaWYgaXQgd2FzIGF0dGNoZWQgY29ycmVjdGx5XG5cdFx0Ki9cblxuXHR9O1xuXG5cdHJldHVybiB7XG5cdFx0Ly8gZGVjbGFyZSBwdWJsaWNcblx0XHRpbml0OiBpbml0LCBcblx0XHRyZWdpc3RlcjogcmVnaXN0ZXIsXG5cdFx0cmVuZGVyOiByZW5kZXIsXG5cdH07XG59KSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFRlcnJhaW5TbGljZVJlbmRlcmVyO1xuXG52YXIgSW5jbHVkZXMgPSByZXF1aXJlKFwiLi4vSW5jbHVkZXMuanNcIik7IHZhciBpbmNsdWRlX2RhdGEgPSBJbmNsdWRlcy5nZXRfaW5jbHVkZV9kYXRhKHtcblx0Y3VycmVudF9tb2R1bGU6IFwiVGVycmFpblNsaWNlUmVuZGVyZXJcIiwgXG5cdGluY2x1ZGVfb3B0aW9uczogSW5jbHVkZXMuY2hvaWNlcy5SRU5ERVJFUl9TUEVDSUZJQ1xufSk7IGV2YWwoaW5jbHVkZV9kYXRhLm5hbWVfc3RhdGVtZW50cyk7IHZhciBpbmNsdWRlID0gZnVuY3Rpb24oKXtldmFsKGluY2x1ZGVfZGF0YS5tb2R1bGVfc3RhdGVtZW50cyk7fVxuXG4iLCJcbi8qXG4gKiBSdWxlcyBmb3Igd29ya2luZyBvbiB0aGUgKGNsaWVudC1zaWRlKSBnYW1lIGNvZGU6XG4gKlxuICogMS4gSWYgeW91IHRoaW5rIHRoYXQgb25lIG9mIHRoZXNlIHJ1bGVzIGlzIHN0dXBpZCBvciB1c2VsZXNzLCB0ZWxsIG1lLCBhbG9uZyB3aXRoIHNvbWUgYmV0dGVyIHN1Z2dlc3Rpb25zLlxuICpcbiAqIDIuIE1vZGVsIFtuYW1lXU1vZGVsIGNhbiBvbmx5IGJlIGFjY2Vzc2VkIHRocm91Z2ggW25hbWVdQ29udHJvbGxlci4gSWYgeW91IG5lZWQgdG8gZG8gc29tZXRoaW5nIHRvIFxuICogXHRcdGNoYW5nZSBbbmFtZV1Nb2RlbCBmcm9tIFtvdGhlcl9uYW1lXUNvbnRyb2xsZXIsIHdyaXRlIGZ1bmN0aW9uIGluIHRoZSBbbmFtZV1Db250cm9sbGVyIHRoYXQgZG9lc1xuICogXHRcdHdoYXQgeW91IG5lZWQsIGFuZCBjYWxsIGl0IGZyb20gdGhlIFtvdGhlcl9uYW1lXUNvbnRyb2xsZXJcbiAqXG4gKiAzLiBDb250cm9sbGVycyBhcmUgYWxsb3dlZCB0byBoYXZlIHByaXZhdGUgbWV0aG9kcy9maWVsZHMuIE1vZGVscyBhcmVuJ3QuIFxuICpcbiAqIDQuIENvbnRyb2xsZXJzIGFyZW4ndCBhbGxvd2VkIHRvIGhhdmUgcHVibGljIGRhdGEgZmllbGRzLiBcbiAqIFx0XHRUaG9zZSBkYXRhIGZpZWxkcyB0aGF0IGFyZSBwcmVzZW50IG11c3Qgbm90IHJlZmxlY3Qgc3RhdGUgb2YgdGhlIGdhbWUsIHRoZXkgbXVzdCBiZSByZWxhdGVkIHRvXG4gKiBcdFx0c29tZSBpbnRlcm5hbCBmdW5jdGlvbmFsaXR5IG9mIHRoZSBjb250cm9sbGVyXG4gKlxuICogNS4gSWYgeW91IHdyaXRlIHNvbWUgZnVuY3Rpb24gdGhhdCBkb2Vzbid0IGxvZ2ljYWxseSBiZWxvbmcgdG8gb25lIG9mIHRoZSBjb250cm9sbGVycyxcbiAqIFx0XHRwdXQgaXQgaW4gdGhlIFV0aWxpdHlcbiAqXG4gKiA2LiBWYXJpYWJsZXMgYXJlIG5hbWVkIGxpa2UgdGhhdDogdmFyaWFibGVfbmFtZVxuICogXHRcdEV4Y2VwdCAoc2luZ2xldG9uKWNsYXNzIG5hbWVzLCB0aGF0IGFyZSB3cml0dGVuIGxpa2UgdGhhdDogQ2xhc3NOYW1lXG4gKlxuICogNy4gQW5kIGFsbCB0aGUgb2J2aW91cyBzdHVmZiB0aGF0IGV2ZXJ5b25lIGtub3dzOlxuICogXHRcdGZ1bmN0aW9uIG11c3QgZG8gb25lIHRoaW5nOyBkb24ndCBtYWtlIGZ1bmN0aW9uIHB1YmxpYyB1bmxlc3MgaXQgbmVlZHMgdG8gYmUgdGhhdDsgXG4gKiBcdFx0Y29tbWVudCBhbWJpZ2lvdXMgY29kZSwgZm9yIGxhcmdlciBmdW5jdGlvbnMgaW5kaWNhdGUgdGhlaXIgcHVycG9zZSAodGhyb3VnaCBjb21tZW50aW5nKTtcbiAqL1xuXG5cbi8vIG1haW4gbmFtZXNwYWNlIHRoYXQgaXMgZXhwb3NlZCB0byBnbG9iYWwgc2NvcGUgKHdpbmRvdyBvYmplY3QpXG53aW5kb3cuc2lkZXNjcm9sbGVyX2dhbWUgPSAoZnVuY3Rpb24gbmFtZXNwYWNlKCl7XG5cblx0XHR2YXIgSW5jbHVkZXMgPSByZXF1aXJlKFwiLi9JbmNsdWRlcy5qc1wiKTsgdmFyIGluY2x1ZGVfZGF0YSA9IEluY2x1ZGVzLmdldF9pbmNsdWRlX2RhdGEoe1xuXHRcdGN1cnJlbnRfbW9kdWxlOiBcIk5vbmVcIiwgXG5cdFx0aW5jbHVkZV9vcHRpb25zOiBJbmNsdWRlcy5jaG9pY2VzLkFMTF9DT05UUk9MTEVSU1xuXHR9KTsgZXZhbChpbmNsdWRlX2RhdGEubmFtZV9zdGF0ZW1lbnRzKTsgdmFyIGluY2x1ZGUgPSBmdW5jdGlvbigpe2V2YWwoaW5jbHVkZV9kYXRhLm1vZHVsZV9zdGF0ZW1lbnRzKTt9XG5cblx0Ly8gR2FtZSBpbml0aWF0aW9uIHNlY3Rpb246ID4+PlxuXHRcdFxuXHR2YXIgbG9hZF9nYW1lID0gZnVuY3Rpb24obW9kZSwgc2Vzc2lvbl9pZCwgcGxheWVyX2lkKVxuXHR7XG5cdFxuXHRcdEluY2x1ZGVzLmluaXQoKTsgLy8gZmlyc3Rcblx0XHRpbmNsdWRlKCk7IC8vIHNlY29uZFxuXG5cdFx0SW5pdENvbnRyb2xsZXIuaW5pdChtb2RlLCBzZXNzaW9uX2lkLCBwbGF5ZXJfaWQpOyAvLyBpbml0IGFsbCB0aGUgc3R1ZmZcblxuXHRcdGlmKG1vZGUgPT0gXCJ0ZXN0XCIpe1xuXHRcdFx0VGVzdENvbnRyb2xsZXIudGVzdCgpO1xuXHRcdH1cblx0fTtcblxuXG5cdHZhciBydW4gPSBmdW5jdGlvbihtb2RlLCBzZXNzaW9uX2lkLCBwbGF5ZXJfaWQpXG5cdHtcblx0XHQvLyBkb25lIHRoaXMgd2F5IHRvIGVuc3VyZSB0aGF0IGxvYWRfZ2FtZSdzIGludGVybmFscyBhcmVuJ3QgYWNjZXNzaWJsZSB0byB0aGUgd29ybGQ6XG5cdFx0bG9hZF9nYW1lKG1vZGUsIHNlc3Npb25faWQsIHBsYXllcl9pZCk7XG5cdH07IFxuXHRcblx0cmV0dXJuIHtcblx0XHRydW46IHJ1blxuXHR9OyAvLyBleHBvc2UgZnVuY3Rpb24gcnVuIHRvIHRoZSB3b3JsZFxuXG59KSgpOyBcblxuIiwiLypcbiogQ29weXJpZ2h0IChjKSAyMDA2LTIwMDcgRXJpbiBDYXR0byBodHRwOi8vd3d3LmdwaHlzaWNzLmNvbVxuKlxuKiBUaGlzIHNvZnR3YXJlIGlzIHByb3ZpZGVkICdhcy1pcycsIHdpdGhvdXQgYW55IGV4cHJlc3Mgb3IgaW1wbGllZFxuKiB3YXJyYW50eS4gIEluIG5vIGV2ZW50IHdpbGwgdGhlIGF1dGhvcnMgYmUgaGVsZCBsaWFibGUgZm9yIGFueSBkYW1hZ2VzXG4qIGFyaXNpbmcgZnJvbSB0aGUgdXNlIG9mIHRoaXMgc29mdHdhcmUuXG4qIFBlcm1pc3Npb24gaXMgZ3JhbnRlZCB0byBhbnlvbmUgdG8gdXNlIHRoaXMgc29mdHdhcmUgZm9yIGFueSBwdXJwb3NlLFxuKiBpbmNsdWRpbmcgY29tbWVyY2lhbCBhcHBsaWNhdGlvbnMsIGFuZCB0byBhbHRlciBpdCBhbmQgcmVkaXN0cmlidXRlIGl0XG4qIGZyZWVseSwgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIHJlc3RyaWN0aW9uczpcbiogMS4gVGhlIG9yaWdpbiBvZiB0aGlzIHNvZnR3YXJlIG11c3Qgbm90IGJlIG1pc3JlcHJlc2VudGVkOyB5b3UgbXVzdCBub3RcbiogY2xhaW0gdGhhdCB5b3Ugd3JvdGUgdGhlIG9yaWdpbmFsIHNvZnR3YXJlLiBJZiB5b3UgdXNlIHRoaXMgc29mdHdhcmVcbiogaW4gYSBwcm9kdWN0LCBhbiBhY2tub3dsZWRnbWVudCBpbiB0aGUgcHJvZHVjdCBkb2N1bWVudGF0aW9uIHdvdWxkIGJlXG4qIGFwcHJlY2lhdGVkIGJ1dCBpcyBub3QgcmVxdWlyZWQuXG4qIDIuIEFsdGVyZWQgc291cmNlIHZlcnNpb25zIG11c3QgYmUgcGxhaW5seSBtYXJrZWQgYXMgc3VjaCwgYW5kIG11c3Qgbm90IGJlXG4qIG1pc3JlcHJlc2VudGVkIGFzIGJlaW5nIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS5cbiogMy4gVGhpcyBub3RpY2UgbWF5IG5vdCBiZSByZW1vdmVkIG9yIGFsdGVyZWQgZnJvbSBhbnkgc291cmNlIGRpc3RyaWJ1dGlvbi5cbiovXG5cInVzZSBzdHJpY3RcIlxuXG52YXIgQm94MkQgPSB7fTtcblxuKGZ1bmN0aW9uIChhMmosIHVuZGVmaW5lZCkge1xuICAgXG4gICBmdW5jdGlvbiBlbXB0eUZuKCkge307XG4gICBhMmouaW5oZXJpdCA9IGZ1bmN0aW9uKGNscywgYmFzZSkge1xuICAgICAgdmFyIHRtcEN0ciA9IGNscztcbiAgICAgIGVtcHR5Rm4ucHJvdG90eXBlID0gYmFzZS5wcm90b3R5cGU7XG4gICAgICBjbHMucHJvdG90eXBlID0gbmV3IGVtcHR5Rm47XG4gICAgICBjbHMucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gdG1wQ3RyO1xuICAgfTtcbiAgIFxuICAgYTJqLmdlbmVyYXRlQ2FsbGJhY2sgPSBmdW5jdGlvbiBnZW5lcmF0ZUNhbGxiYWNrKGNvbnRleHQsIGNiKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgY2IuYXBwbHkoY29udGV4dCwgYXJndW1lbnRzKTtcbiAgICAgIH07XG4gICB9O1xuICAgXG4gICBhMmouTlZlY3RvciA9IGZ1bmN0aW9uIE5WZWN0b3IobGVuZ3RoKSB7XG4gICAgICBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQpIGxlbmd0aCA9IDA7XG4gICAgICB2YXIgdG1wID0gbmV3IEFycmF5KGxlbmd0aCB8fCAwKTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpXG4gICAgICB0bXBbaV0gPSAwO1xuICAgICAgcmV0dXJuIHRtcDtcbiAgIH07XG4gICBcbiAgIGEyai5pcyA9IGZ1bmN0aW9uIGlzKG8xLCBvMikge1xuICAgICAgaWYgKG8xID09PSBudWxsKSByZXR1cm4gZmFsc2U7XG4gICAgICBpZiAoKG8yIGluc3RhbmNlb2YgRnVuY3Rpb24pICYmIChvMSBpbnN0YW5jZW9mIG8yKSkgcmV0dXJuIHRydWU7XG4gICAgICBpZiAoKG8xLmNvbnN0cnVjdG9yLl9faW1wbGVtZW50cyAhPSB1bmRlZmluZWQpICYmIChvMS5jb25zdHJ1Y3Rvci5fX2ltcGxlbWVudHNbbzJdKSkgcmV0dXJuIHRydWU7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICB9O1xuICAgXG4gICBhMmoucGFyc2VVSW50ID0gZnVuY3Rpb24odikge1xuICAgICAgcmV0dXJuIE1hdGguYWJzKHBhcnNlSW50KHYpKTtcbiAgIH1cbiAgIFxufSkoQm94MkQpO1xuXG4vLyNUT0RPIHJlbW92ZSBhc3NpZ25tZW50cyBmcm9tIGdsb2JhbCBuYW1lc3BhY2VcbnZhciBWZWN0b3IgPSBBcnJheTtcbnZhciBWZWN0b3JfYTJqX051bWJlciA9IEJveDJELk5WZWN0b3I7XG4vL3BhY2thZ2Ugc3RydWN0dXJlXG5pZiAodHlwZW9mKEJveDJEKSA9PT0gXCJ1bmRlZmluZWRcIikgQm94MkQgPSB7fTtcbmlmICh0eXBlb2YoQm94MkQuQ29sbGlzaW9uKSA9PT0gXCJ1bmRlZmluZWRcIikgQm94MkQuQ29sbGlzaW9uID0ge307XG5pZiAodHlwZW9mKEJveDJELkNvbGxpc2lvbi5TaGFwZXMpID09PSBcInVuZGVmaW5lZFwiKSBCb3gyRC5Db2xsaXNpb24uU2hhcGVzID0ge307XG5pZiAodHlwZW9mKEJveDJELkNvbW1vbikgPT09IFwidW5kZWZpbmVkXCIpIEJveDJELkNvbW1vbiA9IHt9O1xuaWYgKHR5cGVvZihCb3gyRC5Db21tb24uTWF0aCkgPT09IFwidW5kZWZpbmVkXCIpIEJveDJELkNvbW1vbi5NYXRoID0ge307XG5pZiAodHlwZW9mKEJveDJELkR5bmFtaWNzKSA9PT0gXCJ1bmRlZmluZWRcIikgQm94MkQuRHluYW1pY3MgPSB7fTtcbmlmICh0eXBlb2YoQm94MkQuRHluYW1pY3MuQ29udGFjdHMpID09PSBcInVuZGVmaW5lZFwiKSBCb3gyRC5EeW5hbWljcy5Db250YWN0cyA9IHt9O1xuaWYgKHR5cGVvZihCb3gyRC5EeW5hbWljcy5Db250cm9sbGVycykgPT09IFwidW5kZWZpbmVkXCIpIEJveDJELkR5bmFtaWNzLkNvbnRyb2xsZXJzID0ge307XG5pZiAodHlwZW9mKEJveDJELkR5bmFtaWNzLkpvaW50cykgPT09IFwidW5kZWZpbmVkXCIpIEJveDJELkR5bmFtaWNzLkpvaW50cyA9IHt9O1xuLy9wcmUtZGVmaW5pdGlvbnNcbihmdW5jdGlvbiAoKSB7XG4gICBCb3gyRC5Db2xsaXNpb24uSUJyb2FkUGhhc2UgPSAnQm94MkQuQ29sbGlzaW9uLklCcm9hZFBoYXNlJztcblxuICAgZnVuY3Rpb24gYjJBQUJCKCkge1xuICAgICAgYjJBQUJCLmIyQUFCQi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgfTtcbiAgIEJveDJELkNvbGxpc2lvbi5iMkFBQkIgPSBiMkFBQkI7XG5cbiAgIGZ1bmN0aW9uIGIyQm91bmQoKSB7XG4gICAgICBiMkJvdW5kLmIyQm91bmQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgIH07XG4gICBCb3gyRC5Db2xsaXNpb24uYjJCb3VuZCA9IGIyQm91bmQ7XG5cbiAgIGZ1bmN0aW9uIGIyQm91bmRWYWx1ZXMoKSB7XG4gICAgICBiMkJvdW5kVmFsdWVzLmIyQm91bmRWYWx1ZXMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIGlmICh0aGlzLmNvbnN0cnVjdG9yID09PSBiMkJvdW5kVmFsdWVzKSB0aGlzLmIyQm91bmRWYWx1ZXMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgIH07XG4gICBCb3gyRC5Db2xsaXNpb24uYjJCb3VuZFZhbHVlcyA9IGIyQm91bmRWYWx1ZXM7XG5cbiAgIGZ1bmN0aW9uIGIyQ29sbGlzaW9uKCkge1xuICAgICAgYjJDb2xsaXNpb24uYjJDb2xsaXNpb24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgIH07XG4gICBCb3gyRC5Db2xsaXNpb24uYjJDb2xsaXNpb24gPSBiMkNvbGxpc2lvbjtcblxuICAgZnVuY3Rpb24gYjJDb250YWN0SUQoKSB7XG4gICAgICBiMkNvbnRhY3RJRC5iMkNvbnRhY3RJRC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgaWYgKHRoaXMuY29uc3RydWN0b3IgPT09IGIyQ29udGFjdElEKSB0aGlzLmIyQ29udGFjdElELmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICB9O1xuICAgQm94MkQuQ29sbGlzaW9uLmIyQ29udGFjdElEID0gYjJDb250YWN0SUQ7XG5cbiAgIGZ1bmN0aW9uIGIyQ29udGFjdFBvaW50KCkge1xuICAgICAgYjJDb250YWN0UG9pbnQuYjJDb250YWN0UG9pbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgIH07XG4gICBCb3gyRC5Db2xsaXNpb24uYjJDb250YWN0UG9pbnQgPSBiMkNvbnRhY3RQb2ludDtcblxuICAgZnVuY3Rpb24gYjJEaXN0YW5jZSgpIHtcbiAgICAgIGIyRGlzdGFuY2UuYjJEaXN0YW5jZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgfTtcbiAgIEJveDJELkNvbGxpc2lvbi5iMkRpc3RhbmNlID0gYjJEaXN0YW5jZTtcblxuICAgZnVuY3Rpb24gYjJEaXN0YW5jZUlucHV0KCkge1xuICAgICAgYjJEaXN0YW5jZUlucHV0LmIyRGlzdGFuY2VJbnB1dC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgfTtcbiAgIEJveDJELkNvbGxpc2lvbi5iMkRpc3RhbmNlSW5wdXQgPSBiMkRpc3RhbmNlSW5wdXQ7XG5cbiAgIGZ1bmN0aW9uIGIyRGlzdGFuY2VPdXRwdXQoKSB7XG4gICAgICBiMkRpc3RhbmNlT3V0cHV0LmIyRGlzdGFuY2VPdXRwdXQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgIH07XG4gICBCb3gyRC5Db2xsaXNpb24uYjJEaXN0YW5jZU91dHB1dCA9IGIyRGlzdGFuY2VPdXRwdXQ7XG5cbiAgIGZ1bmN0aW9uIGIyRGlzdGFuY2VQcm94eSgpIHtcbiAgICAgIGIyRGlzdGFuY2VQcm94eS5iMkRpc3RhbmNlUHJveHkuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgIH07XG4gICBCb3gyRC5Db2xsaXNpb24uYjJEaXN0YW5jZVByb3h5ID0gYjJEaXN0YW5jZVByb3h5O1xuXG4gICBmdW5jdGlvbiBiMkR5bmFtaWNUcmVlKCkge1xuICAgICAgYjJEeW5hbWljVHJlZS5iMkR5bmFtaWNUcmVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICBpZiAodGhpcy5jb25zdHJ1Y3RvciA9PT0gYjJEeW5hbWljVHJlZSkgdGhpcy5iMkR5bmFtaWNUcmVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICB9O1xuICAgQm94MkQuQ29sbGlzaW9uLmIyRHluYW1pY1RyZWUgPSBiMkR5bmFtaWNUcmVlO1xuXG4gICBmdW5jdGlvbiBiMkR5bmFtaWNUcmVlQnJvYWRQaGFzZSgpIHtcbiAgICAgIGIyRHluYW1pY1RyZWVCcm9hZFBoYXNlLmIyRHluYW1pY1RyZWVCcm9hZFBoYXNlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICB9O1xuICAgQm94MkQuQ29sbGlzaW9uLmIyRHluYW1pY1RyZWVCcm9hZFBoYXNlID0gYjJEeW5hbWljVHJlZUJyb2FkUGhhc2U7XG5cbiAgIGZ1bmN0aW9uIGIyRHluYW1pY1RyZWVOb2RlKCkge1xuICAgICAgYjJEeW5hbWljVHJlZU5vZGUuYjJEeW5hbWljVHJlZU5vZGUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgIH07XG4gICBCb3gyRC5Db2xsaXNpb24uYjJEeW5hbWljVHJlZU5vZGUgPSBiMkR5bmFtaWNUcmVlTm9kZTtcblxuICAgZnVuY3Rpb24gYjJEeW5hbWljVHJlZVBhaXIoKSB7XG4gICAgICBiMkR5bmFtaWNUcmVlUGFpci5iMkR5bmFtaWNUcmVlUGFpci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgfTtcbiAgIEJveDJELkNvbGxpc2lvbi5iMkR5bmFtaWNUcmVlUGFpciA9IGIyRHluYW1pY1RyZWVQYWlyO1xuXG4gICBmdW5jdGlvbiBiMk1hbmlmb2xkKCkge1xuICAgICAgYjJNYW5pZm9sZC5iMk1hbmlmb2xkLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICBpZiAodGhpcy5jb25zdHJ1Y3RvciA9PT0gYjJNYW5pZm9sZCkgdGhpcy5iMk1hbmlmb2xkLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICB9O1xuICAgQm94MkQuQ29sbGlzaW9uLmIyTWFuaWZvbGQgPSBiMk1hbmlmb2xkO1xuXG4gICBmdW5jdGlvbiBiMk1hbmlmb2xkUG9pbnQoKSB7XG4gICAgICBiMk1hbmlmb2xkUG9pbnQuYjJNYW5pZm9sZFBvaW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICBpZiAodGhpcy5jb25zdHJ1Y3RvciA9PT0gYjJNYW5pZm9sZFBvaW50KSB0aGlzLmIyTWFuaWZvbGRQb2ludC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgfTtcbiAgIEJveDJELkNvbGxpc2lvbi5iMk1hbmlmb2xkUG9pbnQgPSBiMk1hbmlmb2xkUG9pbnQ7XG5cbiAgIGZ1bmN0aW9uIGIyUG9pbnQoKSB7XG4gICAgICBiMlBvaW50LmIyUG9pbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgIH07XG4gICBCb3gyRC5Db2xsaXNpb24uYjJQb2ludCA9IGIyUG9pbnQ7XG5cbiAgIGZ1bmN0aW9uIGIyUmF5Q2FzdElucHV0KCkge1xuICAgICAgYjJSYXlDYXN0SW5wdXQuYjJSYXlDYXN0SW5wdXQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIGlmICh0aGlzLmNvbnN0cnVjdG9yID09PSBiMlJheUNhc3RJbnB1dCkgdGhpcy5iMlJheUNhc3RJbnB1dC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgfTtcbiAgIEJveDJELkNvbGxpc2lvbi5iMlJheUNhc3RJbnB1dCA9IGIyUmF5Q2FzdElucHV0O1xuXG4gICBmdW5jdGlvbiBiMlJheUNhc3RPdXRwdXQoKSB7XG4gICAgICBiMlJheUNhc3RPdXRwdXQuYjJSYXlDYXN0T3V0cHV0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICB9O1xuICAgQm94MkQuQ29sbGlzaW9uLmIyUmF5Q2FzdE91dHB1dCA9IGIyUmF5Q2FzdE91dHB1dDtcblxuICAgZnVuY3Rpb24gYjJTZWdtZW50KCkge1xuICAgICAgYjJTZWdtZW50LmIyU2VnbWVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgfTtcbiAgIEJveDJELkNvbGxpc2lvbi5iMlNlZ21lbnQgPSBiMlNlZ21lbnQ7XG5cbiAgIGZ1bmN0aW9uIGIyU2VwYXJhdGlvbkZ1bmN0aW9uKCkge1xuICAgICAgYjJTZXBhcmF0aW9uRnVuY3Rpb24uYjJTZXBhcmF0aW9uRnVuY3Rpb24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgIH07XG4gICBCb3gyRC5Db2xsaXNpb24uYjJTZXBhcmF0aW9uRnVuY3Rpb24gPSBiMlNlcGFyYXRpb25GdW5jdGlvbjtcblxuICAgZnVuY3Rpb24gYjJTaW1wbGV4KCkge1xuICAgICAgYjJTaW1wbGV4LmIyU2ltcGxleC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgaWYgKHRoaXMuY29uc3RydWN0b3IgPT09IGIyU2ltcGxleCkgdGhpcy5iMlNpbXBsZXguYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgIH07XG4gICBCb3gyRC5Db2xsaXNpb24uYjJTaW1wbGV4ID0gYjJTaW1wbGV4O1xuXG4gICBmdW5jdGlvbiBiMlNpbXBsZXhDYWNoZSgpIHtcbiAgICAgIGIyU2ltcGxleENhY2hlLmIyU2ltcGxleENhY2hlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICB9O1xuICAgQm94MkQuQ29sbGlzaW9uLmIyU2ltcGxleENhY2hlID0gYjJTaW1wbGV4Q2FjaGU7XG5cbiAgIGZ1bmN0aW9uIGIyU2ltcGxleFZlcnRleCgpIHtcbiAgICAgIGIyU2ltcGxleFZlcnRleC5iMlNpbXBsZXhWZXJ0ZXguYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgIH07XG4gICBCb3gyRC5Db2xsaXNpb24uYjJTaW1wbGV4VmVydGV4ID0gYjJTaW1wbGV4VmVydGV4O1xuXG4gICBmdW5jdGlvbiBiMlRpbWVPZkltcGFjdCgpIHtcbiAgICAgIGIyVGltZU9mSW1wYWN0LmIyVGltZU9mSW1wYWN0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICB9O1xuICAgQm94MkQuQ29sbGlzaW9uLmIyVGltZU9mSW1wYWN0ID0gYjJUaW1lT2ZJbXBhY3Q7XG5cbiAgIGZ1bmN0aW9uIGIyVE9JSW5wdXQoKSB7XG4gICAgICBiMlRPSUlucHV0LmIyVE9JSW5wdXQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgIH07XG4gICBCb3gyRC5Db2xsaXNpb24uYjJUT0lJbnB1dCA9IGIyVE9JSW5wdXQ7XG5cbiAgIGZ1bmN0aW9uIGIyV29ybGRNYW5pZm9sZCgpIHtcbiAgICAgIGIyV29ybGRNYW5pZm9sZC5iMldvcmxkTWFuaWZvbGQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIGlmICh0aGlzLmNvbnN0cnVjdG9yID09PSBiMldvcmxkTWFuaWZvbGQpIHRoaXMuYjJXb3JsZE1hbmlmb2xkLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICB9O1xuICAgQm94MkQuQ29sbGlzaW9uLmIyV29ybGRNYW5pZm9sZCA9IGIyV29ybGRNYW5pZm9sZDtcblxuICAgZnVuY3Rpb24gQ2xpcFZlcnRleCgpIHtcbiAgICAgIENsaXBWZXJ0ZXguQ2xpcFZlcnRleC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgfTtcbiAgIEJveDJELkNvbGxpc2lvbi5DbGlwVmVydGV4ID0gQ2xpcFZlcnRleDtcblxuICAgZnVuY3Rpb24gRmVhdHVyZXMoKSB7XG4gICAgICBGZWF0dXJlcy5GZWF0dXJlcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgfTtcbiAgIEJveDJELkNvbGxpc2lvbi5GZWF0dXJlcyA9IEZlYXR1cmVzO1xuXG4gICBmdW5jdGlvbiBiMkNpcmNsZVNoYXBlKCkge1xuICAgICAgYjJDaXJjbGVTaGFwZS5iMkNpcmNsZVNoYXBlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICBpZiAodGhpcy5jb25zdHJ1Y3RvciA9PT0gYjJDaXJjbGVTaGFwZSkgdGhpcy5iMkNpcmNsZVNoYXBlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICB9O1xuICAgQm94MkQuQ29sbGlzaW9uLlNoYXBlcy5iMkNpcmNsZVNoYXBlID0gYjJDaXJjbGVTaGFwZTtcblxuICAgZnVuY3Rpb24gYjJFZGdlQ2hhaW5EZWYoKSB7XG4gICAgICBiMkVkZ2VDaGFpbkRlZi5iMkVkZ2VDaGFpbkRlZi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgaWYgKHRoaXMuY29uc3RydWN0b3IgPT09IGIyRWRnZUNoYWluRGVmKSB0aGlzLmIyRWRnZUNoYWluRGVmLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICB9O1xuICAgQm94MkQuQ29sbGlzaW9uLlNoYXBlcy5iMkVkZ2VDaGFpbkRlZiA9IGIyRWRnZUNoYWluRGVmO1xuXG4gICBmdW5jdGlvbiBiMkVkZ2VTaGFwZSgpIHtcbiAgICAgIGIyRWRnZVNoYXBlLmIyRWRnZVNoYXBlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICBpZiAodGhpcy5jb25zdHJ1Y3RvciA9PT0gYjJFZGdlU2hhcGUpIHRoaXMuYjJFZGdlU2hhcGUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgIH07XG4gICBCb3gyRC5Db2xsaXNpb24uU2hhcGVzLmIyRWRnZVNoYXBlID0gYjJFZGdlU2hhcGU7XG5cbiAgIGZ1bmN0aW9uIGIyTWFzc0RhdGEoKSB7XG4gICAgICBiMk1hc3NEYXRhLmIyTWFzc0RhdGEuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgIH07XG4gICBCb3gyRC5Db2xsaXNpb24uU2hhcGVzLmIyTWFzc0RhdGEgPSBiMk1hc3NEYXRhO1xuXG4gICBmdW5jdGlvbiBiMlBvbHlnb25TaGFwZSgpIHtcbiAgICAgIGIyUG9seWdvblNoYXBlLmIyUG9seWdvblNoYXBlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICBpZiAodGhpcy5jb25zdHJ1Y3RvciA9PT0gYjJQb2x5Z29uU2hhcGUpIHRoaXMuYjJQb2x5Z29uU2hhcGUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgIH07XG4gICBCb3gyRC5Db2xsaXNpb24uU2hhcGVzLmIyUG9seWdvblNoYXBlID0gYjJQb2x5Z29uU2hhcGU7XG5cbiAgIGZ1bmN0aW9uIGIyU2hhcGUoKSB7XG4gICAgICBiMlNoYXBlLmIyU2hhcGUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIGlmICh0aGlzLmNvbnN0cnVjdG9yID09PSBiMlNoYXBlKSB0aGlzLmIyU2hhcGUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgIH07XG4gICBCb3gyRC5Db2xsaXNpb24uU2hhcGVzLmIyU2hhcGUgPSBiMlNoYXBlO1xuICAgQm94MkQuQ29tbW9uLmIyaW50ZXJuYWwgPSAnQm94MkQuQ29tbW9uLmIyaW50ZXJuYWwnO1xuXG4gICBmdW5jdGlvbiBiMkNvbG9yKCkge1xuICAgICAgYjJDb2xvci5iMkNvbG9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICBpZiAodGhpcy5jb25zdHJ1Y3RvciA9PT0gYjJDb2xvcikgdGhpcy5iMkNvbG9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICB9O1xuICAgQm94MkQuQ29tbW9uLmIyQ29sb3IgPSBiMkNvbG9yO1xuXG4gICBmdW5jdGlvbiBiMlNldHRpbmdzKCkge1xuICAgICAgYjJTZXR0aW5ncy5iMlNldHRpbmdzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICB9O1xuICAgQm94MkQuQ29tbW9uLmIyU2V0dGluZ3MgPSBiMlNldHRpbmdzO1xuXG4gICBmdW5jdGlvbiBiMk1hdDIyKCkge1xuICAgICAgYjJNYXQyMi5iMk1hdDIyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICBpZiAodGhpcy5jb25zdHJ1Y3RvciA9PT0gYjJNYXQyMikgdGhpcy5iMk1hdDIyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICB9O1xuICAgQm94MkQuQ29tbW9uLk1hdGguYjJNYXQyMiA9IGIyTWF0MjI7XG5cbiAgIGZ1bmN0aW9uIGIyTWF0MzMoKSB7XG4gICAgICBiMk1hdDMzLmIyTWF0MzMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIGlmICh0aGlzLmNvbnN0cnVjdG9yID09PSBiMk1hdDMzKSB0aGlzLmIyTWF0MzMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgIH07XG4gICBCb3gyRC5Db21tb24uTWF0aC5iMk1hdDMzID0gYjJNYXQzMztcblxuICAgZnVuY3Rpb24gYjJNYXRoKCkge1xuICAgICAgYjJNYXRoLmIyTWF0aC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgfTtcbiAgIEJveDJELkNvbW1vbi5NYXRoLmIyTWF0aCA9IGIyTWF0aDtcblxuICAgZnVuY3Rpb24gYjJTd2VlcCgpIHtcbiAgICAgIGIyU3dlZXAuYjJTd2VlcC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgfTtcbiAgIEJveDJELkNvbW1vbi5NYXRoLmIyU3dlZXAgPSBiMlN3ZWVwO1xuXG4gICBmdW5jdGlvbiBiMlRyYW5zZm9ybSgpIHtcbiAgICAgIGIyVHJhbnNmb3JtLmIyVHJhbnNmb3JtLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICBpZiAodGhpcy5jb25zdHJ1Y3RvciA9PT0gYjJUcmFuc2Zvcm0pIHRoaXMuYjJUcmFuc2Zvcm0uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgIH07XG4gICBCb3gyRC5Db21tb24uTWF0aC5iMlRyYW5zZm9ybSA9IGIyVHJhbnNmb3JtO1xuXG4gICBmdW5jdGlvbiBiMlZlYzIoKSB7XG4gICAgICBiMlZlYzIuYjJWZWMyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICBpZiAodGhpcy5jb25zdHJ1Y3RvciA9PT0gYjJWZWMyKSB0aGlzLmIyVmVjMi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgfTtcbiAgIEJveDJELkNvbW1vbi5NYXRoLmIyVmVjMiA9IGIyVmVjMjtcblxuICAgZnVuY3Rpb24gYjJWZWMzKCkge1xuICAgICAgYjJWZWMzLmIyVmVjMy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgaWYgKHRoaXMuY29uc3RydWN0b3IgPT09IGIyVmVjMykgdGhpcy5iMlZlYzMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgIH07XG4gICBCb3gyRC5Db21tb24uTWF0aC5iMlZlYzMgPSBiMlZlYzM7XG5cbiAgIGZ1bmN0aW9uIGIyQm9keSgpIHtcbiAgICAgIGIyQm9keS5iMkJvZHkuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIGlmICh0aGlzLmNvbnN0cnVjdG9yID09PSBiMkJvZHkpIHRoaXMuYjJCb2R5LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICB9O1xuICAgQm94MkQuRHluYW1pY3MuYjJCb2R5ID0gYjJCb2R5O1xuXG4gICBmdW5jdGlvbiBiMkJvZHlEZWYoKSB7XG4gICAgICBiMkJvZHlEZWYuYjJCb2R5RGVmLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICBpZiAodGhpcy5jb25zdHJ1Y3RvciA9PT0gYjJCb2R5RGVmKSB0aGlzLmIyQm9keURlZi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgfTtcbiAgIEJveDJELkR5bmFtaWNzLmIyQm9keURlZiA9IGIyQm9keURlZjtcblxuICAgZnVuY3Rpb24gYjJDb250YWN0RmlsdGVyKCkge1xuICAgICAgYjJDb250YWN0RmlsdGVyLmIyQ29udGFjdEZpbHRlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgfTtcbiAgIEJveDJELkR5bmFtaWNzLmIyQ29udGFjdEZpbHRlciA9IGIyQ29udGFjdEZpbHRlcjtcblxuICAgZnVuY3Rpb24gYjJDb250YWN0SW1wdWxzZSgpIHtcbiAgICAgIGIyQ29udGFjdEltcHVsc2UuYjJDb250YWN0SW1wdWxzZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgfTtcbiAgIEJveDJELkR5bmFtaWNzLmIyQ29udGFjdEltcHVsc2UgPSBiMkNvbnRhY3RJbXB1bHNlO1xuXG4gICBmdW5jdGlvbiBiMkNvbnRhY3RMaXN0ZW5lcigpIHtcbiAgICAgIGIyQ29udGFjdExpc3RlbmVyLmIyQ29udGFjdExpc3RlbmVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICB9O1xuICAgQm94MkQuRHluYW1pY3MuYjJDb250YWN0TGlzdGVuZXIgPSBiMkNvbnRhY3RMaXN0ZW5lcjtcblxuICAgZnVuY3Rpb24gYjJDb250YWN0TWFuYWdlcigpIHtcbiAgICAgIGIyQ29udGFjdE1hbmFnZXIuYjJDb250YWN0TWFuYWdlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgaWYgKHRoaXMuY29uc3RydWN0b3IgPT09IGIyQ29udGFjdE1hbmFnZXIpIHRoaXMuYjJDb250YWN0TWFuYWdlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgfTtcbiAgIEJveDJELkR5bmFtaWNzLmIyQ29udGFjdE1hbmFnZXIgPSBiMkNvbnRhY3RNYW5hZ2VyO1xuXG4gICBmdW5jdGlvbiBiMkRlYnVnRHJhdygpIHtcbiAgICAgIGIyRGVidWdEcmF3LmIyRGVidWdEcmF3LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICBpZiAodGhpcy5jb25zdHJ1Y3RvciA9PT0gYjJEZWJ1Z0RyYXcpIHRoaXMuYjJEZWJ1Z0RyYXcuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgIH07XG4gICBCb3gyRC5EeW5hbWljcy5iMkRlYnVnRHJhdyA9IGIyRGVidWdEcmF3O1xuXG4gICBmdW5jdGlvbiBiMkRlc3RydWN0aW9uTGlzdGVuZXIoKSB7XG4gICAgICBiMkRlc3RydWN0aW9uTGlzdGVuZXIuYjJEZXN0cnVjdGlvbkxpc3RlbmVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICB9O1xuICAgQm94MkQuRHluYW1pY3MuYjJEZXN0cnVjdGlvbkxpc3RlbmVyID0gYjJEZXN0cnVjdGlvbkxpc3RlbmVyO1xuXG4gICBmdW5jdGlvbiBiMkZpbHRlckRhdGEoKSB7XG4gICAgICBiMkZpbHRlckRhdGEuYjJGaWx0ZXJEYXRhLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICB9O1xuICAgQm94MkQuRHluYW1pY3MuYjJGaWx0ZXJEYXRhID0gYjJGaWx0ZXJEYXRhO1xuXG4gICBmdW5jdGlvbiBiMkZpeHR1cmUoKSB7XG4gICAgICBiMkZpeHR1cmUuYjJGaXh0dXJlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICBpZiAodGhpcy5jb25zdHJ1Y3RvciA9PT0gYjJGaXh0dXJlKSB0aGlzLmIyRml4dHVyZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgfTtcbiAgIEJveDJELkR5bmFtaWNzLmIyRml4dHVyZSA9IGIyRml4dHVyZTtcblxuICAgZnVuY3Rpb24gYjJGaXh0dXJlRGVmKCkge1xuICAgICAgYjJGaXh0dXJlRGVmLmIyRml4dHVyZURlZi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgaWYgKHRoaXMuY29uc3RydWN0b3IgPT09IGIyRml4dHVyZURlZikgdGhpcy5iMkZpeHR1cmVEZWYuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgIH07XG4gICBCb3gyRC5EeW5hbWljcy5iMkZpeHR1cmVEZWYgPSBiMkZpeHR1cmVEZWY7XG5cbiAgIGZ1bmN0aW9uIGIySXNsYW5kKCkge1xuICAgICAgYjJJc2xhbmQuYjJJc2xhbmQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIGlmICh0aGlzLmNvbnN0cnVjdG9yID09PSBiMklzbGFuZCkgdGhpcy5iMklzbGFuZC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgfTtcbiAgIEJveDJELkR5bmFtaWNzLmIySXNsYW5kID0gYjJJc2xhbmQ7XG5cbiAgIGZ1bmN0aW9uIGIyVGltZVN0ZXAoKSB7XG4gICAgICBiMlRpbWVTdGVwLmIyVGltZVN0ZXAuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgIH07XG4gICBCb3gyRC5EeW5hbWljcy5iMlRpbWVTdGVwID0gYjJUaW1lU3RlcDtcblxuICAgZnVuY3Rpb24gYjJXb3JsZCgpIHtcbiAgICAgIGIyV29ybGQuYjJXb3JsZC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgaWYgKHRoaXMuY29uc3RydWN0b3IgPT09IGIyV29ybGQpIHRoaXMuYjJXb3JsZC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgfTtcbiAgIEJveDJELkR5bmFtaWNzLmIyV29ybGQgPSBiMldvcmxkO1xuXG4gICBmdW5jdGlvbiBiMkNpcmNsZUNvbnRhY3QoKSB7XG4gICAgICBiMkNpcmNsZUNvbnRhY3QuYjJDaXJjbGVDb250YWN0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICB9O1xuICAgQm94MkQuRHluYW1pY3MuQ29udGFjdHMuYjJDaXJjbGVDb250YWN0ID0gYjJDaXJjbGVDb250YWN0O1xuXG4gICBmdW5jdGlvbiBiMkNvbnRhY3QoKSB7XG4gICAgICBiMkNvbnRhY3QuYjJDb250YWN0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICBpZiAodGhpcy5jb25zdHJ1Y3RvciA9PT0gYjJDb250YWN0KSB0aGlzLmIyQ29udGFjdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgfTtcbiAgIEJveDJELkR5bmFtaWNzLkNvbnRhY3RzLmIyQ29udGFjdCA9IGIyQ29udGFjdDtcblxuICAgZnVuY3Rpb24gYjJDb250YWN0Q29uc3RyYWludCgpIHtcbiAgICAgIGIyQ29udGFjdENvbnN0cmFpbnQuYjJDb250YWN0Q29uc3RyYWludC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgaWYgKHRoaXMuY29uc3RydWN0b3IgPT09IGIyQ29udGFjdENvbnN0cmFpbnQpIHRoaXMuYjJDb250YWN0Q29uc3RyYWludC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgfTtcbiAgIEJveDJELkR5bmFtaWNzLkNvbnRhY3RzLmIyQ29udGFjdENvbnN0cmFpbnQgPSBiMkNvbnRhY3RDb25zdHJhaW50O1xuXG4gICBmdW5jdGlvbiBiMkNvbnRhY3RDb25zdHJhaW50UG9pbnQoKSB7XG4gICAgICBiMkNvbnRhY3RDb25zdHJhaW50UG9pbnQuYjJDb250YWN0Q29uc3RyYWludFBvaW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICB9O1xuICAgQm94MkQuRHluYW1pY3MuQ29udGFjdHMuYjJDb250YWN0Q29uc3RyYWludFBvaW50ID0gYjJDb250YWN0Q29uc3RyYWludFBvaW50O1xuXG4gICBmdW5jdGlvbiBiMkNvbnRhY3RFZGdlKCkge1xuICAgICAgYjJDb250YWN0RWRnZS5iMkNvbnRhY3RFZGdlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICB9O1xuICAgQm94MkQuRHluYW1pY3MuQ29udGFjdHMuYjJDb250YWN0RWRnZSA9IGIyQ29udGFjdEVkZ2U7XG5cbiAgIGZ1bmN0aW9uIGIyQ29udGFjdEZhY3RvcnkoKSB7XG4gICAgICBiMkNvbnRhY3RGYWN0b3J5LmIyQ29udGFjdEZhY3RvcnkuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIGlmICh0aGlzLmNvbnN0cnVjdG9yID09PSBiMkNvbnRhY3RGYWN0b3J5KSB0aGlzLmIyQ29udGFjdEZhY3RvcnkuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgIH07XG4gICBCb3gyRC5EeW5hbWljcy5Db250YWN0cy5iMkNvbnRhY3RGYWN0b3J5ID0gYjJDb250YWN0RmFjdG9yeTtcblxuICAgZnVuY3Rpb24gYjJDb250YWN0UmVnaXN0ZXIoKSB7XG4gICAgICBiMkNvbnRhY3RSZWdpc3Rlci5iMkNvbnRhY3RSZWdpc3Rlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgfTtcbiAgIEJveDJELkR5bmFtaWNzLkNvbnRhY3RzLmIyQ29udGFjdFJlZ2lzdGVyID0gYjJDb250YWN0UmVnaXN0ZXI7XG5cbiAgIGZ1bmN0aW9uIGIyQ29udGFjdFJlc3VsdCgpIHtcbiAgICAgIGIyQ29udGFjdFJlc3VsdC5iMkNvbnRhY3RSZXN1bHQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgIH07XG4gICBCb3gyRC5EeW5hbWljcy5Db250YWN0cy5iMkNvbnRhY3RSZXN1bHQgPSBiMkNvbnRhY3RSZXN1bHQ7XG5cbiAgIGZ1bmN0aW9uIGIyQ29udGFjdFNvbHZlcigpIHtcbiAgICAgIGIyQ29udGFjdFNvbHZlci5iMkNvbnRhY3RTb2x2ZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIGlmICh0aGlzLmNvbnN0cnVjdG9yID09PSBiMkNvbnRhY3RTb2x2ZXIpIHRoaXMuYjJDb250YWN0U29sdmVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICB9O1xuICAgQm94MkQuRHluYW1pY3MuQ29udGFjdHMuYjJDb250YWN0U29sdmVyID0gYjJDb250YWN0U29sdmVyO1xuXG4gICBmdW5jdGlvbiBiMkVkZ2VBbmRDaXJjbGVDb250YWN0KCkge1xuICAgICAgYjJFZGdlQW5kQ2lyY2xlQ29udGFjdC5iMkVkZ2VBbmRDaXJjbGVDb250YWN0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICB9O1xuICAgQm94MkQuRHluYW1pY3MuQ29udGFjdHMuYjJFZGdlQW5kQ2lyY2xlQ29udGFjdCA9IGIyRWRnZUFuZENpcmNsZUNvbnRhY3Q7XG5cbiAgIGZ1bmN0aW9uIGIyTnVsbENvbnRhY3QoKSB7XG4gICAgICBiMk51bGxDb250YWN0LmIyTnVsbENvbnRhY3QuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIGlmICh0aGlzLmNvbnN0cnVjdG9yID09PSBiMk51bGxDb250YWN0KSB0aGlzLmIyTnVsbENvbnRhY3QuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgIH07XG4gICBCb3gyRC5EeW5hbWljcy5Db250YWN0cy5iMk51bGxDb250YWN0ID0gYjJOdWxsQ29udGFjdDtcblxuICAgZnVuY3Rpb24gYjJQb2x5QW5kQ2lyY2xlQ29udGFjdCgpIHtcbiAgICAgIGIyUG9seUFuZENpcmNsZUNvbnRhY3QuYjJQb2x5QW5kQ2lyY2xlQ29udGFjdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgfTtcbiAgIEJveDJELkR5bmFtaWNzLkNvbnRhY3RzLmIyUG9seUFuZENpcmNsZUNvbnRhY3QgPSBiMlBvbHlBbmRDaXJjbGVDb250YWN0O1xuXG4gICBmdW5jdGlvbiBiMlBvbHlBbmRFZGdlQ29udGFjdCgpIHtcbiAgICAgIGIyUG9seUFuZEVkZ2VDb250YWN0LmIyUG9seUFuZEVkZ2VDb250YWN0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICB9O1xuICAgQm94MkQuRHluYW1pY3MuQ29udGFjdHMuYjJQb2x5QW5kRWRnZUNvbnRhY3QgPSBiMlBvbHlBbmRFZGdlQ29udGFjdDtcblxuICAgZnVuY3Rpb24gYjJQb2x5Z29uQ29udGFjdCgpIHtcbiAgICAgIGIyUG9seWdvbkNvbnRhY3QuYjJQb2x5Z29uQ29udGFjdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgfTtcbiAgIEJveDJELkR5bmFtaWNzLkNvbnRhY3RzLmIyUG9seWdvbkNvbnRhY3QgPSBiMlBvbHlnb25Db250YWN0O1xuXG4gICBmdW5jdGlvbiBiMlBvc2l0aW9uU29sdmVyTWFuaWZvbGQoKSB7XG4gICAgICBiMlBvc2l0aW9uU29sdmVyTWFuaWZvbGQuYjJQb3NpdGlvblNvbHZlck1hbmlmb2xkLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICBpZiAodGhpcy5jb25zdHJ1Y3RvciA9PT0gYjJQb3NpdGlvblNvbHZlck1hbmlmb2xkKSB0aGlzLmIyUG9zaXRpb25Tb2x2ZXJNYW5pZm9sZC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgfTtcbiAgIEJveDJELkR5bmFtaWNzLkNvbnRhY3RzLmIyUG9zaXRpb25Tb2x2ZXJNYW5pZm9sZCA9IGIyUG9zaXRpb25Tb2x2ZXJNYW5pZm9sZDtcblxuICAgZnVuY3Rpb24gYjJCdW95YW5jeUNvbnRyb2xsZXIoKSB7XG4gICAgICBiMkJ1b3lhbmN5Q29udHJvbGxlci5iMkJ1b3lhbmN5Q29udHJvbGxlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgfTtcbiAgIEJveDJELkR5bmFtaWNzLkNvbnRyb2xsZXJzLmIyQnVveWFuY3lDb250cm9sbGVyID0gYjJCdW95YW5jeUNvbnRyb2xsZXI7XG5cbiAgIGZ1bmN0aW9uIGIyQ29uc3RhbnRBY2NlbENvbnRyb2xsZXIoKSB7XG4gICAgICBiMkNvbnN0YW50QWNjZWxDb250cm9sbGVyLmIyQ29uc3RhbnRBY2NlbENvbnRyb2xsZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgIH07XG4gICBCb3gyRC5EeW5hbWljcy5Db250cm9sbGVycy5iMkNvbnN0YW50QWNjZWxDb250cm9sbGVyID0gYjJDb25zdGFudEFjY2VsQ29udHJvbGxlcjtcblxuICAgZnVuY3Rpb24gYjJDb25zdGFudEZvcmNlQ29udHJvbGxlcigpIHtcbiAgICAgIGIyQ29uc3RhbnRGb3JjZUNvbnRyb2xsZXIuYjJDb25zdGFudEZvcmNlQ29udHJvbGxlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgfTtcbiAgIEJveDJELkR5bmFtaWNzLkNvbnRyb2xsZXJzLmIyQ29uc3RhbnRGb3JjZUNvbnRyb2xsZXIgPSBiMkNvbnN0YW50Rm9yY2VDb250cm9sbGVyO1xuXG4gICBmdW5jdGlvbiBiMkNvbnRyb2xsZXIoKSB7XG4gICAgICBiMkNvbnRyb2xsZXIuYjJDb250cm9sbGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICB9O1xuICAgQm94MkQuRHluYW1pY3MuQ29udHJvbGxlcnMuYjJDb250cm9sbGVyID0gYjJDb250cm9sbGVyO1xuXG4gICBmdW5jdGlvbiBiMkNvbnRyb2xsZXJFZGdlKCkge1xuICAgICAgYjJDb250cm9sbGVyRWRnZS5iMkNvbnRyb2xsZXJFZGdlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICB9O1xuICAgQm94MkQuRHluYW1pY3MuQ29udHJvbGxlcnMuYjJDb250cm9sbGVyRWRnZSA9IGIyQ29udHJvbGxlckVkZ2U7XG5cbiAgIGZ1bmN0aW9uIGIyR3Jhdml0eUNvbnRyb2xsZXIoKSB7XG4gICAgICBiMkdyYXZpdHlDb250cm9sbGVyLmIyR3Jhdml0eUNvbnRyb2xsZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgIH07XG4gICBCb3gyRC5EeW5hbWljcy5Db250cm9sbGVycy5iMkdyYXZpdHlDb250cm9sbGVyID0gYjJHcmF2aXR5Q29udHJvbGxlcjtcblxuICAgZnVuY3Rpb24gYjJUZW5zb3JEYW1waW5nQ29udHJvbGxlcigpIHtcbiAgICAgIGIyVGVuc29yRGFtcGluZ0NvbnRyb2xsZXIuYjJUZW5zb3JEYW1waW5nQ29udHJvbGxlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgfTtcbiAgIEJveDJELkR5bmFtaWNzLkNvbnRyb2xsZXJzLmIyVGVuc29yRGFtcGluZ0NvbnRyb2xsZXIgPSBiMlRlbnNvckRhbXBpbmdDb250cm9sbGVyO1xuXG4gICBmdW5jdGlvbiBiMkRpc3RhbmNlSm9pbnQoKSB7XG4gICAgICBiMkRpc3RhbmNlSm9pbnQuYjJEaXN0YW5jZUpvaW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICBpZiAodGhpcy5jb25zdHJ1Y3RvciA9PT0gYjJEaXN0YW5jZUpvaW50KSB0aGlzLmIyRGlzdGFuY2VKb2ludC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgfTtcbiAgIEJveDJELkR5bmFtaWNzLkpvaW50cy5iMkRpc3RhbmNlSm9pbnQgPSBiMkRpc3RhbmNlSm9pbnQ7XG5cbiAgIGZ1bmN0aW9uIGIyRGlzdGFuY2VKb2ludERlZigpIHtcbiAgICAgIGIyRGlzdGFuY2VKb2ludERlZi5iMkRpc3RhbmNlSm9pbnREZWYuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIGlmICh0aGlzLmNvbnN0cnVjdG9yID09PSBiMkRpc3RhbmNlSm9pbnREZWYpIHRoaXMuYjJEaXN0YW5jZUpvaW50RGVmLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICB9O1xuICAgQm94MkQuRHluYW1pY3MuSm9pbnRzLmIyRGlzdGFuY2VKb2ludERlZiA9IGIyRGlzdGFuY2VKb2ludERlZjtcblxuICAgZnVuY3Rpb24gYjJGcmljdGlvbkpvaW50KCkge1xuICAgICAgYjJGcmljdGlvbkpvaW50LmIyRnJpY3Rpb25Kb2ludC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgaWYgKHRoaXMuY29uc3RydWN0b3IgPT09IGIyRnJpY3Rpb25Kb2ludCkgdGhpcy5iMkZyaWN0aW9uSm9pbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgIH07XG4gICBCb3gyRC5EeW5hbWljcy5Kb2ludHMuYjJGcmljdGlvbkpvaW50ID0gYjJGcmljdGlvbkpvaW50O1xuXG4gICBmdW5jdGlvbiBiMkZyaWN0aW9uSm9pbnREZWYoKSB7XG4gICAgICBiMkZyaWN0aW9uSm9pbnREZWYuYjJGcmljdGlvbkpvaW50RGVmLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICBpZiAodGhpcy5jb25zdHJ1Y3RvciA9PT0gYjJGcmljdGlvbkpvaW50RGVmKSB0aGlzLmIyRnJpY3Rpb25Kb2ludERlZi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgfTtcbiAgIEJveDJELkR5bmFtaWNzLkpvaW50cy5iMkZyaWN0aW9uSm9pbnREZWYgPSBiMkZyaWN0aW9uSm9pbnREZWY7XG5cbiAgIGZ1bmN0aW9uIGIyR2VhckpvaW50KCkge1xuICAgICAgYjJHZWFySm9pbnQuYjJHZWFySm9pbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIGlmICh0aGlzLmNvbnN0cnVjdG9yID09PSBiMkdlYXJKb2ludCkgdGhpcy5iMkdlYXJKb2ludC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgfTtcbiAgIEJveDJELkR5bmFtaWNzLkpvaW50cy5iMkdlYXJKb2ludCA9IGIyR2VhckpvaW50O1xuXG4gICBmdW5jdGlvbiBiMkdlYXJKb2ludERlZigpIHtcbiAgICAgIGIyR2VhckpvaW50RGVmLmIyR2VhckpvaW50RGVmLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICBpZiAodGhpcy5jb25zdHJ1Y3RvciA9PT0gYjJHZWFySm9pbnREZWYpIHRoaXMuYjJHZWFySm9pbnREZWYuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgIH07XG4gICBCb3gyRC5EeW5hbWljcy5Kb2ludHMuYjJHZWFySm9pbnREZWYgPSBiMkdlYXJKb2ludERlZjtcblxuICAgZnVuY3Rpb24gYjJKYWNvYmlhbigpIHtcbiAgICAgIGIySmFjb2JpYW4uYjJKYWNvYmlhbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgfTtcbiAgIEJveDJELkR5bmFtaWNzLkpvaW50cy5iMkphY29iaWFuID0gYjJKYWNvYmlhbjtcblxuICAgZnVuY3Rpb24gYjJKb2ludCgpIHtcbiAgICAgIGIySm9pbnQuYjJKb2ludC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgaWYgKHRoaXMuY29uc3RydWN0b3IgPT09IGIySm9pbnQpIHRoaXMuYjJKb2ludC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgfTtcbiAgIEJveDJELkR5bmFtaWNzLkpvaW50cy5iMkpvaW50ID0gYjJKb2ludDtcblxuICAgZnVuY3Rpb24gYjJKb2ludERlZigpIHtcbiAgICAgIGIySm9pbnREZWYuYjJKb2ludERlZi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgaWYgKHRoaXMuY29uc3RydWN0b3IgPT09IGIySm9pbnREZWYpIHRoaXMuYjJKb2ludERlZi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgfTtcbiAgIEJveDJELkR5bmFtaWNzLkpvaW50cy5iMkpvaW50RGVmID0gYjJKb2ludERlZjtcblxuICAgZnVuY3Rpb24gYjJKb2ludEVkZ2UoKSB7XG4gICAgICBiMkpvaW50RWRnZS5iMkpvaW50RWRnZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgfTtcbiAgIEJveDJELkR5bmFtaWNzLkpvaW50cy5iMkpvaW50RWRnZSA9IGIySm9pbnRFZGdlO1xuXG4gICBmdW5jdGlvbiBiMkxpbmVKb2ludCgpIHtcbiAgICAgIGIyTGluZUpvaW50LmIyTGluZUpvaW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICBpZiAodGhpcy5jb25zdHJ1Y3RvciA9PT0gYjJMaW5lSm9pbnQpIHRoaXMuYjJMaW5lSm9pbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgIH07XG4gICBCb3gyRC5EeW5hbWljcy5Kb2ludHMuYjJMaW5lSm9pbnQgPSBiMkxpbmVKb2ludDtcblxuICAgZnVuY3Rpb24gYjJMaW5lSm9pbnREZWYoKSB7XG4gICAgICBiMkxpbmVKb2ludERlZi5iMkxpbmVKb2ludERlZi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgaWYgKHRoaXMuY29uc3RydWN0b3IgPT09IGIyTGluZUpvaW50RGVmKSB0aGlzLmIyTGluZUpvaW50RGVmLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICB9O1xuICAgQm94MkQuRHluYW1pY3MuSm9pbnRzLmIyTGluZUpvaW50RGVmID0gYjJMaW5lSm9pbnREZWY7XG5cbiAgIGZ1bmN0aW9uIGIyTW91c2VKb2ludCgpIHtcbiAgICAgIGIyTW91c2VKb2ludC5iMk1vdXNlSm9pbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIGlmICh0aGlzLmNvbnN0cnVjdG9yID09PSBiMk1vdXNlSm9pbnQpIHRoaXMuYjJNb3VzZUpvaW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICB9O1xuICAgQm94MkQuRHluYW1pY3MuSm9pbnRzLmIyTW91c2VKb2ludCA9IGIyTW91c2VKb2ludDtcblxuICAgZnVuY3Rpb24gYjJNb3VzZUpvaW50RGVmKCkge1xuICAgICAgYjJNb3VzZUpvaW50RGVmLmIyTW91c2VKb2ludERlZi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgaWYgKHRoaXMuY29uc3RydWN0b3IgPT09IGIyTW91c2VKb2ludERlZikgdGhpcy5iMk1vdXNlSm9pbnREZWYuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgIH07XG4gICBCb3gyRC5EeW5hbWljcy5Kb2ludHMuYjJNb3VzZUpvaW50RGVmID0gYjJNb3VzZUpvaW50RGVmO1xuXG4gICBmdW5jdGlvbiBiMlByaXNtYXRpY0pvaW50KCkge1xuICAgICAgYjJQcmlzbWF0aWNKb2ludC5iMlByaXNtYXRpY0pvaW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICBpZiAodGhpcy5jb25zdHJ1Y3RvciA9PT0gYjJQcmlzbWF0aWNKb2ludCkgdGhpcy5iMlByaXNtYXRpY0pvaW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICB9O1xuICAgQm94MkQuRHluYW1pY3MuSm9pbnRzLmIyUHJpc21hdGljSm9pbnQgPSBiMlByaXNtYXRpY0pvaW50O1xuXG4gICBmdW5jdGlvbiBiMlByaXNtYXRpY0pvaW50RGVmKCkge1xuICAgICAgYjJQcmlzbWF0aWNKb2ludERlZi5iMlByaXNtYXRpY0pvaW50RGVmLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICBpZiAodGhpcy5jb25zdHJ1Y3RvciA9PT0gYjJQcmlzbWF0aWNKb2ludERlZikgdGhpcy5iMlByaXNtYXRpY0pvaW50RGVmLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICB9O1xuICAgQm94MkQuRHluYW1pY3MuSm9pbnRzLmIyUHJpc21hdGljSm9pbnREZWYgPSBiMlByaXNtYXRpY0pvaW50RGVmO1xuXG4gICBmdW5jdGlvbiBiMlB1bGxleUpvaW50KCkge1xuICAgICAgYjJQdWxsZXlKb2ludC5iMlB1bGxleUpvaW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICBpZiAodGhpcy5jb25zdHJ1Y3RvciA9PT0gYjJQdWxsZXlKb2ludCkgdGhpcy5iMlB1bGxleUpvaW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICB9O1xuICAgQm94MkQuRHluYW1pY3MuSm9pbnRzLmIyUHVsbGV5Sm9pbnQgPSBiMlB1bGxleUpvaW50O1xuXG4gICBmdW5jdGlvbiBiMlB1bGxleUpvaW50RGVmKCkge1xuICAgICAgYjJQdWxsZXlKb2ludERlZi5iMlB1bGxleUpvaW50RGVmLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICBpZiAodGhpcy5jb25zdHJ1Y3RvciA9PT0gYjJQdWxsZXlKb2ludERlZikgdGhpcy5iMlB1bGxleUpvaW50RGVmLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICB9O1xuICAgQm94MkQuRHluYW1pY3MuSm9pbnRzLmIyUHVsbGV5Sm9pbnREZWYgPSBiMlB1bGxleUpvaW50RGVmO1xuXG4gICBmdW5jdGlvbiBiMlJldm9sdXRlSm9pbnQoKSB7XG4gICAgICBiMlJldm9sdXRlSm9pbnQuYjJSZXZvbHV0ZUpvaW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICBpZiAodGhpcy5jb25zdHJ1Y3RvciA9PT0gYjJSZXZvbHV0ZUpvaW50KSB0aGlzLmIyUmV2b2x1dGVKb2ludC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgfTtcbiAgIEJveDJELkR5bmFtaWNzLkpvaW50cy5iMlJldm9sdXRlSm9pbnQgPSBiMlJldm9sdXRlSm9pbnQ7XG5cbiAgIGZ1bmN0aW9uIGIyUmV2b2x1dGVKb2ludERlZigpIHtcbiAgICAgIGIyUmV2b2x1dGVKb2ludERlZi5iMlJldm9sdXRlSm9pbnREZWYuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIGlmICh0aGlzLmNvbnN0cnVjdG9yID09PSBiMlJldm9sdXRlSm9pbnREZWYpIHRoaXMuYjJSZXZvbHV0ZUpvaW50RGVmLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICB9O1xuICAgQm94MkQuRHluYW1pY3MuSm9pbnRzLmIyUmV2b2x1dGVKb2ludERlZiA9IGIyUmV2b2x1dGVKb2ludERlZjtcblxuICAgZnVuY3Rpb24gYjJXZWxkSm9pbnQoKSB7XG4gICAgICBiMldlbGRKb2ludC5iMldlbGRKb2ludC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgaWYgKHRoaXMuY29uc3RydWN0b3IgPT09IGIyV2VsZEpvaW50KSB0aGlzLmIyV2VsZEpvaW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICB9O1xuICAgQm94MkQuRHluYW1pY3MuSm9pbnRzLmIyV2VsZEpvaW50ID0gYjJXZWxkSm9pbnQ7XG5cbiAgIGZ1bmN0aW9uIGIyV2VsZEpvaW50RGVmKCkge1xuICAgICAgYjJXZWxkSm9pbnREZWYuYjJXZWxkSm9pbnREZWYuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIGlmICh0aGlzLmNvbnN0cnVjdG9yID09PSBiMldlbGRKb2ludERlZikgdGhpcy5iMldlbGRKb2ludERlZi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgfTtcbiAgIEJveDJELkR5bmFtaWNzLkpvaW50cy5iMldlbGRKb2ludERlZiA9IGIyV2VsZEpvaW50RGVmO1xufSkoKTsgLy9kZWZpbml0aW9uc1xuQm94MkQucG9zdERlZnMgPSBbXTtcbihmdW5jdGlvbiAoKSB7XG4gICB2YXIgYjJDaXJjbGVTaGFwZSA9IEJveDJELkNvbGxpc2lvbi5TaGFwZXMuYjJDaXJjbGVTaGFwZSxcbiAgICAgIGIyRWRnZUNoYWluRGVmID0gQm94MkQuQ29sbGlzaW9uLlNoYXBlcy5iMkVkZ2VDaGFpbkRlZixcbiAgICAgIGIyRWRnZVNoYXBlID0gQm94MkQuQ29sbGlzaW9uLlNoYXBlcy5iMkVkZ2VTaGFwZSxcbiAgICAgIGIyTWFzc0RhdGEgPSBCb3gyRC5Db2xsaXNpb24uU2hhcGVzLmIyTWFzc0RhdGEsXG4gICAgICBiMlBvbHlnb25TaGFwZSA9IEJveDJELkNvbGxpc2lvbi5TaGFwZXMuYjJQb2x5Z29uU2hhcGUsXG4gICAgICBiMlNoYXBlID0gQm94MkQuQ29sbGlzaW9uLlNoYXBlcy5iMlNoYXBlLFxuICAgICAgYjJDb2xvciA9IEJveDJELkNvbW1vbi5iMkNvbG9yLFxuICAgICAgYjJpbnRlcm5hbCA9IEJveDJELkNvbW1vbi5iMmludGVybmFsLFxuICAgICAgYjJTZXR0aW5ncyA9IEJveDJELkNvbW1vbi5iMlNldHRpbmdzLFxuICAgICAgYjJNYXQyMiA9IEJveDJELkNvbW1vbi5NYXRoLmIyTWF0MjIsXG4gICAgICBiMk1hdDMzID0gQm94MkQuQ29tbW9uLk1hdGguYjJNYXQzMyxcbiAgICAgIGIyTWF0aCA9IEJveDJELkNvbW1vbi5NYXRoLmIyTWF0aCxcbiAgICAgIGIyU3dlZXAgPSBCb3gyRC5Db21tb24uTWF0aC5iMlN3ZWVwLFxuICAgICAgYjJUcmFuc2Zvcm0gPSBCb3gyRC5Db21tb24uTWF0aC5iMlRyYW5zZm9ybSxcbiAgICAgIGIyVmVjMiA9IEJveDJELkNvbW1vbi5NYXRoLmIyVmVjMixcbiAgICAgIGIyVmVjMyA9IEJveDJELkNvbW1vbi5NYXRoLmIyVmVjMyxcbiAgICAgIGIyQUFCQiA9IEJveDJELkNvbGxpc2lvbi5iMkFBQkIsXG4gICAgICBiMkJvdW5kID0gQm94MkQuQ29sbGlzaW9uLmIyQm91bmQsXG4gICAgICBiMkJvdW5kVmFsdWVzID0gQm94MkQuQ29sbGlzaW9uLmIyQm91bmRWYWx1ZXMsXG4gICAgICBiMkNvbGxpc2lvbiA9IEJveDJELkNvbGxpc2lvbi5iMkNvbGxpc2lvbixcbiAgICAgIGIyQ29udGFjdElEID0gQm94MkQuQ29sbGlzaW9uLmIyQ29udGFjdElELFxuICAgICAgYjJDb250YWN0UG9pbnQgPSBCb3gyRC5Db2xsaXNpb24uYjJDb250YWN0UG9pbnQsXG4gICAgICBiMkRpc3RhbmNlID0gQm94MkQuQ29sbGlzaW9uLmIyRGlzdGFuY2UsXG4gICAgICBiMkRpc3RhbmNlSW5wdXQgPSBCb3gyRC5Db2xsaXNpb24uYjJEaXN0YW5jZUlucHV0LFxuICAgICAgYjJEaXN0YW5jZU91dHB1dCA9IEJveDJELkNvbGxpc2lvbi5iMkRpc3RhbmNlT3V0cHV0LFxuICAgICAgYjJEaXN0YW5jZVByb3h5ID0gQm94MkQuQ29sbGlzaW9uLmIyRGlzdGFuY2VQcm94eSxcbiAgICAgIGIyRHluYW1pY1RyZWUgPSBCb3gyRC5Db2xsaXNpb24uYjJEeW5hbWljVHJlZSxcbiAgICAgIGIyRHluYW1pY1RyZWVCcm9hZFBoYXNlID0gQm94MkQuQ29sbGlzaW9uLmIyRHluYW1pY1RyZWVCcm9hZFBoYXNlLFxuICAgICAgYjJEeW5hbWljVHJlZU5vZGUgPSBCb3gyRC5Db2xsaXNpb24uYjJEeW5hbWljVHJlZU5vZGUsXG4gICAgICBiMkR5bmFtaWNUcmVlUGFpciA9IEJveDJELkNvbGxpc2lvbi5iMkR5bmFtaWNUcmVlUGFpcixcbiAgICAgIGIyTWFuaWZvbGQgPSBCb3gyRC5Db2xsaXNpb24uYjJNYW5pZm9sZCxcbiAgICAgIGIyTWFuaWZvbGRQb2ludCA9IEJveDJELkNvbGxpc2lvbi5iMk1hbmlmb2xkUG9pbnQsXG4gICAgICBiMlBvaW50ID0gQm94MkQuQ29sbGlzaW9uLmIyUG9pbnQsXG4gICAgICBiMlJheUNhc3RJbnB1dCA9IEJveDJELkNvbGxpc2lvbi5iMlJheUNhc3RJbnB1dCxcbiAgICAgIGIyUmF5Q2FzdE91dHB1dCA9IEJveDJELkNvbGxpc2lvbi5iMlJheUNhc3RPdXRwdXQsXG4gICAgICBiMlNlZ21lbnQgPSBCb3gyRC5Db2xsaXNpb24uYjJTZWdtZW50LFxuICAgICAgYjJTZXBhcmF0aW9uRnVuY3Rpb24gPSBCb3gyRC5Db2xsaXNpb24uYjJTZXBhcmF0aW9uRnVuY3Rpb24sXG4gICAgICBiMlNpbXBsZXggPSBCb3gyRC5Db2xsaXNpb24uYjJTaW1wbGV4LFxuICAgICAgYjJTaW1wbGV4Q2FjaGUgPSBCb3gyRC5Db2xsaXNpb24uYjJTaW1wbGV4Q2FjaGUsXG4gICAgICBiMlNpbXBsZXhWZXJ0ZXggPSBCb3gyRC5Db2xsaXNpb24uYjJTaW1wbGV4VmVydGV4LFxuICAgICAgYjJUaW1lT2ZJbXBhY3QgPSBCb3gyRC5Db2xsaXNpb24uYjJUaW1lT2ZJbXBhY3QsXG4gICAgICBiMlRPSUlucHV0ID0gQm94MkQuQ29sbGlzaW9uLmIyVE9JSW5wdXQsXG4gICAgICBiMldvcmxkTWFuaWZvbGQgPSBCb3gyRC5Db2xsaXNpb24uYjJXb3JsZE1hbmlmb2xkLFxuICAgICAgQ2xpcFZlcnRleCA9IEJveDJELkNvbGxpc2lvbi5DbGlwVmVydGV4LFxuICAgICAgRmVhdHVyZXMgPSBCb3gyRC5Db2xsaXNpb24uRmVhdHVyZXMsXG4gICAgICBJQnJvYWRQaGFzZSA9IEJveDJELkNvbGxpc2lvbi5JQnJvYWRQaGFzZTtcblxuICAgYjJBQUJCLmIyQUFCQiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMubG93ZXJCb3VuZCA9IG5ldyBiMlZlYzIoKTtcbiAgICAgIHRoaXMudXBwZXJCb3VuZCA9IG5ldyBiMlZlYzIoKTtcbiAgIH07XG4gICBiMkFBQkIucHJvdG90eXBlLklzVmFsaWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgZFggPSB0aGlzLnVwcGVyQm91bmQueCAtIHRoaXMubG93ZXJCb3VuZC54O1xuICAgICAgdmFyIGRZID0gdGhpcy51cHBlckJvdW5kLnkgLSB0aGlzLmxvd2VyQm91bmQueTtcbiAgICAgIHZhciB2YWxpZCA9IGRYID49IDAuMCAmJiBkWSA+PSAwLjA7XG4gICAgICB2YWxpZCA9IHZhbGlkICYmIHRoaXMubG93ZXJCb3VuZC5Jc1ZhbGlkKCkgJiYgdGhpcy51cHBlckJvdW5kLklzVmFsaWQoKTtcbiAgICAgIHJldHVybiB2YWxpZDtcbiAgIH1cbiAgIGIyQUFCQi5wcm90b3R5cGUuR2V0Q2VudGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIG5ldyBiMlZlYzIoKHRoaXMubG93ZXJCb3VuZC54ICsgdGhpcy51cHBlckJvdW5kLngpIC8gMiwgKHRoaXMubG93ZXJCb3VuZC55ICsgdGhpcy51cHBlckJvdW5kLnkpIC8gMik7XG4gICB9XG4gICBiMkFBQkIucHJvdG90eXBlLkdldEV4dGVudHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gbmV3IGIyVmVjMigodGhpcy51cHBlckJvdW5kLnggLSB0aGlzLmxvd2VyQm91bmQueCkgLyAyLCAodGhpcy51cHBlckJvdW5kLnkgLSB0aGlzLmxvd2VyQm91bmQueSkgLyAyKTtcbiAgIH1cbiAgIGIyQUFCQi5wcm90b3R5cGUuQ29udGFpbnMgPSBmdW5jdGlvbiAoYWFiYikge1xuICAgICAgdmFyIHJlc3VsdCA9IHRydWU7XG4gICAgICByZXN1bHQgPSByZXN1bHQgJiYgdGhpcy5sb3dlckJvdW5kLnggPD0gYWFiYi5sb3dlckJvdW5kLng7XG4gICAgICByZXN1bHQgPSByZXN1bHQgJiYgdGhpcy5sb3dlckJvdW5kLnkgPD0gYWFiYi5sb3dlckJvdW5kLnk7XG4gICAgICByZXN1bHQgPSByZXN1bHQgJiYgYWFiYi51cHBlckJvdW5kLnggPD0gdGhpcy51cHBlckJvdW5kLng7XG4gICAgICByZXN1bHQgPSByZXN1bHQgJiYgYWFiYi51cHBlckJvdW5kLnkgPD0gdGhpcy51cHBlckJvdW5kLnk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgfVxuICAgYjJBQUJCLnByb3RvdHlwZS5SYXlDYXN0ID0gZnVuY3Rpb24gKG91dHB1dCwgaW5wdXQpIHtcbiAgICAgIHZhciB0bWluID0gKC1OdW1iZXIuTUFYX1ZBTFVFKTtcbiAgICAgIHZhciB0bWF4ID0gTnVtYmVyLk1BWF9WQUxVRTtcbiAgICAgIHZhciBwWCA9IGlucHV0LnAxLng7XG4gICAgICB2YXIgcFkgPSBpbnB1dC5wMS55O1xuICAgICAgdmFyIGRYID0gaW5wdXQucDIueCAtIGlucHV0LnAxLng7XG4gICAgICB2YXIgZFkgPSBpbnB1dC5wMi55IC0gaW5wdXQucDEueTtcbiAgICAgIHZhciBhYnNEWCA9IE1hdGguYWJzKGRYKTtcbiAgICAgIHZhciBhYnNEWSA9IE1hdGguYWJzKGRZKTtcbiAgICAgIHZhciBub3JtYWwgPSBvdXRwdXQubm9ybWFsO1xuICAgICAgdmFyIGludl9kID0gMDtcbiAgICAgIHZhciB0MSA9IDA7XG4gICAgICB2YXIgdDIgPSAwO1xuICAgICAgdmFyIHQzID0gMDtcbiAgICAgIHZhciBzID0gMDsge1xuICAgICAgICAgaWYgKGFic0RYIDwgTnVtYmVyLk1JTl9WQUxVRSkge1xuICAgICAgICAgICAgaWYgKHBYIDwgdGhpcy5sb3dlckJvdW5kLnggfHwgdGhpcy51cHBlckJvdW5kLnggPCBwWCkgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgfVxuICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpbnZfZCA9IDEuMCAvIGRYO1xuICAgICAgICAgICAgdDEgPSAodGhpcy5sb3dlckJvdW5kLnggLSBwWCkgKiBpbnZfZDtcbiAgICAgICAgICAgIHQyID0gKHRoaXMudXBwZXJCb3VuZC54IC0gcFgpICogaW52X2Q7XG4gICAgICAgICAgICBzID0gKC0xLjApO1xuICAgICAgICAgICAgaWYgKHQxID4gdDIpIHtcbiAgICAgICAgICAgICAgIHQzID0gdDE7XG4gICAgICAgICAgICAgICB0MSA9IHQyO1xuICAgICAgICAgICAgICAgdDIgPSB0MztcbiAgICAgICAgICAgICAgIHMgPSAxLjA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodDEgPiB0bWluKSB7XG4gICAgICAgICAgICAgICBub3JtYWwueCA9IHM7XG4gICAgICAgICAgICAgICBub3JtYWwueSA9IDA7XG4gICAgICAgICAgICAgICB0bWluID0gdDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0bWF4ID0gTWF0aC5taW4odG1heCwgdDIpO1xuICAgICAgICAgICAgaWYgKHRtaW4gPiB0bWF4KSByZXR1cm4gZmFsc2U7XG4gICAgICAgICB9XG4gICAgICB9IHtcbiAgICAgICAgIGlmIChhYnNEWSA8IE51bWJlci5NSU5fVkFMVUUpIHtcbiAgICAgICAgICAgIGlmIChwWSA8IHRoaXMubG93ZXJCb3VuZC55IHx8IHRoaXMudXBwZXJCb3VuZC55IDwgcFkpIHJldHVybiBmYWxzZTtcbiAgICAgICAgIH1cbiAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaW52X2QgPSAxLjAgLyBkWTtcbiAgICAgICAgICAgIHQxID0gKHRoaXMubG93ZXJCb3VuZC55IC0gcFkpICogaW52X2Q7XG4gICAgICAgICAgICB0MiA9ICh0aGlzLnVwcGVyQm91bmQueSAtIHBZKSAqIGludl9kO1xuICAgICAgICAgICAgcyA9ICgtMS4wKTtcbiAgICAgICAgICAgIGlmICh0MSA+IHQyKSB7XG4gICAgICAgICAgICAgICB0MyA9IHQxO1xuICAgICAgICAgICAgICAgdDEgPSB0MjtcbiAgICAgICAgICAgICAgIHQyID0gdDM7XG4gICAgICAgICAgICAgICBzID0gMS4wO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHQxID4gdG1pbikge1xuICAgICAgICAgICAgICAgbm9ybWFsLnkgPSBzO1xuICAgICAgICAgICAgICAgbm9ybWFsLnggPSAwO1xuICAgICAgICAgICAgICAgdG1pbiA9IHQxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdG1heCA9IE1hdGgubWluKHRtYXgsIHQyKTtcbiAgICAgICAgICAgIGlmICh0bWluID4gdG1heCkgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgfVxuICAgICAgfVxuICAgICAgb3V0cHV0LmZyYWN0aW9uID0gdG1pbjtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgfVxuICAgYjJBQUJCLnByb3RvdHlwZS5UZXN0T3ZlcmxhcCA9IGZ1bmN0aW9uIChvdGhlcikge1xuICAgICAgdmFyIGQxWCA9IG90aGVyLmxvd2VyQm91bmQueCAtIHRoaXMudXBwZXJCb3VuZC54O1xuICAgICAgdmFyIGQxWSA9IG90aGVyLmxvd2VyQm91bmQueSAtIHRoaXMudXBwZXJCb3VuZC55O1xuICAgICAgdmFyIGQyWCA9IHRoaXMubG93ZXJCb3VuZC54IC0gb3RoZXIudXBwZXJCb3VuZC54O1xuICAgICAgdmFyIGQyWSA9IHRoaXMubG93ZXJCb3VuZC55IC0gb3RoZXIudXBwZXJCb3VuZC55O1xuICAgICAgaWYgKGQxWCA+IDAuMCB8fCBkMVkgPiAwLjApIHJldHVybiBmYWxzZTtcbiAgICAgIGlmIChkMlggPiAwLjAgfHwgZDJZID4gMC4wKSByZXR1cm4gZmFsc2U7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgIH1cbiAgIGIyQUFCQi5Db21iaW5lID0gZnVuY3Rpb24gKGFhYmIxLCBhYWJiMikge1xuICAgICAgdmFyIGFhYmIgPSBuZXcgYjJBQUJCKCk7XG4gICAgICBhYWJiLkNvbWJpbmUoYWFiYjEsIGFhYmIyKTtcbiAgICAgIHJldHVybiBhYWJiO1xuICAgfVxuICAgYjJBQUJCLnByb3RvdHlwZS5Db21iaW5lID0gZnVuY3Rpb24gKGFhYmIxLCBhYWJiMikge1xuICAgICAgdGhpcy5sb3dlckJvdW5kLnggPSBNYXRoLm1pbihhYWJiMS5sb3dlckJvdW5kLngsIGFhYmIyLmxvd2VyQm91bmQueCk7XG4gICAgICB0aGlzLmxvd2VyQm91bmQueSA9IE1hdGgubWluKGFhYmIxLmxvd2VyQm91bmQueSwgYWFiYjIubG93ZXJCb3VuZC55KTtcbiAgICAgIHRoaXMudXBwZXJCb3VuZC54ID0gTWF0aC5tYXgoYWFiYjEudXBwZXJCb3VuZC54LCBhYWJiMi51cHBlckJvdW5kLngpO1xuICAgICAgdGhpcy51cHBlckJvdW5kLnkgPSBNYXRoLm1heChhYWJiMS51cHBlckJvdW5kLnksIGFhYmIyLnVwcGVyQm91bmQueSk7XG4gICB9XG4gICBiMkJvdW5kLmIyQm91bmQgPSBmdW5jdGlvbiAoKSB7fTtcbiAgIGIyQm91bmQucHJvdG90eXBlLklzTG93ZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gKHRoaXMudmFsdWUgJiAxKSA9PSAwO1xuICAgfVxuICAgYjJCb3VuZC5wcm90b3R5cGUuSXNVcHBlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiAodGhpcy52YWx1ZSAmIDEpID09IDE7XG4gICB9XG4gICBiMkJvdW5kLnByb3RvdHlwZS5Td2FwID0gZnVuY3Rpb24gKGIpIHtcbiAgICAgIHZhciB0ZW1wVmFsdWUgPSB0aGlzLnZhbHVlO1xuICAgICAgdmFyIHRlbXBQcm94eSA9IHRoaXMucHJveHk7XG4gICAgICB2YXIgdGVtcFN0YWJiaW5nQ291bnQgPSB0aGlzLnN0YWJiaW5nQ291bnQ7XG4gICAgICB0aGlzLnZhbHVlID0gYi52YWx1ZTtcbiAgICAgIHRoaXMucHJveHkgPSBiLnByb3h5O1xuICAgICAgdGhpcy5zdGFiYmluZ0NvdW50ID0gYi5zdGFiYmluZ0NvdW50O1xuICAgICAgYi52YWx1ZSA9IHRlbXBWYWx1ZTtcbiAgICAgIGIucHJveHkgPSB0ZW1wUHJveHk7XG4gICAgICBiLnN0YWJiaW5nQ291bnQgPSB0ZW1wU3RhYmJpbmdDb3VudDtcbiAgIH1cbiAgIGIyQm91bmRWYWx1ZXMuYjJCb3VuZFZhbHVlcyA9IGZ1bmN0aW9uICgpIHt9O1xuICAgYjJCb3VuZFZhbHVlcy5wcm90b3R5cGUuYjJCb3VuZFZhbHVlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMubG93ZXJWYWx1ZXMgPSBuZXcgVmVjdG9yX2Eyal9OdW1iZXIoKTtcbiAgICAgIHRoaXMubG93ZXJWYWx1ZXNbMF0gPSAwLjA7XG4gICAgICB0aGlzLmxvd2VyVmFsdWVzWzFdID0gMC4wO1xuICAgICAgdGhpcy51cHBlclZhbHVlcyA9IG5ldyBWZWN0b3JfYTJqX051bWJlcigpO1xuICAgICAgdGhpcy51cHBlclZhbHVlc1swXSA9IDAuMDtcbiAgICAgIHRoaXMudXBwZXJWYWx1ZXNbMV0gPSAwLjA7XG4gICB9XG4gICBiMkNvbGxpc2lvbi5iMkNvbGxpc2lvbiA9IGZ1bmN0aW9uICgpIHt9O1xuICAgYjJDb2xsaXNpb24uQ2xpcFNlZ21lbnRUb0xpbmUgPSBmdW5jdGlvbiAodk91dCwgdkluLCBub3JtYWwsIG9mZnNldCkge1xuICAgICAgaWYgKG9mZnNldCA9PT0gdW5kZWZpbmVkKSBvZmZzZXQgPSAwO1xuICAgICAgdmFyIGN2O1xuICAgICAgdmFyIG51bU91dCA9IDA7XG4gICAgICBjdiA9IHZJblswXTtcbiAgICAgIHZhciB2SW4wID0gY3YudjtcbiAgICAgIGN2ID0gdkluWzFdO1xuICAgICAgdmFyIHZJbjEgPSBjdi52O1xuICAgICAgdmFyIGRpc3RhbmNlMCA9IG5vcm1hbC54ICogdkluMC54ICsgbm9ybWFsLnkgKiB2SW4wLnkgLSBvZmZzZXQ7XG4gICAgICB2YXIgZGlzdGFuY2UxID0gbm9ybWFsLnggKiB2SW4xLnggKyBub3JtYWwueSAqIHZJbjEueSAtIG9mZnNldDtcbiAgICAgIGlmIChkaXN0YW5jZTAgPD0gMC4wKSB2T3V0W251bU91dCsrXS5TZXQodkluWzBdKTtcbiAgICAgIGlmIChkaXN0YW5jZTEgPD0gMC4wKSB2T3V0W251bU91dCsrXS5TZXQodkluWzFdKTtcbiAgICAgIGlmIChkaXN0YW5jZTAgKiBkaXN0YW5jZTEgPCAwLjApIHtcbiAgICAgICAgIHZhciBpbnRlcnAgPSBkaXN0YW5jZTAgLyAoZGlzdGFuY2UwIC0gZGlzdGFuY2UxKTtcbiAgICAgICAgIGN2ID0gdk91dFtudW1PdXRdO1xuICAgICAgICAgdmFyIHRWZWMgPSBjdi52O1xuICAgICAgICAgdFZlYy54ID0gdkluMC54ICsgaW50ZXJwICogKHZJbjEueCAtIHZJbjAueCk7XG4gICAgICAgICB0VmVjLnkgPSB2SW4wLnkgKyBpbnRlcnAgKiAodkluMS55IC0gdkluMC55KTtcbiAgICAgICAgIGN2ID0gdk91dFtudW1PdXRdO1xuICAgICAgICAgdmFyIGN2MjtcbiAgICAgICAgIGlmIChkaXN0YW5jZTAgPiAwLjApIHtcbiAgICAgICAgICAgIGN2MiA9IHZJblswXTtcbiAgICAgICAgICAgIGN2LmlkID0gY3YyLmlkO1xuICAgICAgICAgfVxuICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjdjIgPSB2SW5bMV07XG4gICAgICAgICAgICBjdi5pZCA9IGN2Mi5pZDtcbiAgICAgICAgIH0rK251bU91dDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBudW1PdXQ7XG4gICB9XG4gICBiMkNvbGxpc2lvbi5FZGdlU2VwYXJhdGlvbiA9IGZ1bmN0aW9uIChwb2x5MSwgeGYxLCBlZGdlMSwgcG9seTIsIHhmMikge1xuICAgICAgaWYgKGVkZ2UxID09PSB1bmRlZmluZWQpIGVkZ2UxID0gMDtcbiAgICAgIHZhciBjb3VudDEgPSBwYXJzZUludChwb2x5MS5tX3ZlcnRleENvdW50KTtcbiAgICAgIHZhciB2ZXJ0aWNlczEgPSBwb2x5MS5tX3ZlcnRpY2VzO1xuICAgICAgdmFyIG5vcm1hbHMxID0gcG9seTEubV9ub3JtYWxzO1xuICAgICAgdmFyIGNvdW50MiA9IHBhcnNlSW50KHBvbHkyLm1fdmVydGV4Q291bnQpO1xuICAgICAgdmFyIHZlcnRpY2VzMiA9IHBvbHkyLm1fdmVydGljZXM7XG4gICAgICB2YXIgdE1hdDtcbiAgICAgIHZhciB0VmVjO1xuICAgICAgdE1hdCA9IHhmMS5SO1xuICAgICAgdFZlYyA9IG5vcm1hbHMxW2VkZ2UxXTtcbiAgICAgIHZhciBub3JtYWwxV29ybGRYID0gKHRNYXQuY29sMS54ICogdFZlYy54ICsgdE1hdC5jb2wyLnggKiB0VmVjLnkpO1xuICAgICAgdmFyIG5vcm1hbDFXb3JsZFkgPSAodE1hdC5jb2wxLnkgKiB0VmVjLnggKyB0TWF0LmNvbDIueSAqIHRWZWMueSk7XG4gICAgICB0TWF0ID0geGYyLlI7XG4gICAgICB2YXIgbm9ybWFsMVggPSAodE1hdC5jb2wxLnggKiBub3JtYWwxV29ybGRYICsgdE1hdC5jb2wxLnkgKiBub3JtYWwxV29ybGRZKTtcbiAgICAgIHZhciBub3JtYWwxWSA9ICh0TWF0LmNvbDIueCAqIG5vcm1hbDFXb3JsZFggKyB0TWF0LmNvbDIueSAqIG5vcm1hbDFXb3JsZFkpO1xuICAgICAgdmFyIGluZGV4ID0gMDtcbiAgICAgIHZhciBtaW5Eb3QgPSBOdW1iZXIuTUFYX1ZBTFVFO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb3VudDI7ICsraSkge1xuICAgICAgICAgdFZlYyA9IHZlcnRpY2VzMltpXTtcbiAgICAgICAgIHZhciBkb3QgPSB0VmVjLnggKiBub3JtYWwxWCArIHRWZWMueSAqIG5vcm1hbDFZO1xuICAgICAgICAgaWYgKGRvdCA8IG1pbkRvdCkge1xuICAgICAgICAgICAgbWluRG90ID0gZG90O1xuICAgICAgICAgICAgaW5kZXggPSBpO1xuICAgICAgICAgfVxuICAgICAgfVxuICAgICAgdFZlYyA9IHZlcnRpY2VzMVtlZGdlMV07XG4gICAgICB0TWF0ID0geGYxLlI7XG4gICAgICB2YXIgdjFYID0geGYxLnBvc2l0aW9uLnggKyAodE1hdC5jb2wxLnggKiB0VmVjLnggKyB0TWF0LmNvbDIueCAqIHRWZWMueSk7XG4gICAgICB2YXIgdjFZID0geGYxLnBvc2l0aW9uLnkgKyAodE1hdC5jb2wxLnkgKiB0VmVjLnggKyB0TWF0LmNvbDIueSAqIHRWZWMueSk7XG4gICAgICB0VmVjID0gdmVydGljZXMyW2luZGV4XTtcbiAgICAgIHRNYXQgPSB4ZjIuUjtcbiAgICAgIHZhciB2MlggPSB4ZjIucG9zaXRpb24ueCArICh0TWF0LmNvbDEueCAqIHRWZWMueCArIHRNYXQuY29sMi54ICogdFZlYy55KTtcbiAgICAgIHZhciB2MlkgPSB4ZjIucG9zaXRpb24ueSArICh0TWF0LmNvbDEueSAqIHRWZWMueCArIHRNYXQuY29sMi55ICogdFZlYy55KTtcbiAgICAgIHYyWCAtPSB2MVg7XG4gICAgICB2MlkgLT0gdjFZO1xuICAgICAgdmFyIHNlcGFyYXRpb24gPSB2MlggKiBub3JtYWwxV29ybGRYICsgdjJZICogbm9ybWFsMVdvcmxkWTtcbiAgICAgIHJldHVybiBzZXBhcmF0aW9uO1xuICAgfVxuICAgYjJDb2xsaXNpb24uRmluZE1heFNlcGFyYXRpb24gPSBmdW5jdGlvbiAoZWRnZUluZGV4LCBwb2x5MSwgeGYxLCBwb2x5MiwgeGYyKSB7XG4gICAgICB2YXIgY291bnQxID0gcGFyc2VJbnQocG9seTEubV92ZXJ0ZXhDb3VudCk7XG4gICAgICB2YXIgbm9ybWFsczEgPSBwb2x5MS5tX25vcm1hbHM7XG4gICAgICB2YXIgdFZlYztcbiAgICAgIHZhciB0TWF0O1xuICAgICAgdE1hdCA9IHhmMi5SO1xuICAgICAgdFZlYyA9IHBvbHkyLm1fY2VudHJvaWQ7XG4gICAgICB2YXIgZFggPSB4ZjIucG9zaXRpb24ueCArICh0TWF0LmNvbDEueCAqIHRWZWMueCArIHRNYXQuY29sMi54ICogdFZlYy55KTtcbiAgICAgIHZhciBkWSA9IHhmMi5wb3NpdGlvbi55ICsgKHRNYXQuY29sMS55ICogdFZlYy54ICsgdE1hdC5jb2wyLnkgKiB0VmVjLnkpO1xuICAgICAgdE1hdCA9IHhmMS5SO1xuICAgICAgdFZlYyA9IHBvbHkxLm1fY2VudHJvaWQ7XG4gICAgICBkWCAtPSB4ZjEucG9zaXRpb24ueCArICh0TWF0LmNvbDEueCAqIHRWZWMueCArIHRNYXQuY29sMi54ICogdFZlYy55KTtcbiAgICAgIGRZIC09IHhmMS5wb3NpdGlvbi55ICsgKHRNYXQuY29sMS55ICogdFZlYy54ICsgdE1hdC5jb2wyLnkgKiB0VmVjLnkpO1xuICAgICAgdmFyIGRMb2NhbDFYID0gKGRYICogeGYxLlIuY29sMS54ICsgZFkgKiB4ZjEuUi5jb2wxLnkpO1xuICAgICAgdmFyIGRMb2NhbDFZID0gKGRYICogeGYxLlIuY29sMi54ICsgZFkgKiB4ZjEuUi5jb2wyLnkpO1xuICAgICAgdmFyIGVkZ2UgPSAwO1xuICAgICAgdmFyIG1heERvdCA9ICgtTnVtYmVyLk1BWF9WQUxVRSk7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvdW50MTsgKytpKSB7XG4gICAgICAgICB0VmVjID0gbm9ybWFsczFbaV07XG4gICAgICAgICB2YXIgZG90ID0gKHRWZWMueCAqIGRMb2NhbDFYICsgdFZlYy55ICogZExvY2FsMVkpO1xuICAgICAgICAgaWYgKGRvdCA+IG1heERvdCkge1xuICAgICAgICAgICAgbWF4RG90ID0gZG90O1xuICAgICAgICAgICAgZWRnZSA9IGk7XG4gICAgICAgICB9XG4gICAgICB9XG4gICAgICB2YXIgcyA9IGIyQ29sbGlzaW9uLkVkZ2VTZXBhcmF0aW9uKHBvbHkxLCB4ZjEsIGVkZ2UsIHBvbHkyLCB4ZjIpO1xuICAgICAgdmFyIHByZXZFZGdlID0gcGFyc2VJbnQoZWRnZSAtIDEgPj0gMCA/IGVkZ2UgLSAxIDogY291bnQxIC0gMSk7XG4gICAgICB2YXIgc1ByZXYgPSBiMkNvbGxpc2lvbi5FZGdlU2VwYXJhdGlvbihwb2x5MSwgeGYxLCBwcmV2RWRnZSwgcG9seTIsIHhmMik7XG4gICAgICB2YXIgbmV4dEVkZ2UgPSBwYXJzZUludChlZGdlICsgMSA8IGNvdW50MSA/IGVkZ2UgKyAxIDogMCk7XG4gICAgICB2YXIgc05leHQgPSBiMkNvbGxpc2lvbi5FZGdlU2VwYXJhdGlvbihwb2x5MSwgeGYxLCBuZXh0RWRnZSwgcG9seTIsIHhmMik7XG4gICAgICB2YXIgYmVzdEVkZ2UgPSAwO1xuICAgICAgdmFyIGJlc3RTZXBhcmF0aW9uID0gMDtcbiAgICAgIHZhciBpbmNyZW1lbnQgPSAwO1xuICAgICAgaWYgKHNQcmV2ID4gcyAmJiBzUHJldiA+IHNOZXh0KSB7XG4gICAgICAgICBpbmNyZW1lbnQgPSAoLTEpO1xuICAgICAgICAgYmVzdEVkZ2UgPSBwcmV2RWRnZTtcbiAgICAgICAgIGJlc3RTZXBhcmF0aW9uID0gc1ByZXY7XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChzTmV4dCA+IHMpIHtcbiAgICAgICAgIGluY3JlbWVudCA9IDE7XG4gICAgICAgICBiZXN0RWRnZSA9IG5leHRFZGdlO1xuICAgICAgICAgYmVzdFNlcGFyYXRpb24gPSBzTmV4dDtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICAgZWRnZUluZGV4WzBdID0gZWRnZTtcbiAgICAgICAgIHJldHVybiBzO1xuICAgICAgfVxuICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgIGlmIChpbmNyZW1lbnQgPT0gKC0xKSkgZWRnZSA9IGJlc3RFZGdlIC0gMSA+PSAwID8gYmVzdEVkZ2UgLSAxIDogY291bnQxIC0gMTtcbiAgICAgICAgIGVsc2UgZWRnZSA9IGJlc3RFZGdlICsgMSA8IGNvdW50MSA/IGJlc3RFZGdlICsgMSA6IDA7cyA9IGIyQ29sbGlzaW9uLkVkZ2VTZXBhcmF0aW9uKHBvbHkxLCB4ZjEsIGVkZ2UsIHBvbHkyLCB4ZjIpO1xuICAgICAgICAgaWYgKHMgPiBiZXN0U2VwYXJhdGlvbikge1xuICAgICAgICAgICAgYmVzdEVkZ2UgPSBlZGdlO1xuICAgICAgICAgICAgYmVzdFNlcGFyYXRpb24gPSBzO1xuICAgICAgICAgfVxuICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGVkZ2VJbmRleFswXSA9IGJlc3RFZGdlO1xuICAgICAgcmV0dXJuIGJlc3RTZXBhcmF0aW9uO1xuICAgfVxuICAgYjJDb2xsaXNpb24uRmluZEluY2lkZW50RWRnZSA9IGZ1bmN0aW9uIChjLCBwb2x5MSwgeGYxLCBlZGdlMSwgcG9seTIsIHhmMikge1xuICAgICAgaWYgKGVkZ2UxID09PSB1bmRlZmluZWQpIGVkZ2UxID0gMDtcbiAgICAgIHZhciBjb3VudDEgPSBwYXJzZUludChwb2x5MS5tX3ZlcnRleENvdW50KTtcbiAgICAgIHZhciBub3JtYWxzMSA9IHBvbHkxLm1fbm9ybWFscztcbiAgICAgIHZhciBjb3VudDIgPSBwYXJzZUludChwb2x5Mi5tX3ZlcnRleENvdW50KTtcbiAgICAgIHZhciB2ZXJ0aWNlczIgPSBwb2x5Mi5tX3ZlcnRpY2VzO1xuICAgICAgdmFyIG5vcm1hbHMyID0gcG9seTIubV9ub3JtYWxzO1xuICAgICAgdmFyIHRNYXQ7XG4gICAgICB2YXIgdFZlYztcbiAgICAgIHRNYXQgPSB4ZjEuUjtcbiAgICAgIHRWZWMgPSBub3JtYWxzMVtlZGdlMV07XG4gICAgICB2YXIgbm9ybWFsMVggPSAodE1hdC5jb2wxLnggKiB0VmVjLnggKyB0TWF0LmNvbDIueCAqIHRWZWMueSk7XG4gICAgICB2YXIgbm9ybWFsMVkgPSAodE1hdC5jb2wxLnkgKiB0VmVjLnggKyB0TWF0LmNvbDIueSAqIHRWZWMueSk7XG4gICAgICB0TWF0ID0geGYyLlI7XG4gICAgICB2YXIgdFggPSAodE1hdC5jb2wxLnggKiBub3JtYWwxWCArIHRNYXQuY29sMS55ICogbm9ybWFsMVkpO1xuICAgICAgbm9ybWFsMVkgPSAodE1hdC5jb2wyLnggKiBub3JtYWwxWCArIHRNYXQuY29sMi55ICogbm9ybWFsMVkpO1xuICAgICAgbm9ybWFsMVggPSB0WDtcbiAgICAgIHZhciBpbmRleCA9IDA7XG4gICAgICB2YXIgbWluRG90ID0gTnVtYmVyLk1BWF9WQUxVRTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY291bnQyOyArK2kpIHtcbiAgICAgICAgIHRWZWMgPSBub3JtYWxzMltpXTtcbiAgICAgICAgIHZhciBkb3QgPSAobm9ybWFsMVggKiB0VmVjLnggKyBub3JtYWwxWSAqIHRWZWMueSk7XG4gICAgICAgICBpZiAoZG90IDwgbWluRG90KSB7XG4gICAgICAgICAgICBtaW5Eb3QgPSBkb3Q7XG4gICAgICAgICAgICBpbmRleCA9IGk7XG4gICAgICAgICB9XG4gICAgICB9XG4gICAgICB2YXIgdENsaXA7XG4gICAgICB2YXIgaTEgPSBwYXJzZUludChpbmRleCk7XG4gICAgICB2YXIgaTIgPSBwYXJzZUludChpMSArIDEgPCBjb3VudDIgPyBpMSArIDEgOiAwKTtcbiAgICAgIHRDbGlwID0gY1swXTtcbiAgICAgIHRWZWMgPSB2ZXJ0aWNlczJbaTFdO1xuICAgICAgdE1hdCA9IHhmMi5SO1xuICAgICAgdENsaXAudi54ID0geGYyLnBvc2l0aW9uLnggKyAodE1hdC5jb2wxLnggKiB0VmVjLnggKyB0TWF0LmNvbDIueCAqIHRWZWMueSk7XG4gICAgICB0Q2xpcC52LnkgPSB4ZjIucG9zaXRpb24ueSArICh0TWF0LmNvbDEueSAqIHRWZWMueCArIHRNYXQuY29sMi55ICogdFZlYy55KTtcbiAgICAgIHRDbGlwLmlkLmZlYXR1cmVzLnJlZmVyZW5jZUVkZ2UgPSBlZGdlMTtcbiAgICAgIHRDbGlwLmlkLmZlYXR1cmVzLmluY2lkZW50RWRnZSA9IGkxO1xuICAgICAgdENsaXAuaWQuZmVhdHVyZXMuaW5jaWRlbnRWZXJ0ZXggPSAwO1xuICAgICAgdENsaXAgPSBjWzFdO1xuICAgICAgdFZlYyA9IHZlcnRpY2VzMltpMl07XG4gICAgICB0TWF0ID0geGYyLlI7XG4gICAgICB0Q2xpcC52LnggPSB4ZjIucG9zaXRpb24ueCArICh0TWF0LmNvbDEueCAqIHRWZWMueCArIHRNYXQuY29sMi54ICogdFZlYy55KTtcbiAgICAgIHRDbGlwLnYueSA9IHhmMi5wb3NpdGlvbi55ICsgKHRNYXQuY29sMS55ICogdFZlYy54ICsgdE1hdC5jb2wyLnkgKiB0VmVjLnkpO1xuICAgICAgdENsaXAuaWQuZmVhdHVyZXMucmVmZXJlbmNlRWRnZSA9IGVkZ2UxO1xuICAgICAgdENsaXAuaWQuZmVhdHVyZXMuaW5jaWRlbnRFZGdlID0gaTI7XG4gICAgICB0Q2xpcC5pZC5mZWF0dXJlcy5pbmNpZGVudFZlcnRleCA9IDE7XG4gICB9XG4gICBiMkNvbGxpc2lvbi5NYWtlQ2xpcFBvaW50VmVjdG9yID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHIgPSBuZXcgVmVjdG9yKDIpO1xuICAgICAgclswXSA9IG5ldyBDbGlwVmVydGV4KCk7XG4gICAgICByWzFdID0gbmV3IENsaXBWZXJ0ZXgoKTtcbiAgICAgIHJldHVybiByO1xuICAgfVxuICAgYjJDb2xsaXNpb24uQ29sbGlkZVBvbHlnb25zID0gZnVuY3Rpb24gKG1hbmlmb2xkLCBwb2x5QSwgeGZBLCBwb2x5QiwgeGZCKSB7XG4gICAgICB2YXIgY3Y7XG4gICAgICBtYW5pZm9sZC5tX3BvaW50Q291bnQgPSAwO1xuICAgICAgdmFyIHRvdGFsUmFkaXVzID0gcG9seUEubV9yYWRpdXMgKyBwb2x5Qi5tX3JhZGl1cztcbiAgICAgIHZhciBlZGdlQSA9IDA7XG4gICAgICBiMkNvbGxpc2lvbi5zX2VkZ2VBT1swXSA9IGVkZ2VBO1xuICAgICAgdmFyIHNlcGFyYXRpb25BID0gYjJDb2xsaXNpb24uRmluZE1heFNlcGFyYXRpb24oYjJDb2xsaXNpb24uc19lZGdlQU8sIHBvbHlBLCB4ZkEsIHBvbHlCLCB4ZkIpO1xuICAgICAgZWRnZUEgPSBiMkNvbGxpc2lvbi5zX2VkZ2VBT1swXTtcbiAgICAgIGlmIChzZXBhcmF0aW9uQSA+IHRvdGFsUmFkaXVzKSByZXR1cm47XG4gICAgICB2YXIgZWRnZUIgPSAwO1xuICAgICAgYjJDb2xsaXNpb24uc19lZGdlQk9bMF0gPSBlZGdlQjtcbiAgICAgIHZhciBzZXBhcmF0aW9uQiA9IGIyQ29sbGlzaW9uLkZpbmRNYXhTZXBhcmF0aW9uKGIyQ29sbGlzaW9uLnNfZWRnZUJPLCBwb2x5QiwgeGZCLCBwb2x5QSwgeGZBKTtcbiAgICAgIGVkZ2VCID0gYjJDb2xsaXNpb24uc19lZGdlQk9bMF07XG4gICAgICBpZiAoc2VwYXJhdGlvbkIgPiB0b3RhbFJhZGl1cykgcmV0dXJuO1xuICAgICAgdmFyIHBvbHkxO1xuICAgICAgdmFyIHBvbHkyO1xuICAgICAgdmFyIHhmMTtcbiAgICAgIHZhciB4ZjI7XG4gICAgICB2YXIgZWRnZTEgPSAwO1xuICAgICAgdmFyIGZsaXAgPSAwO1xuICAgICAgdmFyIGtfcmVsYXRpdmVUb2wgPSAwLjk4O1xuICAgICAgdmFyIGtfYWJzb2x1dGVUb2wgPSAwLjAwMTtcbiAgICAgIHZhciB0TWF0O1xuICAgICAgaWYgKHNlcGFyYXRpb25CID4ga19yZWxhdGl2ZVRvbCAqIHNlcGFyYXRpb25BICsga19hYnNvbHV0ZVRvbCkge1xuICAgICAgICAgcG9seTEgPSBwb2x5QjtcbiAgICAgICAgIHBvbHkyID0gcG9seUE7XG4gICAgICAgICB4ZjEgPSB4ZkI7XG4gICAgICAgICB4ZjIgPSB4ZkE7XG4gICAgICAgICBlZGdlMSA9IGVkZ2VCO1xuICAgICAgICAgbWFuaWZvbGQubV90eXBlID0gYjJNYW5pZm9sZC5lX2ZhY2VCO1xuICAgICAgICAgZmxpcCA9IDE7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgIHBvbHkxID0gcG9seUE7XG4gICAgICAgICBwb2x5MiA9IHBvbHlCO1xuICAgICAgICAgeGYxID0geGZBO1xuICAgICAgICAgeGYyID0geGZCO1xuICAgICAgICAgZWRnZTEgPSBlZGdlQTtcbiAgICAgICAgIG1hbmlmb2xkLm1fdHlwZSA9IGIyTWFuaWZvbGQuZV9mYWNlQTtcbiAgICAgICAgIGZsaXAgPSAwO1xuICAgICAgfVxuICAgICAgdmFyIGluY2lkZW50RWRnZSA9IGIyQ29sbGlzaW9uLnNfaW5jaWRlbnRFZGdlO1xuICAgICAgYjJDb2xsaXNpb24uRmluZEluY2lkZW50RWRnZShpbmNpZGVudEVkZ2UsIHBvbHkxLCB4ZjEsIGVkZ2UxLCBwb2x5MiwgeGYyKTtcbiAgICAgIHZhciBjb3VudDEgPSBwYXJzZUludChwb2x5MS5tX3ZlcnRleENvdW50KTtcbiAgICAgIHZhciB2ZXJ0aWNlczEgPSBwb2x5MS5tX3ZlcnRpY2VzO1xuICAgICAgdmFyIGxvY2FsX3YxMSA9IHZlcnRpY2VzMVtlZGdlMV07XG4gICAgICB2YXIgbG9jYWxfdjEyO1xuICAgICAgaWYgKGVkZ2UxICsgMSA8IGNvdW50MSkge1xuICAgICAgICAgbG9jYWxfdjEyID0gdmVydGljZXMxW3BhcnNlSW50KGVkZ2UxICsgMSldO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgICBsb2NhbF92MTIgPSB2ZXJ0aWNlczFbMF07XG4gICAgICB9XG4gICAgICB2YXIgbG9jYWxUYW5nZW50ID0gYjJDb2xsaXNpb24uc19sb2NhbFRhbmdlbnQ7XG4gICAgICBsb2NhbFRhbmdlbnQuU2V0KGxvY2FsX3YxMi54IC0gbG9jYWxfdjExLngsIGxvY2FsX3YxMi55IC0gbG9jYWxfdjExLnkpO1xuICAgICAgbG9jYWxUYW5nZW50Lk5vcm1hbGl6ZSgpO1xuICAgICAgdmFyIGxvY2FsTm9ybWFsID0gYjJDb2xsaXNpb24uc19sb2NhbE5vcm1hbDtcbiAgICAgIGxvY2FsTm9ybWFsLnggPSBsb2NhbFRhbmdlbnQueTtcbiAgICAgIGxvY2FsTm9ybWFsLnkgPSAoLWxvY2FsVGFuZ2VudC54KTtcbiAgICAgIHZhciBwbGFuZVBvaW50ID0gYjJDb2xsaXNpb24uc19wbGFuZVBvaW50O1xuICAgICAgcGxhbmVQb2ludC5TZXQoMC41ICogKGxvY2FsX3YxMS54ICsgbG9jYWxfdjEyLngpLCAwLjUgKiAobG9jYWxfdjExLnkgKyBsb2NhbF92MTIueSkpO1xuICAgICAgdmFyIHRhbmdlbnQgPSBiMkNvbGxpc2lvbi5zX3RhbmdlbnQ7XG4gICAgICB0TWF0ID0geGYxLlI7XG4gICAgICB0YW5nZW50LnggPSAodE1hdC5jb2wxLnggKiBsb2NhbFRhbmdlbnQueCArIHRNYXQuY29sMi54ICogbG9jYWxUYW5nZW50LnkpO1xuICAgICAgdGFuZ2VudC55ID0gKHRNYXQuY29sMS55ICogbG9jYWxUYW5nZW50LnggKyB0TWF0LmNvbDIueSAqIGxvY2FsVGFuZ2VudC55KTtcbiAgICAgIHZhciB0YW5nZW50MiA9IGIyQ29sbGlzaW9uLnNfdGFuZ2VudDI7XG4gICAgICB0YW5nZW50Mi54ID0gKC10YW5nZW50LngpO1xuICAgICAgdGFuZ2VudDIueSA9ICgtdGFuZ2VudC55KTtcbiAgICAgIHZhciBub3JtYWwgPSBiMkNvbGxpc2lvbi5zX25vcm1hbDtcbiAgICAgIG5vcm1hbC54ID0gdGFuZ2VudC55O1xuICAgICAgbm9ybWFsLnkgPSAoLXRhbmdlbnQueCk7XG4gICAgICB2YXIgdjExID0gYjJDb2xsaXNpb24uc192MTE7XG4gICAgICB2YXIgdjEyID0gYjJDb2xsaXNpb24uc192MTI7XG4gICAgICB2MTEueCA9IHhmMS5wb3NpdGlvbi54ICsgKHRNYXQuY29sMS54ICogbG9jYWxfdjExLnggKyB0TWF0LmNvbDIueCAqIGxvY2FsX3YxMS55KTtcbiAgICAgIHYxMS55ID0geGYxLnBvc2l0aW9uLnkgKyAodE1hdC5jb2wxLnkgKiBsb2NhbF92MTEueCArIHRNYXQuY29sMi55ICogbG9jYWxfdjExLnkpO1xuICAgICAgdjEyLnggPSB4ZjEucG9zaXRpb24ueCArICh0TWF0LmNvbDEueCAqIGxvY2FsX3YxMi54ICsgdE1hdC5jb2wyLnggKiBsb2NhbF92MTIueSk7XG4gICAgICB2MTIueSA9IHhmMS5wb3NpdGlvbi55ICsgKHRNYXQuY29sMS55ICogbG9jYWxfdjEyLnggKyB0TWF0LmNvbDIueSAqIGxvY2FsX3YxMi55KTtcbiAgICAgIHZhciBmcm9udE9mZnNldCA9IG5vcm1hbC54ICogdjExLnggKyBub3JtYWwueSAqIHYxMS55O1xuICAgICAgdmFyIHNpZGVPZmZzZXQxID0gKC10YW5nZW50LnggKiB2MTEueCkgLSB0YW5nZW50LnkgKiB2MTEueSArIHRvdGFsUmFkaXVzO1xuICAgICAgdmFyIHNpZGVPZmZzZXQyID0gdGFuZ2VudC54ICogdjEyLnggKyB0YW5nZW50LnkgKiB2MTIueSArIHRvdGFsUmFkaXVzO1xuICAgICAgdmFyIGNsaXBQb2ludHMxID0gYjJDb2xsaXNpb24uc19jbGlwUG9pbnRzMTtcbiAgICAgIHZhciBjbGlwUG9pbnRzMiA9IGIyQ29sbGlzaW9uLnNfY2xpcFBvaW50czI7XG4gICAgICB2YXIgbnAgPSAwO1xuICAgICAgbnAgPSBiMkNvbGxpc2lvbi5DbGlwU2VnbWVudFRvTGluZShjbGlwUG9pbnRzMSwgaW5jaWRlbnRFZGdlLCB0YW5nZW50Miwgc2lkZU9mZnNldDEpO1xuICAgICAgaWYgKG5wIDwgMikgcmV0dXJuO1xuICAgICAgbnAgPSBiMkNvbGxpc2lvbi5DbGlwU2VnbWVudFRvTGluZShjbGlwUG9pbnRzMiwgY2xpcFBvaW50czEsIHRhbmdlbnQsIHNpZGVPZmZzZXQyKTtcbiAgICAgIGlmIChucCA8IDIpIHJldHVybjtcbiAgICAgIG1hbmlmb2xkLm1fbG9jYWxQbGFuZU5vcm1hbC5TZXRWKGxvY2FsTm9ybWFsKTtcbiAgICAgIG1hbmlmb2xkLm1fbG9jYWxQb2ludC5TZXRWKHBsYW5lUG9pbnQpO1xuICAgICAgdmFyIHBvaW50Q291bnQgPSAwO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBiMlNldHRpbmdzLmIyX21heE1hbmlmb2xkUG9pbnRzOyArK2kpIHtcbiAgICAgICAgIGN2ID0gY2xpcFBvaW50czJbaV07XG4gICAgICAgICB2YXIgc2VwYXJhdGlvbiA9IG5vcm1hbC54ICogY3Yudi54ICsgbm9ybWFsLnkgKiBjdi52LnkgLSBmcm9udE9mZnNldDtcbiAgICAgICAgIGlmIChzZXBhcmF0aW9uIDw9IHRvdGFsUmFkaXVzKSB7XG4gICAgICAgICAgICB2YXIgY3AgPSBtYW5pZm9sZC5tX3BvaW50c1twb2ludENvdW50XTtcbiAgICAgICAgICAgIHRNYXQgPSB4ZjIuUjtcbiAgICAgICAgICAgIHZhciB0WCA9IGN2LnYueCAtIHhmMi5wb3NpdGlvbi54O1xuICAgICAgICAgICAgdmFyIHRZID0gY3Yudi55IC0geGYyLnBvc2l0aW9uLnk7XG4gICAgICAgICAgICBjcC5tX2xvY2FsUG9pbnQueCA9ICh0WCAqIHRNYXQuY29sMS54ICsgdFkgKiB0TWF0LmNvbDEueSk7XG4gICAgICAgICAgICBjcC5tX2xvY2FsUG9pbnQueSA9ICh0WCAqIHRNYXQuY29sMi54ICsgdFkgKiB0TWF0LmNvbDIueSk7XG4gICAgICAgICAgICBjcC5tX2lkLlNldChjdi5pZCk7XG4gICAgICAgICAgICBjcC5tX2lkLmZlYXR1cmVzLmZsaXAgPSBmbGlwO1xuICAgICAgICAgICAgKytwb2ludENvdW50O1xuICAgICAgICAgfVxuICAgICAgfVxuICAgICAgbWFuaWZvbGQubV9wb2ludENvdW50ID0gcG9pbnRDb3VudDtcbiAgIH1cbiAgIGIyQ29sbGlzaW9uLkNvbGxpZGVDaXJjbGVzID0gZnVuY3Rpb24gKG1hbmlmb2xkLCBjaXJjbGUxLCB4ZjEsIGNpcmNsZTIsIHhmMikge1xuICAgICAgbWFuaWZvbGQubV9wb2ludENvdW50ID0gMDtcbiAgICAgIHZhciB0TWF0O1xuICAgICAgdmFyIHRWZWM7XG4gICAgICB0TWF0ID0geGYxLlI7XG4gICAgICB0VmVjID0gY2lyY2xlMS5tX3A7XG4gICAgICB2YXIgcDFYID0geGYxLnBvc2l0aW9uLnggKyAodE1hdC5jb2wxLnggKiB0VmVjLnggKyB0TWF0LmNvbDIueCAqIHRWZWMueSk7XG4gICAgICB2YXIgcDFZID0geGYxLnBvc2l0aW9uLnkgKyAodE1hdC5jb2wxLnkgKiB0VmVjLnggKyB0TWF0LmNvbDIueSAqIHRWZWMueSk7XG4gICAgICB0TWF0ID0geGYyLlI7XG4gICAgICB0VmVjID0gY2lyY2xlMi5tX3A7XG4gICAgICB2YXIgcDJYID0geGYyLnBvc2l0aW9uLnggKyAodE1hdC5jb2wxLnggKiB0VmVjLnggKyB0TWF0LmNvbDIueCAqIHRWZWMueSk7XG4gICAgICB2YXIgcDJZID0geGYyLnBvc2l0aW9uLnkgKyAodE1hdC5jb2wxLnkgKiB0VmVjLnggKyB0TWF0LmNvbDIueSAqIHRWZWMueSk7XG4gICAgICB2YXIgZFggPSBwMlggLSBwMVg7XG4gICAgICB2YXIgZFkgPSBwMlkgLSBwMVk7XG4gICAgICB2YXIgZGlzdFNxciA9IGRYICogZFggKyBkWSAqIGRZO1xuICAgICAgdmFyIHJhZGl1cyA9IGNpcmNsZTEubV9yYWRpdXMgKyBjaXJjbGUyLm1fcmFkaXVzO1xuICAgICAgaWYgKGRpc3RTcXIgPiByYWRpdXMgKiByYWRpdXMpIHtcbiAgICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIG1hbmlmb2xkLm1fdHlwZSA9IGIyTWFuaWZvbGQuZV9jaXJjbGVzO1xuICAgICAgbWFuaWZvbGQubV9sb2NhbFBvaW50LlNldFYoY2lyY2xlMS5tX3ApO1xuICAgICAgbWFuaWZvbGQubV9sb2NhbFBsYW5lTm9ybWFsLlNldFplcm8oKTtcbiAgICAgIG1hbmlmb2xkLm1fcG9pbnRDb3VudCA9IDE7XG4gICAgICBtYW5pZm9sZC5tX3BvaW50c1swXS5tX2xvY2FsUG9pbnQuU2V0VihjaXJjbGUyLm1fcCk7XG4gICAgICBtYW5pZm9sZC5tX3BvaW50c1swXS5tX2lkLmtleSA9IDA7XG4gICB9XG4gICBiMkNvbGxpc2lvbi5Db2xsaWRlUG9seWdvbkFuZENpcmNsZSA9IGZ1bmN0aW9uIChtYW5pZm9sZCwgcG9seWdvbiwgeGYxLCBjaXJjbGUsIHhmMikge1xuICAgICAgbWFuaWZvbGQubV9wb2ludENvdW50ID0gMDtcbiAgICAgIHZhciB0UG9pbnQ7XG4gICAgICB2YXIgZFggPSAwO1xuICAgICAgdmFyIGRZID0gMDtcbiAgICAgIHZhciBwb3NpdGlvblggPSAwO1xuICAgICAgdmFyIHBvc2l0aW9uWSA9IDA7XG4gICAgICB2YXIgdFZlYztcbiAgICAgIHZhciB0TWF0O1xuICAgICAgdE1hdCA9IHhmMi5SO1xuICAgICAgdFZlYyA9IGNpcmNsZS5tX3A7XG4gICAgICB2YXIgY1ggPSB4ZjIucG9zaXRpb24ueCArICh0TWF0LmNvbDEueCAqIHRWZWMueCArIHRNYXQuY29sMi54ICogdFZlYy55KTtcbiAgICAgIHZhciBjWSA9IHhmMi5wb3NpdGlvbi55ICsgKHRNYXQuY29sMS55ICogdFZlYy54ICsgdE1hdC5jb2wyLnkgKiB0VmVjLnkpO1xuICAgICAgZFggPSBjWCAtIHhmMS5wb3NpdGlvbi54O1xuICAgICAgZFkgPSBjWSAtIHhmMS5wb3NpdGlvbi55O1xuICAgICAgdE1hdCA9IHhmMS5SO1xuICAgICAgdmFyIGNMb2NhbFggPSAoZFggKiB0TWF0LmNvbDEueCArIGRZICogdE1hdC5jb2wxLnkpO1xuICAgICAgdmFyIGNMb2NhbFkgPSAoZFggKiB0TWF0LmNvbDIueCArIGRZICogdE1hdC5jb2wyLnkpO1xuICAgICAgdmFyIGRpc3QgPSAwO1xuICAgICAgdmFyIG5vcm1hbEluZGV4ID0gMDtcbiAgICAgIHZhciBzZXBhcmF0aW9uID0gKC1OdW1iZXIuTUFYX1ZBTFVFKTtcbiAgICAgIHZhciByYWRpdXMgPSBwb2x5Z29uLm1fcmFkaXVzICsgY2lyY2xlLm1fcmFkaXVzO1xuICAgICAgdmFyIHZlcnRleENvdW50ID0gcGFyc2VJbnQocG9seWdvbi5tX3ZlcnRleENvdW50KTtcbiAgICAgIHZhciB2ZXJ0aWNlcyA9IHBvbHlnb24ubV92ZXJ0aWNlcztcbiAgICAgIHZhciBub3JtYWxzID0gcG9seWdvbi5tX25vcm1hbHM7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZlcnRleENvdW50OyArK2kpIHtcbiAgICAgICAgIHRWZWMgPSB2ZXJ0aWNlc1tpXTtcbiAgICAgICAgIGRYID0gY0xvY2FsWCAtIHRWZWMueDtcbiAgICAgICAgIGRZID0gY0xvY2FsWSAtIHRWZWMueTtcbiAgICAgICAgIHRWZWMgPSBub3JtYWxzW2ldO1xuICAgICAgICAgdmFyIHMgPSB0VmVjLnggKiBkWCArIHRWZWMueSAqIGRZO1xuICAgICAgICAgaWYgKHMgPiByYWRpdXMpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgIH1cbiAgICAgICAgIGlmIChzID4gc2VwYXJhdGlvbikge1xuICAgICAgICAgICAgc2VwYXJhdGlvbiA9IHM7XG4gICAgICAgICAgICBub3JtYWxJbmRleCA9IGk7XG4gICAgICAgICB9XG4gICAgICB9XG4gICAgICB2YXIgdmVydEluZGV4MSA9IHBhcnNlSW50KG5vcm1hbEluZGV4KTtcbiAgICAgIHZhciB2ZXJ0SW5kZXgyID0gcGFyc2VJbnQodmVydEluZGV4MSArIDEgPCB2ZXJ0ZXhDb3VudCA/IHZlcnRJbmRleDEgKyAxIDogMCk7XG4gICAgICB2YXIgdjEgPSB2ZXJ0aWNlc1t2ZXJ0SW5kZXgxXTtcbiAgICAgIHZhciB2MiA9IHZlcnRpY2VzW3ZlcnRJbmRleDJdO1xuICAgICAgaWYgKHNlcGFyYXRpb24gPCBOdW1iZXIuTUlOX1ZBTFVFKSB7XG4gICAgICAgICBtYW5pZm9sZC5tX3BvaW50Q291bnQgPSAxO1xuICAgICAgICAgbWFuaWZvbGQubV90eXBlID0gYjJNYW5pZm9sZC5lX2ZhY2VBO1xuICAgICAgICAgbWFuaWZvbGQubV9sb2NhbFBsYW5lTm9ybWFsLlNldFYobm9ybWFsc1tub3JtYWxJbmRleF0pO1xuICAgICAgICAgbWFuaWZvbGQubV9sb2NhbFBvaW50LnggPSAwLjUgKiAodjEueCArIHYyLngpO1xuICAgICAgICAgbWFuaWZvbGQubV9sb2NhbFBvaW50LnkgPSAwLjUgKiAodjEueSArIHYyLnkpO1xuICAgICAgICAgbWFuaWZvbGQubV9wb2ludHNbMF0ubV9sb2NhbFBvaW50LlNldFYoY2lyY2xlLm1fcCk7XG4gICAgICAgICBtYW5pZm9sZC5tX3BvaW50c1swXS5tX2lkLmtleSA9IDA7XG4gICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgdTEgPSAoY0xvY2FsWCAtIHYxLngpICogKHYyLnggLSB2MS54KSArIChjTG9jYWxZIC0gdjEueSkgKiAodjIueSAtIHYxLnkpO1xuICAgICAgdmFyIHUyID0gKGNMb2NhbFggLSB2Mi54KSAqICh2MS54IC0gdjIueCkgKyAoY0xvY2FsWSAtIHYyLnkpICogKHYxLnkgLSB2Mi55KTtcbiAgICAgIGlmICh1MSA8PSAwLjApIHtcbiAgICAgICAgIGlmICgoY0xvY2FsWCAtIHYxLngpICogKGNMb2NhbFggLSB2MS54KSArIChjTG9jYWxZIC0gdjEueSkgKiAoY0xvY2FsWSAtIHYxLnkpID4gcmFkaXVzICogcmFkaXVzKSByZXR1cm47XG4gICAgICAgICBtYW5pZm9sZC5tX3BvaW50Q291bnQgPSAxO1xuICAgICAgICAgbWFuaWZvbGQubV90eXBlID0gYjJNYW5pZm9sZC5lX2ZhY2VBO1xuICAgICAgICAgbWFuaWZvbGQubV9sb2NhbFBsYW5lTm9ybWFsLnggPSBjTG9jYWxYIC0gdjEueDtcbiAgICAgICAgIG1hbmlmb2xkLm1fbG9jYWxQbGFuZU5vcm1hbC55ID0gY0xvY2FsWSAtIHYxLnk7XG4gICAgICAgICBtYW5pZm9sZC5tX2xvY2FsUGxhbmVOb3JtYWwuTm9ybWFsaXplKCk7XG4gICAgICAgICBtYW5pZm9sZC5tX2xvY2FsUG9pbnQuU2V0Vih2MSk7XG4gICAgICAgICBtYW5pZm9sZC5tX3BvaW50c1swXS5tX2xvY2FsUG9pbnQuU2V0VihjaXJjbGUubV9wKTtcbiAgICAgICAgIG1hbmlmb2xkLm1fcG9pbnRzWzBdLm1faWQua2V5ID0gMDtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKHUyIDw9IDApIHtcbiAgICAgICAgIGlmICgoY0xvY2FsWCAtIHYyLngpICogKGNMb2NhbFggLSB2Mi54KSArIChjTG9jYWxZIC0gdjIueSkgKiAoY0xvY2FsWSAtIHYyLnkpID4gcmFkaXVzICogcmFkaXVzKSByZXR1cm47XG4gICAgICAgICBtYW5pZm9sZC5tX3BvaW50Q291bnQgPSAxO1xuICAgICAgICAgbWFuaWZvbGQubV90eXBlID0gYjJNYW5pZm9sZC5lX2ZhY2VBO1xuICAgICAgICAgbWFuaWZvbGQubV9sb2NhbFBsYW5lTm9ybWFsLnggPSBjTG9jYWxYIC0gdjIueDtcbiAgICAgICAgIG1hbmlmb2xkLm1fbG9jYWxQbGFuZU5vcm1hbC55ID0gY0xvY2FsWSAtIHYyLnk7XG4gICAgICAgICBtYW5pZm9sZC5tX2xvY2FsUGxhbmVOb3JtYWwuTm9ybWFsaXplKCk7XG4gICAgICAgICBtYW5pZm9sZC5tX2xvY2FsUG9pbnQuU2V0Vih2Mik7XG4gICAgICAgICBtYW5pZm9sZC5tX3BvaW50c1swXS5tX2xvY2FsUG9pbnQuU2V0VihjaXJjbGUubV9wKTtcbiAgICAgICAgIG1hbmlmb2xkLm1fcG9pbnRzWzBdLm1faWQua2V5ID0gMDtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICAgdmFyIGZhY2VDZW50ZXJYID0gMC41ICogKHYxLnggKyB2Mi54KTtcbiAgICAgICAgIHZhciBmYWNlQ2VudGVyWSA9IDAuNSAqICh2MS55ICsgdjIueSk7XG4gICAgICAgICBzZXBhcmF0aW9uID0gKGNMb2NhbFggLSBmYWNlQ2VudGVyWCkgKiBub3JtYWxzW3ZlcnRJbmRleDFdLnggKyAoY0xvY2FsWSAtIGZhY2VDZW50ZXJZKSAqIG5vcm1hbHNbdmVydEluZGV4MV0ueTtcbiAgICAgICAgIGlmIChzZXBhcmF0aW9uID4gcmFkaXVzKSByZXR1cm47XG4gICAgICAgICBtYW5pZm9sZC5tX3BvaW50Q291bnQgPSAxO1xuICAgICAgICAgbWFuaWZvbGQubV90eXBlID0gYjJNYW5pZm9sZC5lX2ZhY2VBO1xuICAgICAgICAgbWFuaWZvbGQubV9sb2NhbFBsYW5lTm9ybWFsLnggPSBub3JtYWxzW3ZlcnRJbmRleDFdLng7XG4gICAgICAgICBtYW5pZm9sZC5tX2xvY2FsUGxhbmVOb3JtYWwueSA9IG5vcm1hbHNbdmVydEluZGV4MV0ueTtcbiAgICAgICAgIG1hbmlmb2xkLm1fbG9jYWxQbGFuZU5vcm1hbC5Ob3JtYWxpemUoKTtcbiAgICAgICAgIG1hbmlmb2xkLm1fbG9jYWxQb2ludC5TZXQoZmFjZUNlbnRlclgsIGZhY2VDZW50ZXJZKTtcbiAgICAgICAgIG1hbmlmb2xkLm1fcG9pbnRzWzBdLm1fbG9jYWxQb2ludC5TZXRWKGNpcmNsZS5tX3ApO1xuICAgICAgICAgbWFuaWZvbGQubV9wb2ludHNbMF0ubV9pZC5rZXkgPSAwO1xuICAgICAgfVxuICAgfVxuICAgYjJDb2xsaXNpb24uVGVzdE92ZXJsYXAgPSBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgdmFyIHQxID0gYi5sb3dlckJvdW5kO1xuICAgICAgdmFyIHQyID0gYS51cHBlckJvdW5kO1xuICAgICAgdmFyIGQxWCA9IHQxLnggLSB0Mi54O1xuICAgICAgdmFyIGQxWSA9IHQxLnkgLSB0Mi55O1xuICAgICAgdDEgPSBhLmxvd2VyQm91bmQ7XG4gICAgICB0MiA9IGIudXBwZXJCb3VuZDtcbiAgICAgIHZhciBkMlggPSB0MS54IC0gdDIueDtcbiAgICAgIHZhciBkMlkgPSB0MS55IC0gdDIueTtcbiAgICAgIGlmIChkMVggPiAwLjAgfHwgZDFZID4gMC4wKSByZXR1cm4gZmFsc2U7XG4gICAgICBpZiAoZDJYID4gMC4wIHx8IGQyWSA+IDAuMCkgcmV0dXJuIGZhbHNlO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICB9XG4gICBCb3gyRC5wb3N0RGVmcy5wdXNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIEJveDJELkNvbGxpc2lvbi5iMkNvbGxpc2lvbi5zX2luY2lkZW50RWRnZSA9IGIyQ29sbGlzaW9uLk1ha2VDbGlwUG9pbnRWZWN0b3IoKTtcbiAgICAgIEJveDJELkNvbGxpc2lvbi5iMkNvbGxpc2lvbi5zX2NsaXBQb2ludHMxID0gYjJDb2xsaXNpb24uTWFrZUNsaXBQb2ludFZlY3RvcigpO1xuICAgICAgQm94MkQuQ29sbGlzaW9uLmIyQ29sbGlzaW9uLnNfY2xpcFBvaW50czIgPSBiMkNvbGxpc2lvbi5NYWtlQ2xpcFBvaW50VmVjdG9yKCk7XG4gICAgICBCb3gyRC5Db2xsaXNpb24uYjJDb2xsaXNpb24uc19lZGdlQU8gPSBuZXcgVmVjdG9yX2Eyal9OdW1iZXIoMSk7XG4gICAgICBCb3gyRC5Db2xsaXNpb24uYjJDb2xsaXNpb24uc19lZGdlQk8gPSBuZXcgVmVjdG9yX2Eyal9OdW1iZXIoMSk7XG4gICAgICBCb3gyRC5Db2xsaXNpb24uYjJDb2xsaXNpb24uc19sb2NhbFRhbmdlbnQgPSBuZXcgYjJWZWMyKCk7XG4gICAgICBCb3gyRC5Db2xsaXNpb24uYjJDb2xsaXNpb24uc19sb2NhbE5vcm1hbCA9IG5ldyBiMlZlYzIoKTtcbiAgICAgIEJveDJELkNvbGxpc2lvbi5iMkNvbGxpc2lvbi5zX3BsYW5lUG9pbnQgPSBuZXcgYjJWZWMyKCk7XG4gICAgICBCb3gyRC5Db2xsaXNpb24uYjJDb2xsaXNpb24uc19ub3JtYWwgPSBuZXcgYjJWZWMyKCk7XG4gICAgICBCb3gyRC5Db2xsaXNpb24uYjJDb2xsaXNpb24uc190YW5nZW50ID0gbmV3IGIyVmVjMigpO1xuICAgICAgQm94MkQuQ29sbGlzaW9uLmIyQ29sbGlzaW9uLnNfdGFuZ2VudDIgPSBuZXcgYjJWZWMyKCk7XG4gICAgICBCb3gyRC5Db2xsaXNpb24uYjJDb2xsaXNpb24uc192MTEgPSBuZXcgYjJWZWMyKCk7XG4gICAgICBCb3gyRC5Db2xsaXNpb24uYjJDb2xsaXNpb24uc192MTIgPSBuZXcgYjJWZWMyKCk7XG4gICAgICBCb3gyRC5Db2xsaXNpb24uYjJDb2xsaXNpb24uYjJDb2xsaWRlUG9seVRlbXBWZWMgPSBuZXcgYjJWZWMyKCk7XG4gICAgICBCb3gyRC5Db2xsaXNpb24uYjJDb2xsaXNpb24uYjJfbnVsbEZlYXR1cmUgPSAweDAwMDAwMGZmO1xuICAgfSk7XG4gICBiMkNvbnRhY3RJRC5iMkNvbnRhY3RJRCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMuZmVhdHVyZXMgPSBuZXcgRmVhdHVyZXMoKTtcbiAgIH07XG4gICBiMkNvbnRhY3RJRC5wcm90b3R5cGUuYjJDb250YWN0SUQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLmZlYXR1cmVzLl9tX2lkID0gdGhpcztcbiAgIH1cbiAgIGIyQ29udGFjdElELnByb3RvdHlwZS5TZXQgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIHRoaXMua2V5ID0gaWQuX2tleTtcbiAgIH1cbiAgIGIyQ29udGFjdElELnByb3RvdHlwZS5Db3B5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGlkID0gbmV3IGIyQ29udGFjdElEKCk7XG4gICAgICBpZC5rZXkgPSB0aGlzLmtleTtcbiAgICAgIHJldHVybiBpZDtcbiAgIH1cbiAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShiMkNvbnRhY3RJRC5wcm90b3R5cGUsICdrZXknLCB7XG4gICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgcmV0dXJuIHRoaXMuX2tleTtcbiAgICAgIH1cbiAgIH0pO1xuICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGIyQ29udGFjdElELnByb3RvdHlwZSwgJ2tleScsIHtcbiAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB2YWx1ZSA9IDA7XG4gICAgICAgICB0aGlzLl9rZXkgPSB2YWx1ZTtcbiAgICAgICAgIHRoaXMuZmVhdHVyZXMuX3JlZmVyZW5jZUVkZ2UgPSB0aGlzLl9rZXkgJiAweDAwMDAwMGZmO1xuICAgICAgICAgdGhpcy5mZWF0dXJlcy5faW5jaWRlbnRFZGdlID0gKCh0aGlzLl9rZXkgJiAweDAwMDBmZjAwKSA+PiA4KSAmIDB4MDAwMDAwZmY7XG4gICAgICAgICB0aGlzLmZlYXR1cmVzLl9pbmNpZGVudFZlcnRleCA9ICgodGhpcy5fa2V5ICYgMHgwMGZmMDAwMCkgPj4gMTYpICYgMHgwMDAwMDBmZjtcbiAgICAgICAgIHRoaXMuZmVhdHVyZXMuX2ZsaXAgPSAoKHRoaXMuX2tleSAmIDB4ZmYwMDAwMDApID4+IDI0KSAmIDB4MDAwMDAwZmY7XG4gICAgICB9XG4gICB9KTtcbiAgIGIyQ29udGFjdFBvaW50LmIyQ29udGFjdFBvaW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcy5wb3NpdGlvbiA9IG5ldyBiMlZlYzIoKTtcbiAgICAgIHRoaXMudmVsb2NpdHkgPSBuZXcgYjJWZWMyKCk7XG4gICAgICB0aGlzLm5vcm1hbCA9IG5ldyBiMlZlYzIoKTtcbiAgICAgIHRoaXMuaWQgPSBuZXcgYjJDb250YWN0SUQoKTtcbiAgIH07XG4gICBiMkRpc3RhbmNlLmIyRGlzdGFuY2UgPSBmdW5jdGlvbiAoKSB7fTtcbiAgIGIyRGlzdGFuY2UuRGlzdGFuY2UgPSBmdW5jdGlvbiAob3V0cHV0LCBjYWNoZSwgaW5wdXQpIHtcbiAgICAgICsrYjJEaXN0YW5jZS5iMl9namtDYWxscztcbiAgICAgIHZhciBwcm94eUEgPSBpbnB1dC5wcm94eUE7XG4gICAgICB2YXIgcHJveHlCID0gaW5wdXQucHJveHlCO1xuICAgICAgdmFyIHRyYW5zZm9ybUEgPSBpbnB1dC50cmFuc2Zvcm1BO1xuICAgICAgdmFyIHRyYW5zZm9ybUIgPSBpbnB1dC50cmFuc2Zvcm1CO1xuICAgICAgdmFyIHNpbXBsZXggPSBiMkRpc3RhbmNlLnNfc2ltcGxleDtcbiAgICAgIHNpbXBsZXguUmVhZENhY2hlKGNhY2hlLCBwcm94eUEsIHRyYW5zZm9ybUEsIHByb3h5QiwgdHJhbnNmb3JtQik7XG4gICAgICB2YXIgdmVydGljZXMgPSBzaW1wbGV4Lm1fdmVydGljZXM7XG4gICAgICB2YXIga19tYXhJdGVycyA9IDIwO1xuICAgICAgdmFyIHNhdmVBID0gYjJEaXN0YW5jZS5zX3NhdmVBO1xuICAgICAgdmFyIHNhdmVCID0gYjJEaXN0YW5jZS5zX3NhdmVCO1xuICAgICAgdmFyIHNhdmVDb3VudCA9IDA7XG4gICAgICB2YXIgY2xvc2VzdFBvaW50ID0gc2ltcGxleC5HZXRDbG9zZXN0UG9pbnQoKTtcbiAgICAgIHZhciBkaXN0YW5jZVNxcjEgPSBjbG9zZXN0UG9pbnQuTGVuZ3RoU3F1YXJlZCgpO1xuICAgICAgdmFyIGRpc3RhbmNlU3FyMiA9IGRpc3RhbmNlU3FyMTtcbiAgICAgIHZhciBpID0gMDtcbiAgICAgIHZhciBwO1xuICAgICAgdmFyIGl0ZXIgPSAwO1xuICAgICAgd2hpbGUgKGl0ZXIgPCBrX21heEl0ZXJzKSB7XG4gICAgICAgICBzYXZlQ291bnQgPSBzaW1wbGV4Lm1fY291bnQ7XG4gICAgICAgICBmb3IgKGkgPSAwO1xuICAgICAgICAgaSA8IHNhdmVDb3VudDsgaSsrKSB7XG4gICAgICAgICAgICBzYXZlQVtpXSA9IHZlcnRpY2VzW2ldLmluZGV4QTtcbiAgICAgICAgICAgIHNhdmVCW2ldID0gdmVydGljZXNbaV0uaW5kZXhCO1xuICAgICAgICAgfVxuICAgICAgICAgc3dpdGNoIChzaW1wbGV4Lm1fY291bnQpIHtcbiAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgc2ltcGxleC5Tb2x2ZTIoKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgc2ltcGxleC5Tb2x2ZTMoKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIGIyU2V0dGluZ3MuYjJBc3NlcnQoZmFsc2UpO1xuICAgICAgICAgfVxuICAgICAgICAgaWYgKHNpbXBsZXgubV9jb3VudCA9PSAzKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgIH1cbiAgICAgICAgIHAgPSBzaW1wbGV4LkdldENsb3Nlc3RQb2ludCgpO1xuICAgICAgICAgZGlzdGFuY2VTcXIyID0gcC5MZW5ndGhTcXVhcmVkKCk7XG4gICAgICAgICBpZiAoZGlzdGFuY2VTcXIyID4gZGlzdGFuY2VTcXIxKSB7fVxuICAgICAgICAgZGlzdGFuY2VTcXIxID0gZGlzdGFuY2VTcXIyO1xuICAgICAgICAgdmFyIGQgPSBzaW1wbGV4LkdldFNlYXJjaERpcmVjdGlvbigpO1xuICAgICAgICAgaWYgKGQuTGVuZ3RoU3F1YXJlZCgpIDwgTnVtYmVyLk1JTl9WQUxVRSAqIE51bWJlci5NSU5fVkFMVUUpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgfVxuICAgICAgICAgdmFyIHZlcnRleCA9IHZlcnRpY2VzW3NpbXBsZXgubV9jb3VudF07XG4gICAgICAgICB2ZXJ0ZXguaW5kZXhBID0gcHJveHlBLkdldFN1cHBvcnQoYjJNYXRoLk11bFRNVih0cmFuc2Zvcm1BLlIsIGQuR2V0TmVnYXRpdmUoKSkpO1xuICAgICAgICAgdmVydGV4LndBID0gYjJNYXRoLk11bFgodHJhbnNmb3JtQSwgcHJveHlBLkdldFZlcnRleCh2ZXJ0ZXguaW5kZXhBKSk7XG4gICAgICAgICB2ZXJ0ZXguaW5kZXhCID0gcHJveHlCLkdldFN1cHBvcnQoYjJNYXRoLk11bFRNVih0cmFuc2Zvcm1CLlIsIGQpKTtcbiAgICAgICAgIHZlcnRleC53QiA9IGIyTWF0aC5NdWxYKHRyYW5zZm9ybUIsIHByb3h5Qi5HZXRWZXJ0ZXgodmVydGV4LmluZGV4QikpO1xuICAgICAgICAgdmVydGV4LncgPSBiMk1hdGguU3VidHJhY3RWVih2ZXJ0ZXgud0IsIHZlcnRleC53QSk7XG4gICAgICAgICArK2l0ZXI7XG4gICAgICAgICArK2IyRGlzdGFuY2UuYjJfZ2prSXRlcnM7XG4gICAgICAgICB2YXIgZHVwbGljYXRlID0gZmFsc2U7XG4gICAgICAgICBmb3IgKGkgPSAwO1xuICAgICAgICAgaSA8IHNhdmVDb3VudDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAodmVydGV4LmluZGV4QSA9PSBzYXZlQVtpXSAmJiB2ZXJ0ZXguaW5kZXhCID09IHNhdmVCW2ldKSB7XG4gICAgICAgICAgICAgICBkdXBsaWNhdGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICB9XG4gICAgICAgICBpZiAoZHVwbGljYXRlKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgIH0rK3NpbXBsZXgubV9jb3VudDtcbiAgICAgIH1cbiAgICAgIGIyRGlzdGFuY2UuYjJfZ2prTWF4SXRlcnMgPSBiMk1hdGguTWF4KGIyRGlzdGFuY2UuYjJfZ2prTWF4SXRlcnMsIGl0ZXIpO1xuICAgICAgc2ltcGxleC5HZXRXaXRuZXNzUG9pbnRzKG91dHB1dC5wb2ludEEsIG91dHB1dC5wb2ludEIpO1xuICAgICAgb3V0cHV0LmRpc3RhbmNlID0gYjJNYXRoLlN1YnRyYWN0VlYob3V0cHV0LnBvaW50QSwgb3V0cHV0LnBvaW50QikuTGVuZ3RoKCk7XG4gICAgICBvdXRwdXQuaXRlcmF0aW9ucyA9IGl0ZXI7XG4gICAgICBzaW1wbGV4LldyaXRlQ2FjaGUoY2FjaGUpO1xuICAgICAgaWYgKGlucHV0LnVzZVJhZGlpKSB7XG4gICAgICAgICB2YXIgckEgPSBwcm94eUEubV9yYWRpdXM7XG4gICAgICAgICB2YXIgckIgPSBwcm94eUIubV9yYWRpdXM7XG4gICAgICAgICBpZiAob3V0cHV0LmRpc3RhbmNlID4gckEgKyByQiAmJiBvdXRwdXQuZGlzdGFuY2UgPiBOdW1iZXIuTUlOX1ZBTFVFKSB7XG4gICAgICAgICAgICBvdXRwdXQuZGlzdGFuY2UgLT0gckEgKyByQjtcbiAgICAgICAgICAgIHZhciBub3JtYWwgPSBiMk1hdGguU3VidHJhY3RWVihvdXRwdXQucG9pbnRCLCBvdXRwdXQucG9pbnRBKTtcbiAgICAgICAgICAgIG5vcm1hbC5Ob3JtYWxpemUoKTtcbiAgICAgICAgICAgIG91dHB1dC5wb2ludEEueCArPSByQSAqIG5vcm1hbC54O1xuICAgICAgICAgICAgb3V0cHV0LnBvaW50QS55ICs9IHJBICogbm9ybWFsLnk7XG4gICAgICAgICAgICBvdXRwdXQucG9pbnRCLnggLT0gckIgKiBub3JtYWwueDtcbiAgICAgICAgICAgIG91dHB1dC5wb2ludEIueSAtPSByQiAqIG5vcm1hbC55O1xuICAgICAgICAgfVxuICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBwID0gbmV3IGIyVmVjMigpO1xuICAgICAgICAgICAgcC54ID0gLjUgKiAob3V0cHV0LnBvaW50QS54ICsgb3V0cHV0LnBvaW50Qi54KTtcbiAgICAgICAgICAgIHAueSA9IC41ICogKG91dHB1dC5wb2ludEEueSArIG91dHB1dC5wb2ludEIueSk7XG4gICAgICAgICAgICBvdXRwdXQucG9pbnRBLnggPSBvdXRwdXQucG9pbnRCLnggPSBwLng7XG4gICAgICAgICAgICBvdXRwdXQucG9pbnRBLnkgPSBvdXRwdXQucG9pbnRCLnkgPSBwLnk7XG4gICAgICAgICAgICBvdXRwdXQuZGlzdGFuY2UgPSAwLjA7XG4gICAgICAgICB9XG4gICAgICB9XG4gICB9XG4gICBCb3gyRC5wb3N0RGVmcy5wdXNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIEJveDJELkNvbGxpc2lvbi5iMkRpc3RhbmNlLnNfc2ltcGxleCA9IG5ldyBiMlNpbXBsZXgoKTtcbiAgICAgIEJveDJELkNvbGxpc2lvbi5iMkRpc3RhbmNlLnNfc2F2ZUEgPSBuZXcgVmVjdG9yX2Eyal9OdW1iZXIoMyk7XG4gICAgICBCb3gyRC5Db2xsaXNpb24uYjJEaXN0YW5jZS5zX3NhdmVCID0gbmV3IFZlY3Rvcl9hMmpfTnVtYmVyKDMpO1xuICAgfSk7XG4gICBiMkRpc3RhbmNlSW5wdXQuYjJEaXN0YW5jZUlucHV0ID0gZnVuY3Rpb24gKCkge307XG4gICBiMkRpc3RhbmNlT3V0cHV0LmIyRGlzdGFuY2VPdXRwdXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLnBvaW50QSA9IG5ldyBiMlZlYzIoKTtcbiAgICAgIHRoaXMucG9pbnRCID0gbmV3IGIyVmVjMigpO1xuICAgfTtcbiAgIGIyRGlzdGFuY2VQcm94eS5iMkRpc3RhbmNlUHJveHkgPSBmdW5jdGlvbiAoKSB7fTtcbiAgIGIyRGlzdGFuY2VQcm94eS5wcm90b3R5cGUuU2V0ID0gZnVuY3Rpb24gKHNoYXBlKSB7XG4gICAgICBzd2l0Y2ggKHNoYXBlLkdldFR5cGUoKSkge1xuICAgICAgY2FzZSBiMlNoYXBlLmVfY2lyY2xlU2hhcGU6XG4gICAgICAgICB7XG4gICAgICAgICAgICB2YXIgY2lyY2xlID0gKHNoYXBlIGluc3RhbmNlb2YgYjJDaXJjbGVTaGFwZSA/IHNoYXBlIDogbnVsbCk7XG4gICAgICAgICAgICB0aGlzLm1fdmVydGljZXMgPSBuZXcgVmVjdG9yKDEsIHRydWUpO1xuICAgICAgICAgICAgdGhpcy5tX3ZlcnRpY2VzWzBdID0gY2lyY2xlLm1fcDtcbiAgICAgICAgICAgIHRoaXMubV9jb3VudCA9IDE7XG4gICAgICAgICAgICB0aGlzLm1fcmFkaXVzID0gY2lyY2xlLm1fcmFkaXVzO1xuICAgICAgICAgfVxuICAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIGIyU2hhcGUuZV9wb2x5Z29uU2hhcGU6XG4gICAgICAgICB7XG4gICAgICAgICAgICB2YXIgcG9seWdvbiA9IChzaGFwZSBpbnN0YW5jZW9mIGIyUG9seWdvblNoYXBlID8gc2hhcGUgOiBudWxsKTtcbiAgICAgICAgICAgIHRoaXMubV92ZXJ0aWNlcyA9IHBvbHlnb24ubV92ZXJ0aWNlcztcbiAgICAgICAgICAgIHRoaXMubV9jb3VudCA9IHBvbHlnb24ubV92ZXJ0ZXhDb3VudDtcbiAgICAgICAgICAgIHRoaXMubV9yYWRpdXMgPSBwb2x5Z29uLm1fcmFkaXVzO1xuICAgICAgICAgfVxuICAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICAgYjJTZXR0aW5ncy5iMkFzc2VydChmYWxzZSk7XG4gICAgICB9XG4gICB9XG4gICBiMkRpc3RhbmNlUHJveHkucHJvdG90eXBlLkdldFN1cHBvcnQgPSBmdW5jdGlvbiAoZCkge1xuICAgICAgdmFyIGJlc3RJbmRleCA9IDA7XG4gICAgICB2YXIgYmVzdFZhbHVlID0gdGhpcy5tX3ZlcnRpY2VzWzBdLnggKiBkLnggKyB0aGlzLm1fdmVydGljZXNbMF0ueSAqIGQueTtcbiAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgdGhpcy5tX2NvdW50OyArK2kpIHtcbiAgICAgICAgIHZhciB2YWx1ZSA9IHRoaXMubV92ZXJ0aWNlc1tpXS54ICogZC54ICsgdGhpcy5tX3ZlcnRpY2VzW2ldLnkgKiBkLnk7XG4gICAgICAgICBpZiAodmFsdWUgPiBiZXN0VmFsdWUpIHtcbiAgICAgICAgICAgIGJlc3RJbmRleCA9IGk7XG4gICAgICAgICAgICBiZXN0VmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBiZXN0SW5kZXg7XG4gICB9XG4gICBiMkRpc3RhbmNlUHJveHkucHJvdG90eXBlLkdldFN1cHBvcnRWZXJ0ZXggPSBmdW5jdGlvbiAoZCkge1xuICAgICAgdmFyIGJlc3RJbmRleCA9IDA7XG4gICAgICB2YXIgYmVzdFZhbHVlID0gdGhpcy5tX3ZlcnRpY2VzWzBdLnggKiBkLnggKyB0aGlzLm1fdmVydGljZXNbMF0ueSAqIGQueTtcbiAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgdGhpcy5tX2NvdW50OyArK2kpIHtcbiAgICAgICAgIHZhciB2YWx1ZSA9IHRoaXMubV92ZXJ0aWNlc1tpXS54ICogZC54ICsgdGhpcy5tX3ZlcnRpY2VzW2ldLnkgKiBkLnk7XG4gICAgICAgICBpZiAodmFsdWUgPiBiZXN0VmFsdWUpIHtcbiAgICAgICAgICAgIGJlc3RJbmRleCA9IGk7XG4gICAgICAgICAgICBiZXN0VmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLm1fdmVydGljZXNbYmVzdEluZGV4XTtcbiAgIH1cbiAgIGIyRGlzdGFuY2VQcm94eS5wcm90b3R5cGUuR2V0VmVydGV4Q291bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5tX2NvdW50O1xuICAgfVxuICAgYjJEaXN0YW5jZVByb3h5LnByb3RvdHlwZS5HZXRWZXJ0ZXggPSBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICAgIGlmIChpbmRleCA9PT0gdW5kZWZpbmVkKSBpbmRleCA9IDA7XG4gICAgICBiMlNldHRpbmdzLmIyQXNzZXJ0KDAgPD0gaW5kZXggJiYgaW5kZXggPCB0aGlzLm1fY291bnQpO1xuICAgICAgcmV0dXJuIHRoaXMubV92ZXJ0aWNlc1tpbmRleF07XG4gICB9XG4gICBiMkR5bmFtaWNUcmVlLmIyRHluYW1pY1RyZWUgPSBmdW5jdGlvbiAoKSB7fTtcbiAgIGIyRHluYW1pY1RyZWUucHJvdG90eXBlLmIyRHluYW1pY1RyZWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLm1fcm9vdCA9IG51bGw7XG4gICAgICB0aGlzLm1fZnJlZUxpc3QgPSBudWxsO1xuICAgICAgdGhpcy5tX3BhdGggPSAwO1xuICAgICAgdGhpcy5tX2luc2VydGlvbkNvdW50ID0gMDtcbiAgIH1cbiAgIGIyRHluYW1pY1RyZWUucHJvdG90eXBlLkNyZWF0ZVByb3h5ID0gZnVuY3Rpb24gKGFhYmIsIHVzZXJEYXRhKSB7XG4gICAgICB2YXIgbm9kZSA9IHRoaXMuQWxsb2NhdGVOb2RlKCk7XG4gICAgICB2YXIgZXh0ZW5kWCA9IGIyU2V0dGluZ3MuYjJfYWFiYkV4dGVuc2lvbjtcbiAgICAgIHZhciBleHRlbmRZID0gYjJTZXR0aW5ncy5iMl9hYWJiRXh0ZW5zaW9uO1xuICAgICAgbm9kZS5hYWJiLmxvd2VyQm91bmQueCA9IGFhYmIubG93ZXJCb3VuZC54IC0gZXh0ZW5kWDtcbiAgICAgIG5vZGUuYWFiYi5sb3dlckJvdW5kLnkgPSBhYWJiLmxvd2VyQm91bmQueSAtIGV4dGVuZFk7XG4gICAgICBub2RlLmFhYmIudXBwZXJCb3VuZC54ID0gYWFiYi51cHBlckJvdW5kLnggKyBleHRlbmRYO1xuICAgICAgbm9kZS5hYWJiLnVwcGVyQm91bmQueSA9IGFhYmIudXBwZXJCb3VuZC55ICsgZXh0ZW5kWTtcbiAgICAgIG5vZGUudXNlckRhdGEgPSB1c2VyRGF0YTtcbiAgICAgIHRoaXMuSW5zZXJ0TGVhZihub2RlKTtcbiAgICAgIHJldHVybiBub2RlO1xuICAgfVxuICAgYjJEeW5hbWljVHJlZS5wcm90b3R5cGUuRGVzdHJveVByb3h5ID0gZnVuY3Rpb24gKHByb3h5KSB7XG4gICAgICB0aGlzLlJlbW92ZUxlYWYocHJveHkpO1xuICAgICAgdGhpcy5GcmVlTm9kZShwcm94eSk7XG4gICB9XG4gICBiMkR5bmFtaWNUcmVlLnByb3RvdHlwZS5Nb3ZlUHJveHkgPSBmdW5jdGlvbiAocHJveHksIGFhYmIsIGRpc3BsYWNlbWVudCkge1xuICAgICAgYjJTZXR0aW5ncy5iMkFzc2VydChwcm94eS5Jc0xlYWYoKSk7XG4gICAgICBpZiAocHJveHkuYWFiYi5Db250YWlucyhhYWJiKSkge1xuICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdGhpcy5SZW1vdmVMZWFmKHByb3h5KTtcbiAgICAgIHZhciBleHRlbmRYID0gYjJTZXR0aW5ncy5iMl9hYWJiRXh0ZW5zaW9uICsgYjJTZXR0aW5ncy5iMl9hYWJiTXVsdGlwbGllciAqIChkaXNwbGFjZW1lbnQueCA+IDAgPyBkaXNwbGFjZW1lbnQueCA6ICgtZGlzcGxhY2VtZW50LngpKTtcbiAgICAgIHZhciBleHRlbmRZID0gYjJTZXR0aW5ncy5iMl9hYWJiRXh0ZW5zaW9uICsgYjJTZXR0aW5ncy5iMl9hYWJiTXVsdGlwbGllciAqIChkaXNwbGFjZW1lbnQueSA+IDAgPyBkaXNwbGFjZW1lbnQueSA6ICgtZGlzcGxhY2VtZW50LnkpKTtcbiAgICAgIHByb3h5LmFhYmIubG93ZXJCb3VuZC54ID0gYWFiYi5sb3dlckJvdW5kLnggLSBleHRlbmRYO1xuICAgICAgcHJveHkuYWFiYi5sb3dlckJvdW5kLnkgPSBhYWJiLmxvd2VyQm91bmQueSAtIGV4dGVuZFk7XG4gICAgICBwcm94eS5hYWJiLnVwcGVyQm91bmQueCA9IGFhYmIudXBwZXJCb3VuZC54ICsgZXh0ZW5kWDtcbiAgICAgIHByb3h5LmFhYmIudXBwZXJCb3VuZC55ID0gYWFiYi51cHBlckJvdW5kLnkgKyBleHRlbmRZO1xuICAgICAgdGhpcy5JbnNlcnRMZWFmKHByb3h5KTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgfVxuICAgYjJEeW5hbWljVHJlZS5wcm90b3R5cGUuUmViYWxhbmNlID0gZnVuY3Rpb24gKGl0ZXJhdGlvbnMpIHtcbiAgICAgIGlmIChpdGVyYXRpb25zID09PSB1bmRlZmluZWQpIGl0ZXJhdGlvbnMgPSAwO1xuICAgICAgaWYgKHRoaXMubV9yb290ID09IG51bGwpIHJldHVybjtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaXRlcmF0aW9uczsgaSsrKSB7XG4gICAgICAgICB2YXIgbm9kZSA9IHRoaXMubV9yb290O1xuICAgICAgICAgdmFyIGJpdCA9IDA7XG4gICAgICAgICB3aGlsZSAobm9kZS5Jc0xlYWYoKSA9PSBmYWxzZSkge1xuICAgICAgICAgICAgbm9kZSA9ICh0aGlzLm1fcGF0aCA+PiBiaXQpICYgMSA/IG5vZGUuY2hpbGQyIDogbm9kZS5jaGlsZDE7XG4gICAgICAgICAgICBiaXQgPSAoYml0ICsgMSkgJiAzMTtcbiAgICAgICAgIH0rK3RoaXMubV9wYXRoO1xuICAgICAgICAgdGhpcy5SZW1vdmVMZWFmKG5vZGUpO1xuICAgICAgICAgdGhpcy5JbnNlcnRMZWFmKG5vZGUpO1xuICAgICAgfVxuICAgfVxuICAgYjJEeW5hbWljVHJlZS5wcm90b3R5cGUuR2V0RmF0QUFCQiA9IGZ1bmN0aW9uIChwcm94eSkge1xuICAgICAgcmV0dXJuIHByb3h5LmFhYmI7XG4gICB9XG4gICBiMkR5bmFtaWNUcmVlLnByb3RvdHlwZS5HZXRVc2VyRGF0YSA9IGZ1bmN0aW9uIChwcm94eSkge1xuICAgICAgcmV0dXJuIHByb3h5LnVzZXJEYXRhO1xuICAgfVxuICAgYjJEeW5hbWljVHJlZS5wcm90b3R5cGUuUXVlcnkgPSBmdW5jdGlvbiAoY2FsbGJhY2ssIGFhYmIpIHtcbiAgICAgIGlmICh0aGlzLm1fcm9vdCA9PSBudWxsKSByZXR1cm47XG4gICAgICB2YXIgc3RhY2sgPSBuZXcgVmVjdG9yKCk7XG4gICAgICB2YXIgY291bnQgPSAwO1xuICAgICAgc3RhY2tbY291bnQrK10gPSB0aGlzLm1fcm9vdDtcbiAgICAgIHdoaWxlIChjb3VudCA+IDApIHtcbiAgICAgICAgIHZhciBub2RlID0gc3RhY2tbLS1jb3VudF07XG4gICAgICAgICBpZiAobm9kZS5hYWJiLlRlc3RPdmVybGFwKGFhYmIpKSB7XG4gICAgICAgICAgICBpZiAobm9kZS5Jc0xlYWYoKSkge1xuICAgICAgICAgICAgICAgdmFyIHByb2NlZWQgPSBjYWxsYmFjayhub2RlKTtcbiAgICAgICAgICAgICAgIGlmICghcHJvY2VlZCkgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICBzdGFja1tjb3VudCsrXSA9IG5vZGUuY2hpbGQxO1xuICAgICAgICAgICAgICAgc3RhY2tbY291bnQrK10gPSBub2RlLmNoaWxkMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgIH1cbiAgICAgIH1cbiAgIH1cbiAgIGIyRHluYW1pY1RyZWUucHJvdG90eXBlLlJheUNhc3QgPSBmdW5jdGlvbiAoY2FsbGJhY2ssIGlucHV0KSB7XG4gICAgICBpZiAodGhpcy5tX3Jvb3QgPT0gbnVsbCkgcmV0dXJuO1xuICAgICAgdmFyIHAxID0gaW5wdXQucDE7XG4gICAgICB2YXIgcDIgPSBpbnB1dC5wMjtcbiAgICAgIHZhciByID0gYjJNYXRoLlN1YnRyYWN0VlYocDEsIHAyKTtcbiAgICAgIHIuTm9ybWFsaXplKCk7XG4gICAgICB2YXIgdiA9IGIyTWF0aC5Dcm9zc0ZWKDEuMCwgcik7XG4gICAgICB2YXIgYWJzX3YgPSBiMk1hdGguQWJzVih2KTtcbiAgICAgIHZhciBtYXhGcmFjdGlvbiA9IGlucHV0Lm1heEZyYWN0aW9uO1xuICAgICAgdmFyIHNlZ21lbnRBQUJCID0gbmV3IGIyQUFCQigpO1xuICAgICAgdmFyIHRYID0gMDtcbiAgICAgIHZhciB0WSA9IDA7IHtcbiAgICAgICAgIHRYID0gcDEueCArIG1heEZyYWN0aW9uICogKHAyLnggLSBwMS54KTtcbiAgICAgICAgIHRZID0gcDEueSArIG1heEZyYWN0aW9uICogKHAyLnkgLSBwMS55KTtcbiAgICAgICAgIHNlZ21lbnRBQUJCLmxvd2VyQm91bmQueCA9IE1hdGgubWluKHAxLngsIHRYKTtcbiAgICAgICAgIHNlZ21lbnRBQUJCLmxvd2VyQm91bmQueSA9IE1hdGgubWluKHAxLnksIHRZKTtcbiAgICAgICAgIHNlZ21lbnRBQUJCLnVwcGVyQm91bmQueCA9IE1hdGgubWF4KHAxLngsIHRYKTtcbiAgICAgICAgIHNlZ21lbnRBQUJCLnVwcGVyQm91bmQueSA9IE1hdGgubWF4KHAxLnksIHRZKTtcbiAgICAgIH1cbiAgICAgIHZhciBzdGFjayA9IG5ldyBWZWN0b3IoKTtcbiAgICAgIHZhciBjb3VudCA9IDA7XG4gICAgICBzdGFja1tjb3VudCsrXSA9IHRoaXMubV9yb290O1xuICAgICAgd2hpbGUgKGNvdW50ID4gMCkge1xuICAgICAgICAgdmFyIG5vZGUgPSBzdGFja1stLWNvdW50XTtcbiAgICAgICAgIGlmIChub2RlLmFhYmIuVGVzdE92ZXJsYXAoc2VnbWVudEFBQkIpID09IGZhbHNlKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgIH1cbiAgICAgICAgIHZhciBjID0gbm9kZS5hYWJiLkdldENlbnRlcigpO1xuICAgICAgICAgdmFyIGggPSBub2RlLmFhYmIuR2V0RXh0ZW50cygpO1xuICAgICAgICAgdmFyIHNlcGFyYXRpb24gPSBNYXRoLmFicyh2LnggKiAocDEueCAtIGMueCkgKyB2LnkgKiAocDEueSAtIGMueSkpIC0gYWJzX3YueCAqIGgueCAtIGFic192LnkgKiBoLnk7XG4gICAgICAgICBpZiAoc2VwYXJhdGlvbiA+IDAuMCkgY29udGludWU7XG4gICAgICAgICBpZiAobm9kZS5Jc0xlYWYoKSkge1xuICAgICAgICAgICAgdmFyIHN1YklucHV0ID0gbmV3IGIyUmF5Q2FzdElucHV0KCk7XG4gICAgICAgICAgICBzdWJJbnB1dC5wMSA9IGlucHV0LnAxO1xuICAgICAgICAgICAgc3ViSW5wdXQucDIgPSBpbnB1dC5wMjtcbiAgICAgICAgICAgIHN1YklucHV0Lm1heEZyYWN0aW9uID0gaW5wdXQubWF4RnJhY3Rpb247XG4gICAgICAgICAgICBtYXhGcmFjdGlvbiA9IGNhbGxiYWNrKHN1YklucHV0LCBub2RlKTtcbiAgICAgICAgICAgIGlmIChtYXhGcmFjdGlvbiA9PSAwLjApIHJldHVybjtcbiAgICAgICAgICAgIGlmIChtYXhGcmFjdGlvbiA+IDAuMCkge1xuICAgICAgICAgICAgICAgdFggPSBwMS54ICsgbWF4RnJhY3Rpb24gKiAocDIueCAtIHAxLngpO1xuICAgICAgICAgICAgICAgdFkgPSBwMS55ICsgbWF4RnJhY3Rpb24gKiAocDIueSAtIHAxLnkpO1xuICAgICAgICAgICAgICAgc2VnbWVudEFBQkIubG93ZXJCb3VuZC54ID0gTWF0aC5taW4ocDEueCwgdFgpO1xuICAgICAgICAgICAgICAgc2VnbWVudEFBQkIubG93ZXJCb3VuZC55ID0gTWF0aC5taW4ocDEueSwgdFkpO1xuICAgICAgICAgICAgICAgc2VnbWVudEFBQkIudXBwZXJCb3VuZC54ID0gTWF0aC5tYXgocDEueCwgdFgpO1xuICAgICAgICAgICAgICAgc2VnbWVudEFBQkIudXBwZXJCb3VuZC55ID0gTWF0aC5tYXgocDEueSwgdFkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgfVxuICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzdGFja1tjb3VudCsrXSA9IG5vZGUuY2hpbGQxO1xuICAgICAgICAgICAgc3RhY2tbY291bnQrK10gPSBub2RlLmNoaWxkMjtcbiAgICAgICAgIH1cbiAgICAgIH1cbiAgIH1cbiAgIGIyRHluYW1pY1RyZWUucHJvdG90eXBlLkFsbG9jYXRlTm9kZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICh0aGlzLm1fZnJlZUxpc3QpIHtcbiAgICAgICAgIHZhciBub2RlID0gdGhpcy5tX2ZyZWVMaXN0O1xuICAgICAgICAgdGhpcy5tX2ZyZWVMaXN0ID0gbm9kZS5wYXJlbnQ7XG4gICAgICAgICBub2RlLnBhcmVudCA9IG51bGw7XG4gICAgICAgICBub2RlLmNoaWxkMSA9IG51bGw7XG4gICAgICAgICBub2RlLmNoaWxkMiA9IG51bGw7XG4gICAgICAgICByZXR1cm4gbm9kZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBuZXcgYjJEeW5hbWljVHJlZU5vZGUoKTtcbiAgIH1cbiAgIGIyRHluYW1pY1RyZWUucHJvdG90eXBlLkZyZWVOb2RlID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgIG5vZGUucGFyZW50ID0gdGhpcy5tX2ZyZWVMaXN0O1xuICAgICAgdGhpcy5tX2ZyZWVMaXN0ID0gbm9kZTtcbiAgIH1cbiAgIGIyRHluYW1pY1RyZWUucHJvdG90eXBlLkluc2VydExlYWYgPSBmdW5jdGlvbiAobGVhZikge1xuICAgICAgKyt0aGlzLm1faW5zZXJ0aW9uQ291bnQ7XG4gICAgICBpZiAodGhpcy5tX3Jvb3QgPT0gbnVsbCkge1xuICAgICAgICAgdGhpcy5tX3Jvb3QgPSBsZWFmO1xuICAgICAgICAgdGhpcy5tX3Jvb3QucGFyZW50ID0gbnVsbDtcbiAgICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciBjZW50ZXIgPSBsZWFmLmFhYmIuR2V0Q2VudGVyKCk7XG4gICAgICB2YXIgc2libGluZyA9IHRoaXMubV9yb290O1xuICAgICAgaWYgKHNpYmxpbmcuSXNMZWFmKCkgPT0gZmFsc2UpIHtcbiAgICAgICAgIGRvIHtcbiAgICAgICAgICAgIHZhciBjaGlsZDEgPSBzaWJsaW5nLmNoaWxkMTtcbiAgICAgICAgICAgIHZhciBjaGlsZDIgPSBzaWJsaW5nLmNoaWxkMjtcbiAgICAgICAgICAgIHZhciBub3JtMSA9IE1hdGguYWJzKChjaGlsZDEuYWFiYi5sb3dlckJvdW5kLnggKyBjaGlsZDEuYWFiYi51cHBlckJvdW5kLngpIC8gMiAtIGNlbnRlci54KSArIE1hdGguYWJzKChjaGlsZDEuYWFiYi5sb3dlckJvdW5kLnkgKyBjaGlsZDEuYWFiYi51cHBlckJvdW5kLnkpIC8gMiAtIGNlbnRlci55KTtcbiAgICAgICAgICAgIHZhciBub3JtMiA9IE1hdGguYWJzKChjaGlsZDIuYWFiYi5sb3dlckJvdW5kLnggKyBjaGlsZDIuYWFiYi51cHBlckJvdW5kLngpIC8gMiAtIGNlbnRlci54KSArIE1hdGguYWJzKChjaGlsZDIuYWFiYi5sb3dlckJvdW5kLnkgKyBjaGlsZDIuYWFiYi51cHBlckJvdW5kLnkpIC8gMiAtIGNlbnRlci55KTtcbiAgICAgICAgICAgIGlmIChub3JtMSA8IG5vcm0yKSB7XG4gICAgICAgICAgICAgICBzaWJsaW5nID0gY2hpbGQxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICBzaWJsaW5nID0gY2hpbGQyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgfVxuICAgICAgICAgd2hpbGUgKHNpYmxpbmcuSXNMZWFmKCkgPT0gZmFsc2UpXG4gICAgICB9XG4gICAgICB2YXIgbm9kZTEgPSBzaWJsaW5nLnBhcmVudDtcbiAgICAgIHZhciBub2RlMiA9IHRoaXMuQWxsb2NhdGVOb2RlKCk7XG4gICAgICBub2RlMi5wYXJlbnQgPSBub2RlMTtcbiAgICAgIG5vZGUyLnVzZXJEYXRhID0gbnVsbDtcbiAgICAgIG5vZGUyLmFhYmIuQ29tYmluZShsZWFmLmFhYmIsIHNpYmxpbmcuYWFiYik7XG4gICAgICBpZiAobm9kZTEpIHtcbiAgICAgICAgIGlmIChzaWJsaW5nLnBhcmVudC5jaGlsZDEgPT0gc2libGluZykge1xuICAgICAgICAgICAgbm9kZTEuY2hpbGQxID0gbm9kZTI7XG4gICAgICAgICB9XG4gICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG5vZGUxLmNoaWxkMiA9IG5vZGUyO1xuICAgICAgICAgfVxuICAgICAgICAgbm9kZTIuY2hpbGQxID0gc2libGluZztcbiAgICAgICAgIG5vZGUyLmNoaWxkMiA9IGxlYWY7XG4gICAgICAgICBzaWJsaW5nLnBhcmVudCA9IG5vZGUyO1xuICAgICAgICAgbGVhZi5wYXJlbnQgPSBub2RlMjtcbiAgICAgICAgIGRvIHtcbiAgICAgICAgICAgIGlmIChub2RlMS5hYWJiLkNvbnRhaW5zKG5vZGUyLmFhYmIpKSBicmVhaztcbiAgICAgICAgICAgIG5vZGUxLmFhYmIuQ29tYmluZShub2RlMS5jaGlsZDEuYWFiYiwgbm9kZTEuY2hpbGQyLmFhYmIpO1xuICAgICAgICAgICAgbm9kZTIgPSBub2RlMTtcbiAgICAgICAgICAgIG5vZGUxID0gbm9kZTEucGFyZW50O1xuICAgICAgICAgfVxuICAgICAgICAgd2hpbGUgKG5vZGUxKVxuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgICBub2RlMi5jaGlsZDEgPSBzaWJsaW5nO1xuICAgICAgICAgbm9kZTIuY2hpbGQyID0gbGVhZjtcbiAgICAgICAgIHNpYmxpbmcucGFyZW50ID0gbm9kZTI7XG4gICAgICAgICBsZWFmLnBhcmVudCA9IG5vZGUyO1xuICAgICAgICAgdGhpcy5tX3Jvb3QgPSBub2RlMjtcbiAgICAgIH1cbiAgIH1cbiAgIGIyRHluYW1pY1RyZWUucHJvdG90eXBlLlJlbW92ZUxlYWYgPSBmdW5jdGlvbiAobGVhZikge1xuICAgICAgaWYgKGxlYWYgPT0gdGhpcy5tX3Jvb3QpIHtcbiAgICAgICAgIHRoaXMubV9yb290ID0gbnVsbDtcbiAgICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciBub2RlMiA9IGxlYWYucGFyZW50O1xuICAgICAgdmFyIG5vZGUxID0gbm9kZTIucGFyZW50O1xuICAgICAgdmFyIHNpYmxpbmc7XG4gICAgICBpZiAobm9kZTIuY2hpbGQxID09IGxlYWYpIHtcbiAgICAgICAgIHNpYmxpbmcgPSBub2RlMi5jaGlsZDI7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgIHNpYmxpbmcgPSBub2RlMi5jaGlsZDE7XG4gICAgICB9XG4gICAgICBpZiAobm9kZTEpIHtcbiAgICAgICAgIGlmIChub2RlMS5jaGlsZDEgPT0gbm9kZTIpIHtcbiAgICAgICAgICAgIG5vZGUxLmNoaWxkMSA9IHNpYmxpbmc7XG4gICAgICAgICB9XG4gICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG5vZGUxLmNoaWxkMiA9IHNpYmxpbmc7XG4gICAgICAgICB9XG4gICAgICAgICBzaWJsaW5nLnBhcmVudCA9IG5vZGUxO1xuICAgICAgICAgdGhpcy5GcmVlTm9kZShub2RlMik7XG4gICAgICAgICB3aGlsZSAobm9kZTEpIHtcbiAgICAgICAgICAgIHZhciBvbGRBQUJCID0gbm9kZTEuYWFiYjtcbiAgICAgICAgICAgIG5vZGUxLmFhYmIgPSBiMkFBQkIuQ29tYmluZShub2RlMS5jaGlsZDEuYWFiYiwgbm9kZTEuY2hpbGQyLmFhYmIpO1xuICAgICAgICAgICAgaWYgKG9sZEFBQkIuQ29udGFpbnMobm9kZTEuYWFiYikpIGJyZWFrO1xuICAgICAgICAgICAgbm9kZTEgPSBub2RlMS5wYXJlbnQ7XG4gICAgICAgICB9XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgIHRoaXMubV9yb290ID0gc2libGluZztcbiAgICAgICAgIHNpYmxpbmcucGFyZW50ID0gbnVsbDtcbiAgICAgICAgIHRoaXMuRnJlZU5vZGUobm9kZTIpO1xuICAgICAgfVxuICAgfVxuICAgYjJEeW5hbWljVHJlZUJyb2FkUGhhc2UuYjJEeW5hbWljVHJlZUJyb2FkUGhhc2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLm1fdHJlZSA9IG5ldyBiMkR5bmFtaWNUcmVlKCk7XG4gICAgICB0aGlzLm1fbW92ZUJ1ZmZlciA9IG5ldyBWZWN0b3IoKTtcbiAgICAgIHRoaXMubV9wYWlyQnVmZmVyID0gbmV3IFZlY3RvcigpO1xuICAgICAgdGhpcy5tX3BhaXJDb3VudCA9IDA7XG4gICB9O1xuICAgYjJEeW5hbWljVHJlZUJyb2FkUGhhc2UucHJvdG90eXBlLkNyZWF0ZVByb3h5ID0gZnVuY3Rpb24gKGFhYmIsIHVzZXJEYXRhKSB7XG4gICAgICB2YXIgcHJveHkgPSB0aGlzLm1fdHJlZS5DcmVhdGVQcm94eShhYWJiLCB1c2VyRGF0YSk7XG4gICAgICArK3RoaXMubV9wcm94eUNvdW50O1xuICAgICAgdGhpcy5CdWZmZXJNb3ZlKHByb3h5KTtcbiAgICAgIHJldHVybiBwcm94eTtcbiAgIH1cbiAgIGIyRHluYW1pY1RyZWVCcm9hZFBoYXNlLnByb3RvdHlwZS5EZXN0cm95UHJveHkgPSBmdW5jdGlvbiAocHJveHkpIHtcbiAgICAgIHRoaXMuVW5CdWZmZXJNb3ZlKHByb3h5KTtcbiAgICAgIC0tdGhpcy5tX3Byb3h5Q291bnQ7XG4gICAgICB0aGlzLm1fdHJlZS5EZXN0cm95UHJveHkocHJveHkpO1xuICAgfVxuICAgYjJEeW5hbWljVHJlZUJyb2FkUGhhc2UucHJvdG90eXBlLk1vdmVQcm94eSA9IGZ1bmN0aW9uIChwcm94eSwgYWFiYiwgZGlzcGxhY2VtZW50KSB7XG4gICAgICB2YXIgYnVmZmVyID0gdGhpcy5tX3RyZWUuTW92ZVByb3h5KHByb3h5LCBhYWJiLCBkaXNwbGFjZW1lbnQpO1xuICAgICAgaWYgKGJ1ZmZlcikge1xuICAgICAgICAgdGhpcy5CdWZmZXJNb3ZlKHByb3h5KTtcbiAgICAgIH1cbiAgIH1cbiAgIGIyRHluYW1pY1RyZWVCcm9hZFBoYXNlLnByb3RvdHlwZS5UZXN0T3ZlcmxhcCA9IGZ1bmN0aW9uIChwcm94eUEsIHByb3h5Qikge1xuICAgICAgdmFyIGFhYmJBID0gdGhpcy5tX3RyZWUuR2V0RmF0QUFCQihwcm94eUEpO1xuICAgICAgdmFyIGFhYmJCID0gdGhpcy5tX3RyZWUuR2V0RmF0QUFCQihwcm94eUIpO1xuICAgICAgcmV0dXJuIGFhYmJBLlRlc3RPdmVybGFwKGFhYmJCKTtcbiAgIH1cbiAgIGIyRHluYW1pY1RyZWVCcm9hZFBoYXNlLnByb3RvdHlwZS5HZXRVc2VyRGF0YSA9IGZ1bmN0aW9uIChwcm94eSkge1xuICAgICAgcmV0dXJuIHRoaXMubV90cmVlLkdldFVzZXJEYXRhKHByb3h5KTtcbiAgIH1cbiAgIGIyRHluYW1pY1RyZWVCcm9hZFBoYXNlLnByb3RvdHlwZS5HZXRGYXRBQUJCID0gZnVuY3Rpb24gKHByb3h5KSB7XG4gICAgICByZXR1cm4gdGhpcy5tX3RyZWUuR2V0RmF0QUFCQihwcm94eSk7XG4gICB9XG4gICBiMkR5bmFtaWNUcmVlQnJvYWRQaGFzZS5wcm90b3R5cGUuR2V0UHJveHlDb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzLm1fcHJveHlDb3VudDtcbiAgIH1cbiAgIGIyRHluYW1pY1RyZWVCcm9hZFBoYXNlLnByb3RvdHlwZS5VcGRhdGVQYWlycyA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgdmFyIF9fdGhpcyA9IHRoaXM7XG4gICAgICBfX3RoaXMubV9wYWlyQ291bnQgPSAwO1xuICAgICAgdmFyIGkgPSAwLFxuICAgICAgICAgcXVlcnlQcm94eTtcbiAgICAgICBmdW5jdGlvbiBRdWVyeUNhbGxiYWNrKHByb3h5KSB7XG4gICAgICAgICAgaWYgKHByb3h5ID09IHF1ZXJ5UHJveHkpIHJldHVybiB0cnVlO1xuICAgICAgICAgIGlmIChfX3RoaXMubV9wYWlyQ291bnQgPT0gX190aGlzLm1fcGFpckJ1ZmZlci5sZW5ndGgpIHtcbiAgICAgICAgICAgICBfX3RoaXMubV9wYWlyQnVmZmVyW19fdGhpcy5tX3BhaXJDb3VudF0gPSBuZXcgYjJEeW5hbWljVHJlZVBhaXIoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIHBhaXIgPSBfX3RoaXMubV9wYWlyQnVmZmVyW19fdGhpcy5tX3BhaXJDb3VudF07XG4gICAgICAgICAgcGFpci5wcm94eUEgPSBwcm94eSA8IHF1ZXJ5UHJveHkgPyBwcm94eSA6IHF1ZXJ5UHJveHk7XG4gICAgICAgICAgcGFpci5wcm94eUIgPSBwcm94eSA+PSBxdWVyeVByb3h5ID8gcHJveHkgOiBxdWVyeVByb3h5OysrX190aGlzLm1fcGFpckNvdW50O1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgIH07XG4gICAgICBmb3IgKGkgPSAwO1xuICAgICAgaSA8IF9fdGhpcy5tX21vdmVCdWZmZXIubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgIHF1ZXJ5UHJveHkgPSBfX3RoaXMubV9tb3ZlQnVmZmVyW2ldO1xuICAgICAgICAgdmFyIGZhdEFBQkIgPSBfX3RoaXMubV90cmVlLkdldEZhdEFBQkIocXVlcnlQcm94eSk7XG4gICAgICAgICBfX3RoaXMubV90cmVlLlF1ZXJ5KFF1ZXJ5Q2FsbGJhY2ssIGZhdEFBQkIpO1xuICAgICAgfVxuICAgICAgX190aGlzLm1fbW92ZUJ1ZmZlci5sZW5ndGggPSAwO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBfX3RoaXMubV9wYWlyQ291bnQ7KSB7XG4gICAgICAgICB2YXIgcHJpbWFyeVBhaXIgPSBfX3RoaXMubV9wYWlyQnVmZmVyW2ldO1xuICAgICAgICAgdmFyIHVzZXJEYXRhQSA9IF9fdGhpcy5tX3RyZWUuR2V0VXNlckRhdGEocHJpbWFyeVBhaXIucHJveHlBKTtcbiAgICAgICAgIHZhciB1c2VyRGF0YUIgPSBfX3RoaXMubV90cmVlLkdldFVzZXJEYXRhKHByaW1hcnlQYWlyLnByb3h5Qik7XG4gICAgICAgICBjYWxsYmFjayh1c2VyRGF0YUEsIHVzZXJEYXRhQik7XG4gICAgICAgICArK2k7XG4gICAgICAgICB3aGlsZSAoaSA8IF9fdGhpcy5tX3BhaXJDb3VudCkge1xuICAgICAgICAgICAgdmFyIHBhaXIgPSBfX3RoaXMubV9wYWlyQnVmZmVyW2ldO1xuICAgICAgICAgICAgaWYgKHBhaXIucHJveHlBICE9IHByaW1hcnlQYWlyLnByb3h5QSB8fCBwYWlyLnByb3h5QiAhPSBwcmltYXJ5UGFpci5wcm94eUIpIHtcbiAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfSsraTtcbiAgICAgICAgIH1cbiAgICAgIH1cbiAgIH1cbiAgIGIyRHluYW1pY1RyZWVCcm9hZFBoYXNlLnByb3RvdHlwZS5RdWVyeSA9IGZ1bmN0aW9uIChjYWxsYmFjaywgYWFiYikge1xuICAgICAgdGhpcy5tX3RyZWUuUXVlcnkoY2FsbGJhY2ssIGFhYmIpO1xuICAgfVxuICAgYjJEeW5hbWljVHJlZUJyb2FkUGhhc2UucHJvdG90eXBlLlJheUNhc3QgPSBmdW5jdGlvbiAoY2FsbGJhY2ssIGlucHV0KSB7XG4gICAgICB0aGlzLm1fdHJlZS5SYXlDYXN0KGNhbGxiYWNrLCBpbnB1dCk7XG4gICB9XG4gICBiMkR5bmFtaWNUcmVlQnJvYWRQaGFzZS5wcm90b3R5cGUuVmFsaWRhdGUgPSBmdW5jdGlvbiAoKSB7fVxuICAgYjJEeW5hbWljVHJlZUJyb2FkUGhhc2UucHJvdG90eXBlLlJlYmFsYW5jZSA9IGZ1bmN0aW9uIChpdGVyYXRpb25zKSB7XG4gICAgICBpZiAoaXRlcmF0aW9ucyA9PT0gdW5kZWZpbmVkKSBpdGVyYXRpb25zID0gMDtcbiAgICAgIHRoaXMubV90cmVlLlJlYmFsYW5jZShpdGVyYXRpb25zKTtcbiAgIH1cbiAgIGIyRHluYW1pY1RyZWVCcm9hZFBoYXNlLnByb3RvdHlwZS5CdWZmZXJNb3ZlID0gZnVuY3Rpb24gKHByb3h5KSB7XG4gICAgICB0aGlzLm1fbW92ZUJ1ZmZlclt0aGlzLm1fbW92ZUJ1ZmZlci5sZW5ndGhdID0gcHJveHk7XG4gICB9XG4gICBiMkR5bmFtaWNUcmVlQnJvYWRQaGFzZS5wcm90b3R5cGUuVW5CdWZmZXJNb3ZlID0gZnVuY3Rpb24gKHByb3h5KSB7XG4gICAgICB2YXIgaSA9IHBhcnNlSW50KHRoaXMubV9tb3ZlQnVmZmVyLmluZGV4T2YocHJveHkpKTtcbiAgICAgIHRoaXMubV9tb3ZlQnVmZmVyLnNwbGljZShpLCAxKTtcbiAgIH1cbiAgIGIyRHluYW1pY1RyZWVCcm9hZFBoYXNlLnByb3RvdHlwZS5Db21wYXJlUGFpcnMgPSBmdW5jdGlvbiAocGFpcjEsIHBhaXIyKSB7XG4gICAgICByZXR1cm4gMDtcbiAgIH1cbiAgIGIyRHluYW1pY1RyZWVCcm9hZFBoYXNlLl9faW1wbGVtZW50cyA9IHt9O1xuICAgYjJEeW5hbWljVHJlZUJyb2FkUGhhc2UuX19pbXBsZW1lbnRzW0lCcm9hZFBoYXNlXSA9IHRydWU7XG4gICBiMkR5bmFtaWNUcmVlTm9kZS5iMkR5bmFtaWNUcmVlTm9kZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMuYWFiYiA9IG5ldyBiMkFBQkIoKTtcbiAgIH07XG4gICBiMkR5bmFtaWNUcmVlTm9kZS5wcm90b3R5cGUuSXNMZWFmID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMuY2hpbGQxID09IG51bGw7XG4gICB9XG4gICBiMkR5bmFtaWNUcmVlUGFpci5iMkR5bmFtaWNUcmVlUGFpciA9IGZ1bmN0aW9uICgpIHt9O1xuICAgYjJNYW5pZm9sZC5iMk1hbmlmb2xkID0gZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcy5tX3BvaW50Q291bnQgPSAwO1xuICAgfTtcbiAgIGIyTWFuaWZvbGQucHJvdG90eXBlLmIyTWFuaWZvbGQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLm1fcG9pbnRzID0gbmV3IFZlY3RvcihiMlNldHRpbmdzLmIyX21heE1hbmlmb2xkUG9pbnRzKTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYjJTZXR0aW5ncy5iMl9tYXhNYW5pZm9sZFBvaW50czsgaSsrKSB7XG4gICAgICAgICB0aGlzLm1fcG9pbnRzW2ldID0gbmV3IGIyTWFuaWZvbGRQb2ludCgpO1xuICAgICAgfVxuICAgICAgdGhpcy5tX2xvY2FsUGxhbmVOb3JtYWwgPSBuZXcgYjJWZWMyKCk7XG4gICAgICB0aGlzLm1fbG9jYWxQb2ludCA9IG5ldyBiMlZlYzIoKTtcbiAgIH1cbiAgIGIyTWFuaWZvbGQucHJvdG90eXBlLlJlc2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBiMlNldHRpbmdzLmIyX21heE1hbmlmb2xkUG9pbnRzOyBpKyspIHtcbiAgICAgICAgICgodGhpcy5tX3BvaW50c1tpXSBpbnN0YW5jZW9mIGIyTWFuaWZvbGRQb2ludCA/IHRoaXMubV9wb2ludHNbaV0gOiBudWxsKSkuUmVzZXQoKTtcbiAgICAgIH1cbiAgICAgIHRoaXMubV9sb2NhbFBsYW5lTm9ybWFsLlNldFplcm8oKTtcbiAgICAgIHRoaXMubV9sb2NhbFBvaW50LlNldFplcm8oKTtcbiAgICAgIHRoaXMubV90eXBlID0gMDtcbiAgICAgIHRoaXMubV9wb2ludENvdW50ID0gMDtcbiAgIH1cbiAgIGIyTWFuaWZvbGQucHJvdG90eXBlLlNldCA9IGZ1bmN0aW9uIChtKSB7XG4gICAgICB0aGlzLm1fcG9pbnRDb3VudCA9IG0ubV9wb2ludENvdW50O1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBiMlNldHRpbmdzLmIyX21heE1hbmlmb2xkUG9pbnRzOyBpKyspIHtcbiAgICAgICAgICgodGhpcy5tX3BvaW50c1tpXSBpbnN0YW5jZW9mIGIyTWFuaWZvbGRQb2ludCA/IHRoaXMubV9wb2ludHNbaV0gOiBudWxsKSkuU2V0KG0ubV9wb2ludHNbaV0pO1xuICAgICAgfVxuICAgICAgdGhpcy5tX2xvY2FsUGxhbmVOb3JtYWwuU2V0VihtLm1fbG9jYWxQbGFuZU5vcm1hbCk7XG4gICAgICB0aGlzLm1fbG9jYWxQb2ludC5TZXRWKG0ubV9sb2NhbFBvaW50KTtcbiAgICAgIHRoaXMubV90eXBlID0gbS5tX3R5cGU7XG4gICB9XG4gICBiMk1hbmlmb2xkLnByb3RvdHlwZS5Db3B5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGNvcHkgPSBuZXcgYjJNYW5pZm9sZCgpO1xuICAgICAgY29weS5TZXQodGhpcyk7XG4gICAgICByZXR1cm4gY29weTtcbiAgIH1cbiAgIEJveDJELnBvc3REZWZzLnB1c2goZnVuY3Rpb24gKCkge1xuICAgICAgQm94MkQuQ29sbGlzaW9uLmIyTWFuaWZvbGQuZV9jaXJjbGVzID0gMHgwMDAxO1xuICAgICAgQm94MkQuQ29sbGlzaW9uLmIyTWFuaWZvbGQuZV9mYWNlQSA9IDB4MDAwMjtcbiAgICAgIEJveDJELkNvbGxpc2lvbi5iMk1hbmlmb2xkLmVfZmFjZUIgPSAweDAwMDQ7XG4gICB9KTtcbiAgIGIyTWFuaWZvbGRQb2ludC5iMk1hbmlmb2xkUG9pbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLm1fbG9jYWxQb2ludCA9IG5ldyBiMlZlYzIoKTtcbiAgICAgIHRoaXMubV9pZCA9IG5ldyBiMkNvbnRhY3RJRCgpO1xuICAgfTtcbiAgIGIyTWFuaWZvbGRQb2ludC5wcm90b3R5cGUuYjJNYW5pZm9sZFBvaW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcy5SZXNldCgpO1xuICAgfVxuICAgYjJNYW5pZm9sZFBvaW50LnByb3RvdHlwZS5SZXNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMubV9sb2NhbFBvaW50LlNldFplcm8oKTtcbiAgICAgIHRoaXMubV9ub3JtYWxJbXB1bHNlID0gMC4wO1xuICAgICAgdGhpcy5tX3RhbmdlbnRJbXB1bHNlID0gMC4wO1xuICAgICAgdGhpcy5tX2lkLmtleSA9IDA7XG4gICB9XG4gICBiMk1hbmlmb2xkUG9pbnQucHJvdG90eXBlLlNldCA9IGZ1bmN0aW9uIChtKSB7XG4gICAgICB0aGlzLm1fbG9jYWxQb2ludC5TZXRWKG0ubV9sb2NhbFBvaW50KTtcbiAgICAgIHRoaXMubV9ub3JtYWxJbXB1bHNlID0gbS5tX25vcm1hbEltcHVsc2U7XG4gICAgICB0aGlzLm1fdGFuZ2VudEltcHVsc2UgPSBtLm1fdGFuZ2VudEltcHVsc2U7XG4gICAgICB0aGlzLm1faWQuU2V0KG0ubV9pZCk7XG4gICB9XG4gICBiMlBvaW50LmIyUG9pbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLnAgPSBuZXcgYjJWZWMyKCk7XG4gICB9O1xuICAgYjJQb2ludC5wcm90b3R5cGUuU3VwcG9ydCA9IGZ1bmN0aW9uICh4ZiwgdlgsIHZZKSB7XG4gICAgICBpZiAodlggPT09IHVuZGVmaW5lZCkgdlggPSAwO1xuICAgICAgaWYgKHZZID09PSB1bmRlZmluZWQpIHZZID0gMDtcbiAgICAgIHJldHVybiB0aGlzLnA7XG4gICB9XG4gICBiMlBvaW50LnByb3RvdHlwZS5HZXRGaXJzdFZlcnRleCA9IGZ1bmN0aW9uICh4Zikge1xuICAgICAgcmV0dXJuIHRoaXMucDtcbiAgIH1cbiAgIGIyUmF5Q2FzdElucHV0LmIyUmF5Q2FzdElucHV0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcy5wMSA9IG5ldyBiMlZlYzIoKTtcbiAgICAgIHRoaXMucDIgPSBuZXcgYjJWZWMyKCk7XG4gICB9O1xuICAgYjJSYXlDYXN0SW5wdXQucHJvdG90eXBlLmIyUmF5Q2FzdElucHV0ID0gZnVuY3Rpb24gKHAxLCBwMiwgbWF4RnJhY3Rpb24pIHtcbiAgICAgIGlmIChwMSA9PT0gdW5kZWZpbmVkKSBwMSA9IG51bGw7XG4gICAgICBpZiAocDIgPT09IHVuZGVmaW5lZCkgcDIgPSBudWxsO1xuICAgICAgaWYgKG1heEZyYWN0aW9uID09PSB1bmRlZmluZWQpIG1heEZyYWN0aW9uID0gMTtcbiAgICAgIGlmIChwMSkgdGhpcy5wMS5TZXRWKHAxKTtcbiAgICAgIGlmIChwMikgdGhpcy5wMi5TZXRWKHAyKTtcbiAgICAgIHRoaXMubWF4RnJhY3Rpb24gPSBtYXhGcmFjdGlvbjtcbiAgIH1cbiAgIGIyUmF5Q2FzdE91dHB1dC5iMlJheUNhc3RPdXRwdXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLm5vcm1hbCA9IG5ldyBiMlZlYzIoKTtcbiAgIH07XG4gICBiMlNlZ21lbnQuYjJTZWdtZW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcy5wMSA9IG5ldyBiMlZlYzIoKTtcbiAgICAgIHRoaXMucDIgPSBuZXcgYjJWZWMyKCk7XG4gICB9O1xuICAgYjJTZWdtZW50LnByb3RvdHlwZS5UZXN0U2VnbWVudCA9IGZ1bmN0aW9uIChsYW1iZGEsIG5vcm1hbCwgc2VnbWVudCwgbWF4TGFtYmRhKSB7XG4gICAgICBpZiAobWF4TGFtYmRhID09PSB1bmRlZmluZWQpIG1heExhbWJkYSA9IDA7XG4gICAgICB2YXIgcyA9IHNlZ21lbnQucDE7XG4gICAgICB2YXIgclggPSBzZWdtZW50LnAyLnggLSBzLng7XG4gICAgICB2YXIgclkgPSBzZWdtZW50LnAyLnkgLSBzLnk7XG4gICAgICB2YXIgZFggPSB0aGlzLnAyLnggLSB0aGlzLnAxLng7XG4gICAgICB2YXIgZFkgPSB0aGlzLnAyLnkgLSB0aGlzLnAxLnk7XG4gICAgICB2YXIgblggPSBkWTtcbiAgICAgIHZhciBuWSA9ICgtZFgpO1xuICAgICAgdmFyIGtfc2xvcCA9IDEwMC4wICogTnVtYmVyLk1JTl9WQUxVRTtcbiAgICAgIHZhciBkZW5vbSA9ICgtKHJYICogblggKyByWSAqIG5ZKSk7XG4gICAgICBpZiAoZGVub20gPiBrX3Nsb3ApIHtcbiAgICAgICAgIHZhciBiWCA9IHMueCAtIHRoaXMucDEueDtcbiAgICAgICAgIHZhciBiWSA9IHMueSAtIHRoaXMucDEueTtcbiAgICAgICAgIHZhciBhID0gKGJYICogblggKyBiWSAqIG5ZKTtcbiAgICAgICAgIGlmICgwLjAgPD0gYSAmJiBhIDw9IG1heExhbWJkYSAqIGRlbm9tKSB7XG4gICAgICAgICAgICB2YXIgbXUyID0gKC1yWCAqIGJZKSArIHJZICogYlg7XG4gICAgICAgICAgICBpZiAoKC1rX3Nsb3AgKiBkZW5vbSkgPD0gbXUyICYmIG11MiA8PSBkZW5vbSAqICgxLjAgKyBrX3Nsb3ApKSB7XG4gICAgICAgICAgICAgICBhIC89IGRlbm9tO1xuICAgICAgICAgICAgICAgdmFyIG5MZW4gPSBNYXRoLnNxcnQoblggKiBuWCArIG5ZICogblkpO1xuICAgICAgICAgICAgICAgblggLz0gbkxlbjtcbiAgICAgICAgICAgICAgIG5ZIC89IG5MZW47XG4gICAgICAgICAgICAgICBsYW1iZGFbMF0gPSBhO1xuICAgICAgICAgICAgICAgbm9ybWFsLlNldChuWCwgblkpO1xuICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICB9XG4gICBiMlNlZ21lbnQucHJvdG90eXBlLkV4dGVuZCA9IGZ1bmN0aW9uIChhYWJiKSB7XG4gICAgICB0aGlzLkV4dGVuZEZvcndhcmQoYWFiYik7XG4gICAgICB0aGlzLkV4dGVuZEJhY2t3YXJkKGFhYmIpO1xuICAgfVxuICAgYjJTZWdtZW50LnByb3RvdHlwZS5FeHRlbmRGb3J3YXJkID0gZnVuY3Rpb24gKGFhYmIpIHtcbiAgICAgIHZhciBkWCA9IHRoaXMucDIueCAtIHRoaXMucDEueDtcbiAgICAgIHZhciBkWSA9IHRoaXMucDIueSAtIHRoaXMucDEueTtcbiAgICAgIHZhciBsYW1iZGEgPSBNYXRoLm1pbihkWCA+IDAgPyAoYWFiYi51cHBlckJvdW5kLnggLSB0aGlzLnAxLngpIC8gZFggOiBkWCA8IDAgPyAoYWFiYi5sb3dlckJvdW5kLnggLSB0aGlzLnAxLngpIC8gZFggOiBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFksXG4gICAgICBkWSA+IDAgPyAoYWFiYi51cHBlckJvdW5kLnkgLSB0aGlzLnAxLnkpIC8gZFkgOiBkWSA8IDAgPyAoYWFiYi5sb3dlckJvdW5kLnkgLSB0aGlzLnAxLnkpIC8gZFkgOiBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFkpO1xuICAgICAgdGhpcy5wMi54ID0gdGhpcy5wMS54ICsgZFggKiBsYW1iZGE7XG4gICAgICB0aGlzLnAyLnkgPSB0aGlzLnAxLnkgKyBkWSAqIGxhbWJkYTtcbiAgIH1cbiAgIGIyU2VnbWVudC5wcm90b3R5cGUuRXh0ZW5kQmFja3dhcmQgPSBmdW5jdGlvbiAoYWFiYikge1xuICAgICAgdmFyIGRYID0gKC10aGlzLnAyLngpICsgdGhpcy5wMS54O1xuICAgICAgdmFyIGRZID0gKC10aGlzLnAyLnkpICsgdGhpcy5wMS55O1xuICAgICAgdmFyIGxhbWJkYSA9IE1hdGgubWluKGRYID4gMCA/IChhYWJiLnVwcGVyQm91bmQueCAtIHRoaXMucDIueCkgLyBkWCA6IGRYIDwgMCA/IChhYWJiLmxvd2VyQm91bmQueCAtIHRoaXMucDIueCkgLyBkWCA6IE51bWJlci5QT1NJVElWRV9JTkZJTklUWSxcbiAgICAgIGRZID4gMCA/IChhYWJiLnVwcGVyQm91bmQueSAtIHRoaXMucDIueSkgLyBkWSA6IGRZIDwgMCA/IChhYWJiLmxvd2VyQm91bmQueSAtIHRoaXMucDIueSkgLyBkWSA6IE51bWJlci5QT1NJVElWRV9JTkZJTklUWSk7XG4gICAgICB0aGlzLnAxLnggPSB0aGlzLnAyLnggKyBkWCAqIGxhbWJkYTtcbiAgICAgIHRoaXMucDEueSA9IHRoaXMucDIueSArIGRZICogbGFtYmRhO1xuICAgfVxuICAgYjJTZXBhcmF0aW9uRnVuY3Rpb24uYjJTZXBhcmF0aW9uRnVuY3Rpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLm1fbG9jYWxQb2ludCA9IG5ldyBiMlZlYzIoKTtcbiAgICAgIHRoaXMubV9heGlzID0gbmV3IGIyVmVjMigpO1xuICAgfTtcbiAgIGIyU2VwYXJhdGlvbkZ1bmN0aW9uLnByb3RvdHlwZS5Jbml0aWFsaXplID0gZnVuY3Rpb24gKGNhY2hlLCBwcm94eUEsIHRyYW5zZm9ybUEsIHByb3h5QiwgdHJhbnNmb3JtQikge1xuICAgICAgdGhpcy5tX3Byb3h5QSA9IHByb3h5QTtcbiAgICAgIHRoaXMubV9wcm94eUIgPSBwcm94eUI7XG4gICAgICB2YXIgY291bnQgPSBwYXJzZUludChjYWNoZS5jb3VudCk7XG4gICAgICBiMlNldHRpbmdzLmIyQXNzZXJ0KDAgPCBjb3VudCAmJiBjb3VudCA8IDMpO1xuICAgICAgdmFyIGxvY2FsUG9pbnRBO1xuICAgICAgdmFyIGxvY2FsUG9pbnRBMTtcbiAgICAgIHZhciBsb2NhbFBvaW50QTI7XG4gICAgICB2YXIgbG9jYWxQb2ludEI7XG4gICAgICB2YXIgbG9jYWxQb2ludEIxO1xuICAgICAgdmFyIGxvY2FsUG9pbnRCMjtcbiAgICAgIHZhciBwb2ludEFYID0gMDtcbiAgICAgIHZhciBwb2ludEFZID0gMDtcbiAgICAgIHZhciBwb2ludEJYID0gMDtcbiAgICAgIHZhciBwb2ludEJZID0gMDtcbiAgICAgIHZhciBub3JtYWxYID0gMDtcbiAgICAgIHZhciBub3JtYWxZID0gMDtcbiAgICAgIHZhciB0TWF0O1xuICAgICAgdmFyIHRWZWM7XG4gICAgICB2YXIgcyA9IDA7XG4gICAgICB2YXIgc2duID0gMDtcbiAgICAgIGlmIChjb3VudCA9PSAxKSB7XG4gICAgICAgICB0aGlzLm1fdHlwZSA9IGIyU2VwYXJhdGlvbkZ1bmN0aW9uLmVfcG9pbnRzO1xuICAgICAgICAgbG9jYWxQb2ludEEgPSB0aGlzLm1fcHJveHlBLkdldFZlcnRleChjYWNoZS5pbmRleEFbMF0pO1xuICAgICAgICAgbG9jYWxQb2ludEIgPSB0aGlzLm1fcHJveHlCLkdldFZlcnRleChjYWNoZS5pbmRleEJbMF0pO1xuICAgICAgICAgdFZlYyA9IGxvY2FsUG9pbnRBO1xuICAgICAgICAgdE1hdCA9IHRyYW5zZm9ybUEuUjtcbiAgICAgICAgIHBvaW50QVggPSB0cmFuc2Zvcm1BLnBvc2l0aW9uLnggKyAodE1hdC5jb2wxLnggKiB0VmVjLnggKyB0TWF0LmNvbDIueCAqIHRWZWMueSk7XG4gICAgICAgICBwb2ludEFZID0gdHJhbnNmb3JtQS5wb3NpdGlvbi55ICsgKHRNYXQuY29sMS55ICogdFZlYy54ICsgdE1hdC5jb2wyLnkgKiB0VmVjLnkpO1xuICAgICAgICAgdFZlYyA9IGxvY2FsUG9pbnRCO1xuICAgICAgICAgdE1hdCA9IHRyYW5zZm9ybUIuUjtcbiAgICAgICAgIHBvaW50QlggPSB0cmFuc2Zvcm1CLnBvc2l0aW9uLnggKyAodE1hdC5jb2wxLnggKiB0VmVjLnggKyB0TWF0LmNvbDIueCAqIHRWZWMueSk7XG4gICAgICAgICBwb2ludEJZID0gdHJhbnNmb3JtQi5wb3NpdGlvbi55ICsgKHRNYXQuY29sMS55ICogdFZlYy54ICsgdE1hdC5jb2wyLnkgKiB0VmVjLnkpO1xuICAgICAgICAgdGhpcy5tX2F4aXMueCA9IHBvaW50QlggLSBwb2ludEFYO1xuICAgICAgICAgdGhpcy5tX2F4aXMueSA9IHBvaW50QlkgLSBwb2ludEFZO1xuICAgICAgICAgdGhpcy5tX2F4aXMuTm9ybWFsaXplKCk7XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChjYWNoZS5pbmRleEJbMF0gPT0gY2FjaGUuaW5kZXhCWzFdKSB7XG4gICAgICAgICB0aGlzLm1fdHlwZSA9IGIyU2VwYXJhdGlvbkZ1bmN0aW9uLmVfZmFjZUE7XG4gICAgICAgICBsb2NhbFBvaW50QTEgPSB0aGlzLm1fcHJveHlBLkdldFZlcnRleChjYWNoZS5pbmRleEFbMF0pO1xuICAgICAgICAgbG9jYWxQb2ludEEyID0gdGhpcy5tX3Byb3h5QS5HZXRWZXJ0ZXgoY2FjaGUuaW5kZXhBWzFdKTtcbiAgICAgICAgIGxvY2FsUG9pbnRCID0gdGhpcy5tX3Byb3h5Qi5HZXRWZXJ0ZXgoY2FjaGUuaW5kZXhCWzBdKTtcbiAgICAgICAgIHRoaXMubV9sb2NhbFBvaW50LnggPSAwLjUgKiAobG9jYWxQb2ludEExLnggKyBsb2NhbFBvaW50QTIueCk7XG4gICAgICAgICB0aGlzLm1fbG9jYWxQb2ludC55ID0gMC41ICogKGxvY2FsUG9pbnRBMS55ICsgbG9jYWxQb2ludEEyLnkpO1xuICAgICAgICAgdGhpcy5tX2F4aXMgPSBiMk1hdGguQ3Jvc3NWRihiMk1hdGguU3VidHJhY3RWVihsb2NhbFBvaW50QTIsIGxvY2FsUG9pbnRBMSksIDEuMCk7XG4gICAgICAgICB0aGlzLm1fYXhpcy5Ob3JtYWxpemUoKTtcbiAgICAgICAgIHRWZWMgPSB0aGlzLm1fYXhpcztcbiAgICAgICAgIHRNYXQgPSB0cmFuc2Zvcm1BLlI7XG4gICAgICAgICBub3JtYWxYID0gdE1hdC5jb2wxLnggKiB0VmVjLnggKyB0TWF0LmNvbDIueCAqIHRWZWMueTtcbiAgICAgICAgIG5vcm1hbFkgPSB0TWF0LmNvbDEueSAqIHRWZWMueCArIHRNYXQuY29sMi55ICogdFZlYy55O1xuICAgICAgICAgdFZlYyA9IHRoaXMubV9sb2NhbFBvaW50O1xuICAgICAgICAgdE1hdCA9IHRyYW5zZm9ybUEuUjtcbiAgICAgICAgIHBvaW50QVggPSB0cmFuc2Zvcm1BLnBvc2l0aW9uLnggKyAodE1hdC5jb2wxLnggKiB0VmVjLnggKyB0TWF0LmNvbDIueCAqIHRWZWMueSk7XG4gICAgICAgICBwb2ludEFZID0gdHJhbnNmb3JtQS5wb3NpdGlvbi55ICsgKHRNYXQuY29sMS55ICogdFZlYy54ICsgdE1hdC5jb2wyLnkgKiB0VmVjLnkpO1xuICAgICAgICAgdFZlYyA9IGxvY2FsUG9pbnRCO1xuICAgICAgICAgdE1hdCA9IHRyYW5zZm9ybUIuUjtcbiAgICAgICAgIHBvaW50QlggPSB0cmFuc2Zvcm1CLnBvc2l0aW9uLnggKyAodE1hdC5jb2wxLnggKiB0VmVjLnggKyB0TWF0LmNvbDIueCAqIHRWZWMueSk7XG4gICAgICAgICBwb2ludEJZID0gdHJhbnNmb3JtQi5wb3NpdGlvbi55ICsgKHRNYXQuY29sMS55ICogdFZlYy54ICsgdE1hdC5jb2wyLnkgKiB0VmVjLnkpO1xuICAgICAgICAgcyA9IChwb2ludEJYIC0gcG9pbnRBWCkgKiBub3JtYWxYICsgKHBvaW50QlkgLSBwb2ludEFZKSAqIG5vcm1hbFk7XG4gICAgICAgICBpZiAocyA8IDAuMCkge1xuICAgICAgICAgICAgdGhpcy5tX2F4aXMuTmVnYXRpdmVTZWxmKCk7XG4gICAgICAgICB9XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChjYWNoZS5pbmRleEFbMF0gPT0gY2FjaGUuaW5kZXhBWzBdKSB7XG4gICAgICAgICB0aGlzLm1fdHlwZSA9IGIyU2VwYXJhdGlvbkZ1bmN0aW9uLmVfZmFjZUI7XG4gICAgICAgICBsb2NhbFBvaW50QjEgPSB0aGlzLm1fcHJveHlCLkdldFZlcnRleChjYWNoZS5pbmRleEJbMF0pO1xuICAgICAgICAgbG9jYWxQb2ludEIyID0gdGhpcy5tX3Byb3h5Qi5HZXRWZXJ0ZXgoY2FjaGUuaW5kZXhCWzFdKTtcbiAgICAgICAgIGxvY2FsUG9pbnRBID0gdGhpcy5tX3Byb3h5QS5HZXRWZXJ0ZXgoY2FjaGUuaW5kZXhBWzBdKTtcbiAgICAgICAgIHRoaXMubV9sb2NhbFBvaW50LnggPSAwLjUgKiAobG9jYWxQb2ludEIxLnggKyBsb2NhbFBvaW50QjIueCk7XG4gICAgICAgICB0aGlzLm1fbG9jYWxQb2ludC55ID0gMC41ICogKGxvY2FsUG9pbnRCMS55ICsgbG9jYWxQb2ludEIyLnkpO1xuICAgICAgICAgdGhpcy5tX2F4aXMgPSBiMk1hdGguQ3Jvc3NWRihiMk1hdGguU3VidHJhY3RWVihsb2NhbFBvaW50QjIsIGxvY2FsUG9pbnRCMSksIDEuMCk7XG4gICAgICAgICB0aGlzLm1fYXhpcy5Ob3JtYWxpemUoKTtcbiAgICAgICAgIHRWZWMgPSB0aGlzLm1fYXhpcztcbiAgICAgICAgIHRNYXQgPSB0cmFuc2Zvcm1CLlI7XG4gICAgICAgICBub3JtYWxYID0gdE1hdC5jb2wxLnggKiB0VmVjLnggKyB0TWF0LmNvbDIueCAqIHRWZWMueTtcbiAgICAgICAgIG5vcm1hbFkgPSB0TWF0LmNvbDEueSAqIHRWZWMueCArIHRNYXQuY29sMi55ICogdFZlYy55O1xuICAgICAgICAgdFZlYyA9IHRoaXMubV9sb2NhbFBvaW50O1xuICAgICAgICAgdE1hdCA9IHRyYW5zZm9ybUIuUjtcbiAgICAgICAgIHBvaW50QlggPSB0cmFuc2Zvcm1CLnBvc2l0aW9uLnggKyAodE1hdC5jb2wxLnggKiB0VmVjLnggKyB0TWF0LmNvbDIueCAqIHRWZWMueSk7XG4gICAgICAgICBwb2ludEJZID0gdHJhbnNmb3JtQi5wb3NpdGlvbi55ICsgKHRNYXQuY29sMS55ICogdFZlYy54ICsgdE1hdC5jb2wyLnkgKiB0VmVjLnkpO1xuICAgICAgICAgdFZlYyA9IGxvY2FsUG9pbnRBO1xuICAgICAgICAgdE1hdCA9IHRyYW5zZm9ybUEuUjtcbiAgICAgICAgIHBvaW50QVggPSB0cmFuc2Zvcm1BLnBvc2l0aW9uLnggKyAodE1hdC5jb2wxLnggKiB0VmVjLnggKyB0TWF0LmNvbDIueCAqIHRWZWMueSk7XG4gICAgICAgICBwb2ludEFZID0gdHJhbnNmb3JtQS5wb3NpdGlvbi55ICsgKHRNYXQuY29sMS55ICogdFZlYy54ICsgdE1hdC5jb2wyLnkgKiB0VmVjLnkpO1xuICAgICAgICAgcyA9IChwb2ludEFYIC0gcG9pbnRCWCkgKiBub3JtYWxYICsgKHBvaW50QVkgLSBwb2ludEJZKSAqIG5vcm1hbFk7XG4gICAgICAgICBpZiAocyA8IDAuMCkge1xuICAgICAgICAgICAgdGhpcy5tX2F4aXMuTmVnYXRpdmVTZWxmKCk7XG4gICAgICAgICB9XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgIGxvY2FsUG9pbnRBMSA9IHRoaXMubV9wcm94eUEuR2V0VmVydGV4KGNhY2hlLmluZGV4QVswXSk7XG4gICAgICAgICBsb2NhbFBvaW50QTIgPSB0aGlzLm1fcHJveHlBLkdldFZlcnRleChjYWNoZS5pbmRleEFbMV0pO1xuICAgICAgICAgbG9jYWxQb2ludEIxID0gdGhpcy5tX3Byb3h5Qi5HZXRWZXJ0ZXgoY2FjaGUuaW5kZXhCWzBdKTtcbiAgICAgICAgIGxvY2FsUG9pbnRCMiA9IHRoaXMubV9wcm94eUIuR2V0VmVydGV4KGNhY2hlLmluZGV4QlsxXSk7XG4gICAgICAgICB2YXIgcEEgPSBiMk1hdGguTXVsWCh0cmFuc2Zvcm1BLCBsb2NhbFBvaW50QSk7XG4gICAgICAgICB2YXIgZEEgPSBiMk1hdGguTXVsTVYodHJhbnNmb3JtQS5SLCBiMk1hdGguU3VidHJhY3RWVihsb2NhbFBvaW50QTIsIGxvY2FsUG9pbnRBMSkpO1xuICAgICAgICAgdmFyIHBCID0gYjJNYXRoLk11bFgodHJhbnNmb3JtQiwgbG9jYWxQb2ludEIpO1xuICAgICAgICAgdmFyIGRCID0gYjJNYXRoLk11bE1WKHRyYW5zZm9ybUIuUiwgYjJNYXRoLlN1YnRyYWN0VlYobG9jYWxQb2ludEIyLCBsb2NhbFBvaW50QjEpKTtcbiAgICAgICAgIHZhciBhID0gZEEueCAqIGRBLnggKyBkQS55ICogZEEueTtcbiAgICAgICAgIHZhciBlID0gZEIueCAqIGRCLnggKyBkQi55ICogZEIueTtcbiAgICAgICAgIHZhciByID0gYjJNYXRoLlN1YnRyYWN0VlYoZEIsIGRBKTtcbiAgICAgICAgIHZhciBjID0gZEEueCAqIHIueCArIGRBLnkgKiByLnk7XG4gICAgICAgICB2YXIgZiA9IGRCLnggKiByLnggKyBkQi55ICogci55O1xuICAgICAgICAgdmFyIGIgPSBkQS54ICogZEIueCArIGRBLnkgKiBkQi55O1xuICAgICAgICAgdmFyIGRlbm9tID0gYSAqIGUgLSBiICogYjtcbiAgICAgICAgIHMgPSAwLjA7XG4gICAgICAgICBpZiAoZGVub20gIT0gMC4wKSB7XG4gICAgICAgICAgICBzID0gYjJNYXRoLkNsYW1wKChiICogZiAtIGMgKiBlKSAvIGRlbm9tLCAwLjAsIDEuMCk7XG4gICAgICAgICB9XG4gICAgICAgICB2YXIgdCA9IChiICogcyArIGYpIC8gZTtcbiAgICAgICAgIGlmICh0IDwgMC4wKSB7XG4gICAgICAgICAgICB0ID0gMC4wO1xuICAgICAgICAgICAgcyA9IGIyTWF0aC5DbGFtcCgoYiAtIGMpIC8gYSwgMC4wLCAxLjApO1xuICAgICAgICAgfVxuICAgICAgICAgbG9jYWxQb2ludEEgPSBuZXcgYjJWZWMyKCk7XG4gICAgICAgICBsb2NhbFBvaW50QS54ID0gbG9jYWxQb2ludEExLnggKyBzICogKGxvY2FsUG9pbnRBMi54IC0gbG9jYWxQb2ludEExLngpO1xuICAgICAgICAgbG9jYWxQb2ludEEueSA9IGxvY2FsUG9pbnRBMS55ICsgcyAqIChsb2NhbFBvaW50QTIueSAtIGxvY2FsUG9pbnRBMS55KTtcbiAgICAgICAgIGxvY2FsUG9pbnRCID0gbmV3IGIyVmVjMigpO1xuICAgICAgICAgbG9jYWxQb2ludEIueCA9IGxvY2FsUG9pbnRCMS54ICsgcyAqIChsb2NhbFBvaW50QjIueCAtIGxvY2FsUG9pbnRCMS54KTtcbiAgICAgICAgIGxvY2FsUG9pbnRCLnkgPSBsb2NhbFBvaW50QjEueSArIHMgKiAobG9jYWxQb2ludEIyLnkgLSBsb2NhbFBvaW50QjEueSk7XG4gICAgICAgICBpZiAocyA9PSAwLjAgfHwgcyA9PSAxLjApIHtcbiAgICAgICAgICAgIHRoaXMubV90eXBlID0gYjJTZXBhcmF0aW9uRnVuY3Rpb24uZV9mYWNlQjtcbiAgICAgICAgICAgIHRoaXMubV9heGlzID0gYjJNYXRoLkNyb3NzVkYoYjJNYXRoLlN1YnRyYWN0VlYobG9jYWxQb2ludEIyLCBsb2NhbFBvaW50QjEpLCAxLjApO1xuICAgICAgICAgICAgdGhpcy5tX2F4aXMuTm9ybWFsaXplKCk7XG4gICAgICAgICAgICB0aGlzLm1fbG9jYWxQb2ludCA9IGxvY2FsUG9pbnRCO1xuICAgICAgICAgICAgdFZlYyA9IHRoaXMubV9heGlzO1xuICAgICAgICAgICAgdE1hdCA9IHRyYW5zZm9ybUIuUjtcbiAgICAgICAgICAgIG5vcm1hbFggPSB0TWF0LmNvbDEueCAqIHRWZWMueCArIHRNYXQuY29sMi54ICogdFZlYy55O1xuICAgICAgICAgICAgbm9ybWFsWSA9IHRNYXQuY29sMS55ICogdFZlYy54ICsgdE1hdC5jb2wyLnkgKiB0VmVjLnk7XG4gICAgICAgICAgICB0VmVjID0gdGhpcy5tX2xvY2FsUG9pbnQ7XG4gICAgICAgICAgICB0TWF0ID0gdHJhbnNmb3JtQi5SO1xuICAgICAgICAgICAgcG9pbnRCWCA9IHRyYW5zZm9ybUIucG9zaXRpb24ueCArICh0TWF0LmNvbDEueCAqIHRWZWMueCArIHRNYXQuY29sMi54ICogdFZlYy55KTtcbiAgICAgICAgICAgIHBvaW50QlkgPSB0cmFuc2Zvcm1CLnBvc2l0aW9uLnkgKyAodE1hdC5jb2wxLnkgKiB0VmVjLnggKyB0TWF0LmNvbDIueSAqIHRWZWMueSk7XG4gICAgICAgICAgICB0VmVjID0gbG9jYWxQb2ludEE7XG4gICAgICAgICAgICB0TWF0ID0gdHJhbnNmb3JtQS5SO1xuICAgICAgICAgICAgcG9pbnRBWCA9IHRyYW5zZm9ybUEucG9zaXRpb24ueCArICh0TWF0LmNvbDEueCAqIHRWZWMueCArIHRNYXQuY29sMi54ICogdFZlYy55KTtcbiAgICAgICAgICAgIHBvaW50QVkgPSB0cmFuc2Zvcm1BLnBvc2l0aW9uLnkgKyAodE1hdC5jb2wxLnkgKiB0VmVjLnggKyB0TWF0LmNvbDIueSAqIHRWZWMueSk7XG4gICAgICAgICAgICBzZ24gPSAocG9pbnRBWCAtIHBvaW50QlgpICogbm9ybWFsWCArIChwb2ludEFZIC0gcG9pbnRCWSkgKiBub3JtYWxZO1xuICAgICAgICAgICAgaWYgKHMgPCAwLjApIHtcbiAgICAgICAgICAgICAgIHRoaXMubV9heGlzLk5lZ2F0aXZlU2VsZigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgfVxuICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLm1fdHlwZSA9IGIyU2VwYXJhdGlvbkZ1bmN0aW9uLmVfZmFjZUE7XG4gICAgICAgICAgICB0aGlzLm1fYXhpcyA9IGIyTWF0aC5Dcm9zc1ZGKGIyTWF0aC5TdWJ0cmFjdFZWKGxvY2FsUG9pbnRBMiwgbG9jYWxQb2ludEExKSwgMS4wKTtcbiAgICAgICAgICAgIHRoaXMubV9sb2NhbFBvaW50ID0gbG9jYWxQb2ludEE7XG4gICAgICAgICAgICB0VmVjID0gdGhpcy5tX2F4aXM7XG4gICAgICAgICAgICB0TWF0ID0gdHJhbnNmb3JtQS5SO1xuICAgICAgICAgICAgbm9ybWFsWCA9IHRNYXQuY29sMS54ICogdFZlYy54ICsgdE1hdC5jb2wyLnggKiB0VmVjLnk7XG4gICAgICAgICAgICBub3JtYWxZID0gdE1hdC5jb2wxLnkgKiB0VmVjLnggKyB0TWF0LmNvbDIueSAqIHRWZWMueTtcbiAgICAgICAgICAgIHRWZWMgPSB0aGlzLm1fbG9jYWxQb2ludDtcbiAgICAgICAgICAgIHRNYXQgPSB0cmFuc2Zvcm1BLlI7XG4gICAgICAgICAgICBwb2ludEFYID0gdHJhbnNmb3JtQS5wb3NpdGlvbi54ICsgKHRNYXQuY29sMS54ICogdFZlYy54ICsgdE1hdC5jb2wyLnggKiB0VmVjLnkpO1xuICAgICAgICAgICAgcG9pbnRBWSA9IHRyYW5zZm9ybUEucG9zaXRpb24ueSArICh0TWF0LmNvbDEueSAqIHRWZWMueCArIHRNYXQuY29sMi55ICogdFZlYy55KTtcbiAgICAgICAgICAgIHRWZWMgPSBsb2NhbFBvaW50QjtcbiAgICAgICAgICAgIHRNYXQgPSB0cmFuc2Zvcm1CLlI7XG4gICAgICAgICAgICBwb2ludEJYID0gdHJhbnNmb3JtQi5wb3NpdGlvbi54ICsgKHRNYXQuY29sMS54ICogdFZlYy54ICsgdE1hdC5jb2wyLnggKiB0VmVjLnkpO1xuICAgICAgICAgICAgcG9pbnRCWSA9IHRyYW5zZm9ybUIucG9zaXRpb24ueSArICh0TWF0LmNvbDEueSAqIHRWZWMueCArIHRNYXQuY29sMi55ICogdFZlYy55KTtcbiAgICAgICAgICAgIHNnbiA9IChwb2ludEJYIC0gcG9pbnRBWCkgKiBub3JtYWxYICsgKHBvaW50QlkgLSBwb2ludEFZKSAqIG5vcm1hbFk7XG4gICAgICAgICAgICBpZiAocyA8IDAuMCkge1xuICAgICAgICAgICAgICAgdGhpcy5tX2F4aXMuTmVnYXRpdmVTZWxmKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICB9XG4gICAgICB9XG4gICB9XG4gICBiMlNlcGFyYXRpb25GdW5jdGlvbi5wcm90b3R5cGUuRXZhbHVhdGUgPSBmdW5jdGlvbiAodHJhbnNmb3JtQSwgdHJhbnNmb3JtQikge1xuICAgICAgdmFyIGF4aXNBO1xuICAgICAgdmFyIGF4aXNCO1xuICAgICAgdmFyIGxvY2FsUG9pbnRBO1xuICAgICAgdmFyIGxvY2FsUG9pbnRCO1xuICAgICAgdmFyIHBvaW50QTtcbiAgICAgIHZhciBwb2ludEI7XG4gICAgICB2YXIgc2VwZXJhdGlvbiA9IDA7XG4gICAgICB2YXIgbm9ybWFsO1xuICAgICAgc3dpdGNoICh0aGlzLm1fdHlwZSkge1xuICAgICAgY2FzZSBiMlNlcGFyYXRpb25GdW5jdGlvbi5lX3BvaW50czpcbiAgICAgICAgIHtcbiAgICAgICAgICAgIGF4aXNBID0gYjJNYXRoLk11bFRNVih0cmFuc2Zvcm1BLlIsIHRoaXMubV9heGlzKTtcbiAgICAgICAgICAgIGF4aXNCID0gYjJNYXRoLk11bFRNVih0cmFuc2Zvcm1CLlIsIHRoaXMubV9heGlzLkdldE5lZ2F0aXZlKCkpO1xuICAgICAgICAgICAgbG9jYWxQb2ludEEgPSB0aGlzLm1fcHJveHlBLkdldFN1cHBvcnRWZXJ0ZXgoYXhpc0EpO1xuICAgICAgICAgICAgbG9jYWxQb2ludEIgPSB0aGlzLm1fcHJveHlCLkdldFN1cHBvcnRWZXJ0ZXgoYXhpc0IpO1xuICAgICAgICAgICAgcG9pbnRBID0gYjJNYXRoLk11bFgodHJhbnNmb3JtQSwgbG9jYWxQb2ludEEpO1xuICAgICAgICAgICAgcG9pbnRCID0gYjJNYXRoLk11bFgodHJhbnNmb3JtQiwgbG9jYWxQb2ludEIpO1xuICAgICAgICAgICAgc2VwZXJhdGlvbiA9IChwb2ludEIueCAtIHBvaW50QS54KSAqIHRoaXMubV9heGlzLnggKyAocG9pbnRCLnkgLSBwb2ludEEueSkgKiB0aGlzLm1fYXhpcy55O1xuICAgICAgICAgICAgcmV0dXJuIHNlcGVyYXRpb247XG4gICAgICAgICB9XG4gICAgICBjYXNlIGIyU2VwYXJhdGlvbkZ1bmN0aW9uLmVfZmFjZUE6XG4gICAgICAgICB7XG4gICAgICAgICAgICBub3JtYWwgPSBiMk1hdGguTXVsTVYodHJhbnNmb3JtQS5SLCB0aGlzLm1fYXhpcyk7XG4gICAgICAgICAgICBwb2ludEEgPSBiMk1hdGguTXVsWCh0cmFuc2Zvcm1BLCB0aGlzLm1fbG9jYWxQb2ludCk7XG4gICAgICAgICAgICBheGlzQiA9IGIyTWF0aC5NdWxUTVYodHJhbnNmb3JtQi5SLCBub3JtYWwuR2V0TmVnYXRpdmUoKSk7XG4gICAgICAgICAgICBsb2NhbFBvaW50QiA9IHRoaXMubV9wcm94eUIuR2V0U3VwcG9ydFZlcnRleChheGlzQik7XG4gICAgICAgICAgICBwb2ludEIgPSBiMk1hdGguTXVsWCh0cmFuc2Zvcm1CLCBsb2NhbFBvaW50Qik7XG4gICAgICAgICAgICBzZXBlcmF0aW9uID0gKHBvaW50Qi54IC0gcG9pbnRBLngpICogbm9ybWFsLnggKyAocG9pbnRCLnkgLSBwb2ludEEueSkgKiBub3JtYWwueTtcbiAgICAgICAgICAgIHJldHVybiBzZXBlcmF0aW9uO1xuICAgICAgICAgfVxuICAgICAgY2FzZSBiMlNlcGFyYXRpb25GdW5jdGlvbi5lX2ZhY2VCOlxuICAgICAgICAge1xuICAgICAgICAgICAgbm9ybWFsID0gYjJNYXRoLk11bE1WKHRyYW5zZm9ybUIuUiwgdGhpcy5tX2F4aXMpO1xuICAgICAgICAgICAgcG9pbnRCID0gYjJNYXRoLk11bFgodHJhbnNmb3JtQiwgdGhpcy5tX2xvY2FsUG9pbnQpO1xuICAgICAgICAgICAgYXhpc0EgPSBiMk1hdGguTXVsVE1WKHRyYW5zZm9ybUEuUiwgbm9ybWFsLkdldE5lZ2F0aXZlKCkpO1xuICAgICAgICAgICAgbG9jYWxQb2ludEEgPSB0aGlzLm1fcHJveHlBLkdldFN1cHBvcnRWZXJ0ZXgoYXhpc0EpO1xuICAgICAgICAgICAgcG9pbnRBID0gYjJNYXRoLk11bFgodHJhbnNmb3JtQSwgbG9jYWxQb2ludEEpO1xuICAgICAgICAgICAgc2VwZXJhdGlvbiA9IChwb2ludEEueCAtIHBvaW50Qi54KSAqIG5vcm1hbC54ICsgKHBvaW50QS55IC0gcG9pbnRCLnkpICogbm9ybWFsLnk7XG4gICAgICAgICAgICByZXR1cm4gc2VwZXJhdGlvbjtcbiAgICAgICAgIH1cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgICBiMlNldHRpbmdzLmIyQXNzZXJ0KGZhbHNlKTtcbiAgICAgICAgIHJldHVybiAwLjA7XG4gICAgICB9XG4gICB9XG4gICBCb3gyRC5wb3N0RGVmcy5wdXNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIEJveDJELkNvbGxpc2lvbi5iMlNlcGFyYXRpb25GdW5jdGlvbi5lX3BvaW50cyA9IDB4MDE7XG4gICAgICBCb3gyRC5Db2xsaXNpb24uYjJTZXBhcmF0aW9uRnVuY3Rpb24uZV9mYWNlQSA9IDB4MDI7XG4gICAgICBCb3gyRC5Db2xsaXNpb24uYjJTZXBhcmF0aW9uRnVuY3Rpb24uZV9mYWNlQiA9IDB4MDQ7XG4gICB9KTtcbiAgIGIyU2ltcGxleC5iMlNpbXBsZXggPSBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLm1fdjEgPSBuZXcgYjJTaW1wbGV4VmVydGV4KCk7XG4gICAgICB0aGlzLm1fdjIgPSBuZXcgYjJTaW1wbGV4VmVydGV4KCk7XG4gICAgICB0aGlzLm1fdjMgPSBuZXcgYjJTaW1wbGV4VmVydGV4KCk7XG4gICAgICB0aGlzLm1fdmVydGljZXMgPSBuZXcgVmVjdG9yKDMpO1xuICAgfTtcbiAgIGIyU2ltcGxleC5wcm90b3R5cGUuYjJTaW1wbGV4ID0gZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcy5tX3ZlcnRpY2VzWzBdID0gdGhpcy5tX3YxO1xuICAgICAgdGhpcy5tX3ZlcnRpY2VzWzFdID0gdGhpcy5tX3YyO1xuICAgICAgdGhpcy5tX3ZlcnRpY2VzWzJdID0gdGhpcy5tX3YzO1xuICAgfVxuICAgYjJTaW1wbGV4LnByb3RvdHlwZS5SZWFkQ2FjaGUgPSBmdW5jdGlvbiAoY2FjaGUsIHByb3h5QSwgdHJhbnNmb3JtQSwgcHJveHlCLCB0cmFuc2Zvcm1CKSB7XG4gICAgICBiMlNldHRpbmdzLmIyQXNzZXJ0KDAgPD0gY2FjaGUuY291bnQgJiYgY2FjaGUuY291bnQgPD0gMyk7XG4gICAgICB2YXIgd0FMb2NhbDtcbiAgICAgIHZhciB3QkxvY2FsO1xuICAgICAgdGhpcy5tX2NvdW50ID0gY2FjaGUuY291bnQ7XG4gICAgICB2YXIgdmVydGljZXMgPSB0aGlzLm1fdmVydGljZXM7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubV9jb3VudDsgaSsrKSB7XG4gICAgICAgICB2YXIgdiA9IHZlcnRpY2VzW2ldO1xuICAgICAgICAgdi5pbmRleEEgPSBjYWNoZS5pbmRleEFbaV07XG4gICAgICAgICB2LmluZGV4QiA9IGNhY2hlLmluZGV4QltpXTtcbiAgICAgICAgIHdBTG9jYWwgPSBwcm94eUEuR2V0VmVydGV4KHYuaW5kZXhBKTtcbiAgICAgICAgIHdCTG9jYWwgPSBwcm94eUIuR2V0VmVydGV4KHYuaW5kZXhCKTtcbiAgICAgICAgIHYud0EgPSBiMk1hdGguTXVsWCh0cmFuc2Zvcm1BLCB3QUxvY2FsKTtcbiAgICAgICAgIHYud0IgPSBiMk1hdGguTXVsWCh0cmFuc2Zvcm1CLCB3QkxvY2FsKTtcbiAgICAgICAgIHYudyA9IGIyTWF0aC5TdWJ0cmFjdFZWKHYud0IsIHYud0EpO1xuICAgICAgICAgdi5hID0gMDtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLm1fY291bnQgPiAxKSB7XG4gICAgICAgICB2YXIgbWV0cmljMSA9IGNhY2hlLm1ldHJpYztcbiAgICAgICAgIHZhciBtZXRyaWMyID0gdGhpcy5HZXRNZXRyaWMoKTtcbiAgICAgICAgIGlmIChtZXRyaWMyIDwgLjUgKiBtZXRyaWMxIHx8IDIuMCAqIG1ldHJpYzEgPCBtZXRyaWMyIHx8IG1ldHJpYzIgPCBOdW1iZXIuTUlOX1ZBTFVFKSB7XG4gICAgICAgICAgICB0aGlzLm1fY291bnQgPSAwO1xuICAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHRoaXMubV9jb3VudCA9PSAwKSB7XG4gICAgICAgICB2ID0gdmVydGljZXNbMF07XG4gICAgICAgICB2LmluZGV4QSA9IDA7XG4gICAgICAgICB2LmluZGV4QiA9IDA7XG4gICAgICAgICB3QUxvY2FsID0gcHJveHlBLkdldFZlcnRleCgwKTtcbiAgICAgICAgIHdCTG9jYWwgPSBwcm94eUIuR2V0VmVydGV4KDApO1xuICAgICAgICAgdi53QSA9IGIyTWF0aC5NdWxYKHRyYW5zZm9ybUEsIHdBTG9jYWwpO1xuICAgICAgICAgdi53QiA9IGIyTWF0aC5NdWxYKHRyYW5zZm9ybUIsIHdCTG9jYWwpO1xuICAgICAgICAgdi53ID0gYjJNYXRoLlN1YnRyYWN0VlYodi53Qiwgdi53QSk7XG4gICAgICAgICB0aGlzLm1fY291bnQgPSAxO1xuICAgICAgfVxuICAgfVxuICAgYjJTaW1wbGV4LnByb3RvdHlwZS5Xcml0ZUNhY2hlID0gZnVuY3Rpb24gKGNhY2hlKSB7XG4gICAgICBjYWNoZS5tZXRyaWMgPSB0aGlzLkdldE1ldHJpYygpO1xuICAgICAgY2FjaGUuY291bnQgPSBCb3gyRC5wYXJzZVVJbnQodGhpcy5tX2NvdW50KTtcbiAgICAgIHZhciB2ZXJ0aWNlcyA9IHRoaXMubV92ZXJ0aWNlcztcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5tX2NvdW50OyBpKyspIHtcbiAgICAgICAgIGNhY2hlLmluZGV4QVtpXSA9IEJveDJELnBhcnNlVUludCh2ZXJ0aWNlc1tpXS5pbmRleEEpO1xuICAgICAgICAgY2FjaGUuaW5kZXhCW2ldID0gQm94MkQucGFyc2VVSW50KHZlcnRpY2VzW2ldLmluZGV4Qik7XG4gICAgICB9XG4gICB9XG4gICBiMlNpbXBsZXgucHJvdG90eXBlLkdldFNlYXJjaERpcmVjdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHN3aXRjaCAodGhpcy5tX2NvdW50KSB7XG4gICAgICBjYXNlIDE6XG4gICAgICAgICByZXR1cm4gdGhpcy5tX3YxLncuR2V0TmVnYXRpdmUoKTtcbiAgICAgIGNhc2UgMjpcbiAgICAgICAgIHtcbiAgICAgICAgICAgIHZhciBlMTIgPSBiMk1hdGguU3VidHJhY3RWVih0aGlzLm1fdjIudywgdGhpcy5tX3YxLncpO1xuICAgICAgICAgICAgdmFyIHNnbiA9IGIyTWF0aC5Dcm9zc1ZWKGUxMiwgdGhpcy5tX3YxLncuR2V0TmVnYXRpdmUoKSk7XG4gICAgICAgICAgICBpZiAoc2duID4gMC4wKSB7XG4gICAgICAgICAgICAgICByZXR1cm4gYjJNYXRoLkNyb3NzRlYoMS4wLCBlMTIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICByZXR1cm4gYjJNYXRoLkNyb3NzVkYoZTEyLCAxLjApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgfVxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgIGIyU2V0dGluZ3MuYjJBc3NlcnQoZmFsc2UpO1xuICAgICAgICAgcmV0dXJuIG5ldyBiMlZlYzIoKTtcbiAgICAgIH1cbiAgIH1cbiAgIGIyU2ltcGxleC5wcm90b3R5cGUuR2V0Q2xvc2VzdFBvaW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgc3dpdGNoICh0aGlzLm1fY291bnQpIHtcbiAgICAgIGNhc2UgMDpcbiAgICAgICAgIGIyU2V0dGluZ3MuYjJBc3NlcnQoZmFsc2UpO1xuICAgICAgICAgcmV0dXJuIG5ldyBiMlZlYzIoKTtcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgIHJldHVybiB0aGlzLm1fdjEudztcbiAgICAgIGNhc2UgMjpcbiAgICAgICAgIHJldHVybiBuZXcgYjJWZWMyKHRoaXMubV92MS5hICogdGhpcy5tX3YxLncueCArIHRoaXMubV92Mi5hICogdGhpcy5tX3YyLncueCwgdGhpcy5tX3YxLmEgKiB0aGlzLm1fdjEudy55ICsgdGhpcy5tX3YyLmEgKiB0aGlzLm1fdjIudy55KTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgICBiMlNldHRpbmdzLmIyQXNzZXJ0KGZhbHNlKTtcbiAgICAgICAgIHJldHVybiBuZXcgYjJWZWMyKCk7XG4gICAgICB9XG4gICB9XG4gICBiMlNpbXBsZXgucHJvdG90eXBlLkdldFdpdG5lc3NQb2ludHMgPSBmdW5jdGlvbiAocEEsIHBCKSB7XG4gICAgICBzd2l0Y2ggKHRoaXMubV9jb3VudCkge1xuICAgICAgY2FzZSAwOlxuICAgICAgICAgYjJTZXR0aW5ncy5iMkFzc2VydChmYWxzZSk7XG4gICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgIHBBLlNldFYodGhpcy5tX3YxLndBKTtcbiAgICAgICAgIHBCLlNldFYodGhpcy5tX3YxLndCKTtcbiAgICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAyOlxuICAgICAgICAgcEEueCA9IHRoaXMubV92MS5hICogdGhpcy5tX3YxLndBLnggKyB0aGlzLm1fdjIuYSAqIHRoaXMubV92Mi53QS54O1xuICAgICAgICAgcEEueSA9IHRoaXMubV92MS5hICogdGhpcy5tX3YxLndBLnkgKyB0aGlzLm1fdjIuYSAqIHRoaXMubV92Mi53QS55O1xuICAgICAgICAgcEIueCA9IHRoaXMubV92MS5hICogdGhpcy5tX3YxLndCLnggKyB0aGlzLm1fdjIuYSAqIHRoaXMubV92Mi53Qi54O1xuICAgICAgICAgcEIueSA9IHRoaXMubV92MS5hICogdGhpcy5tX3YxLndCLnkgKyB0aGlzLm1fdjIuYSAqIHRoaXMubV92Mi53Qi55O1xuICAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDM6XG4gICAgICAgICBwQi54ID0gcEEueCA9IHRoaXMubV92MS5hICogdGhpcy5tX3YxLndBLnggKyB0aGlzLm1fdjIuYSAqIHRoaXMubV92Mi53QS54ICsgdGhpcy5tX3YzLmEgKiB0aGlzLm1fdjMud0EueDtcbiAgICAgICAgIHBCLnkgPSBwQS55ID0gdGhpcy5tX3YxLmEgKiB0aGlzLm1fdjEud0EueSArIHRoaXMubV92Mi5hICogdGhpcy5tX3YyLndBLnkgKyB0aGlzLm1fdjMuYSAqIHRoaXMubV92My53QS55O1xuICAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICAgYjJTZXR0aW5ncy5iMkFzc2VydChmYWxzZSk7XG4gICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgIH1cbiAgIGIyU2ltcGxleC5wcm90b3R5cGUuR2V0TWV0cmljID0gZnVuY3Rpb24gKCkge1xuICAgICAgc3dpdGNoICh0aGlzLm1fY291bnQpIHtcbiAgICAgIGNhc2UgMDpcbiAgICAgICAgIGIyU2V0dGluZ3MuYjJBc3NlcnQoZmFsc2UpO1xuICAgICAgICAgcmV0dXJuIDAuMDtcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgIHJldHVybiAwLjA7XG4gICAgICBjYXNlIDI6XG4gICAgICAgICByZXR1cm4gYjJNYXRoLlN1YnRyYWN0VlYodGhpcy5tX3YxLncsIHRoaXMubV92Mi53KS5MZW5ndGgoKTtcbiAgICAgIGNhc2UgMzpcbiAgICAgICAgIHJldHVybiBiMk1hdGguQ3Jvc3NWVihiMk1hdGguU3VidHJhY3RWVih0aGlzLm1fdjIudywgdGhpcy5tX3YxLncpLCBiMk1hdGguU3VidHJhY3RWVih0aGlzLm1fdjMudywgdGhpcy5tX3YxLncpKTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgICBiMlNldHRpbmdzLmIyQXNzZXJ0KGZhbHNlKTtcbiAgICAgICAgIHJldHVybiAwLjA7XG4gICAgICB9XG4gICB9XG4gICBiMlNpbXBsZXgucHJvdG90eXBlLlNvbHZlMiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciB3MSA9IHRoaXMubV92MS53O1xuICAgICAgdmFyIHcyID0gdGhpcy5tX3YyLnc7XG4gICAgICB2YXIgZTEyID0gYjJNYXRoLlN1YnRyYWN0VlYodzIsIHcxKTtcbiAgICAgIHZhciBkMTJfMiA9ICgtKHcxLnggKiBlMTIueCArIHcxLnkgKiBlMTIueSkpO1xuICAgICAgaWYgKGQxMl8yIDw9IDAuMCkge1xuICAgICAgICAgdGhpcy5tX3YxLmEgPSAxLjA7XG4gICAgICAgICB0aGlzLm1fY291bnQgPSAxO1xuICAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdmFyIGQxMl8xID0gKHcyLnggKiBlMTIueCArIHcyLnkgKiBlMTIueSk7XG4gICAgICBpZiAoZDEyXzEgPD0gMC4wKSB7XG4gICAgICAgICB0aGlzLm1fdjIuYSA9IDEuMDtcbiAgICAgICAgIHRoaXMubV9jb3VudCA9IDE7XG4gICAgICAgICB0aGlzLm1fdjEuU2V0KHRoaXMubV92Mik7XG4gICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgaW52X2QxMiA9IDEuMCAvIChkMTJfMSArIGQxMl8yKTtcbiAgICAgIHRoaXMubV92MS5hID0gZDEyXzEgKiBpbnZfZDEyO1xuICAgICAgdGhpcy5tX3YyLmEgPSBkMTJfMiAqIGludl9kMTI7XG4gICAgICB0aGlzLm1fY291bnQgPSAyO1xuICAgfVxuICAgYjJTaW1wbGV4LnByb3RvdHlwZS5Tb2x2ZTMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgdzEgPSB0aGlzLm1fdjEudztcbiAgICAgIHZhciB3MiA9IHRoaXMubV92Mi53O1xuICAgICAgdmFyIHczID0gdGhpcy5tX3YzLnc7XG4gICAgICB2YXIgZTEyID0gYjJNYXRoLlN1YnRyYWN0VlYodzIsIHcxKTtcbiAgICAgIHZhciB3MWUxMiA9IGIyTWF0aC5Eb3QodzEsIGUxMik7XG4gICAgICB2YXIgdzJlMTIgPSBiMk1hdGguRG90KHcyLCBlMTIpO1xuICAgICAgdmFyIGQxMl8xID0gdzJlMTI7XG4gICAgICB2YXIgZDEyXzIgPSAoLXcxZTEyKTtcbiAgICAgIHZhciBlMTMgPSBiMk1hdGguU3VidHJhY3RWVih3MywgdzEpO1xuICAgICAgdmFyIHcxZTEzID0gYjJNYXRoLkRvdCh3MSwgZTEzKTtcbiAgICAgIHZhciB3M2UxMyA9IGIyTWF0aC5Eb3QodzMsIGUxMyk7XG4gICAgICB2YXIgZDEzXzEgPSB3M2UxMztcbiAgICAgIHZhciBkMTNfMiA9ICgtdzFlMTMpO1xuICAgICAgdmFyIGUyMyA9IGIyTWF0aC5TdWJ0cmFjdFZWKHczLCB3Mik7XG4gICAgICB2YXIgdzJlMjMgPSBiMk1hdGguRG90KHcyLCBlMjMpO1xuICAgICAgdmFyIHczZTIzID0gYjJNYXRoLkRvdCh3MywgZTIzKTtcbiAgICAgIHZhciBkMjNfMSA9IHczZTIzO1xuICAgICAgdmFyIGQyM18yID0gKC13MmUyMyk7XG4gICAgICB2YXIgbjEyMyA9IGIyTWF0aC5Dcm9zc1ZWKGUxMiwgZTEzKTtcbiAgICAgIHZhciBkMTIzXzEgPSBuMTIzICogYjJNYXRoLkNyb3NzVlYodzIsIHczKTtcbiAgICAgIHZhciBkMTIzXzIgPSBuMTIzICogYjJNYXRoLkNyb3NzVlYodzMsIHcxKTtcbiAgICAgIHZhciBkMTIzXzMgPSBuMTIzICogYjJNYXRoLkNyb3NzVlYodzEsIHcyKTtcbiAgICAgIGlmIChkMTJfMiA8PSAwLjAgJiYgZDEzXzIgPD0gMC4wKSB7XG4gICAgICAgICB0aGlzLm1fdjEuYSA9IDEuMDtcbiAgICAgICAgIHRoaXMubV9jb3VudCA9IDE7XG4gICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoZDEyXzEgPiAwLjAgJiYgZDEyXzIgPiAwLjAgJiYgZDEyM18zIDw9IDAuMCkge1xuICAgICAgICAgdmFyIGludl9kMTIgPSAxLjAgLyAoZDEyXzEgKyBkMTJfMik7XG4gICAgICAgICB0aGlzLm1fdjEuYSA9IGQxMl8xICogaW52X2QxMjtcbiAgICAgICAgIHRoaXMubV92Mi5hID0gZDEyXzIgKiBpbnZfZDEyO1xuICAgICAgICAgdGhpcy5tX2NvdW50ID0gMjtcbiAgICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChkMTNfMSA+IDAuMCAmJiBkMTNfMiA+IDAuMCAmJiBkMTIzXzIgPD0gMC4wKSB7XG4gICAgICAgICB2YXIgaW52X2QxMyA9IDEuMCAvIChkMTNfMSArIGQxM18yKTtcbiAgICAgICAgIHRoaXMubV92MS5hID0gZDEzXzEgKiBpbnZfZDEzO1xuICAgICAgICAgdGhpcy5tX3YzLmEgPSBkMTNfMiAqIGludl9kMTM7XG4gICAgICAgICB0aGlzLm1fY291bnQgPSAyO1xuICAgICAgICAgdGhpcy5tX3YyLlNldCh0aGlzLm1fdjMpO1xuICAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKGQxMl8xIDw9IDAuMCAmJiBkMjNfMiA8PSAwLjApIHtcbiAgICAgICAgIHRoaXMubV92Mi5hID0gMS4wO1xuICAgICAgICAgdGhpcy5tX2NvdW50ID0gMTtcbiAgICAgICAgIHRoaXMubV92MS5TZXQodGhpcy5tX3YyKTtcbiAgICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChkMTNfMSA8PSAwLjAgJiYgZDIzXzEgPD0gMC4wKSB7XG4gICAgICAgICB0aGlzLm1fdjMuYSA9IDEuMDtcbiAgICAgICAgIHRoaXMubV9jb3VudCA9IDE7XG4gICAgICAgICB0aGlzLm1fdjEuU2V0KHRoaXMubV92Myk7XG4gICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoZDIzXzEgPiAwLjAgJiYgZDIzXzIgPiAwLjAgJiYgZDEyM18xIDw9IDAuMCkge1xuICAgICAgICAgdmFyIGludl9kMjMgPSAxLjAgLyAoZDIzXzEgKyBkMjNfMik7XG4gICAgICAgICB0aGlzLm1fdjIuYSA9IGQyM18xICogaW52X2QyMztcbiAgICAgICAgIHRoaXMubV92My5hID0gZDIzXzIgKiBpbnZfZDIzO1xuICAgICAgICAgdGhpcy5tX2NvdW50ID0gMjtcbiAgICAgICAgIHRoaXMubV92MS5TZXQodGhpcy5tX3YzKTtcbiAgICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciBpbnZfZDEyMyA9IDEuMCAvIChkMTIzXzEgKyBkMTIzXzIgKyBkMTIzXzMpO1xuICAgICAgdGhpcy5tX3YxLmEgPSBkMTIzXzEgKiBpbnZfZDEyMztcbiAgICAgIHRoaXMubV92Mi5hID0gZDEyM18yICogaW52X2QxMjM7XG4gICAgICB0aGlzLm1fdjMuYSA9IGQxMjNfMyAqIGludl9kMTIzO1xuICAgICAgdGhpcy5tX2NvdW50ID0gMztcbiAgIH1cbiAgIGIyU2ltcGxleENhY2hlLmIyU2ltcGxleENhY2hlID0gZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcy5pbmRleEEgPSBuZXcgVmVjdG9yX2Eyal9OdW1iZXIoMyk7XG4gICAgICB0aGlzLmluZGV4QiA9IG5ldyBWZWN0b3JfYTJqX051bWJlcigzKTtcbiAgIH07XG4gICBiMlNpbXBsZXhWZXJ0ZXguYjJTaW1wbGV4VmVydGV4ID0gZnVuY3Rpb24gKCkge307XG4gICBiMlNpbXBsZXhWZXJ0ZXgucHJvdG90eXBlLlNldCA9IGZ1bmN0aW9uIChvdGhlcikge1xuICAgICAgdGhpcy53QS5TZXRWKG90aGVyLndBKTtcbiAgICAgIHRoaXMud0IuU2V0VihvdGhlci53Qik7XG4gICAgICB0aGlzLncuU2V0VihvdGhlci53KTtcbiAgICAgIHRoaXMuYSA9IG90aGVyLmE7XG4gICAgICB0aGlzLmluZGV4QSA9IG90aGVyLmluZGV4QTtcbiAgICAgIHRoaXMuaW5kZXhCID0gb3RoZXIuaW5kZXhCO1xuICAgfVxuICAgYjJUaW1lT2ZJbXBhY3QuYjJUaW1lT2ZJbXBhY3QgPSBmdW5jdGlvbiAoKSB7fTtcbiAgIGIyVGltZU9mSW1wYWN0LlRpbWVPZkltcGFjdCA9IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgKytiMlRpbWVPZkltcGFjdC5iMl90b2lDYWxscztcbiAgICAgIHZhciBwcm94eUEgPSBpbnB1dC5wcm94eUE7XG4gICAgICB2YXIgcHJveHlCID0gaW5wdXQucHJveHlCO1xuICAgICAgdmFyIHN3ZWVwQSA9IGlucHV0LnN3ZWVwQTtcbiAgICAgIHZhciBzd2VlcEIgPSBpbnB1dC5zd2VlcEI7XG4gICAgICBiMlNldHRpbmdzLmIyQXNzZXJ0KHN3ZWVwQS50MCA9PSBzd2VlcEIudDApO1xuICAgICAgYjJTZXR0aW5ncy5iMkFzc2VydCgxLjAgLSBzd2VlcEEudDAgPiBOdW1iZXIuTUlOX1ZBTFVFKTtcbiAgICAgIHZhciByYWRpdXMgPSBwcm94eUEubV9yYWRpdXMgKyBwcm94eUIubV9yYWRpdXM7XG4gICAgICB2YXIgdG9sZXJhbmNlID0gaW5wdXQudG9sZXJhbmNlO1xuICAgICAgdmFyIGFscGhhID0gMC4wO1xuICAgICAgdmFyIGtfbWF4SXRlcmF0aW9ucyA9IDEwMDA7XG4gICAgICB2YXIgaXRlciA9IDA7XG4gICAgICB2YXIgdGFyZ2V0ID0gMC4wO1xuICAgICAgYjJUaW1lT2ZJbXBhY3Quc19jYWNoZS5jb3VudCA9IDA7XG4gICAgICBiMlRpbWVPZkltcGFjdC5zX2Rpc3RhbmNlSW5wdXQudXNlUmFkaWkgPSBmYWxzZTtcbiAgICAgIGZvciAoOzspIHtcbiAgICAgICAgIHN3ZWVwQS5HZXRUcmFuc2Zvcm0oYjJUaW1lT2ZJbXBhY3Quc194ZkEsIGFscGhhKTtcbiAgICAgICAgIHN3ZWVwQi5HZXRUcmFuc2Zvcm0oYjJUaW1lT2ZJbXBhY3Quc194ZkIsIGFscGhhKTtcbiAgICAgICAgIGIyVGltZU9mSW1wYWN0LnNfZGlzdGFuY2VJbnB1dC5wcm94eUEgPSBwcm94eUE7XG4gICAgICAgICBiMlRpbWVPZkltcGFjdC5zX2Rpc3RhbmNlSW5wdXQucHJveHlCID0gcHJveHlCO1xuICAgICAgICAgYjJUaW1lT2ZJbXBhY3Quc19kaXN0YW5jZUlucHV0LnRyYW5zZm9ybUEgPSBiMlRpbWVPZkltcGFjdC5zX3hmQTtcbiAgICAgICAgIGIyVGltZU9mSW1wYWN0LnNfZGlzdGFuY2VJbnB1dC50cmFuc2Zvcm1CID0gYjJUaW1lT2ZJbXBhY3Quc194ZkI7XG4gICAgICAgICBiMkRpc3RhbmNlLkRpc3RhbmNlKGIyVGltZU9mSW1wYWN0LnNfZGlzdGFuY2VPdXRwdXQsIGIyVGltZU9mSW1wYWN0LnNfY2FjaGUsIGIyVGltZU9mSW1wYWN0LnNfZGlzdGFuY2VJbnB1dCk7XG4gICAgICAgICBpZiAoYjJUaW1lT2ZJbXBhY3Quc19kaXN0YW5jZU91dHB1dC5kaXN0YW5jZSA8PSAwLjApIHtcbiAgICAgICAgICAgIGFscGhhID0gMS4wO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICB9XG4gICAgICAgICBiMlRpbWVPZkltcGFjdC5zX2Zjbi5Jbml0aWFsaXplKGIyVGltZU9mSW1wYWN0LnNfY2FjaGUsIHByb3h5QSwgYjJUaW1lT2ZJbXBhY3Quc194ZkEsIHByb3h5QiwgYjJUaW1lT2ZJbXBhY3Quc194ZkIpO1xuICAgICAgICAgdmFyIHNlcGFyYXRpb24gPSBiMlRpbWVPZkltcGFjdC5zX2Zjbi5FdmFsdWF0ZShiMlRpbWVPZkltcGFjdC5zX3hmQSwgYjJUaW1lT2ZJbXBhY3Quc194ZkIpO1xuICAgICAgICAgaWYgKHNlcGFyYXRpb24gPD0gMC4wKSB7XG4gICAgICAgICAgICBhbHBoYSA9IDEuMDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgfVxuICAgICAgICAgaWYgKGl0ZXIgPT0gMCkge1xuICAgICAgICAgICAgaWYgKHNlcGFyYXRpb24gPiByYWRpdXMpIHtcbiAgICAgICAgICAgICAgIHRhcmdldCA9IGIyTWF0aC5NYXgocmFkaXVzIC0gdG9sZXJhbmNlLCAwLjc1ICogcmFkaXVzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgdGFyZ2V0ID0gYjJNYXRoLk1heChzZXBhcmF0aW9uIC0gdG9sZXJhbmNlLCAwLjAyICogcmFkaXVzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgIH1cbiAgICAgICAgIGlmIChzZXBhcmF0aW9uIC0gdGFyZ2V0IDwgMC41ICogdG9sZXJhbmNlKSB7XG4gICAgICAgICAgICBpZiAoaXRlciA9PSAwKSB7XG4gICAgICAgICAgICAgICBhbHBoYSA9IDEuMDtcbiAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICB9XG4gICAgICAgICB2YXIgbmV3QWxwaGEgPSBhbHBoYTsge1xuICAgICAgICAgICAgdmFyIHgxID0gYWxwaGE7XG4gICAgICAgICAgICB2YXIgeDIgPSAxLjA7XG4gICAgICAgICAgICB2YXIgZjEgPSBzZXBhcmF0aW9uO1xuICAgICAgICAgICAgc3dlZXBBLkdldFRyYW5zZm9ybShiMlRpbWVPZkltcGFjdC5zX3hmQSwgeDIpO1xuICAgICAgICAgICAgc3dlZXBCLkdldFRyYW5zZm9ybShiMlRpbWVPZkltcGFjdC5zX3hmQiwgeDIpO1xuICAgICAgICAgICAgdmFyIGYyID0gYjJUaW1lT2ZJbXBhY3Quc19mY24uRXZhbHVhdGUoYjJUaW1lT2ZJbXBhY3Quc194ZkEsIGIyVGltZU9mSW1wYWN0LnNfeGZCKTtcbiAgICAgICAgICAgIGlmIChmMiA+PSB0YXJnZXQpIHtcbiAgICAgICAgICAgICAgIGFscGhhID0gMS4wO1xuICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgcm9vdEl0ZXJDb3VudCA9IDA7XG4gICAgICAgICAgICBmb3IgKDs7KSB7XG4gICAgICAgICAgICAgICB2YXIgeCA9IDA7XG4gICAgICAgICAgICAgICBpZiAocm9vdEl0ZXJDb3VudCAmIDEpIHtcbiAgICAgICAgICAgICAgICAgIHggPSB4MSArICh0YXJnZXQgLSBmMSkgKiAoeDIgLSB4MSkgLyAoZjIgLSBmMSk7XG4gICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHggPSAwLjUgKiAoeDEgKyB4Mik7XG4gICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICBzd2VlcEEuR2V0VHJhbnNmb3JtKGIyVGltZU9mSW1wYWN0LnNfeGZBLCB4KTtcbiAgICAgICAgICAgICAgIHN3ZWVwQi5HZXRUcmFuc2Zvcm0oYjJUaW1lT2ZJbXBhY3Quc194ZkIsIHgpO1xuICAgICAgICAgICAgICAgdmFyIGYgPSBiMlRpbWVPZkltcGFjdC5zX2Zjbi5FdmFsdWF0ZShiMlRpbWVPZkltcGFjdC5zX3hmQSwgYjJUaW1lT2ZJbXBhY3Quc194ZkIpO1xuICAgICAgICAgICAgICAgaWYgKGIyTWF0aC5BYnMoZiAtIHRhcmdldCkgPCAwLjAyNSAqIHRvbGVyYW5jZSkge1xuICAgICAgICAgICAgICAgICAgbmV3QWxwaGEgPSB4O1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICBpZiAoZiA+IHRhcmdldCkge1xuICAgICAgICAgICAgICAgICAgeDEgPSB4O1xuICAgICAgICAgICAgICAgICAgZjEgPSBmO1xuICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICB4MiA9IHg7XG4gICAgICAgICAgICAgICAgICBmMiA9IGY7XG4gICAgICAgICAgICAgICB9Kytyb290SXRlckNvdW50O1xuICAgICAgICAgICAgICAgKytiMlRpbWVPZkltcGFjdC5iMl90b2lSb290SXRlcnM7XG4gICAgICAgICAgICAgICBpZiAocm9vdEl0ZXJDb3VudCA9PSA1MCkge1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBiMlRpbWVPZkltcGFjdC5iMl90b2lNYXhSb290SXRlcnMgPSBiMk1hdGguTWF4KGIyVGltZU9mSW1wYWN0LmIyX3RvaU1heFJvb3RJdGVycywgcm9vdEl0ZXJDb3VudCk7XG4gICAgICAgICB9XG4gICAgICAgICBpZiAobmV3QWxwaGEgPCAoMS4wICsgMTAwLjAgKiBOdW1iZXIuTUlOX1ZBTFVFKSAqIGFscGhhKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgIH1cbiAgICAgICAgIGFscGhhID0gbmV3QWxwaGE7XG4gICAgICAgICBpdGVyKys7XG4gICAgICAgICArK2IyVGltZU9mSW1wYWN0LmIyX3RvaUl0ZXJzO1xuICAgICAgICAgaWYgKGl0ZXIgPT0ga19tYXhJdGVyYXRpb25zKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGIyVGltZU9mSW1wYWN0LmIyX3RvaU1heEl0ZXJzID0gYjJNYXRoLk1heChiMlRpbWVPZkltcGFjdC5iMl90b2lNYXhJdGVycywgaXRlcik7XG4gICAgICByZXR1cm4gYWxwaGE7XG4gICB9XG4gICBCb3gyRC5wb3N0RGVmcy5wdXNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIEJveDJELkNvbGxpc2lvbi5iMlRpbWVPZkltcGFjdC5iMl90b2lDYWxscyA9IDA7XG4gICAgICBCb3gyRC5Db2xsaXNpb24uYjJUaW1lT2ZJbXBhY3QuYjJfdG9pSXRlcnMgPSAwO1xuICAgICAgQm94MkQuQ29sbGlzaW9uLmIyVGltZU9mSW1wYWN0LmIyX3RvaU1heEl0ZXJzID0gMDtcbiAgICAgIEJveDJELkNvbGxpc2lvbi5iMlRpbWVPZkltcGFjdC5iMl90b2lSb290SXRlcnMgPSAwO1xuICAgICAgQm94MkQuQ29sbGlzaW9uLmIyVGltZU9mSW1wYWN0LmIyX3RvaU1heFJvb3RJdGVycyA9IDA7XG4gICAgICBCb3gyRC5Db2xsaXNpb24uYjJUaW1lT2ZJbXBhY3Quc19jYWNoZSA9IG5ldyBiMlNpbXBsZXhDYWNoZSgpO1xuICAgICAgQm94MkQuQ29sbGlzaW9uLmIyVGltZU9mSW1wYWN0LnNfZGlzdGFuY2VJbnB1dCA9IG5ldyBiMkRpc3RhbmNlSW5wdXQoKTtcbiAgICAgIEJveDJELkNvbGxpc2lvbi5iMlRpbWVPZkltcGFjdC5zX3hmQSA9IG5ldyBiMlRyYW5zZm9ybSgpO1xuICAgICAgQm94MkQuQ29sbGlzaW9uLmIyVGltZU9mSW1wYWN0LnNfeGZCID0gbmV3IGIyVHJhbnNmb3JtKCk7XG4gICAgICBCb3gyRC5Db2xsaXNpb24uYjJUaW1lT2ZJbXBhY3Quc19mY24gPSBuZXcgYjJTZXBhcmF0aW9uRnVuY3Rpb24oKTtcbiAgICAgIEJveDJELkNvbGxpc2lvbi5iMlRpbWVPZkltcGFjdC5zX2Rpc3RhbmNlT3V0cHV0ID0gbmV3IGIyRGlzdGFuY2VPdXRwdXQoKTtcbiAgIH0pO1xuICAgYjJUT0lJbnB1dC5iMlRPSUlucHV0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcy5wcm94eUEgPSBuZXcgYjJEaXN0YW5jZVByb3h5KCk7XG4gICAgICB0aGlzLnByb3h5QiA9IG5ldyBiMkRpc3RhbmNlUHJveHkoKTtcbiAgICAgIHRoaXMuc3dlZXBBID0gbmV3IGIyU3dlZXAoKTtcbiAgICAgIHRoaXMuc3dlZXBCID0gbmV3IGIyU3dlZXAoKTtcbiAgIH07XG4gICBiMldvcmxkTWFuaWZvbGQuYjJXb3JsZE1hbmlmb2xkID0gZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcy5tX25vcm1hbCA9IG5ldyBiMlZlYzIoKTtcbiAgIH07XG4gICBiMldvcmxkTWFuaWZvbGQucHJvdG90eXBlLmIyV29ybGRNYW5pZm9sZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMubV9wb2ludHMgPSBuZXcgVmVjdG9yKGIyU2V0dGluZ3MuYjJfbWF4TWFuaWZvbGRQb2ludHMpO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBiMlNldHRpbmdzLmIyX21heE1hbmlmb2xkUG9pbnRzOyBpKyspIHtcbiAgICAgICAgIHRoaXMubV9wb2ludHNbaV0gPSBuZXcgYjJWZWMyKCk7XG4gICAgICB9XG4gICB9XG4gICBiMldvcmxkTWFuaWZvbGQucHJvdG90eXBlLkluaXRpYWxpemUgPSBmdW5jdGlvbiAobWFuaWZvbGQsIHhmQSwgcmFkaXVzQSwgeGZCLCByYWRpdXNCKSB7XG4gICAgICBpZiAocmFkaXVzQSA9PT0gdW5kZWZpbmVkKSByYWRpdXNBID0gMDtcbiAgICAgIGlmIChyYWRpdXNCID09PSB1bmRlZmluZWQpIHJhZGl1c0IgPSAwO1xuICAgICAgaWYgKG1hbmlmb2xkLm1fcG9pbnRDb3VudCA9PSAwKSB7XG4gICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgaSA9IDA7XG4gICAgICB2YXIgdFZlYztcbiAgICAgIHZhciB0TWF0O1xuICAgICAgdmFyIG5vcm1hbFggPSAwO1xuICAgICAgdmFyIG5vcm1hbFkgPSAwO1xuICAgICAgdmFyIHBsYW5lUG9pbnRYID0gMDtcbiAgICAgIHZhciBwbGFuZVBvaW50WSA9IDA7XG4gICAgICB2YXIgY2xpcFBvaW50WCA9IDA7XG4gICAgICB2YXIgY2xpcFBvaW50WSA9IDA7XG4gICAgICBzd2l0Y2ggKG1hbmlmb2xkLm1fdHlwZSkge1xuICAgICAgY2FzZSBiMk1hbmlmb2xkLmVfY2lyY2xlczpcbiAgICAgICAgIHtcbiAgICAgICAgICAgIHRNYXQgPSB4ZkEuUjtcbiAgICAgICAgICAgIHRWZWMgPSBtYW5pZm9sZC5tX2xvY2FsUG9pbnQ7XG4gICAgICAgICAgICB2YXIgcG9pbnRBWCA9IHhmQS5wb3NpdGlvbi54ICsgdE1hdC5jb2wxLnggKiB0VmVjLnggKyB0TWF0LmNvbDIueCAqIHRWZWMueTtcbiAgICAgICAgICAgIHZhciBwb2ludEFZID0geGZBLnBvc2l0aW9uLnkgKyB0TWF0LmNvbDEueSAqIHRWZWMueCArIHRNYXQuY29sMi55ICogdFZlYy55O1xuICAgICAgICAgICAgdE1hdCA9IHhmQi5SO1xuICAgICAgICAgICAgdFZlYyA9IG1hbmlmb2xkLm1fcG9pbnRzWzBdLm1fbG9jYWxQb2ludDtcbiAgICAgICAgICAgIHZhciBwb2ludEJYID0geGZCLnBvc2l0aW9uLnggKyB0TWF0LmNvbDEueCAqIHRWZWMueCArIHRNYXQuY29sMi54ICogdFZlYy55O1xuICAgICAgICAgICAgdmFyIHBvaW50QlkgPSB4ZkIucG9zaXRpb24ueSArIHRNYXQuY29sMS55ICogdFZlYy54ICsgdE1hdC5jb2wyLnkgKiB0VmVjLnk7XG4gICAgICAgICAgICB2YXIgZFggPSBwb2ludEJYIC0gcG9pbnRBWDtcbiAgICAgICAgICAgIHZhciBkWSA9IHBvaW50QlkgLSBwb2ludEFZO1xuICAgICAgICAgICAgdmFyIGQyID0gZFggKiBkWCArIGRZICogZFk7XG4gICAgICAgICAgICBpZiAoZDIgPiBOdW1iZXIuTUlOX1ZBTFVFICogTnVtYmVyLk1JTl9WQUxVRSkge1xuICAgICAgICAgICAgICAgdmFyIGQgPSBNYXRoLnNxcnQoZDIpO1xuICAgICAgICAgICAgICAgdGhpcy5tX25vcm1hbC54ID0gZFggLyBkO1xuICAgICAgICAgICAgICAgdGhpcy5tX25vcm1hbC55ID0gZFkgLyBkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICB0aGlzLm1fbm9ybWFsLnggPSAxO1xuICAgICAgICAgICAgICAgdGhpcy5tX25vcm1hbC55ID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBjQVggPSBwb2ludEFYICsgcmFkaXVzQSAqIHRoaXMubV9ub3JtYWwueDtcbiAgICAgICAgICAgIHZhciBjQVkgPSBwb2ludEFZICsgcmFkaXVzQSAqIHRoaXMubV9ub3JtYWwueTtcbiAgICAgICAgICAgIHZhciBjQlggPSBwb2ludEJYIC0gcmFkaXVzQiAqIHRoaXMubV9ub3JtYWwueDtcbiAgICAgICAgICAgIHZhciBjQlkgPSBwb2ludEJZIC0gcmFkaXVzQiAqIHRoaXMubV9ub3JtYWwueTtcbiAgICAgICAgICAgIHRoaXMubV9wb2ludHNbMF0ueCA9IDAuNSAqIChjQVggKyBjQlgpO1xuICAgICAgICAgICAgdGhpcy5tX3BvaW50c1swXS55ID0gMC41ICogKGNBWSArIGNCWSk7XG4gICAgICAgICB9XG4gICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgYjJNYW5pZm9sZC5lX2ZhY2VBOlxuICAgICAgICAge1xuICAgICAgICAgICAgdE1hdCA9IHhmQS5SO1xuICAgICAgICAgICAgdFZlYyA9IG1hbmlmb2xkLm1fbG9jYWxQbGFuZU5vcm1hbDtcbiAgICAgICAgICAgIG5vcm1hbFggPSB0TWF0LmNvbDEueCAqIHRWZWMueCArIHRNYXQuY29sMi54ICogdFZlYy55O1xuICAgICAgICAgICAgbm9ybWFsWSA9IHRNYXQuY29sMS55ICogdFZlYy54ICsgdE1hdC5jb2wyLnkgKiB0VmVjLnk7XG4gICAgICAgICAgICB0TWF0ID0geGZBLlI7XG4gICAgICAgICAgICB0VmVjID0gbWFuaWZvbGQubV9sb2NhbFBvaW50O1xuICAgICAgICAgICAgcGxhbmVQb2ludFggPSB4ZkEucG9zaXRpb24ueCArIHRNYXQuY29sMS54ICogdFZlYy54ICsgdE1hdC5jb2wyLnggKiB0VmVjLnk7XG4gICAgICAgICAgICBwbGFuZVBvaW50WSA9IHhmQS5wb3NpdGlvbi55ICsgdE1hdC5jb2wxLnkgKiB0VmVjLnggKyB0TWF0LmNvbDIueSAqIHRWZWMueTtcbiAgICAgICAgICAgIHRoaXMubV9ub3JtYWwueCA9IG5vcm1hbFg7XG4gICAgICAgICAgICB0aGlzLm1fbm9ybWFsLnkgPSBub3JtYWxZO1xuICAgICAgICAgICAgZm9yIChpID0gMDtcbiAgICAgICAgICAgIGkgPCBtYW5pZm9sZC5tX3BvaW50Q291bnQ7IGkrKykge1xuICAgICAgICAgICAgICAgdE1hdCA9IHhmQi5SO1xuICAgICAgICAgICAgICAgdFZlYyA9IG1hbmlmb2xkLm1fcG9pbnRzW2ldLm1fbG9jYWxQb2ludDtcbiAgICAgICAgICAgICAgIGNsaXBQb2ludFggPSB4ZkIucG9zaXRpb24ueCArIHRNYXQuY29sMS54ICogdFZlYy54ICsgdE1hdC5jb2wyLnggKiB0VmVjLnk7XG4gICAgICAgICAgICAgICBjbGlwUG9pbnRZID0geGZCLnBvc2l0aW9uLnkgKyB0TWF0LmNvbDEueSAqIHRWZWMueCArIHRNYXQuY29sMi55ICogdFZlYy55O1xuICAgICAgICAgICAgICAgdGhpcy5tX3BvaW50c1tpXS54ID0gY2xpcFBvaW50WCArIDAuNSAqIChyYWRpdXNBIC0gKGNsaXBQb2ludFggLSBwbGFuZVBvaW50WCkgKiBub3JtYWxYIC0gKGNsaXBQb2ludFkgLSBwbGFuZVBvaW50WSkgKiBub3JtYWxZIC0gcmFkaXVzQikgKiBub3JtYWxYO1xuICAgICAgICAgICAgICAgdGhpcy5tX3BvaW50c1tpXS55ID0gY2xpcFBvaW50WSArIDAuNSAqIChyYWRpdXNBIC0gKGNsaXBQb2ludFggLSBwbGFuZVBvaW50WCkgKiBub3JtYWxYIC0gKGNsaXBQb2ludFkgLSBwbGFuZVBvaW50WSkgKiBub3JtYWxZIC0gcmFkaXVzQikgKiBub3JtYWxZO1xuICAgICAgICAgICAgfVxuICAgICAgICAgfVxuICAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIGIyTWFuaWZvbGQuZV9mYWNlQjpcbiAgICAgICAgIHtcbiAgICAgICAgICAgIHRNYXQgPSB4ZkIuUjtcbiAgICAgICAgICAgIHRWZWMgPSBtYW5pZm9sZC5tX2xvY2FsUGxhbmVOb3JtYWw7XG4gICAgICAgICAgICBub3JtYWxYID0gdE1hdC5jb2wxLnggKiB0VmVjLnggKyB0TWF0LmNvbDIueCAqIHRWZWMueTtcbiAgICAgICAgICAgIG5vcm1hbFkgPSB0TWF0LmNvbDEueSAqIHRWZWMueCArIHRNYXQuY29sMi55ICogdFZlYy55O1xuICAgICAgICAgICAgdE1hdCA9IHhmQi5SO1xuICAgICAgICAgICAgdFZlYyA9IG1hbmlmb2xkLm1fbG9jYWxQb2ludDtcbiAgICAgICAgICAgIHBsYW5lUG9pbnRYID0geGZCLnBvc2l0aW9uLnggKyB0TWF0LmNvbDEueCAqIHRWZWMueCArIHRNYXQuY29sMi54ICogdFZlYy55O1xuICAgICAgICAgICAgcGxhbmVQb2ludFkgPSB4ZkIucG9zaXRpb24ueSArIHRNYXQuY29sMS55ICogdFZlYy54ICsgdE1hdC5jb2wyLnkgKiB0VmVjLnk7XG4gICAgICAgICAgICB0aGlzLm1fbm9ybWFsLnggPSAoLW5vcm1hbFgpO1xuICAgICAgICAgICAgdGhpcy5tX25vcm1hbC55ID0gKC1ub3JtYWxZKTtcbiAgICAgICAgICAgIGZvciAoaSA9IDA7XG4gICAgICAgICAgICBpIDwgbWFuaWZvbGQubV9wb2ludENvdW50OyBpKyspIHtcbiAgICAgICAgICAgICAgIHRNYXQgPSB4ZkEuUjtcbiAgICAgICAgICAgICAgIHRWZWMgPSBtYW5pZm9sZC5tX3BvaW50c1tpXS5tX2xvY2FsUG9pbnQ7XG4gICAgICAgICAgICAgICBjbGlwUG9pbnRYID0geGZBLnBvc2l0aW9uLnggKyB0TWF0LmNvbDEueCAqIHRWZWMueCArIHRNYXQuY29sMi54ICogdFZlYy55O1xuICAgICAgICAgICAgICAgY2xpcFBvaW50WSA9IHhmQS5wb3NpdGlvbi55ICsgdE1hdC5jb2wxLnkgKiB0VmVjLnggKyB0TWF0LmNvbDIueSAqIHRWZWMueTtcbiAgICAgICAgICAgICAgIHRoaXMubV9wb2ludHNbaV0ueCA9IGNsaXBQb2ludFggKyAwLjUgKiAocmFkaXVzQiAtIChjbGlwUG9pbnRYIC0gcGxhbmVQb2ludFgpICogbm9ybWFsWCAtIChjbGlwUG9pbnRZIC0gcGxhbmVQb2ludFkpICogbm9ybWFsWSAtIHJhZGl1c0EpICogbm9ybWFsWDtcbiAgICAgICAgICAgICAgIHRoaXMubV9wb2ludHNbaV0ueSA9IGNsaXBQb2ludFkgKyAwLjUgKiAocmFkaXVzQiAtIChjbGlwUG9pbnRYIC0gcGxhbmVQb2ludFgpICogbm9ybWFsWCAtIChjbGlwUG9pbnRZIC0gcGxhbmVQb2ludFkpICogbm9ybWFsWSAtIHJhZGl1c0EpICogbm9ybWFsWTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgIH1cbiAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgfVxuICAgQ2xpcFZlcnRleC5DbGlwVmVydGV4ID0gZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcy52ID0gbmV3IGIyVmVjMigpO1xuICAgICAgdGhpcy5pZCA9IG5ldyBiMkNvbnRhY3RJRCgpO1xuICAgfTtcbiAgIENsaXBWZXJ0ZXgucHJvdG90eXBlLlNldCA9IGZ1bmN0aW9uIChvdGhlcikge1xuICAgICAgdGhpcy52LlNldFYob3RoZXIudik7XG4gICAgICB0aGlzLmlkLlNldChvdGhlci5pZCk7XG4gICB9XG4gICBGZWF0dXJlcy5GZWF0dXJlcyA9IGZ1bmN0aW9uICgpIHt9O1xuICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEZlYXR1cmVzLnByb3RvdHlwZSwgJ3JlZmVyZW5jZUVkZ2UnLCB7XG4gICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgcmV0dXJuIHRoaXMuX3JlZmVyZW5jZUVkZ2U7XG4gICAgICB9XG4gICB9KTtcbiAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShGZWF0dXJlcy5wcm90b3R5cGUsICdyZWZlcmVuY2VFZGdlJywge1xuICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHZhbHVlID0gMDtcbiAgICAgICAgIHRoaXMuX3JlZmVyZW5jZUVkZ2UgPSB2YWx1ZTtcbiAgICAgICAgIHRoaXMuX21faWQuX2tleSA9ICh0aGlzLl9tX2lkLl9rZXkgJiAweGZmZmZmZjAwKSB8ICh0aGlzLl9yZWZlcmVuY2VFZGdlICYgMHgwMDAwMDBmZik7XG4gICAgICB9XG4gICB9KTtcbiAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShGZWF0dXJlcy5wcm90b3R5cGUsICdpbmNpZGVudEVkZ2UnLCB7XG4gICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgcmV0dXJuIHRoaXMuX2luY2lkZW50RWRnZTtcbiAgICAgIH1cbiAgIH0pO1xuICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEZlYXR1cmVzLnByb3RvdHlwZSwgJ2luY2lkZW50RWRnZScsIHtcbiAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB2YWx1ZSA9IDA7XG4gICAgICAgICB0aGlzLl9pbmNpZGVudEVkZ2UgPSB2YWx1ZTtcbiAgICAgICAgIHRoaXMuX21faWQuX2tleSA9ICh0aGlzLl9tX2lkLl9rZXkgJiAweGZmZmYwMGZmKSB8ICgodGhpcy5faW5jaWRlbnRFZGdlIDw8IDgpICYgMHgwMDAwZmYwMCk7XG4gICAgICB9XG4gICB9KTtcbiAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShGZWF0dXJlcy5wcm90b3R5cGUsICdpbmNpZGVudFZlcnRleCcsIHtcbiAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICByZXR1cm4gdGhpcy5faW5jaWRlbnRWZXJ0ZXg7XG4gICAgICB9XG4gICB9KTtcbiAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShGZWF0dXJlcy5wcm90b3R5cGUsICdpbmNpZGVudFZlcnRleCcsIHtcbiAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB2YWx1ZSA9IDA7XG4gICAgICAgICB0aGlzLl9pbmNpZGVudFZlcnRleCA9IHZhbHVlO1xuICAgICAgICAgdGhpcy5fbV9pZC5fa2V5ID0gKHRoaXMuX21faWQuX2tleSAmIDB4ZmYwMGZmZmYpIHwgKCh0aGlzLl9pbmNpZGVudFZlcnRleCA8PCAxNikgJiAweDAwZmYwMDAwKTtcbiAgICAgIH1cbiAgIH0pO1xuICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEZlYXR1cmVzLnByb3RvdHlwZSwgJ2ZsaXAnLCB7XG4gICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgcmV0dXJuIHRoaXMuX2ZsaXA7XG4gICAgICB9XG4gICB9KTtcbiAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShGZWF0dXJlcy5wcm90b3R5cGUsICdmbGlwJywge1xuICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHZhbHVlID0gMDtcbiAgICAgICAgIHRoaXMuX2ZsaXAgPSB2YWx1ZTtcbiAgICAgICAgIHRoaXMuX21faWQuX2tleSA9ICh0aGlzLl9tX2lkLl9rZXkgJiAweDAwZmZmZmZmKSB8ICgodGhpcy5fZmxpcCA8PCAyNCkgJiAweGZmMDAwMDAwKTtcbiAgICAgIH1cbiAgIH0pO1xufSkoKTtcbihmdW5jdGlvbiAoKSB7XG4gICB2YXIgYjJDb2xvciA9IEJveDJELkNvbW1vbi5iMkNvbG9yLFxuICAgICAgYjJpbnRlcm5hbCA9IEJveDJELkNvbW1vbi5iMmludGVybmFsLFxuICAgICAgYjJTZXR0aW5ncyA9IEJveDJELkNvbW1vbi5iMlNldHRpbmdzLFxuICAgICAgYjJDaXJjbGVTaGFwZSA9IEJveDJELkNvbGxpc2lvbi5TaGFwZXMuYjJDaXJjbGVTaGFwZSxcbiAgICAgIGIyRWRnZUNoYWluRGVmID0gQm94MkQuQ29sbGlzaW9uLlNoYXBlcy5iMkVkZ2VDaGFpbkRlZixcbiAgICAgIGIyRWRnZVNoYXBlID0gQm94MkQuQ29sbGlzaW9uLlNoYXBlcy5iMkVkZ2VTaGFwZSxcbiAgICAgIGIyTWFzc0RhdGEgPSBCb3gyRC5Db2xsaXNpb24uU2hhcGVzLmIyTWFzc0RhdGEsXG4gICAgICBiMlBvbHlnb25TaGFwZSA9IEJveDJELkNvbGxpc2lvbi5TaGFwZXMuYjJQb2x5Z29uU2hhcGUsXG4gICAgICBiMlNoYXBlID0gQm94MkQuQ29sbGlzaW9uLlNoYXBlcy5iMlNoYXBlLFxuICAgICAgYjJNYXQyMiA9IEJveDJELkNvbW1vbi5NYXRoLmIyTWF0MjIsXG4gICAgICBiMk1hdDMzID0gQm94MkQuQ29tbW9uLk1hdGguYjJNYXQzMyxcbiAgICAgIGIyTWF0aCA9IEJveDJELkNvbW1vbi5NYXRoLmIyTWF0aCxcbiAgICAgIGIyU3dlZXAgPSBCb3gyRC5Db21tb24uTWF0aC5iMlN3ZWVwLFxuICAgICAgYjJUcmFuc2Zvcm0gPSBCb3gyRC5Db21tb24uTWF0aC5iMlRyYW5zZm9ybSxcbiAgICAgIGIyVmVjMiA9IEJveDJELkNvbW1vbi5NYXRoLmIyVmVjMixcbiAgICAgIGIyVmVjMyA9IEJveDJELkNvbW1vbi5NYXRoLmIyVmVjMyxcbiAgICAgIGIyQm9keSA9IEJveDJELkR5bmFtaWNzLmIyQm9keSxcbiAgICAgIGIyQm9keURlZiA9IEJveDJELkR5bmFtaWNzLmIyQm9keURlZixcbiAgICAgIGIyQ29udGFjdEZpbHRlciA9IEJveDJELkR5bmFtaWNzLmIyQ29udGFjdEZpbHRlcixcbiAgICAgIGIyQ29udGFjdEltcHVsc2UgPSBCb3gyRC5EeW5hbWljcy5iMkNvbnRhY3RJbXB1bHNlLFxuICAgICAgYjJDb250YWN0TGlzdGVuZXIgPSBCb3gyRC5EeW5hbWljcy5iMkNvbnRhY3RMaXN0ZW5lcixcbiAgICAgIGIyQ29udGFjdE1hbmFnZXIgPSBCb3gyRC5EeW5hbWljcy5iMkNvbnRhY3RNYW5hZ2VyLFxuICAgICAgYjJEZWJ1Z0RyYXcgPSBCb3gyRC5EeW5hbWljcy5iMkRlYnVnRHJhdyxcbiAgICAgIGIyRGVzdHJ1Y3Rpb25MaXN0ZW5lciA9IEJveDJELkR5bmFtaWNzLmIyRGVzdHJ1Y3Rpb25MaXN0ZW5lcixcbiAgICAgIGIyRmlsdGVyRGF0YSA9IEJveDJELkR5bmFtaWNzLmIyRmlsdGVyRGF0YSxcbiAgICAgIGIyRml4dHVyZSA9IEJveDJELkR5bmFtaWNzLmIyRml4dHVyZSxcbiAgICAgIGIyRml4dHVyZURlZiA9IEJveDJELkR5bmFtaWNzLmIyRml4dHVyZURlZixcbiAgICAgIGIySXNsYW5kID0gQm94MkQuRHluYW1pY3MuYjJJc2xhbmQsXG4gICAgICBiMlRpbWVTdGVwID0gQm94MkQuRHluYW1pY3MuYjJUaW1lU3RlcCxcbiAgICAgIGIyV29ybGQgPSBCb3gyRC5EeW5hbWljcy5iMldvcmxkLFxuICAgICAgYjJBQUJCID0gQm94MkQuQ29sbGlzaW9uLmIyQUFCQixcbiAgICAgIGIyQm91bmQgPSBCb3gyRC5Db2xsaXNpb24uYjJCb3VuZCxcbiAgICAgIGIyQm91bmRWYWx1ZXMgPSBCb3gyRC5Db2xsaXNpb24uYjJCb3VuZFZhbHVlcyxcbiAgICAgIGIyQ29sbGlzaW9uID0gQm94MkQuQ29sbGlzaW9uLmIyQ29sbGlzaW9uLFxuICAgICAgYjJDb250YWN0SUQgPSBCb3gyRC5Db2xsaXNpb24uYjJDb250YWN0SUQsXG4gICAgICBiMkNvbnRhY3RQb2ludCA9IEJveDJELkNvbGxpc2lvbi5iMkNvbnRhY3RQb2ludCxcbiAgICAgIGIyRGlzdGFuY2UgPSBCb3gyRC5Db2xsaXNpb24uYjJEaXN0YW5jZSxcbiAgICAgIGIyRGlzdGFuY2VJbnB1dCA9IEJveDJELkNvbGxpc2lvbi5iMkRpc3RhbmNlSW5wdXQsXG4gICAgICBiMkRpc3RhbmNlT3V0cHV0ID0gQm94MkQuQ29sbGlzaW9uLmIyRGlzdGFuY2VPdXRwdXQsXG4gICAgICBiMkRpc3RhbmNlUHJveHkgPSBCb3gyRC5Db2xsaXNpb24uYjJEaXN0YW5jZVByb3h5LFxuICAgICAgYjJEeW5hbWljVHJlZSA9IEJveDJELkNvbGxpc2lvbi5iMkR5bmFtaWNUcmVlLFxuICAgICAgYjJEeW5hbWljVHJlZUJyb2FkUGhhc2UgPSBCb3gyRC5Db2xsaXNpb24uYjJEeW5hbWljVHJlZUJyb2FkUGhhc2UsXG4gICAgICBiMkR5bmFtaWNUcmVlTm9kZSA9IEJveDJELkNvbGxpc2lvbi5iMkR5bmFtaWNUcmVlTm9kZSxcbiAgICAgIGIyRHluYW1pY1RyZWVQYWlyID0gQm94MkQuQ29sbGlzaW9uLmIyRHluYW1pY1RyZWVQYWlyLFxuICAgICAgYjJNYW5pZm9sZCA9IEJveDJELkNvbGxpc2lvbi5iMk1hbmlmb2xkLFxuICAgICAgYjJNYW5pZm9sZFBvaW50ID0gQm94MkQuQ29sbGlzaW9uLmIyTWFuaWZvbGRQb2ludCxcbiAgICAgIGIyUG9pbnQgPSBCb3gyRC5Db2xsaXNpb24uYjJQb2ludCxcbiAgICAgIGIyUmF5Q2FzdElucHV0ID0gQm94MkQuQ29sbGlzaW9uLmIyUmF5Q2FzdElucHV0LFxuICAgICAgYjJSYXlDYXN0T3V0cHV0ID0gQm94MkQuQ29sbGlzaW9uLmIyUmF5Q2FzdE91dHB1dCxcbiAgICAgIGIyU2VnbWVudCA9IEJveDJELkNvbGxpc2lvbi5iMlNlZ21lbnQsXG4gICAgICBiMlNlcGFyYXRpb25GdW5jdGlvbiA9IEJveDJELkNvbGxpc2lvbi5iMlNlcGFyYXRpb25GdW5jdGlvbixcbiAgICAgIGIyU2ltcGxleCA9IEJveDJELkNvbGxpc2lvbi5iMlNpbXBsZXgsXG4gICAgICBiMlNpbXBsZXhDYWNoZSA9IEJveDJELkNvbGxpc2lvbi5iMlNpbXBsZXhDYWNoZSxcbiAgICAgIGIyU2ltcGxleFZlcnRleCA9IEJveDJELkNvbGxpc2lvbi5iMlNpbXBsZXhWZXJ0ZXgsXG4gICAgICBiMlRpbWVPZkltcGFjdCA9IEJveDJELkNvbGxpc2lvbi5iMlRpbWVPZkltcGFjdCxcbiAgICAgIGIyVE9JSW5wdXQgPSBCb3gyRC5Db2xsaXNpb24uYjJUT0lJbnB1dCxcbiAgICAgIGIyV29ybGRNYW5pZm9sZCA9IEJveDJELkNvbGxpc2lvbi5iMldvcmxkTWFuaWZvbGQsXG4gICAgICBDbGlwVmVydGV4ID0gQm94MkQuQ29sbGlzaW9uLkNsaXBWZXJ0ZXgsXG4gICAgICBGZWF0dXJlcyA9IEJveDJELkNvbGxpc2lvbi5GZWF0dXJlcyxcbiAgICAgIElCcm9hZFBoYXNlID0gQm94MkQuQ29sbGlzaW9uLklCcm9hZFBoYXNlO1xuXG4gICBCb3gyRC5pbmhlcml0KGIyQ2lyY2xlU2hhcGUsIEJveDJELkNvbGxpc2lvbi5TaGFwZXMuYjJTaGFwZSk7XG4gICBiMkNpcmNsZVNoYXBlLnByb3RvdHlwZS5fX3N1cGVyID0gQm94MkQuQ29sbGlzaW9uLlNoYXBlcy5iMlNoYXBlLnByb3RvdHlwZTtcbiAgIGIyQ2lyY2xlU2hhcGUuYjJDaXJjbGVTaGFwZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIEJveDJELkNvbGxpc2lvbi5TaGFwZXMuYjJTaGFwZS5iMlNoYXBlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB0aGlzLm1fcCA9IG5ldyBiMlZlYzIoKTtcbiAgIH07XG4gICBiMkNpcmNsZVNoYXBlLnByb3RvdHlwZS5Db3B5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHMgPSBuZXcgYjJDaXJjbGVTaGFwZSgpO1xuICAgICAgcy5TZXQodGhpcyk7XG4gICAgICByZXR1cm4gcztcbiAgIH1cbiAgIGIyQ2lyY2xlU2hhcGUucHJvdG90eXBlLlNldCA9IGZ1bmN0aW9uIChvdGhlcikge1xuICAgICAgdGhpcy5fX3N1cGVyLlNldC5jYWxsKHRoaXMsIG90aGVyKTtcbiAgICAgIGlmIChCb3gyRC5pcyhvdGhlciwgYjJDaXJjbGVTaGFwZSkpIHtcbiAgICAgICAgIHZhciBvdGhlcjIgPSAob3RoZXIgaW5zdGFuY2VvZiBiMkNpcmNsZVNoYXBlID8gb3RoZXIgOiBudWxsKTtcbiAgICAgICAgIHRoaXMubV9wLlNldFYob3RoZXIyLm1fcCk7XG4gICAgICB9XG4gICB9XG4gICBiMkNpcmNsZVNoYXBlLnByb3RvdHlwZS5UZXN0UG9pbnQgPSBmdW5jdGlvbiAodHJhbnNmb3JtLCBwKSB7XG4gICAgICB2YXIgdE1hdCA9IHRyYW5zZm9ybS5SO1xuICAgICAgdmFyIGRYID0gdHJhbnNmb3JtLnBvc2l0aW9uLnggKyAodE1hdC5jb2wxLnggKiB0aGlzLm1fcC54ICsgdE1hdC5jb2wyLnggKiB0aGlzLm1fcC55KTtcbiAgICAgIHZhciBkWSA9IHRyYW5zZm9ybS5wb3NpdGlvbi55ICsgKHRNYXQuY29sMS55ICogdGhpcy5tX3AueCArIHRNYXQuY29sMi55ICogdGhpcy5tX3AueSk7XG4gICAgICBkWCA9IHAueCAtIGRYO1xuICAgICAgZFkgPSBwLnkgLSBkWTtcbiAgICAgIHJldHVybiAoZFggKiBkWCArIGRZICogZFkpIDw9IHRoaXMubV9yYWRpdXMgKiB0aGlzLm1fcmFkaXVzO1xuICAgfVxuICAgYjJDaXJjbGVTaGFwZS5wcm90b3R5cGUuUmF5Q2FzdCA9IGZ1bmN0aW9uIChvdXRwdXQsIGlucHV0LCB0cmFuc2Zvcm0pIHtcbiAgICAgIHZhciB0TWF0ID0gdHJhbnNmb3JtLlI7XG4gICAgICB2YXIgcG9zaXRpb25YID0gdHJhbnNmb3JtLnBvc2l0aW9uLnggKyAodE1hdC5jb2wxLnggKiB0aGlzLm1fcC54ICsgdE1hdC5jb2wyLnggKiB0aGlzLm1fcC55KTtcbiAgICAgIHZhciBwb3NpdGlvblkgPSB0cmFuc2Zvcm0ucG9zaXRpb24ueSArICh0TWF0LmNvbDEueSAqIHRoaXMubV9wLnggKyB0TWF0LmNvbDIueSAqIHRoaXMubV9wLnkpO1xuICAgICAgdmFyIHNYID0gaW5wdXQucDEueCAtIHBvc2l0aW9uWDtcbiAgICAgIHZhciBzWSA9IGlucHV0LnAxLnkgLSBwb3NpdGlvblk7XG4gICAgICB2YXIgYiA9IChzWCAqIHNYICsgc1kgKiBzWSkgLSB0aGlzLm1fcmFkaXVzICogdGhpcy5tX3JhZGl1cztcbiAgICAgIHZhciByWCA9IGlucHV0LnAyLnggLSBpbnB1dC5wMS54O1xuICAgICAgdmFyIHJZID0gaW5wdXQucDIueSAtIGlucHV0LnAxLnk7XG4gICAgICB2YXIgYyA9IChzWCAqIHJYICsgc1kgKiByWSk7XG4gICAgICB2YXIgcnIgPSAoclggKiByWCArIHJZICogclkpO1xuICAgICAgdmFyIHNpZ21hID0gYyAqIGMgLSByciAqIGI7XG4gICAgICBpZiAoc2lnbWEgPCAwLjAgfHwgcnIgPCBOdW1iZXIuTUlOX1ZBTFVFKSB7XG4gICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgYSA9ICgtKGMgKyBNYXRoLnNxcnQoc2lnbWEpKSk7XG4gICAgICBpZiAoMC4wIDw9IGEgJiYgYSA8PSBpbnB1dC5tYXhGcmFjdGlvbiAqIHJyKSB7XG4gICAgICAgICBhIC89IHJyO1xuICAgICAgICAgb3V0cHV0LmZyYWN0aW9uID0gYTtcbiAgICAgICAgIG91dHB1dC5ub3JtYWwueCA9IHNYICsgYSAqIHJYO1xuICAgICAgICAgb3V0cHV0Lm5vcm1hbC55ID0gc1kgKyBhICogclk7XG4gICAgICAgICBvdXRwdXQubm9ybWFsLk5vcm1hbGl6ZSgpO1xuICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICB9XG4gICBiMkNpcmNsZVNoYXBlLnByb3RvdHlwZS5Db21wdXRlQUFCQiA9IGZ1bmN0aW9uIChhYWJiLCB0cmFuc2Zvcm0pIHtcbiAgICAgIHZhciB0TWF0ID0gdHJhbnNmb3JtLlI7XG4gICAgICB2YXIgcFggPSB0cmFuc2Zvcm0ucG9zaXRpb24ueCArICh0TWF0LmNvbDEueCAqIHRoaXMubV9wLnggKyB0TWF0LmNvbDIueCAqIHRoaXMubV9wLnkpO1xuICAgICAgdmFyIHBZID0gdHJhbnNmb3JtLnBvc2l0aW9uLnkgKyAodE1hdC5jb2wxLnkgKiB0aGlzLm1fcC54ICsgdE1hdC5jb2wyLnkgKiB0aGlzLm1fcC55KTtcbiAgICAgIGFhYmIubG93ZXJCb3VuZC5TZXQocFggLSB0aGlzLm1fcmFkaXVzLCBwWSAtIHRoaXMubV9yYWRpdXMpO1xuICAgICAgYWFiYi51cHBlckJvdW5kLlNldChwWCArIHRoaXMubV9yYWRpdXMsIHBZICsgdGhpcy5tX3JhZGl1cyk7XG4gICB9XG4gICBiMkNpcmNsZVNoYXBlLnByb3RvdHlwZS5Db21wdXRlTWFzcyA9IGZ1bmN0aW9uIChtYXNzRGF0YSwgZGVuc2l0eSkge1xuICAgICAgaWYgKGRlbnNpdHkgPT09IHVuZGVmaW5lZCkgZGVuc2l0eSA9IDA7XG4gICAgICBtYXNzRGF0YS5tYXNzID0gZGVuc2l0eSAqIGIyU2V0dGluZ3MuYjJfcGkgKiB0aGlzLm1fcmFkaXVzICogdGhpcy5tX3JhZGl1cztcbiAgICAgIG1hc3NEYXRhLmNlbnRlci5TZXRWKHRoaXMubV9wKTtcbiAgICAgIG1hc3NEYXRhLkkgPSBtYXNzRGF0YS5tYXNzICogKDAuNSAqIHRoaXMubV9yYWRpdXMgKiB0aGlzLm1fcmFkaXVzICsgKHRoaXMubV9wLnggKiB0aGlzLm1fcC54ICsgdGhpcy5tX3AueSAqIHRoaXMubV9wLnkpKTtcbiAgIH1cbiAgIGIyQ2lyY2xlU2hhcGUucHJvdG90eXBlLkNvbXB1dGVTdWJtZXJnZWRBcmVhID0gZnVuY3Rpb24gKG5vcm1hbCwgb2Zmc2V0LCB4ZiwgYykge1xuICAgICAgaWYgKG9mZnNldCA9PT0gdW5kZWZpbmVkKSBvZmZzZXQgPSAwO1xuICAgICAgdmFyIHAgPSBiMk1hdGguTXVsWCh4ZiwgdGhpcy5tX3ApO1xuICAgICAgdmFyIGwgPSAoLShiMk1hdGguRG90KG5vcm1hbCwgcCkgLSBvZmZzZXQpKTtcbiAgICAgIGlmIChsIDwgKC10aGlzLm1fcmFkaXVzKSArIE51bWJlci5NSU5fVkFMVUUpIHtcbiAgICAgICAgIHJldHVybiAwO1xuICAgICAgfVxuICAgICAgaWYgKGwgPiB0aGlzLm1fcmFkaXVzKSB7XG4gICAgICAgICBjLlNldFYocCk7XG4gICAgICAgICByZXR1cm4gTWF0aC5QSSAqIHRoaXMubV9yYWRpdXMgKiB0aGlzLm1fcmFkaXVzO1xuICAgICAgfVxuICAgICAgdmFyIHIyID0gdGhpcy5tX3JhZGl1cyAqIHRoaXMubV9yYWRpdXM7XG4gICAgICB2YXIgbDIgPSBsICogbDtcbiAgICAgIHZhciBhcmVhID0gcjIgKiAoTWF0aC5hc2luKGwgLyB0aGlzLm1fcmFkaXVzKSArIE1hdGguUEkgLyAyKSArIGwgKiBNYXRoLnNxcnQocjIgLSBsMik7XG4gICAgICB2YXIgY29tID0gKC0yIC8gMyAqIE1hdGgucG93KHIyIC0gbDIsIDEuNSkgLyBhcmVhKTtcbiAgICAgIGMueCA9IHAueCArIG5vcm1hbC54ICogY29tO1xuICAgICAgYy55ID0gcC55ICsgbm9ybWFsLnkgKiBjb207XG4gICAgICByZXR1cm4gYXJlYTtcbiAgIH1cbiAgIGIyQ2lyY2xlU2hhcGUucHJvdG90eXBlLkdldExvY2FsUG9zaXRpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5tX3A7XG4gICB9XG4gICBiMkNpcmNsZVNoYXBlLnByb3RvdHlwZS5TZXRMb2NhbFBvc2l0aW9uID0gZnVuY3Rpb24gKHBvc2l0aW9uKSB7XG4gICAgICB0aGlzLm1fcC5TZXRWKHBvc2l0aW9uKTtcbiAgIH1cbiAgIGIyQ2lyY2xlU2hhcGUucHJvdG90eXBlLkdldFJhZGl1cyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzLm1fcmFkaXVzO1xuICAgfVxuICAgYjJDaXJjbGVTaGFwZS5wcm90b3R5cGUuU2V0UmFkaXVzID0gZnVuY3Rpb24gKHJhZGl1cykge1xuICAgICAgaWYgKHJhZGl1cyA9PT0gdW5kZWZpbmVkKSByYWRpdXMgPSAwO1xuICAgICAgdGhpcy5tX3JhZGl1cyA9IHJhZGl1cztcbiAgIH1cbiAgIGIyQ2lyY2xlU2hhcGUucHJvdG90eXBlLmIyQ2lyY2xlU2hhcGUgPSBmdW5jdGlvbiAocmFkaXVzKSB7XG4gICAgICBpZiAocmFkaXVzID09PSB1bmRlZmluZWQpIHJhZGl1cyA9IDA7XG4gICAgICB0aGlzLl9fc3VwZXIuYjJTaGFwZS5jYWxsKHRoaXMpO1xuICAgICAgdGhpcy5tX3R5cGUgPSBiMlNoYXBlLmVfY2lyY2xlU2hhcGU7XG4gICAgICB0aGlzLm1fcmFkaXVzID0gcmFkaXVzO1xuICAgfVxuICAgYjJFZGdlQ2hhaW5EZWYuYjJFZGdlQ2hhaW5EZWYgPSBmdW5jdGlvbiAoKSB7fTtcbiAgIGIyRWRnZUNoYWluRGVmLnByb3RvdHlwZS5iMkVkZ2VDaGFpbkRlZiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMudmVydGV4Q291bnQgPSAwO1xuICAgICAgdGhpcy5pc0FMb29wID0gdHJ1ZTtcbiAgICAgIHRoaXMudmVydGljZXMgPSBbXTtcbiAgIH1cbiAgIEJveDJELmluaGVyaXQoYjJFZGdlU2hhcGUsIEJveDJELkNvbGxpc2lvbi5TaGFwZXMuYjJTaGFwZSk7XG4gICBiMkVkZ2VTaGFwZS5wcm90b3R5cGUuX19zdXBlciA9IEJveDJELkNvbGxpc2lvbi5TaGFwZXMuYjJTaGFwZS5wcm90b3R5cGU7XG4gICBiMkVkZ2VTaGFwZS5iMkVkZ2VTaGFwZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIEJveDJELkNvbGxpc2lvbi5TaGFwZXMuYjJTaGFwZS5iMlNoYXBlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB0aGlzLnNfc3VwcG9ydFZlYyA9IG5ldyBiMlZlYzIoKTtcbiAgICAgIHRoaXMubV92MSA9IG5ldyBiMlZlYzIoKTtcbiAgICAgIHRoaXMubV92MiA9IG5ldyBiMlZlYzIoKTtcbiAgICAgIHRoaXMubV9jb3JlVjEgPSBuZXcgYjJWZWMyKCk7XG4gICAgICB0aGlzLm1fY29yZVYyID0gbmV3IGIyVmVjMigpO1xuICAgICAgdGhpcy5tX25vcm1hbCA9IG5ldyBiMlZlYzIoKTtcbiAgICAgIHRoaXMubV9kaXJlY3Rpb24gPSBuZXcgYjJWZWMyKCk7XG4gICAgICB0aGlzLm1fY29ybmVyRGlyMSA9IG5ldyBiMlZlYzIoKTtcbiAgICAgIHRoaXMubV9jb3JuZXJEaXIyID0gbmV3IGIyVmVjMigpO1xuICAgfTtcbiAgIGIyRWRnZVNoYXBlLnByb3RvdHlwZS5UZXN0UG9pbnQgPSBmdW5jdGlvbiAodHJhbnNmb3JtLCBwKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICB9XG4gICBiMkVkZ2VTaGFwZS5wcm90b3R5cGUuUmF5Q2FzdCA9IGZ1bmN0aW9uIChvdXRwdXQsIGlucHV0LCB0cmFuc2Zvcm0pIHtcbiAgICAgIHZhciB0TWF0O1xuICAgICAgdmFyIHJYID0gaW5wdXQucDIueCAtIGlucHV0LnAxLng7XG4gICAgICB2YXIgclkgPSBpbnB1dC5wMi55IC0gaW5wdXQucDEueTtcbiAgICAgIHRNYXQgPSB0cmFuc2Zvcm0uUjtcbiAgICAgIHZhciB2MVggPSB0cmFuc2Zvcm0ucG9zaXRpb24ueCArICh0TWF0LmNvbDEueCAqIHRoaXMubV92MS54ICsgdE1hdC5jb2wyLnggKiB0aGlzLm1fdjEueSk7XG4gICAgICB2YXIgdjFZID0gdHJhbnNmb3JtLnBvc2l0aW9uLnkgKyAodE1hdC5jb2wxLnkgKiB0aGlzLm1fdjEueCArIHRNYXQuY29sMi55ICogdGhpcy5tX3YxLnkpO1xuICAgICAgdmFyIG5YID0gdHJhbnNmb3JtLnBvc2l0aW9uLnkgKyAodE1hdC5jb2wxLnkgKiB0aGlzLm1fdjIueCArIHRNYXQuY29sMi55ICogdGhpcy5tX3YyLnkpIC0gdjFZO1xuICAgICAgdmFyIG5ZID0gKC0odHJhbnNmb3JtLnBvc2l0aW9uLnggKyAodE1hdC5jb2wxLnggKiB0aGlzLm1fdjIueCArIHRNYXQuY29sMi54ICogdGhpcy5tX3YyLnkpIC0gdjFYKSk7XG4gICAgICB2YXIga19zbG9wID0gMTAwLjAgKiBOdW1iZXIuTUlOX1ZBTFVFO1xuICAgICAgdmFyIGRlbm9tID0gKC0oclggKiBuWCArIHJZICogblkpKTtcbiAgICAgIGlmIChkZW5vbSA+IGtfc2xvcCkge1xuICAgICAgICAgdmFyIGJYID0gaW5wdXQucDEueCAtIHYxWDtcbiAgICAgICAgIHZhciBiWSA9IGlucHV0LnAxLnkgLSB2MVk7XG4gICAgICAgICB2YXIgYSA9IChiWCAqIG5YICsgYlkgKiBuWSk7XG4gICAgICAgICBpZiAoMC4wIDw9IGEgJiYgYSA8PSBpbnB1dC5tYXhGcmFjdGlvbiAqIGRlbm9tKSB7XG4gICAgICAgICAgICB2YXIgbXUyID0gKC1yWCAqIGJZKSArIHJZICogYlg7XG4gICAgICAgICAgICBpZiAoKC1rX3Nsb3AgKiBkZW5vbSkgPD0gbXUyICYmIG11MiA8PSBkZW5vbSAqICgxLjAgKyBrX3Nsb3ApKSB7XG4gICAgICAgICAgICAgICBhIC89IGRlbm9tO1xuICAgICAgICAgICAgICAgb3V0cHV0LmZyYWN0aW9uID0gYTtcbiAgICAgICAgICAgICAgIHZhciBuTGVuID0gTWF0aC5zcXJ0KG5YICogblggKyBuWSAqIG5ZKTtcbiAgICAgICAgICAgICAgIG91dHB1dC5ub3JtYWwueCA9IG5YIC8gbkxlbjtcbiAgICAgICAgICAgICAgIG91dHB1dC5ub3JtYWwueSA9IG5ZIC8gbkxlbjtcbiAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgfVxuICAgYjJFZGdlU2hhcGUucHJvdG90eXBlLkNvbXB1dGVBQUJCID0gZnVuY3Rpb24gKGFhYmIsIHRyYW5zZm9ybSkge1xuICAgICAgdmFyIHRNYXQgPSB0cmFuc2Zvcm0uUjtcbiAgICAgIHZhciB2MVggPSB0cmFuc2Zvcm0ucG9zaXRpb24ueCArICh0TWF0LmNvbDEueCAqIHRoaXMubV92MS54ICsgdE1hdC5jb2wyLnggKiB0aGlzLm1fdjEueSk7XG4gICAgICB2YXIgdjFZID0gdHJhbnNmb3JtLnBvc2l0aW9uLnkgKyAodE1hdC5jb2wxLnkgKiB0aGlzLm1fdjEueCArIHRNYXQuY29sMi55ICogdGhpcy5tX3YxLnkpO1xuICAgICAgdmFyIHYyWCA9IHRyYW5zZm9ybS5wb3NpdGlvbi54ICsgKHRNYXQuY29sMS54ICogdGhpcy5tX3YyLnggKyB0TWF0LmNvbDIueCAqIHRoaXMubV92Mi55KTtcbiAgICAgIHZhciB2MlkgPSB0cmFuc2Zvcm0ucG9zaXRpb24ueSArICh0TWF0LmNvbDEueSAqIHRoaXMubV92Mi54ICsgdE1hdC5jb2wyLnkgKiB0aGlzLm1fdjIueSk7XG4gICAgICBpZiAodjFYIDwgdjJYKSB7XG4gICAgICAgICBhYWJiLmxvd2VyQm91bmQueCA9IHYxWDtcbiAgICAgICAgIGFhYmIudXBwZXJCb3VuZC54ID0gdjJYO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgICBhYWJiLmxvd2VyQm91bmQueCA9IHYyWDtcbiAgICAgICAgIGFhYmIudXBwZXJCb3VuZC54ID0gdjFYO1xuICAgICAgfVxuICAgICAgaWYgKHYxWSA8IHYyWSkge1xuICAgICAgICAgYWFiYi5sb3dlckJvdW5kLnkgPSB2MVk7XG4gICAgICAgICBhYWJiLnVwcGVyQm91bmQueSA9IHYyWTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICAgYWFiYi5sb3dlckJvdW5kLnkgPSB2Mlk7XG4gICAgICAgICBhYWJiLnVwcGVyQm91bmQueSA9IHYxWTtcbiAgICAgIH1cbiAgIH1cbiAgIGIyRWRnZVNoYXBlLnByb3RvdHlwZS5Db21wdXRlTWFzcyA9IGZ1bmN0aW9uIChtYXNzRGF0YSwgZGVuc2l0eSkge1xuICAgICAgaWYgKGRlbnNpdHkgPT09IHVuZGVmaW5lZCkgZGVuc2l0eSA9IDA7XG4gICAgICBtYXNzRGF0YS5tYXNzID0gMDtcbiAgICAgIG1hc3NEYXRhLmNlbnRlci5TZXRWKHRoaXMubV92MSk7XG4gICAgICBtYXNzRGF0YS5JID0gMDtcbiAgIH1cbiAgIGIyRWRnZVNoYXBlLnByb3RvdHlwZS5Db21wdXRlU3VibWVyZ2VkQXJlYSA9IGZ1bmN0aW9uIChub3JtYWwsIG9mZnNldCwgeGYsIGMpIHtcbiAgICAgIGlmIChvZmZzZXQgPT09IHVuZGVmaW5lZCkgb2Zmc2V0ID0gMDtcbiAgICAgIHZhciB2MCA9IG5ldyBiMlZlYzIobm9ybWFsLnggKiBvZmZzZXQsIG5vcm1hbC55ICogb2Zmc2V0KTtcbiAgICAgIHZhciB2MSA9IGIyTWF0aC5NdWxYKHhmLCB0aGlzLm1fdjEpO1xuICAgICAgdmFyIHYyID0gYjJNYXRoLk11bFgoeGYsIHRoaXMubV92Mik7XG4gICAgICB2YXIgZDEgPSBiMk1hdGguRG90KG5vcm1hbCwgdjEpIC0gb2Zmc2V0O1xuICAgICAgdmFyIGQyID0gYjJNYXRoLkRvdChub3JtYWwsIHYyKSAtIG9mZnNldDtcbiAgICAgIGlmIChkMSA+IDApIHtcbiAgICAgICAgIGlmIChkMiA+IDApIHtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgfVxuICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB2MS54ID0gKC1kMiAvIChkMSAtIGQyKSAqIHYxLngpICsgZDEgLyAoZDEgLSBkMikgKiB2Mi54O1xuICAgICAgICAgICAgdjEueSA9ICgtZDIgLyAoZDEgLSBkMikgKiB2MS55KSArIGQxIC8gKGQxIC0gZDIpICogdjIueTtcbiAgICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICAgaWYgKGQyID4gMCkge1xuICAgICAgICAgICAgdjIueCA9ICgtZDIgLyAoZDEgLSBkMikgKiB2MS54KSArIGQxIC8gKGQxIC0gZDIpICogdjIueDtcbiAgICAgICAgICAgIHYyLnkgPSAoLWQyIC8gKGQxIC0gZDIpICogdjEueSkgKyBkMSAvIChkMSAtIGQyKSAqIHYyLnk7XG4gICAgICAgICB9XG4gICAgICAgICBlbHNlIHt9XG4gICAgICB9XG4gICAgICBjLnggPSAodjAueCArIHYxLnggKyB2Mi54KSAvIDM7XG4gICAgICBjLnkgPSAodjAueSArIHYxLnkgKyB2Mi55KSAvIDM7XG4gICAgICByZXR1cm4gMC41ICogKCh2MS54IC0gdjAueCkgKiAodjIueSAtIHYwLnkpIC0gKHYxLnkgLSB2MC55KSAqICh2Mi54IC0gdjAueCkpO1xuICAgfVxuICAgYjJFZGdlU2hhcGUucHJvdG90eXBlLkdldExlbmd0aCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzLm1fbGVuZ3RoO1xuICAgfVxuICAgYjJFZGdlU2hhcGUucHJvdG90eXBlLkdldFZlcnRleDEgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5tX3YxO1xuICAgfVxuICAgYjJFZGdlU2hhcGUucHJvdG90eXBlLkdldFZlcnRleDIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5tX3YyO1xuICAgfVxuICAgYjJFZGdlU2hhcGUucHJvdG90eXBlLkdldENvcmVWZXJ0ZXgxID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMubV9jb3JlVjE7XG4gICB9XG4gICBiMkVkZ2VTaGFwZS5wcm90b3R5cGUuR2V0Q29yZVZlcnRleDIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5tX2NvcmVWMjtcbiAgIH1cbiAgIGIyRWRnZVNoYXBlLnByb3RvdHlwZS5HZXROb3JtYWxWZWN0b3IgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5tX25vcm1hbDtcbiAgIH1cbiAgIGIyRWRnZVNoYXBlLnByb3RvdHlwZS5HZXREaXJlY3Rpb25WZWN0b3IgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5tX2RpcmVjdGlvbjtcbiAgIH1cbiAgIGIyRWRnZVNoYXBlLnByb3RvdHlwZS5HZXRDb3JuZXIxVmVjdG9yID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMubV9jb3JuZXJEaXIxO1xuICAgfVxuICAgYjJFZGdlU2hhcGUucHJvdG90eXBlLkdldENvcm5lcjJWZWN0b3IgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5tX2Nvcm5lckRpcjI7XG4gICB9XG4gICBiMkVkZ2VTaGFwZS5wcm90b3R5cGUuQ29ybmVyMUlzQ29udmV4ID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMubV9jb3JuZXJDb252ZXgxO1xuICAgfVxuICAgYjJFZGdlU2hhcGUucHJvdG90eXBlLkNvcm5lcjJJc0NvbnZleCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzLm1fY29ybmVyQ29udmV4MjtcbiAgIH1cbiAgIGIyRWRnZVNoYXBlLnByb3RvdHlwZS5HZXRGaXJzdFZlcnRleCA9IGZ1bmN0aW9uICh4Zikge1xuICAgICAgdmFyIHRNYXQgPSB4Zi5SO1xuICAgICAgcmV0dXJuIG5ldyBiMlZlYzIoeGYucG9zaXRpb24ueCArICh0TWF0LmNvbDEueCAqIHRoaXMubV9jb3JlVjEueCArIHRNYXQuY29sMi54ICogdGhpcy5tX2NvcmVWMS55KSwgeGYucG9zaXRpb24ueSArICh0TWF0LmNvbDEueSAqIHRoaXMubV9jb3JlVjEueCArIHRNYXQuY29sMi55ICogdGhpcy5tX2NvcmVWMS55KSk7XG4gICB9XG4gICBiMkVkZ2VTaGFwZS5wcm90b3R5cGUuR2V0TmV4dEVkZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5tX25leHRFZGdlO1xuICAgfVxuICAgYjJFZGdlU2hhcGUucHJvdG90eXBlLkdldFByZXZFZGdlID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMubV9wcmV2RWRnZTtcbiAgIH1cbiAgIGIyRWRnZVNoYXBlLnByb3RvdHlwZS5TdXBwb3J0ID0gZnVuY3Rpb24gKHhmLCBkWCwgZFkpIHtcbiAgICAgIGlmIChkWCA9PT0gdW5kZWZpbmVkKSBkWCA9IDA7XG4gICAgICBpZiAoZFkgPT09IHVuZGVmaW5lZCkgZFkgPSAwO1xuICAgICAgdmFyIHRNYXQgPSB4Zi5SO1xuICAgICAgdmFyIHYxWCA9IHhmLnBvc2l0aW9uLnggKyAodE1hdC5jb2wxLnggKiB0aGlzLm1fY29yZVYxLnggKyB0TWF0LmNvbDIueCAqIHRoaXMubV9jb3JlVjEueSk7XG4gICAgICB2YXIgdjFZID0geGYucG9zaXRpb24ueSArICh0TWF0LmNvbDEueSAqIHRoaXMubV9jb3JlVjEueCArIHRNYXQuY29sMi55ICogdGhpcy5tX2NvcmVWMS55KTtcbiAgICAgIHZhciB2MlggPSB4Zi5wb3NpdGlvbi54ICsgKHRNYXQuY29sMS54ICogdGhpcy5tX2NvcmVWMi54ICsgdE1hdC5jb2wyLnggKiB0aGlzLm1fY29yZVYyLnkpO1xuICAgICAgdmFyIHYyWSA9IHhmLnBvc2l0aW9uLnkgKyAodE1hdC5jb2wxLnkgKiB0aGlzLm1fY29yZVYyLnggKyB0TWF0LmNvbDIueSAqIHRoaXMubV9jb3JlVjIueSk7XG4gICAgICBpZiAoKHYxWCAqIGRYICsgdjFZICogZFkpID4gKHYyWCAqIGRYICsgdjJZICogZFkpKSB7XG4gICAgICAgICB0aGlzLnNfc3VwcG9ydFZlYy54ID0gdjFYO1xuICAgICAgICAgdGhpcy5zX3N1cHBvcnRWZWMueSA9IHYxWTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICAgdGhpcy5zX3N1cHBvcnRWZWMueCA9IHYyWDtcbiAgICAgICAgIHRoaXMuc19zdXBwb3J0VmVjLnkgPSB2Mlk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5zX3N1cHBvcnRWZWM7XG4gICB9XG4gICBiMkVkZ2VTaGFwZS5wcm90b3R5cGUuYjJFZGdlU2hhcGUgPSBmdW5jdGlvbiAodjEsIHYyKSB7XG4gICAgICB0aGlzLl9fc3VwZXIuYjJTaGFwZS5jYWxsKHRoaXMpO1xuICAgICAgdGhpcy5tX3R5cGUgPSBiMlNoYXBlLmVfZWRnZVNoYXBlO1xuICAgICAgdGhpcy5tX3ByZXZFZGdlID0gbnVsbDtcbiAgICAgIHRoaXMubV9uZXh0RWRnZSA9IG51bGw7XG4gICAgICB0aGlzLm1fdjEgPSB2MTtcbiAgICAgIHRoaXMubV92MiA9IHYyO1xuICAgICAgdGhpcy5tX2RpcmVjdGlvbi5TZXQodGhpcy5tX3YyLnggLSB0aGlzLm1fdjEueCwgdGhpcy5tX3YyLnkgLSB0aGlzLm1fdjEueSk7XG4gICAgICB0aGlzLm1fbGVuZ3RoID0gdGhpcy5tX2RpcmVjdGlvbi5Ob3JtYWxpemUoKTtcbiAgICAgIHRoaXMubV9ub3JtYWwuU2V0KHRoaXMubV9kaXJlY3Rpb24ueSwgKC10aGlzLm1fZGlyZWN0aW9uLngpKTtcbiAgICAgIHRoaXMubV9jb3JlVjEuU2V0KCgtYjJTZXR0aW5ncy5iMl90b2lTbG9wICogKHRoaXMubV9ub3JtYWwueCAtIHRoaXMubV9kaXJlY3Rpb24ueCkpICsgdGhpcy5tX3YxLngsICgtYjJTZXR0aW5ncy5iMl90b2lTbG9wICogKHRoaXMubV9ub3JtYWwueSAtIHRoaXMubV9kaXJlY3Rpb24ueSkpICsgdGhpcy5tX3YxLnkpO1xuICAgICAgdGhpcy5tX2NvcmVWMi5TZXQoKC1iMlNldHRpbmdzLmIyX3RvaVNsb3AgKiAodGhpcy5tX25vcm1hbC54ICsgdGhpcy5tX2RpcmVjdGlvbi54KSkgKyB0aGlzLm1fdjIueCwgKC1iMlNldHRpbmdzLmIyX3RvaVNsb3AgKiAodGhpcy5tX25vcm1hbC55ICsgdGhpcy5tX2RpcmVjdGlvbi55KSkgKyB0aGlzLm1fdjIueSk7XG4gICAgICB0aGlzLm1fY29ybmVyRGlyMSA9IHRoaXMubV9ub3JtYWw7XG4gICAgICB0aGlzLm1fY29ybmVyRGlyMi5TZXQoKC10aGlzLm1fbm9ybWFsLngpLCAoLXRoaXMubV9ub3JtYWwueSkpO1xuICAgfVxuICAgYjJFZGdlU2hhcGUucHJvdG90eXBlLlNldFByZXZFZGdlID0gZnVuY3Rpb24gKGVkZ2UsIGNvcmUsIGNvcm5lckRpciwgY29udmV4KSB7XG4gICAgICB0aGlzLm1fcHJldkVkZ2UgPSBlZGdlO1xuICAgICAgdGhpcy5tX2NvcmVWMSA9IGNvcmU7XG4gICAgICB0aGlzLm1fY29ybmVyRGlyMSA9IGNvcm5lckRpcjtcbiAgICAgIHRoaXMubV9jb3JuZXJDb252ZXgxID0gY29udmV4O1xuICAgfVxuICAgYjJFZGdlU2hhcGUucHJvdG90eXBlLlNldE5leHRFZGdlID0gZnVuY3Rpb24gKGVkZ2UsIGNvcmUsIGNvcm5lckRpciwgY29udmV4KSB7XG4gICAgICB0aGlzLm1fbmV4dEVkZ2UgPSBlZGdlO1xuICAgICAgdGhpcy5tX2NvcmVWMiA9IGNvcmU7XG4gICAgICB0aGlzLm1fY29ybmVyRGlyMiA9IGNvcm5lckRpcjtcbiAgICAgIHRoaXMubV9jb3JuZXJDb252ZXgyID0gY29udmV4O1xuICAgfVxuICAgYjJNYXNzRGF0YS5iMk1hc3NEYXRhID0gZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcy5tYXNzID0gMC4wO1xuICAgICAgdGhpcy5jZW50ZXIgPSBuZXcgYjJWZWMyKDAsIDApO1xuICAgICAgdGhpcy5JID0gMC4wO1xuICAgfTtcbiAgIEJveDJELmluaGVyaXQoYjJQb2x5Z29uU2hhcGUsIEJveDJELkNvbGxpc2lvbi5TaGFwZXMuYjJTaGFwZSk7XG4gICBiMlBvbHlnb25TaGFwZS5wcm90b3R5cGUuX19zdXBlciA9IEJveDJELkNvbGxpc2lvbi5TaGFwZXMuYjJTaGFwZS5wcm90b3R5cGU7XG4gICBiMlBvbHlnb25TaGFwZS5iMlBvbHlnb25TaGFwZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIEJveDJELkNvbGxpc2lvbi5TaGFwZXMuYjJTaGFwZS5iMlNoYXBlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICB9O1xuICAgYjJQb2x5Z29uU2hhcGUucHJvdG90eXBlLkNvcHkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgcyA9IG5ldyBiMlBvbHlnb25TaGFwZSgpO1xuICAgICAgcy5TZXQodGhpcyk7XG4gICAgICByZXR1cm4gcztcbiAgIH1cbiAgIGIyUG9seWdvblNoYXBlLnByb3RvdHlwZS5TZXQgPSBmdW5jdGlvbiAob3RoZXIpIHtcbiAgICAgIHRoaXMuX19zdXBlci5TZXQuY2FsbCh0aGlzLCBvdGhlcik7XG4gICAgICBpZiAoQm94MkQuaXMob3RoZXIsIGIyUG9seWdvblNoYXBlKSkge1xuICAgICAgICAgdmFyIG90aGVyMiA9IChvdGhlciBpbnN0YW5jZW9mIGIyUG9seWdvblNoYXBlID8gb3RoZXIgOiBudWxsKTtcbiAgICAgICAgIHRoaXMubV9jZW50cm9pZC5TZXRWKG90aGVyMi5tX2NlbnRyb2lkKTtcbiAgICAgICAgIHRoaXMubV92ZXJ0ZXhDb3VudCA9IG90aGVyMi5tX3ZlcnRleENvdW50O1xuICAgICAgICAgdGhpcy5SZXNlcnZlKHRoaXMubV92ZXJ0ZXhDb3VudCk7XG4gICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubV92ZXJ0ZXhDb3VudDsgaSsrKSB7XG4gICAgICAgICAgICB0aGlzLm1fdmVydGljZXNbaV0uU2V0VihvdGhlcjIubV92ZXJ0aWNlc1tpXSk7XG4gICAgICAgICAgICB0aGlzLm1fbm9ybWFsc1tpXS5TZXRWKG90aGVyMi5tX25vcm1hbHNbaV0pO1xuICAgICAgICAgfVxuICAgICAgfVxuICAgfVxuICAgYjJQb2x5Z29uU2hhcGUucHJvdG90eXBlLlNldEFzQXJyYXkgPSBmdW5jdGlvbiAodmVydGljZXMsIHZlcnRleENvdW50KSB7XG4gICAgICBpZiAodmVydGV4Q291bnQgPT09IHVuZGVmaW5lZCkgdmVydGV4Q291bnQgPSAwO1xuICAgICAgdmFyIHYgPSBuZXcgVmVjdG9yKCk7XG4gICAgICB2YXIgaSA9IDAsXG4gICAgICAgICB0VmVjO1xuICAgICAgZm9yIChpID0gMDtcbiAgICAgIGkgPCB2ZXJ0aWNlcy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgdFZlYyA9IHZlcnRpY2VzW2ldO1xuICAgICAgICAgdi5wdXNoKHRWZWMpO1xuICAgICAgfVxuICAgICAgdGhpcy5TZXRBc1ZlY3Rvcih2LCB2ZXJ0ZXhDb3VudCk7XG4gICB9XG4gICBiMlBvbHlnb25TaGFwZS5Bc0FycmF5ID0gZnVuY3Rpb24gKHZlcnRpY2VzLCB2ZXJ0ZXhDb3VudCkge1xuICAgICAgaWYgKHZlcnRleENvdW50ID09PSB1bmRlZmluZWQpIHZlcnRleENvdW50ID0gMDtcbiAgICAgIHZhciBwb2x5Z29uU2hhcGUgPSBuZXcgYjJQb2x5Z29uU2hhcGUoKTtcbiAgICAgIHBvbHlnb25TaGFwZS5TZXRBc0FycmF5KHZlcnRpY2VzLCB2ZXJ0ZXhDb3VudCk7XG4gICAgICByZXR1cm4gcG9seWdvblNoYXBlO1xuICAgfVxuICAgYjJQb2x5Z29uU2hhcGUucHJvdG90eXBlLlNldEFzVmVjdG9yID0gZnVuY3Rpb24gKHZlcnRpY2VzLCB2ZXJ0ZXhDb3VudCkge1xuICAgICAgaWYgKHZlcnRleENvdW50ID09PSB1bmRlZmluZWQpIHZlcnRleENvdW50ID0gMDtcbiAgICAgIGlmICh2ZXJ0ZXhDb3VudCA9PSAwKSB2ZXJ0ZXhDb3VudCA9IHZlcnRpY2VzLmxlbmd0aDtcbiAgICAgIGIyU2V0dGluZ3MuYjJBc3NlcnQoMiA8PSB2ZXJ0ZXhDb3VudCk7XG4gICAgICB0aGlzLm1fdmVydGV4Q291bnQgPSB2ZXJ0ZXhDb3VudDtcbiAgICAgIHRoaXMuUmVzZXJ2ZSh2ZXJ0ZXhDb3VudCk7XG4gICAgICB2YXIgaSA9IDA7XG4gICAgICBmb3IgKGkgPSAwO1xuICAgICAgaSA8IHRoaXMubV92ZXJ0ZXhDb3VudDsgaSsrKSB7XG4gICAgICAgICB0aGlzLm1fdmVydGljZXNbaV0uU2V0Vih2ZXJ0aWNlc1tpXSk7XG4gICAgICB9XG4gICAgICBmb3IgKGkgPSAwO1xuICAgICAgaSA8IHRoaXMubV92ZXJ0ZXhDb3VudDsgKytpKSB7XG4gICAgICAgICB2YXIgaTEgPSBwYXJzZUludChpKTtcbiAgICAgICAgIHZhciBpMiA9IHBhcnNlSW50KGkgKyAxIDwgdGhpcy5tX3ZlcnRleENvdW50ID8gaSArIDEgOiAwKTtcbiAgICAgICAgIHZhciBlZGdlID0gYjJNYXRoLlN1YnRyYWN0VlYodGhpcy5tX3ZlcnRpY2VzW2kyXSwgdGhpcy5tX3ZlcnRpY2VzW2kxXSk7XG4gICAgICAgICBiMlNldHRpbmdzLmIyQXNzZXJ0KGVkZ2UuTGVuZ3RoU3F1YXJlZCgpID4gTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICAgICB0aGlzLm1fbm9ybWFsc1tpXS5TZXRWKGIyTWF0aC5Dcm9zc1ZGKGVkZ2UsIDEuMCkpO1xuICAgICAgICAgdGhpcy5tX25vcm1hbHNbaV0uTm9ybWFsaXplKCk7XG4gICAgICB9XG4gICAgICB0aGlzLm1fY2VudHJvaWQgPSBiMlBvbHlnb25TaGFwZS5Db21wdXRlQ2VudHJvaWQodGhpcy5tX3ZlcnRpY2VzLCB0aGlzLm1fdmVydGV4Q291bnQpO1xuICAgfVxuICAgYjJQb2x5Z29uU2hhcGUuQXNWZWN0b3IgPSBmdW5jdGlvbiAodmVydGljZXMsIHZlcnRleENvdW50KSB7XG4gICAgICBpZiAodmVydGV4Q291bnQgPT09IHVuZGVmaW5lZCkgdmVydGV4Q291bnQgPSAwO1xuICAgICAgdmFyIHBvbHlnb25TaGFwZSA9IG5ldyBiMlBvbHlnb25TaGFwZSgpO1xuICAgICAgcG9seWdvblNoYXBlLlNldEFzVmVjdG9yKHZlcnRpY2VzLCB2ZXJ0ZXhDb3VudCk7XG4gICAgICByZXR1cm4gcG9seWdvblNoYXBlO1xuICAgfVxuICAgYjJQb2x5Z29uU2hhcGUucHJvdG90eXBlLlNldEFzQm94ID0gZnVuY3Rpb24gKGh4LCBoeSkge1xuICAgICAgaWYgKGh4ID09PSB1bmRlZmluZWQpIGh4ID0gMDtcbiAgICAgIGlmIChoeSA9PT0gdW5kZWZpbmVkKSBoeSA9IDA7XG4gICAgICB0aGlzLm1fdmVydGV4Q291bnQgPSA0O1xuICAgICAgdGhpcy5SZXNlcnZlKDQpO1xuICAgICAgdGhpcy5tX3ZlcnRpY2VzWzBdLlNldCgoLWh4KSwgKC1oeSkpO1xuICAgICAgdGhpcy5tX3ZlcnRpY2VzWzFdLlNldChoeCwgKC1oeSkpO1xuICAgICAgdGhpcy5tX3ZlcnRpY2VzWzJdLlNldChoeCwgaHkpO1xuICAgICAgdGhpcy5tX3ZlcnRpY2VzWzNdLlNldCgoLWh4KSwgaHkpO1xuICAgICAgdGhpcy5tX25vcm1hbHNbMF0uU2V0KDAuMCwgKC0xLjApKTtcbiAgICAgIHRoaXMubV9ub3JtYWxzWzFdLlNldCgxLjAsIDAuMCk7XG4gICAgICB0aGlzLm1fbm9ybWFsc1syXS5TZXQoMC4wLCAxLjApO1xuICAgICAgdGhpcy5tX25vcm1hbHNbM10uU2V0KCgtMS4wKSwgMC4wKTtcbiAgICAgIHRoaXMubV9jZW50cm9pZC5TZXRaZXJvKCk7XG4gICB9XG4gICBiMlBvbHlnb25TaGFwZS5Bc0JveCA9IGZ1bmN0aW9uIChoeCwgaHkpIHtcbiAgICAgIGlmIChoeCA9PT0gdW5kZWZpbmVkKSBoeCA9IDA7XG4gICAgICBpZiAoaHkgPT09IHVuZGVmaW5lZCkgaHkgPSAwO1xuICAgICAgdmFyIHBvbHlnb25TaGFwZSA9IG5ldyBiMlBvbHlnb25TaGFwZSgpO1xuICAgICAgcG9seWdvblNoYXBlLlNldEFzQm94KGh4LCBoeSk7XG4gICAgICByZXR1cm4gcG9seWdvblNoYXBlO1xuICAgfVxuICAgYjJQb2x5Z29uU2hhcGUucHJvdG90eXBlLlNldEFzT3JpZW50ZWRCb3ggPSBmdW5jdGlvbiAoaHgsIGh5LCBjZW50ZXIsIGFuZ2xlKSB7XG4gICAgICBpZiAoaHggPT09IHVuZGVmaW5lZCkgaHggPSAwO1xuICAgICAgaWYgKGh5ID09PSB1bmRlZmluZWQpIGh5ID0gMDtcbiAgICAgIGlmIChjZW50ZXIgPT09IHVuZGVmaW5lZCkgY2VudGVyID0gbnVsbDtcbiAgICAgIGlmIChhbmdsZSA9PT0gdW5kZWZpbmVkKSBhbmdsZSA9IDAuMDtcbiAgICAgIHRoaXMubV92ZXJ0ZXhDb3VudCA9IDQ7XG4gICAgICB0aGlzLlJlc2VydmUoNCk7XG4gICAgICB0aGlzLm1fdmVydGljZXNbMF0uU2V0KCgtaHgpLCAoLWh5KSk7XG4gICAgICB0aGlzLm1fdmVydGljZXNbMV0uU2V0KGh4LCAoLWh5KSk7XG4gICAgICB0aGlzLm1fdmVydGljZXNbMl0uU2V0KGh4LCBoeSk7XG4gICAgICB0aGlzLm1fdmVydGljZXNbM10uU2V0KCgtaHgpLCBoeSk7XG4gICAgICB0aGlzLm1fbm9ybWFsc1swXS5TZXQoMC4wLCAoLTEuMCkpO1xuICAgICAgdGhpcy5tX25vcm1hbHNbMV0uU2V0KDEuMCwgMC4wKTtcbiAgICAgIHRoaXMubV9ub3JtYWxzWzJdLlNldCgwLjAsIDEuMCk7XG4gICAgICB0aGlzLm1fbm9ybWFsc1szXS5TZXQoKC0xLjApLCAwLjApO1xuICAgICAgdGhpcy5tX2NlbnRyb2lkID0gY2VudGVyO1xuICAgICAgdmFyIHhmID0gbmV3IGIyVHJhbnNmb3JtKCk7XG4gICAgICB4Zi5wb3NpdGlvbiA9IGNlbnRlcjtcbiAgICAgIHhmLlIuU2V0KGFuZ2xlKTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5tX3ZlcnRleENvdW50OyArK2kpIHtcbiAgICAgICAgIHRoaXMubV92ZXJ0aWNlc1tpXSA9IGIyTWF0aC5NdWxYKHhmLCB0aGlzLm1fdmVydGljZXNbaV0pO1xuICAgICAgICAgdGhpcy5tX25vcm1hbHNbaV0gPSBiMk1hdGguTXVsTVYoeGYuUiwgdGhpcy5tX25vcm1hbHNbaV0pO1xuICAgICAgfVxuICAgfVxuICAgYjJQb2x5Z29uU2hhcGUuQXNPcmllbnRlZEJveCA9IGZ1bmN0aW9uIChoeCwgaHksIGNlbnRlciwgYW5nbGUpIHtcbiAgICAgIGlmIChoeCA9PT0gdW5kZWZpbmVkKSBoeCA9IDA7XG4gICAgICBpZiAoaHkgPT09IHVuZGVmaW5lZCkgaHkgPSAwO1xuICAgICAgaWYgKGNlbnRlciA9PT0gdW5kZWZpbmVkKSBjZW50ZXIgPSBudWxsO1xuICAgICAgaWYgKGFuZ2xlID09PSB1bmRlZmluZWQpIGFuZ2xlID0gMC4wO1xuICAgICAgdmFyIHBvbHlnb25TaGFwZSA9IG5ldyBiMlBvbHlnb25TaGFwZSgpO1xuICAgICAgcG9seWdvblNoYXBlLlNldEFzT3JpZW50ZWRCb3goaHgsIGh5LCBjZW50ZXIsIGFuZ2xlKTtcbiAgICAgIHJldHVybiBwb2x5Z29uU2hhcGU7XG4gICB9XG4gICBiMlBvbHlnb25TaGFwZS5wcm90b3R5cGUuU2V0QXNFZGdlID0gZnVuY3Rpb24gKHYxLCB2Mikge1xuICAgICAgdGhpcy5tX3ZlcnRleENvdW50ID0gMjtcbiAgICAgIHRoaXMuUmVzZXJ2ZSgyKTtcbiAgICAgIHRoaXMubV92ZXJ0aWNlc1swXS5TZXRWKHYxKTtcbiAgICAgIHRoaXMubV92ZXJ0aWNlc1sxXS5TZXRWKHYyKTtcbiAgICAgIHRoaXMubV9jZW50cm9pZC54ID0gMC41ICogKHYxLnggKyB2Mi54KTtcbiAgICAgIHRoaXMubV9jZW50cm9pZC55ID0gMC41ICogKHYxLnkgKyB2Mi55KTtcbiAgICAgIHRoaXMubV9ub3JtYWxzWzBdID0gYjJNYXRoLkNyb3NzVkYoYjJNYXRoLlN1YnRyYWN0VlYodjIsIHYxKSwgMS4wKTtcbiAgICAgIHRoaXMubV9ub3JtYWxzWzBdLk5vcm1hbGl6ZSgpO1xuICAgICAgdGhpcy5tX25vcm1hbHNbMV0ueCA9ICgtdGhpcy5tX25vcm1hbHNbMF0ueCk7XG4gICAgICB0aGlzLm1fbm9ybWFsc1sxXS55ID0gKC10aGlzLm1fbm9ybWFsc1swXS55KTtcbiAgIH1cbiAgIGIyUG9seWdvblNoYXBlLkFzRWRnZSA9IGZ1bmN0aW9uICh2MSwgdjIpIHtcbiAgICAgIHZhciBwb2x5Z29uU2hhcGUgPSBuZXcgYjJQb2x5Z29uU2hhcGUoKTtcbiAgICAgIHBvbHlnb25TaGFwZS5TZXRBc0VkZ2UodjEsIHYyKTtcbiAgICAgIHJldHVybiBwb2x5Z29uU2hhcGU7XG4gICB9XG4gICBiMlBvbHlnb25TaGFwZS5wcm90b3R5cGUuVGVzdFBvaW50ID0gZnVuY3Rpb24gKHhmLCBwKSB7XG4gICAgICB2YXIgdFZlYztcbiAgICAgIHZhciB0TWF0ID0geGYuUjtcbiAgICAgIHZhciB0WCA9IHAueCAtIHhmLnBvc2l0aW9uLng7XG4gICAgICB2YXIgdFkgPSBwLnkgLSB4Zi5wb3NpdGlvbi55O1xuICAgICAgdmFyIHBMb2NhbFggPSAodFggKiB0TWF0LmNvbDEueCArIHRZICogdE1hdC5jb2wxLnkpO1xuICAgICAgdmFyIHBMb2NhbFkgPSAodFggKiB0TWF0LmNvbDIueCArIHRZICogdE1hdC5jb2wyLnkpO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLm1fdmVydGV4Q291bnQ7ICsraSkge1xuICAgICAgICAgdFZlYyA9IHRoaXMubV92ZXJ0aWNlc1tpXTtcbiAgICAgICAgIHRYID0gcExvY2FsWCAtIHRWZWMueDtcbiAgICAgICAgIHRZID0gcExvY2FsWSAtIHRWZWMueTtcbiAgICAgICAgIHRWZWMgPSB0aGlzLm1fbm9ybWFsc1tpXTtcbiAgICAgICAgIHZhciBkb3QgPSAodFZlYy54ICogdFggKyB0VmVjLnkgKiB0WSk7XG4gICAgICAgICBpZiAoZG90ID4gMC4wKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgIH1cbiAgIGIyUG9seWdvblNoYXBlLnByb3RvdHlwZS5SYXlDYXN0ID0gZnVuY3Rpb24gKG91dHB1dCwgaW5wdXQsIHRyYW5zZm9ybSkge1xuICAgICAgdmFyIGxvd2VyID0gMC4wO1xuICAgICAgdmFyIHVwcGVyID0gaW5wdXQubWF4RnJhY3Rpb247XG4gICAgICB2YXIgdFggPSAwO1xuICAgICAgdmFyIHRZID0gMDtcbiAgICAgIHZhciB0TWF0O1xuICAgICAgdmFyIHRWZWM7XG4gICAgICB0WCA9IGlucHV0LnAxLnggLSB0cmFuc2Zvcm0ucG9zaXRpb24ueDtcbiAgICAgIHRZID0gaW5wdXQucDEueSAtIHRyYW5zZm9ybS5wb3NpdGlvbi55O1xuICAgICAgdE1hdCA9IHRyYW5zZm9ybS5SO1xuICAgICAgdmFyIHAxWCA9ICh0WCAqIHRNYXQuY29sMS54ICsgdFkgKiB0TWF0LmNvbDEueSk7XG4gICAgICB2YXIgcDFZID0gKHRYICogdE1hdC5jb2wyLnggKyB0WSAqIHRNYXQuY29sMi55KTtcbiAgICAgIHRYID0gaW5wdXQucDIueCAtIHRyYW5zZm9ybS5wb3NpdGlvbi54O1xuICAgICAgdFkgPSBpbnB1dC5wMi55IC0gdHJhbnNmb3JtLnBvc2l0aW9uLnk7XG4gICAgICB0TWF0ID0gdHJhbnNmb3JtLlI7XG4gICAgICB2YXIgcDJYID0gKHRYICogdE1hdC5jb2wxLnggKyB0WSAqIHRNYXQuY29sMS55KTtcbiAgICAgIHZhciBwMlkgPSAodFggKiB0TWF0LmNvbDIueCArIHRZICogdE1hdC5jb2wyLnkpO1xuICAgICAgdmFyIGRYID0gcDJYIC0gcDFYO1xuICAgICAgdmFyIGRZID0gcDJZIC0gcDFZO1xuICAgICAgdmFyIGluZGV4ID0gcGFyc2VJbnQoKC0xKSk7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubV92ZXJ0ZXhDb3VudDsgKytpKSB7XG4gICAgICAgICB0VmVjID0gdGhpcy5tX3ZlcnRpY2VzW2ldO1xuICAgICAgICAgdFggPSB0VmVjLnggLSBwMVg7XG4gICAgICAgICB0WSA9IHRWZWMueSAtIHAxWTtcbiAgICAgICAgIHRWZWMgPSB0aGlzLm1fbm9ybWFsc1tpXTtcbiAgICAgICAgIHZhciBudW1lcmF0b3IgPSAodFZlYy54ICogdFggKyB0VmVjLnkgKiB0WSk7XG4gICAgICAgICB2YXIgZGVub21pbmF0b3IgPSAodFZlYy54ICogZFggKyB0VmVjLnkgKiBkWSk7XG4gICAgICAgICBpZiAoZGVub21pbmF0b3IgPT0gMC4wKSB7XG4gICAgICAgICAgICBpZiAobnVtZXJhdG9yIDwgMC4wKSB7XG4gICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICB9XG4gICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmIChkZW5vbWluYXRvciA8IDAuMCAmJiBudW1lcmF0b3IgPCBsb3dlciAqIGRlbm9taW5hdG9yKSB7XG4gICAgICAgICAgICAgICBsb3dlciA9IG51bWVyYXRvciAvIGRlbm9taW5hdG9yO1xuICAgICAgICAgICAgICAgaW5kZXggPSBpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoZGVub21pbmF0b3IgPiAwLjAgJiYgbnVtZXJhdG9yIDwgdXBwZXIgKiBkZW5vbWluYXRvcikge1xuICAgICAgICAgICAgICAgdXBwZXIgPSBudW1lcmF0b3IgLyBkZW5vbWluYXRvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgIH1cbiAgICAgICAgIGlmICh1cHBlciA8IGxvd2VyIC0gTnVtYmVyLk1JTl9WQUxVRSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGluZGV4ID49IDApIHtcbiAgICAgICAgIG91dHB1dC5mcmFjdGlvbiA9IGxvd2VyO1xuICAgICAgICAgdE1hdCA9IHRyYW5zZm9ybS5SO1xuICAgICAgICAgdFZlYyA9IHRoaXMubV9ub3JtYWxzW2luZGV4XTtcbiAgICAgICAgIG91dHB1dC5ub3JtYWwueCA9ICh0TWF0LmNvbDEueCAqIHRWZWMueCArIHRNYXQuY29sMi54ICogdFZlYy55KTtcbiAgICAgICAgIG91dHB1dC5ub3JtYWwueSA9ICh0TWF0LmNvbDEueSAqIHRWZWMueCArIHRNYXQuY29sMi55ICogdFZlYy55KTtcbiAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgfVxuICAgYjJQb2x5Z29uU2hhcGUucHJvdG90eXBlLkNvbXB1dGVBQUJCID0gZnVuY3Rpb24gKGFhYmIsIHhmKSB7XG4gICAgICB2YXIgdE1hdCA9IHhmLlI7XG4gICAgICB2YXIgdFZlYyA9IHRoaXMubV92ZXJ0aWNlc1swXTtcbiAgICAgIHZhciBsb3dlclggPSB4Zi5wb3NpdGlvbi54ICsgKHRNYXQuY29sMS54ICogdFZlYy54ICsgdE1hdC5jb2wyLnggKiB0VmVjLnkpO1xuICAgICAgdmFyIGxvd2VyWSA9IHhmLnBvc2l0aW9uLnkgKyAodE1hdC5jb2wxLnkgKiB0VmVjLnggKyB0TWF0LmNvbDIueSAqIHRWZWMueSk7XG4gICAgICB2YXIgdXBwZXJYID0gbG93ZXJYO1xuICAgICAgdmFyIHVwcGVyWSA9IGxvd2VyWTtcbiAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgdGhpcy5tX3ZlcnRleENvdW50OyArK2kpIHtcbiAgICAgICAgIHRWZWMgPSB0aGlzLm1fdmVydGljZXNbaV07XG4gICAgICAgICB2YXIgdlggPSB4Zi5wb3NpdGlvbi54ICsgKHRNYXQuY29sMS54ICogdFZlYy54ICsgdE1hdC5jb2wyLnggKiB0VmVjLnkpO1xuICAgICAgICAgdmFyIHZZID0geGYucG9zaXRpb24ueSArICh0TWF0LmNvbDEueSAqIHRWZWMueCArIHRNYXQuY29sMi55ICogdFZlYy55KTtcbiAgICAgICAgIGxvd2VyWCA9IGxvd2VyWCA8IHZYID8gbG93ZXJYIDogdlg7XG4gICAgICAgICBsb3dlclkgPSBsb3dlclkgPCB2WSA/IGxvd2VyWSA6IHZZO1xuICAgICAgICAgdXBwZXJYID0gdXBwZXJYID4gdlggPyB1cHBlclggOiB2WDtcbiAgICAgICAgIHVwcGVyWSA9IHVwcGVyWSA+IHZZID8gdXBwZXJZIDogdlk7XG4gICAgICB9XG4gICAgICBhYWJiLmxvd2VyQm91bmQueCA9IGxvd2VyWCAtIHRoaXMubV9yYWRpdXM7XG4gICAgICBhYWJiLmxvd2VyQm91bmQueSA9IGxvd2VyWSAtIHRoaXMubV9yYWRpdXM7XG4gICAgICBhYWJiLnVwcGVyQm91bmQueCA9IHVwcGVyWCArIHRoaXMubV9yYWRpdXM7XG4gICAgICBhYWJiLnVwcGVyQm91bmQueSA9IHVwcGVyWSArIHRoaXMubV9yYWRpdXM7XG4gICB9XG4gICBiMlBvbHlnb25TaGFwZS5wcm90b3R5cGUuQ29tcHV0ZU1hc3MgPSBmdW5jdGlvbiAobWFzc0RhdGEsIGRlbnNpdHkpIHtcbiAgICAgIGlmIChkZW5zaXR5ID09PSB1bmRlZmluZWQpIGRlbnNpdHkgPSAwO1xuICAgICAgaWYgKHRoaXMubV92ZXJ0ZXhDb3VudCA9PSAyKSB7XG4gICAgICAgICBtYXNzRGF0YS5jZW50ZXIueCA9IDAuNSAqICh0aGlzLm1fdmVydGljZXNbMF0ueCArIHRoaXMubV92ZXJ0aWNlc1sxXS54KTtcbiAgICAgICAgIG1hc3NEYXRhLmNlbnRlci55ID0gMC41ICogKHRoaXMubV92ZXJ0aWNlc1swXS55ICsgdGhpcy5tX3ZlcnRpY2VzWzFdLnkpO1xuICAgICAgICAgbWFzc0RhdGEubWFzcyA9IDAuMDtcbiAgICAgICAgIG1hc3NEYXRhLkkgPSAwLjA7XG4gICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgY2VudGVyWCA9IDAuMDtcbiAgICAgIHZhciBjZW50ZXJZID0gMC4wO1xuICAgICAgdmFyIGFyZWEgPSAwLjA7XG4gICAgICB2YXIgSSA9IDAuMDtcbiAgICAgIHZhciBwMVggPSAwLjA7XG4gICAgICB2YXIgcDFZID0gMC4wO1xuICAgICAgdmFyIGtfaW52MyA9IDEuMCAvIDMuMDtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5tX3ZlcnRleENvdW50OyArK2kpIHtcbiAgICAgICAgIHZhciBwMiA9IHRoaXMubV92ZXJ0aWNlc1tpXTtcbiAgICAgICAgIHZhciBwMyA9IGkgKyAxIDwgdGhpcy5tX3ZlcnRleENvdW50ID8gdGhpcy5tX3ZlcnRpY2VzW3BhcnNlSW50KGkgKyAxKV0gOiB0aGlzLm1fdmVydGljZXNbMF07XG4gICAgICAgICB2YXIgZTFYID0gcDIueCAtIHAxWDtcbiAgICAgICAgIHZhciBlMVkgPSBwMi55IC0gcDFZO1xuICAgICAgICAgdmFyIGUyWCA9IHAzLnggLSBwMVg7XG4gICAgICAgICB2YXIgZTJZID0gcDMueSAtIHAxWTtcbiAgICAgICAgIHZhciBEID0gZTFYICogZTJZIC0gZTFZICogZTJYO1xuICAgICAgICAgdmFyIHRyaWFuZ2xlQXJlYSA9IDAuNSAqIEQ7YXJlYSArPSB0cmlhbmdsZUFyZWE7XG4gICAgICAgICBjZW50ZXJYICs9IHRyaWFuZ2xlQXJlYSAqIGtfaW52MyAqIChwMVggKyBwMi54ICsgcDMueCk7XG4gICAgICAgICBjZW50ZXJZICs9IHRyaWFuZ2xlQXJlYSAqIGtfaW52MyAqIChwMVkgKyBwMi55ICsgcDMueSk7XG4gICAgICAgICB2YXIgcHggPSBwMVg7XG4gICAgICAgICB2YXIgcHkgPSBwMVk7XG4gICAgICAgICB2YXIgZXgxID0gZTFYO1xuICAgICAgICAgdmFyIGV5MSA9IGUxWTtcbiAgICAgICAgIHZhciBleDIgPSBlMlg7XG4gICAgICAgICB2YXIgZXkyID0gZTJZO1xuICAgICAgICAgdmFyIGludHgyID0ga19pbnYzICogKDAuMjUgKiAoZXgxICogZXgxICsgZXgyICogZXgxICsgZXgyICogZXgyKSArIChweCAqIGV4MSArIHB4ICogZXgyKSkgKyAwLjUgKiBweCAqIHB4O1xuICAgICAgICAgdmFyIGludHkyID0ga19pbnYzICogKDAuMjUgKiAoZXkxICogZXkxICsgZXkyICogZXkxICsgZXkyICogZXkyKSArIChweSAqIGV5MSArIHB5ICogZXkyKSkgKyAwLjUgKiBweSAqIHB5O0kgKz0gRCAqIChpbnR4MiArIGludHkyKTtcbiAgICAgIH1cbiAgICAgIG1hc3NEYXRhLm1hc3MgPSBkZW5zaXR5ICogYXJlYTtcbiAgICAgIGNlbnRlclggKj0gMS4wIC8gYXJlYTtcbiAgICAgIGNlbnRlclkgKj0gMS4wIC8gYXJlYTtcbiAgICAgIG1hc3NEYXRhLmNlbnRlci5TZXQoY2VudGVyWCwgY2VudGVyWSk7XG4gICAgICBtYXNzRGF0YS5JID0gZGVuc2l0eSAqIEk7XG4gICB9XG4gICBiMlBvbHlnb25TaGFwZS5wcm90b3R5cGUuQ29tcHV0ZVN1Ym1lcmdlZEFyZWEgPSBmdW5jdGlvbiAobm9ybWFsLCBvZmZzZXQsIHhmLCBjKSB7XG4gICAgICBpZiAob2Zmc2V0ID09PSB1bmRlZmluZWQpIG9mZnNldCA9IDA7XG4gICAgICB2YXIgbm9ybWFsTCA9IGIyTWF0aC5NdWxUTVYoeGYuUiwgbm9ybWFsKTtcbiAgICAgIHZhciBvZmZzZXRMID0gb2Zmc2V0IC0gYjJNYXRoLkRvdChub3JtYWwsIHhmLnBvc2l0aW9uKTtcbiAgICAgIHZhciBkZXB0aHMgPSBuZXcgVmVjdG9yX2Eyal9OdW1iZXIoKTtcbiAgICAgIHZhciBkaXZlQ291bnQgPSAwO1xuICAgICAgdmFyIGludG9JbmRleCA9IHBhcnNlSW50KCgtMSkpO1xuICAgICAgdmFyIG91dG9JbmRleCA9IHBhcnNlSW50KCgtMSkpO1xuICAgICAgdmFyIGxhc3RTdWJtZXJnZWQgPSBmYWxzZTtcbiAgICAgIHZhciBpID0gMDtcbiAgICAgIGZvciAoaSA9IDA7XG4gICAgICBpIDwgdGhpcy5tX3ZlcnRleENvdW50OyArK2kpIHtcbiAgICAgICAgIGRlcHRoc1tpXSA9IGIyTWF0aC5Eb3Qobm9ybWFsTCwgdGhpcy5tX3ZlcnRpY2VzW2ldKSAtIG9mZnNldEw7XG4gICAgICAgICB2YXIgaXNTdWJtZXJnZWQgPSBkZXB0aHNbaV0gPCAoLU51bWJlci5NSU5fVkFMVUUpO1xuICAgICAgICAgaWYgKGkgPiAwKSB7XG4gICAgICAgICAgICBpZiAoaXNTdWJtZXJnZWQpIHtcbiAgICAgICAgICAgICAgIGlmICghbGFzdFN1Ym1lcmdlZCkge1xuICAgICAgICAgICAgICAgICAgaW50b0luZGV4ID0gaSAtIDE7XG4gICAgICAgICAgICAgICAgICBkaXZlQ291bnQrKztcbiAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgaWYgKGxhc3RTdWJtZXJnZWQpIHtcbiAgICAgICAgICAgICAgICAgIG91dG9JbmRleCA9IGkgLSAxO1xuICAgICAgICAgICAgICAgICAgZGl2ZUNvdW50Kys7XG4gICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICB9XG4gICAgICAgICBsYXN0U3VibWVyZ2VkID0gaXNTdWJtZXJnZWQ7XG4gICAgICB9XG4gICAgICBzd2l0Y2ggKGRpdmVDb3VudCkge1xuICAgICAgY2FzZSAwOlxuICAgICAgICAgaWYgKGxhc3RTdWJtZXJnZWQpIHtcbiAgICAgICAgICAgIHZhciBtZCA9IG5ldyBiMk1hc3NEYXRhKCk7XG4gICAgICAgICAgICB0aGlzLkNvbXB1dGVNYXNzKG1kLCAxKTtcbiAgICAgICAgICAgIGMuU2V0VihiMk1hdGguTXVsWCh4ZiwgbWQuY2VudGVyKSk7XG4gICAgICAgICAgICByZXR1cm4gbWQubWFzcztcbiAgICAgICAgIH1cbiAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICB9XG4gICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgIGlmIChpbnRvSW5kZXggPT0gKC0xKSkge1xuICAgICAgICAgICAgaW50b0luZGV4ID0gdGhpcy5tX3ZlcnRleENvdW50IC0gMTtcbiAgICAgICAgIH1cbiAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgb3V0b0luZGV4ID0gdGhpcy5tX3ZlcnRleENvdW50IC0gMTtcbiAgICAgICAgIH1cbiAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgdmFyIGludG9JbmRleDIgPSBwYXJzZUludCgoaW50b0luZGV4ICsgMSkgJSB0aGlzLm1fdmVydGV4Q291bnQpO1xuICAgICAgdmFyIG91dG9JbmRleDIgPSBwYXJzZUludCgob3V0b0luZGV4ICsgMSkgJSB0aGlzLm1fdmVydGV4Q291bnQpO1xuICAgICAgdmFyIGludG9MYW1kZGEgPSAoMCAtIGRlcHRoc1tpbnRvSW5kZXhdKSAvIChkZXB0aHNbaW50b0luZGV4Ml0gLSBkZXB0aHNbaW50b0luZGV4XSk7XG4gICAgICB2YXIgb3V0b0xhbWRkYSA9ICgwIC0gZGVwdGhzW291dG9JbmRleF0pIC8gKGRlcHRoc1tvdXRvSW5kZXgyXSAtIGRlcHRoc1tvdXRvSW5kZXhdKTtcbiAgICAgIHZhciBpbnRvVmVjID0gbmV3IGIyVmVjMih0aGlzLm1fdmVydGljZXNbaW50b0luZGV4XS54ICogKDEgLSBpbnRvTGFtZGRhKSArIHRoaXMubV92ZXJ0aWNlc1tpbnRvSW5kZXgyXS54ICogaW50b0xhbWRkYSwgdGhpcy5tX3ZlcnRpY2VzW2ludG9JbmRleF0ueSAqICgxIC0gaW50b0xhbWRkYSkgKyB0aGlzLm1fdmVydGljZXNbaW50b0luZGV4Ml0ueSAqIGludG9MYW1kZGEpO1xuICAgICAgdmFyIG91dG9WZWMgPSBuZXcgYjJWZWMyKHRoaXMubV92ZXJ0aWNlc1tvdXRvSW5kZXhdLnggKiAoMSAtIG91dG9MYW1kZGEpICsgdGhpcy5tX3ZlcnRpY2VzW291dG9JbmRleDJdLnggKiBvdXRvTGFtZGRhLCB0aGlzLm1fdmVydGljZXNbb3V0b0luZGV4XS55ICogKDEgLSBvdXRvTGFtZGRhKSArIHRoaXMubV92ZXJ0aWNlc1tvdXRvSW5kZXgyXS55ICogb3V0b0xhbWRkYSk7XG4gICAgICB2YXIgYXJlYSA9IDA7XG4gICAgICB2YXIgY2VudGVyID0gbmV3IGIyVmVjMigpO1xuICAgICAgdmFyIHAyID0gdGhpcy5tX3ZlcnRpY2VzW2ludG9JbmRleDJdO1xuICAgICAgdmFyIHAzO1xuICAgICAgaSA9IGludG9JbmRleDI7XG4gICAgICB3aGlsZSAoaSAhPSBvdXRvSW5kZXgyKSB7XG4gICAgICAgICBpID0gKGkgKyAxKSAlIHRoaXMubV92ZXJ0ZXhDb3VudDtcbiAgICAgICAgIGlmIChpID09IG91dG9JbmRleDIpIHAzID0gb3V0b1ZlYztcbiAgICAgICAgIGVsc2UgcDMgPSB0aGlzLm1fdmVydGljZXNbaV07XG4gICAgICAgICB2YXIgdHJpYW5nbGVBcmVhID0gMC41ICogKChwMi54IC0gaW50b1ZlYy54KSAqIChwMy55IC0gaW50b1ZlYy55KSAtIChwMi55IC0gaW50b1ZlYy55KSAqIChwMy54IC0gaW50b1ZlYy54KSk7XG4gICAgICAgICBhcmVhICs9IHRyaWFuZ2xlQXJlYTtcbiAgICAgICAgIGNlbnRlci54ICs9IHRyaWFuZ2xlQXJlYSAqIChpbnRvVmVjLnggKyBwMi54ICsgcDMueCkgLyAzO1xuICAgICAgICAgY2VudGVyLnkgKz0gdHJpYW5nbGVBcmVhICogKGludG9WZWMueSArIHAyLnkgKyBwMy55KSAvIDM7XG4gICAgICAgICBwMiA9IHAzO1xuICAgICAgfVxuICAgICAgY2VudGVyLk11bHRpcGx5KDEgLyBhcmVhKTtcbiAgICAgIGMuU2V0VihiMk1hdGguTXVsWCh4ZiwgY2VudGVyKSk7XG4gICAgICByZXR1cm4gYXJlYTtcbiAgIH1cbiAgIGIyUG9seWdvblNoYXBlLnByb3RvdHlwZS5HZXRWZXJ0ZXhDb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzLm1fdmVydGV4Q291bnQ7XG4gICB9XG4gICBiMlBvbHlnb25TaGFwZS5wcm90b3R5cGUuR2V0VmVydGljZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5tX3ZlcnRpY2VzO1xuICAgfVxuICAgYjJQb2x5Z29uU2hhcGUucHJvdG90eXBlLkdldE5vcm1hbHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5tX25vcm1hbHM7XG4gICB9XG4gICBiMlBvbHlnb25TaGFwZS5wcm90b3R5cGUuR2V0U3VwcG9ydCA9IGZ1bmN0aW9uIChkKSB7XG4gICAgICB2YXIgYmVzdEluZGV4ID0gMDtcbiAgICAgIHZhciBiZXN0VmFsdWUgPSB0aGlzLm1fdmVydGljZXNbMF0ueCAqIGQueCArIHRoaXMubV92ZXJ0aWNlc1swXS55ICogZC55O1xuICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCB0aGlzLm1fdmVydGV4Q291bnQ7ICsraSkge1xuICAgICAgICAgdmFyIHZhbHVlID0gdGhpcy5tX3ZlcnRpY2VzW2ldLnggKiBkLnggKyB0aGlzLm1fdmVydGljZXNbaV0ueSAqIGQueTtcbiAgICAgICAgIGlmICh2YWx1ZSA+IGJlc3RWYWx1ZSkge1xuICAgICAgICAgICAgYmVzdEluZGV4ID0gaTtcbiAgICAgICAgICAgIGJlc3RWYWx1ZSA9IHZhbHVlO1xuICAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGJlc3RJbmRleDtcbiAgIH1cbiAgIGIyUG9seWdvblNoYXBlLnByb3RvdHlwZS5HZXRTdXBwb3J0VmVydGV4ID0gZnVuY3Rpb24gKGQpIHtcbiAgICAgIHZhciBiZXN0SW5kZXggPSAwO1xuICAgICAgdmFyIGJlc3RWYWx1ZSA9IHRoaXMubV92ZXJ0aWNlc1swXS54ICogZC54ICsgdGhpcy5tX3ZlcnRpY2VzWzBdLnkgKiBkLnk7XG4gICAgICBmb3IgKHZhciBpID0gMTsgaSA8IHRoaXMubV92ZXJ0ZXhDb3VudDsgKytpKSB7XG4gICAgICAgICB2YXIgdmFsdWUgPSB0aGlzLm1fdmVydGljZXNbaV0ueCAqIGQueCArIHRoaXMubV92ZXJ0aWNlc1tpXS55ICogZC55O1xuICAgICAgICAgaWYgKHZhbHVlID4gYmVzdFZhbHVlKSB7XG4gICAgICAgICAgICBiZXN0SW5kZXggPSBpO1xuICAgICAgICAgICAgYmVzdFZhbHVlID0gdmFsdWU7XG4gICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5tX3ZlcnRpY2VzW2Jlc3RJbmRleF07XG4gICB9XG4gICBiMlBvbHlnb25TaGFwZS5wcm90b3R5cGUuVmFsaWRhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICB9XG4gICBiMlBvbHlnb25TaGFwZS5wcm90b3R5cGUuYjJQb2x5Z29uU2hhcGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLl9fc3VwZXIuYjJTaGFwZS5jYWxsKHRoaXMpO1xuICAgICAgdGhpcy5tX3R5cGUgPSBiMlNoYXBlLmVfcG9seWdvblNoYXBlO1xuICAgICAgdGhpcy5tX2NlbnRyb2lkID0gbmV3IGIyVmVjMigpO1xuICAgICAgdGhpcy5tX3ZlcnRpY2VzID0gbmV3IFZlY3RvcigpO1xuICAgICAgdGhpcy5tX25vcm1hbHMgPSBuZXcgVmVjdG9yKCk7XG4gICB9XG4gICBiMlBvbHlnb25TaGFwZS5wcm90b3R5cGUuUmVzZXJ2ZSA9IGZ1bmN0aW9uIChjb3VudCkge1xuICAgICAgaWYgKGNvdW50ID09PSB1bmRlZmluZWQpIGNvdW50ID0gMDtcbiAgICAgIGZvciAodmFyIGkgPSBwYXJzZUludCh0aGlzLm1fdmVydGljZXMubGVuZ3RoKTsgaSA8IGNvdW50OyBpKyspIHtcbiAgICAgICAgIHRoaXMubV92ZXJ0aWNlc1tpXSA9IG5ldyBiMlZlYzIoKTtcbiAgICAgICAgIHRoaXMubV9ub3JtYWxzW2ldID0gbmV3IGIyVmVjMigpO1xuICAgICAgfVxuICAgfVxuICAgYjJQb2x5Z29uU2hhcGUuQ29tcHV0ZUNlbnRyb2lkID0gZnVuY3Rpb24gKHZzLCBjb3VudCkge1xuICAgICAgaWYgKGNvdW50ID09PSB1bmRlZmluZWQpIGNvdW50ID0gMDtcbiAgICAgIHZhciBjID0gbmV3IGIyVmVjMigpO1xuICAgICAgdmFyIGFyZWEgPSAwLjA7XG4gICAgICB2YXIgcDFYID0gMC4wO1xuICAgICAgdmFyIHAxWSA9IDAuMDtcbiAgICAgIHZhciBpbnYzID0gMS4wIC8gMy4wO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb3VudDsgKytpKSB7XG4gICAgICAgICB2YXIgcDIgPSB2c1tpXTtcbiAgICAgICAgIHZhciBwMyA9IGkgKyAxIDwgY291bnQgPyB2c1twYXJzZUludChpICsgMSldIDogdnNbMF07XG4gICAgICAgICB2YXIgZTFYID0gcDIueCAtIHAxWDtcbiAgICAgICAgIHZhciBlMVkgPSBwMi55IC0gcDFZO1xuICAgICAgICAgdmFyIGUyWCA9IHAzLnggLSBwMVg7XG4gICAgICAgICB2YXIgZTJZID0gcDMueSAtIHAxWTtcbiAgICAgICAgIHZhciBEID0gKGUxWCAqIGUyWSAtIGUxWSAqIGUyWCk7XG4gICAgICAgICB2YXIgdHJpYW5nbGVBcmVhID0gMC41ICogRDthcmVhICs9IHRyaWFuZ2xlQXJlYTtcbiAgICAgICAgIGMueCArPSB0cmlhbmdsZUFyZWEgKiBpbnYzICogKHAxWCArIHAyLnggKyBwMy54KTtcbiAgICAgICAgIGMueSArPSB0cmlhbmdsZUFyZWEgKiBpbnYzICogKHAxWSArIHAyLnkgKyBwMy55KTtcbiAgICAgIH1cbiAgICAgIGMueCAqPSAxLjAgLyBhcmVhO1xuICAgICAgYy55ICo9IDEuMCAvIGFyZWE7XG4gICAgICByZXR1cm4gYztcbiAgIH1cbiAgIGIyUG9seWdvblNoYXBlLkNvbXB1dGVPQkIgPSBmdW5jdGlvbiAob2JiLCB2cywgY291bnQpIHtcbiAgICAgIGlmIChjb3VudCA9PT0gdW5kZWZpbmVkKSBjb3VudCA9IDA7XG4gICAgICB2YXIgaSA9IDA7XG4gICAgICB2YXIgcCA9IG5ldyBWZWN0b3IoY291bnQgKyAxKTtcbiAgICAgIGZvciAoaSA9IDA7XG4gICAgICBpIDwgY291bnQ7ICsraSkge1xuICAgICAgICAgcFtpXSA9IHZzW2ldO1xuICAgICAgfVxuICAgICAgcFtjb3VudF0gPSBwWzBdO1xuICAgICAgdmFyIG1pbkFyZWEgPSBOdW1iZXIuTUFYX1ZBTFVFO1xuICAgICAgZm9yIChpID0gMTtcbiAgICAgIGkgPD0gY291bnQ7ICsraSkge1xuICAgICAgICAgdmFyIHJvb3QgPSBwW3BhcnNlSW50KGkgLSAxKV07XG4gICAgICAgICB2YXIgdXhYID0gcFtpXS54IC0gcm9vdC54O1xuICAgICAgICAgdmFyIHV4WSA9IHBbaV0ueSAtIHJvb3QueTtcbiAgICAgICAgIHZhciBsZW5ndGggPSBNYXRoLnNxcnQodXhYICogdXhYICsgdXhZICogdXhZKTtcbiAgICAgICAgIHV4WCAvPSBsZW5ndGg7XG4gICAgICAgICB1eFkgLz0gbGVuZ3RoO1xuICAgICAgICAgdmFyIHV5WCA9ICgtdXhZKTtcbiAgICAgICAgIHZhciB1eVkgPSB1eFg7XG4gICAgICAgICB2YXIgbG93ZXJYID0gTnVtYmVyLk1BWF9WQUxVRTtcbiAgICAgICAgIHZhciBsb3dlclkgPSBOdW1iZXIuTUFYX1ZBTFVFO1xuICAgICAgICAgdmFyIHVwcGVyWCA9ICgtTnVtYmVyLk1BWF9WQUxVRSk7XG4gICAgICAgICB2YXIgdXBwZXJZID0gKC1OdW1iZXIuTUFYX1ZBTFVFKTtcbiAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgY291bnQ7ICsraikge1xuICAgICAgICAgICAgdmFyIGRYID0gcFtqXS54IC0gcm9vdC54O1xuICAgICAgICAgICAgdmFyIGRZID0gcFtqXS55IC0gcm9vdC55O1xuICAgICAgICAgICAgdmFyIHJYID0gKHV4WCAqIGRYICsgdXhZICogZFkpO1xuICAgICAgICAgICAgdmFyIHJZID0gKHV5WCAqIGRYICsgdXlZICogZFkpO1xuICAgICAgICAgICAgaWYgKHJYIDwgbG93ZXJYKSBsb3dlclggPSByWDtcbiAgICAgICAgICAgIGlmIChyWSA8IGxvd2VyWSkgbG93ZXJZID0gclk7XG4gICAgICAgICAgICBpZiAoclggPiB1cHBlclgpIHVwcGVyWCA9IHJYO1xuICAgICAgICAgICAgaWYgKHJZID4gdXBwZXJZKSB1cHBlclkgPSByWTtcbiAgICAgICAgIH1cbiAgICAgICAgIHZhciBhcmVhID0gKHVwcGVyWCAtIGxvd2VyWCkgKiAodXBwZXJZIC0gbG93ZXJZKTtcbiAgICAgICAgIGlmIChhcmVhIDwgMC45NSAqIG1pbkFyZWEpIHtcbiAgICAgICAgICAgIG1pbkFyZWEgPSBhcmVhO1xuICAgICAgICAgICAgb2JiLlIuY29sMS54ID0gdXhYO1xuICAgICAgICAgICAgb2JiLlIuY29sMS55ID0gdXhZO1xuICAgICAgICAgICAgb2JiLlIuY29sMi54ID0gdXlYO1xuICAgICAgICAgICAgb2JiLlIuY29sMi55ID0gdXlZO1xuICAgICAgICAgICAgdmFyIGNlbnRlclggPSAwLjUgKiAobG93ZXJYICsgdXBwZXJYKTtcbiAgICAgICAgICAgIHZhciBjZW50ZXJZID0gMC41ICogKGxvd2VyWSArIHVwcGVyWSk7XG4gICAgICAgICAgICB2YXIgdE1hdCA9IG9iYi5SO1xuICAgICAgICAgICAgb2JiLmNlbnRlci54ID0gcm9vdC54ICsgKHRNYXQuY29sMS54ICogY2VudGVyWCArIHRNYXQuY29sMi54ICogY2VudGVyWSk7XG4gICAgICAgICAgICBvYmIuY2VudGVyLnkgPSByb290LnkgKyAodE1hdC5jb2wxLnkgKiBjZW50ZXJYICsgdE1hdC5jb2wyLnkgKiBjZW50ZXJZKTtcbiAgICAgICAgICAgIG9iYi5leHRlbnRzLnggPSAwLjUgKiAodXBwZXJYIC0gbG93ZXJYKTtcbiAgICAgICAgICAgIG9iYi5leHRlbnRzLnkgPSAwLjUgKiAodXBwZXJZIC0gbG93ZXJZKTtcbiAgICAgICAgIH1cbiAgICAgIH1cbiAgIH1cbiAgIEJveDJELnBvc3REZWZzLnB1c2goZnVuY3Rpb24gKCkge1xuICAgICAgQm94MkQuQ29sbGlzaW9uLlNoYXBlcy5iMlBvbHlnb25TaGFwZS5zX21hdCA9IG5ldyBiMk1hdDIyKCk7XG4gICB9KTtcbiAgIGIyU2hhcGUuYjJTaGFwZSA9IGZ1bmN0aW9uICgpIHt9O1xuICAgYjJTaGFwZS5wcm90b3R5cGUuQ29weSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgfVxuICAgYjJTaGFwZS5wcm90b3R5cGUuU2V0ID0gZnVuY3Rpb24gKG90aGVyKSB7XG4gICAgICB0aGlzLm1fcmFkaXVzID0gb3RoZXIubV9yYWRpdXM7XG4gICB9XG4gICBiMlNoYXBlLnByb3RvdHlwZS5HZXRUeXBlID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMubV90eXBlO1xuICAgfVxuICAgYjJTaGFwZS5wcm90b3R5cGUuVGVzdFBvaW50ID0gZnVuY3Rpb24gKHhmLCBwKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICB9XG4gICBiMlNoYXBlLnByb3RvdHlwZS5SYXlDYXN0ID0gZnVuY3Rpb24gKG91dHB1dCwgaW5wdXQsIHRyYW5zZm9ybSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgfVxuICAgYjJTaGFwZS5wcm90b3R5cGUuQ29tcHV0ZUFBQkIgPSBmdW5jdGlvbiAoYWFiYiwgeGYpIHt9XG4gICBiMlNoYXBlLnByb3RvdHlwZS5Db21wdXRlTWFzcyA9IGZ1bmN0aW9uIChtYXNzRGF0YSwgZGVuc2l0eSkge1xuICAgICAgaWYgKGRlbnNpdHkgPT09IHVuZGVmaW5lZCkgZGVuc2l0eSA9IDA7XG4gICB9XG4gICBiMlNoYXBlLnByb3RvdHlwZS5Db21wdXRlU3VibWVyZ2VkQXJlYSA9IGZ1bmN0aW9uIChub3JtYWwsIG9mZnNldCwgeGYsIGMpIHtcbiAgICAgIGlmIChvZmZzZXQgPT09IHVuZGVmaW5lZCkgb2Zmc2V0ID0gMDtcbiAgICAgIHJldHVybiAwO1xuICAgfVxuICAgYjJTaGFwZS5UZXN0T3ZlcmxhcCA9IGZ1bmN0aW9uIChzaGFwZTEsIHRyYW5zZm9ybTEsIHNoYXBlMiwgdHJhbnNmb3JtMikge1xuICAgICAgdmFyIGlucHV0ID0gbmV3IGIyRGlzdGFuY2VJbnB1dCgpO1xuICAgICAgaW5wdXQucHJveHlBID0gbmV3IGIyRGlzdGFuY2VQcm94eSgpO1xuICAgICAgaW5wdXQucHJveHlBLlNldChzaGFwZTEpO1xuICAgICAgaW5wdXQucHJveHlCID0gbmV3IGIyRGlzdGFuY2VQcm94eSgpO1xuICAgICAgaW5wdXQucHJveHlCLlNldChzaGFwZTIpO1xuICAgICAgaW5wdXQudHJhbnNmb3JtQSA9IHRyYW5zZm9ybTE7XG4gICAgICBpbnB1dC50cmFuc2Zvcm1CID0gdHJhbnNmb3JtMjtcbiAgICAgIGlucHV0LnVzZVJhZGlpID0gdHJ1ZTtcbiAgICAgIHZhciBzaW1wbGV4Q2FjaGUgPSBuZXcgYjJTaW1wbGV4Q2FjaGUoKTtcbiAgICAgIHNpbXBsZXhDYWNoZS5jb3VudCA9IDA7XG4gICAgICB2YXIgb3V0cHV0ID0gbmV3IGIyRGlzdGFuY2VPdXRwdXQoKTtcbiAgICAgIGIyRGlzdGFuY2UuRGlzdGFuY2Uob3V0cHV0LCBzaW1wbGV4Q2FjaGUsIGlucHV0KTtcbiAgICAgIHJldHVybiBvdXRwdXQuZGlzdGFuY2UgPCAxMC4wICogTnVtYmVyLk1JTl9WQUxVRTtcbiAgIH1cbiAgIGIyU2hhcGUucHJvdG90eXBlLmIyU2hhcGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLm1fdHlwZSA9IGIyU2hhcGUuZV91bmtub3duU2hhcGU7XG4gICAgICB0aGlzLm1fcmFkaXVzID0gYjJTZXR0aW5ncy5iMl9saW5lYXJTbG9wO1xuICAgfVxuICAgQm94MkQucG9zdERlZnMucHVzaChmdW5jdGlvbiAoKSB7XG4gICAgICBCb3gyRC5Db2xsaXNpb24uU2hhcGVzLmIyU2hhcGUuZV91bmtub3duU2hhcGUgPSBwYXJzZUludCgoLTEpKTtcbiAgICAgIEJveDJELkNvbGxpc2lvbi5TaGFwZXMuYjJTaGFwZS5lX2NpcmNsZVNoYXBlID0gMDtcbiAgICAgIEJveDJELkNvbGxpc2lvbi5TaGFwZXMuYjJTaGFwZS5lX3BvbHlnb25TaGFwZSA9IDE7XG4gICAgICBCb3gyRC5Db2xsaXNpb24uU2hhcGVzLmIyU2hhcGUuZV9lZGdlU2hhcGUgPSAyO1xuICAgICAgQm94MkQuQ29sbGlzaW9uLlNoYXBlcy5iMlNoYXBlLmVfc2hhcGVUeXBlQ291bnQgPSAzO1xuICAgICAgQm94MkQuQ29sbGlzaW9uLlNoYXBlcy5iMlNoYXBlLmVfaGl0Q29sbGlkZSA9IDE7XG4gICAgICBCb3gyRC5Db2xsaXNpb24uU2hhcGVzLmIyU2hhcGUuZV9taXNzQ29sbGlkZSA9IDA7XG4gICAgICBCb3gyRC5Db2xsaXNpb24uU2hhcGVzLmIyU2hhcGUuZV9zdGFydHNJbnNpZGVDb2xsaWRlID0gcGFyc2VJbnQoKC0xKSk7XG4gICB9KTtcbn0pKCk7XG4oZnVuY3Rpb24gKCkge1xuICAgdmFyIGIyQ29sb3IgPSBCb3gyRC5Db21tb24uYjJDb2xvcixcbiAgICAgIGIyaW50ZXJuYWwgPSBCb3gyRC5Db21tb24uYjJpbnRlcm5hbCxcbiAgICAgIGIyU2V0dGluZ3MgPSBCb3gyRC5Db21tb24uYjJTZXR0aW5ncyxcbiAgICAgIGIyTWF0MjIgPSBCb3gyRC5Db21tb24uTWF0aC5iMk1hdDIyLFxuICAgICAgYjJNYXQzMyA9IEJveDJELkNvbW1vbi5NYXRoLmIyTWF0MzMsXG4gICAgICBiMk1hdGggPSBCb3gyRC5Db21tb24uTWF0aC5iMk1hdGgsXG4gICAgICBiMlN3ZWVwID0gQm94MkQuQ29tbW9uLk1hdGguYjJTd2VlcCxcbiAgICAgIGIyVHJhbnNmb3JtID0gQm94MkQuQ29tbW9uLk1hdGguYjJUcmFuc2Zvcm0sXG4gICAgICBiMlZlYzIgPSBCb3gyRC5Db21tb24uTWF0aC5iMlZlYzIsXG4gICAgICBiMlZlYzMgPSBCb3gyRC5Db21tb24uTWF0aC5iMlZlYzM7XG5cbiAgIGIyQ29sb3IuYjJDb2xvciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMuX3IgPSAwO1xuICAgICAgdGhpcy5fZyA9IDA7XG4gICAgICB0aGlzLl9iID0gMDtcbiAgIH07XG4gICBiMkNvbG9yLnByb3RvdHlwZS5iMkNvbG9yID0gZnVuY3Rpb24gKHJyLCBnZywgYmIpIHtcbiAgICAgIGlmIChyciA9PT0gdW5kZWZpbmVkKSByciA9IDA7XG4gICAgICBpZiAoZ2cgPT09IHVuZGVmaW5lZCkgZ2cgPSAwO1xuICAgICAgaWYgKGJiID09PSB1bmRlZmluZWQpIGJiID0gMDtcbiAgICAgIHRoaXMuX3IgPSBCb3gyRC5wYXJzZVVJbnQoMjU1ICogYjJNYXRoLkNsYW1wKHJyLCAwLjAsIDEuMCkpO1xuICAgICAgdGhpcy5fZyA9IEJveDJELnBhcnNlVUludCgyNTUgKiBiMk1hdGguQ2xhbXAoZ2csIDAuMCwgMS4wKSk7XG4gICAgICB0aGlzLl9iID0gQm94MkQucGFyc2VVSW50KDI1NSAqIGIyTWF0aC5DbGFtcChiYiwgMC4wLCAxLjApKTtcbiAgIH1cbiAgIGIyQ29sb3IucHJvdG90eXBlLlNldCA9IGZ1bmN0aW9uIChyciwgZ2csIGJiKSB7XG4gICAgICBpZiAocnIgPT09IHVuZGVmaW5lZCkgcnIgPSAwO1xuICAgICAgaWYgKGdnID09PSB1bmRlZmluZWQpIGdnID0gMDtcbiAgICAgIGlmIChiYiA9PT0gdW5kZWZpbmVkKSBiYiA9IDA7XG4gICAgICB0aGlzLl9yID0gQm94MkQucGFyc2VVSW50KDI1NSAqIGIyTWF0aC5DbGFtcChyciwgMC4wLCAxLjApKTtcbiAgICAgIHRoaXMuX2cgPSBCb3gyRC5wYXJzZVVJbnQoMjU1ICogYjJNYXRoLkNsYW1wKGdnLCAwLjAsIDEuMCkpO1xuICAgICAgdGhpcy5fYiA9IEJveDJELnBhcnNlVUludCgyNTUgKiBiMk1hdGguQ2xhbXAoYmIsIDAuMCwgMS4wKSk7XG4gICB9XG4gICBPYmplY3QuZGVmaW5lUHJvcGVydHkoYjJDb2xvci5wcm90b3R5cGUsICdyJywge1xuICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICBzZXQ6IGZ1bmN0aW9uIChycikge1xuICAgICAgICAgaWYgKHJyID09PSB1bmRlZmluZWQpIHJyID0gMDtcbiAgICAgICAgIHRoaXMuX3IgPSBCb3gyRC5wYXJzZVVJbnQoMjU1ICogYjJNYXRoLkNsYW1wKHJyLCAwLjAsIDEuMCkpO1xuICAgICAgfVxuICAgfSk7XG4gICBPYmplY3QuZGVmaW5lUHJvcGVydHkoYjJDb2xvci5wcm90b3R5cGUsICdnJywge1xuICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICBzZXQ6IGZ1bmN0aW9uIChnZykge1xuICAgICAgICAgaWYgKGdnID09PSB1bmRlZmluZWQpIGdnID0gMDtcbiAgICAgICAgIHRoaXMuX2cgPSBCb3gyRC5wYXJzZVVJbnQoMjU1ICogYjJNYXRoLkNsYW1wKGdnLCAwLjAsIDEuMCkpO1xuICAgICAgfVxuICAgfSk7XG4gICBPYmplY3QuZGVmaW5lUHJvcGVydHkoYjJDb2xvci5wcm90b3R5cGUsICdiJywge1xuICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICBzZXQ6IGZ1bmN0aW9uIChiYikge1xuICAgICAgICAgaWYgKGJiID09PSB1bmRlZmluZWQpIGJiID0gMDtcbiAgICAgICAgIHRoaXMuX2IgPSBCb3gyRC5wYXJzZVVJbnQoMjU1ICogYjJNYXRoLkNsYW1wKGJiLCAwLjAsIDEuMCkpO1xuICAgICAgfVxuICAgfSk7XG4gICBPYmplY3QuZGVmaW5lUHJvcGVydHkoYjJDb2xvci5wcm90b3R5cGUsICdjb2xvcicsIHtcbiAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICByZXR1cm4gKHRoaXMuX3IgPDwgMTYpIHwgKHRoaXMuX2cgPDwgOCkgfCAodGhpcy5fYik7XG4gICAgICB9XG4gICB9KTtcbiAgIGIyU2V0dGluZ3MuYjJTZXR0aW5ncyA9IGZ1bmN0aW9uICgpIHt9O1xuICAgYjJTZXR0aW5ncy5iMk1peEZyaWN0aW9uID0gZnVuY3Rpb24gKGZyaWN0aW9uMSwgZnJpY3Rpb24yKSB7XG4gICAgICBpZiAoZnJpY3Rpb24xID09PSB1bmRlZmluZWQpIGZyaWN0aW9uMSA9IDA7XG4gICAgICBpZiAoZnJpY3Rpb24yID09PSB1bmRlZmluZWQpIGZyaWN0aW9uMiA9IDA7XG4gICAgICByZXR1cm4gTWF0aC5zcXJ0KGZyaWN0aW9uMSAqIGZyaWN0aW9uMik7XG4gICB9XG4gICBiMlNldHRpbmdzLmIyTWl4UmVzdGl0dXRpb24gPSBmdW5jdGlvbiAocmVzdGl0dXRpb24xLCByZXN0aXR1dGlvbjIpIHtcbiAgICAgIGlmIChyZXN0aXR1dGlvbjEgPT09IHVuZGVmaW5lZCkgcmVzdGl0dXRpb24xID0gMDtcbiAgICAgIGlmIChyZXN0aXR1dGlvbjIgPT09IHVuZGVmaW5lZCkgcmVzdGl0dXRpb24yID0gMDtcbiAgICAgIHJldHVybiByZXN0aXR1dGlvbjEgPiByZXN0aXR1dGlvbjIgPyByZXN0aXR1dGlvbjEgOiByZXN0aXR1dGlvbjI7XG4gICB9XG4gICBiMlNldHRpbmdzLmIyQXNzZXJ0ID0gZnVuY3Rpb24gKGEpIHtcbiAgICAgIGlmICghYSkge1xuICAgICAgICAgdGhyb3cgXCJBc3NlcnRpb24gRmFpbGVkXCI7XG4gICAgICB9XG4gICB9XG4gICBCb3gyRC5wb3N0RGVmcy5wdXNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIEJveDJELkNvbW1vbi5iMlNldHRpbmdzLlZFUlNJT04gPSBcIjIuMWFscGhhXCI7XG4gICAgICBCb3gyRC5Db21tb24uYjJTZXR0aW5ncy5VU0hSVF9NQVggPSAweDAwMDBmZmZmO1xuICAgICAgQm94MkQuQ29tbW9uLmIyU2V0dGluZ3MuYjJfcGkgPSBNYXRoLlBJO1xuICAgICAgQm94MkQuQ29tbW9uLmIyU2V0dGluZ3MuYjJfbWF4TWFuaWZvbGRQb2ludHMgPSAyO1xuICAgICAgQm94MkQuQ29tbW9uLmIyU2V0dGluZ3MuYjJfYWFiYkV4dGVuc2lvbiA9IDAuMTtcbiAgICAgIEJveDJELkNvbW1vbi5iMlNldHRpbmdzLmIyX2FhYmJNdWx0aXBsaWVyID0gMi4wO1xuICAgICAgQm94MkQuQ29tbW9uLmIyU2V0dGluZ3MuYjJfcG9seWdvblJhZGl1cyA9IDIuMCAqIGIyU2V0dGluZ3MuYjJfbGluZWFyU2xvcDtcbiAgICAgIEJveDJELkNvbW1vbi5iMlNldHRpbmdzLmIyX2xpbmVhclNsb3AgPSAwLjAwNTtcbiAgICAgIEJveDJELkNvbW1vbi5iMlNldHRpbmdzLmIyX2FuZ3VsYXJTbG9wID0gMi4wIC8gMTgwLjAgKiBiMlNldHRpbmdzLmIyX3BpO1xuICAgICAgQm94MkQuQ29tbW9uLmIyU2V0dGluZ3MuYjJfdG9pU2xvcCA9IDguMCAqIGIyU2V0dGluZ3MuYjJfbGluZWFyU2xvcDtcbiAgICAgIEJveDJELkNvbW1vbi5iMlNldHRpbmdzLmIyX21heFRPSUNvbnRhY3RzUGVySXNsYW5kID0gMzI7XG4gICAgICBCb3gyRC5Db21tb24uYjJTZXR0aW5ncy5iMl9tYXhUT0lKb2ludHNQZXJJc2xhbmQgPSAzMjtcbiAgICAgIEJveDJELkNvbW1vbi5iMlNldHRpbmdzLmIyX3ZlbG9jaXR5VGhyZXNob2xkID0gMS4wO1xuICAgICAgQm94MkQuQ29tbW9uLmIyU2V0dGluZ3MuYjJfbWF4TGluZWFyQ29ycmVjdGlvbiA9IDAuMjtcbiAgICAgIEJveDJELkNvbW1vbi5iMlNldHRpbmdzLmIyX21heEFuZ3VsYXJDb3JyZWN0aW9uID0gOC4wIC8gMTgwLjAgKiBiMlNldHRpbmdzLmIyX3BpO1xuICAgICAgQm94MkQuQ29tbW9uLmIyU2V0dGluZ3MuYjJfbWF4VHJhbnNsYXRpb24gPSAyLjA7XG4gICAgICBCb3gyRC5Db21tb24uYjJTZXR0aW5ncy5iMl9tYXhUcmFuc2xhdGlvblNxdWFyZWQgPSBiMlNldHRpbmdzLmIyX21heFRyYW5zbGF0aW9uICogYjJTZXR0aW5ncy5iMl9tYXhUcmFuc2xhdGlvbjtcbiAgICAgIEJveDJELkNvbW1vbi5iMlNldHRpbmdzLmIyX21heFJvdGF0aW9uID0gMC41ICogYjJTZXR0aW5ncy5iMl9waTtcbiAgICAgIEJveDJELkNvbW1vbi5iMlNldHRpbmdzLmIyX21heFJvdGF0aW9uU3F1YXJlZCA9IGIyU2V0dGluZ3MuYjJfbWF4Um90YXRpb24gKiBiMlNldHRpbmdzLmIyX21heFJvdGF0aW9uO1xuICAgICAgQm94MkQuQ29tbW9uLmIyU2V0dGluZ3MuYjJfY29udGFjdEJhdW1nYXJ0ZSA9IDAuMjtcbiAgICAgIEJveDJELkNvbW1vbi5iMlNldHRpbmdzLmIyX3RpbWVUb1NsZWVwID0gMC41O1xuICAgICAgQm94MkQuQ29tbW9uLmIyU2V0dGluZ3MuYjJfbGluZWFyU2xlZXBUb2xlcmFuY2UgPSAwLjAxO1xuICAgICAgQm94MkQuQ29tbW9uLmIyU2V0dGluZ3MuYjJfYW5ndWxhclNsZWVwVG9sZXJhbmNlID0gMi4wIC8gMTgwLjAgKiBiMlNldHRpbmdzLmIyX3BpO1xuICAgfSk7XG59KSgpO1xuKGZ1bmN0aW9uICgpIHtcbiAgIHZhciBiMkFBQkIgPSBCb3gyRC5Db2xsaXNpb24uYjJBQUJCLFxuICAgICAgYjJDb2xvciA9IEJveDJELkNvbW1vbi5iMkNvbG9yLFxuICAgICAgYjJpbnRlcm5hbCA9IEJveDJELkNvbW1vbi5iMmludGVybmFsLFxuICAgICAgYjJTZXR0aW5ncyA9IEJveDJELkNvbW1vbi5iMlNldHRpbmdzLFxuICAgICAgYjJNYXQyMiA9IEJveDJELkNvbW1vbi5NYXRoLmIyTWF0MjIsXG4gICAgICBiMk1hdDMzID0gQm94MkQuQ29tbW9uLk1hdGguYjJNYXQzMyxcbiAgICAgIGIyTWF0aCA9IEJveDJELkNvbW1vbi5NYXRoLmIyTWF0aCxcbiAgICAgIGIyU3dlZXAgPSBCb3gyRC5Db21tb24uTWF0aC5iMlN3ZWVwLFxuICAgICAgYjJUcmFuc2Zvcm0gPSBCb3gyRC5Db21tb24uTWF0aC5iMlRyYW5zZm9ybSxcbiAgICAgIGIyVmVjMiA9IEJveDJELkNvbW1vbi5NYXRoLmIyVmVjMixcbiAgICAgIGIyVmVjMyA9IEJveDJELkNvbW1vbi5NYXRoLmIyVmVjMztcblxuICAgYjJNYXQyMi5iMk1hdDIyID0gZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcy5jb2wxID0gbmV3IGIyVmVjMigpO1xuICAgICAgdGhpcy5jb2wyID0gbmV3IGIyVmVjMigpO1xuICAgfTtcbiAgIGIyTWF0MjIucHJvdG90eXBlLmIyTWF0MjIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLlNldElkZW50aXR5KCk7XG4gICB9XG4gICBiMk1hdDIyLkZyb21BbmdsZSA9IGZ1bmN0aW9uIChhbmdsZSkge1xuICAgICAgaWYgKGFuZ2xlID09PSB1bmRlZmluZWQpIGFuZ2xlID0gMDtcbiAgICAgIHZhciBtYXQgPSBuZXcgYjJNYXQyMigpO1xuICAgICAgbWF0LlNldChhbmdsZSk7XG4gICAgICByZXR1cm4gbWF0O1xuICAgfVxuICAgYjJNYXQyMi5Gcm9tVlYgPSBmdW5jdGlvbiAoYzEsIGMyKSB7XG4gICAgICB2YXIgbWF0ID0gbmV3IGIyTWF0MjIoKTtcbiAgICAgIG1hdC5TZXRWVihjMSwgYzIpO1xuICAgICAgcmV0dXJuIG1hdDtcbiAgIH1cbiAgIGIyTWF0MjIucHJvdG90eXBlLlNldCA9IGZ1bmN0aW9uIChhbmdsZSkge1xuICAgICAgaWYgKGFuZ2xlID09PSB1bmRlZmluZWQpIGFuZ2xlID0gMDtcbiAgICAgIHZhciBjID0gTWF0aC5jb3MoYW5nbGUpO1xuICAgICAgdmFyIHMgPSBNYXRoLnNpbihhbmdsZSk7XG4gICAgICB0aGlzLmNvbDEueCA9IGM7XG4gICAgICB0aGlzLmNvbDIueCA9ICgtcyk7XG4gICAgICB0aGlzLmNvbDEueSA9IHM7XG4gICAgICB0aGlzLmNvbDIueSA9IGM7XG4gICB9XG4gICBiMk1hdDIyLnByb3RvdHlwZS5TZXRWViA9IGZ1bmN0aW9uIChjMSwgYzIpIHtcbiAgICAgIHRoaXMuY29sMS5TZXRWKGMxKTtcbiAgICAgIHRoaXMuY29sMi5TZXRWKGMyKTtcbiAgIH1cbiAgIGIyTWF0MjIucHJvdG90eXBlLkNvcHkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgbWF0ID0gbmV3IGIyTWF0MjIoKTtcbiAgICAgIG1hdC5TZXRNKHRoaXMpO1xuICAgICAgcmV0dXJuIG1hdDtcbiAgIH1cbiAgIGIyTWF0MjIucHJvdG90eXBlLlNldE0gPSBmdW5jdGlvbiAobSkge1xuICAgICAgdGhpcy5jb2wxLlNldFYobS5jb2wxKTtcbiAgICAgIHRoaXMuY29sMi5TZXRWKG0uY29sMik7XG4gICB9XG4gICBiMk1hdDIyLnByb3RvdHlwZS5BZGRNID0gZnVuY3Rpb24gKG0pIHtcbiAgICAgIHRoaXMuY29sMS54ICs9IG0uY29sMS54O1xuICAgICAgdGhpcy5jb2wxLnkgKz0gbS5jb2wxLnk7XG4gICAgICB0aGlzLmNvbDIueCArPSBtLmNvbDIueDtcbiAgICAgIHRoaXMuY29sMi55ICs9IG0uY29sMi55O1xuICAgfVxuICAgYjJNYXQyMi5wcm90b3R5cGUuU2V0SWRlbnRpdHkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLmNvbDEueCA9IDEuMDtcbiAgICAgIHRoaXMuY29sMi54ID0gMC4wO1xuICAgICAgdGhpcy5jb2wxLnkgPSAwLjA7XG4gICAgICB0aGlzLmNvbDIueSA9IDEuMDtcbiAgIH1cbiAgIGIyTWF0MjIucHJvdG90eXBlLlNldFplcm8gPSBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLmNvbDEueCA9IDAuMDtcbiAgICAgIHRoaXMuY29sMi54ID0gMC4wO1xuICAgICAgdGhpcy5jb2wxLnkgPSAwLjA7XG4gICAgICB0aGlzLmNvbDIueSA9IDAuMDtcbiAgIH1cbiAgIGIyTWF0MjIucHJvdG90eXBlLkdldEFuZ2xlID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIE1hdGguYXRhbjIodGhpcy5jb2wxLnksIHRoaXMuY29sMS54KTtcbiAgIH1cbiAgIGIyTWF0MjIucHJvdG90eXBlLkdldEludmVyc2UgPSBmdW5jdGlvbiAob3V0KSB7XG4gICAgICB2YXIgYSA9IHRoaXMuY29sMS54O1xuICAgICAgdmFyIGIgPSB0aGlzLmNvbDIueDtcbiAgICAgIHZhciBjID0gdGhpcy5jb2wxLnk7XG4gICAgICB2YXIgZCA9IHRoaXMuY29sMi55O1xuICAgICAgdmFyIGRldCA9IGEgKiBkIC0gYiAqIGM7XG4gICAgICBpZiAoZGV0ICE9IDAuMCkge1xuICAgICAgICAgZGV0ID0gMS4wIC8gZGV0O1xuICAgICAgfVxuICAgICAgb3V0LmNvbDEueCA9IGRldCAqIGQ7XG4gICAgICBvdXQuY29sMi54ID0gKC1kZXQgKiBiKTtcbiAgICAgIG91dC5jb2wxLnkgPSAoLWRldCAqIGMpO1xuICAgICAgb3V0LmNvbDIueSA9IGRldCAqIGE7XG4gICAgICByZXR1cm4gb3V0O1xuICAgfVxuICAgYjJNYXQyMi5wcm90b3R5cGUuU29sdmUgPSBmdW5jdGlvbiAob3V0LCBiWCwgYlkpIHtcbiAgICAgIGlmIChiWCA9PT0gdW5kZWZpbmVkKSBiWCA9IDA7XG4gICAgICBpZiAoYlkgPT09IHVuZGVmaW5lZCkgYlkgPSAwO1xuICAgICAgdmFyIGExMSA9IHRoaXMuY29sMS54O1xuICAgICAgdmFyIGExMiA9IHRoaXMuY29sMi54O1xuICAgICAgdmFyIGEyMSA9IHRoaXMuY29sMS55O1xuICAgICAgdmFyIGEyMiA9IHRoaXMuY29sMi55O1xuICAgICAgdmFyIGRldCA9IGExMSAqIGEyMiAtIGExMiAqIGEyMTtcbiAgICAgIGlmIChkZXQgIT0gMC4wKSB7XG4gICAgICAgICBkZXQgPSAxLjAgLyBkZXQ7XG4gICAgICB9XG4gICAgICBvdXQueCA9IGRldCAqIChhMjIgKiBiWCAtIGExMiAqIGJZKTtcbiAgICAgIG91dC55ID0gZGV0ICogKGExMSAqIGJZIC0gYTIxICogYlgpO1xuICAgICAgcmV0dXJuIG91dDtcbiAgIH1cbiAgIGIyTWF0MjIucHJvdG90eXBlLkFicyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMuY29sMS5BYnMoKTtcbiAgICAgIHRoaXMuY29sMi5BYnMoKTtcbiAgIH1cbiAgIGIyTWF0MzMuYjJNYXQzMyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMuY29sMSA9IG5ldyBiMlZlYzMoKTtcbiAgICAgIHRoaXMuY29sMiA9IG5ldyBiMlZlYzMoKTtcbiAgICAgIHRoaXMuY29sMyA9IG5ldyBiMlZlYzMoKTtcbiAgIH07XG4gICBiMk1hdDMzLnByb3RvdHlwZS5iMk1hdDMzID0gZnVuY3Rpb24gKGMxLCBjMiwgYzMpIHtcbiAgICAgIGlmIChjMSA9PT0gdW5kZWZpbmVkKSBjMSA9IG51bGw7XG4gICAgICBpZiAoYzIgPT09IHVuZGVmaW5lZCkgYzIgPSBudWxsO1xuICAgICAgaWYgKGMzID09PSB1bmRlZmluZWQpIGMzID0gbnVsbDtcbiAgICAgIGlmICghYzEgJiYgIWMyICYmICFjMykge1xuICAgICAgICAgdGhpcy5jb2wxLlNldFplcm8oKTtcbiAgICAgICAgIHRoaXMuY29sMi5TZXRaZXJvKCk7XG4gICAgICAgICB0aGlzLmNvbDMuU2V0WmVybygpO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgICB0aGlzLmNvbDEuU2V0VihjMSk7XG4gICAgICAgICB0aGlzLmNvbDIuU2V0VihjMik7XG4gICAgICAgICB0aGlzLmNvbDMuU2V0VihjMyk7XG4gICAgICB9XG4gICB9XG4gICBiMk1hdDMzLnByb3RvdHlwZS5TZXRWVlYgPSBmdW5jdGlvbiAoYzEsIGMyLCBjMykge1xuICAgICAgdGhpcy5jb2wxLlNldFYoYzEpO1xuICAgICAgdGhpcy5jb2wyLlNldFYoYzIpO1xuICAgICAgdGhpcy5jb2wzLlNldFYoYzMpO1xuICAgfVxuICAgYjJNYXQzMy5wcm90b3R5cGUuQ29weSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBuZXcgYjJNYXQzMyh0aGlzLmNvbDEsIHRoaXMuY29sMiwgdGhpcy5jb2wzKTtcbiAgIH1cbiAgIGIyTWF0MzMucHJvdG90eXBlLlNldE0gPSBmdW5jdGlvbiAobSkge1xuICAgICAgdGhpcy5jb2wxLlNldFYobS5jb2wxKTtcbiAgICAgIHRoaXMuY29sMi5TZXRWKG0uY29sMik7XG4gICAgICB0aGlzLmNvbDMuU2V0VihtLmNvbDMpO1xuICAgfVxuICAgYjJNYXQzMy5wcm90b3R5cGUuQWRkTSA9IGZ1bmN0aW9uIChtKSB7XG4gICAgICB0aGlzLmNvbDEueCArPSBtLmNvbDEueDtcbiAgICAgIHRoaXMuY29sMS55ICs9IG0uY29sMS55O1xuICAgICAgdGhpcy5jb2wxLnogKz0gbS5jb2wxLno7XG4gICAgICB0aGlzLmNvbDIueCArPSBtLmNvbDIueDtcbiAgICAgIHRoaXMuY29sMi55ICs9IG0uY29sMi55O1xuICAgICAgdGhpcy5jb2wyLnogKz0gbS5jb2wyLno7XG4gICAgICB0aGlzLmNvbDMueCArPSBtLmNvbDMueDtcbiAgICAgIHRoaXMuY29sMy55ICs9IG0uY29sMy55O1xuICAgICAgdGhpcy5jb2wzLnogKz0gbS5jb2wzLno7XG4gICB9XG4gICBiMk1hdDMzLnByb3RvdHlwZS5TZXRJZGVudGl0eSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMuY29sMS54ID0gMS4wO1xuICAgICAgdGhpcy5jb2wyLnggPSAwLjA7XG4gICAgICB0aGlzLmNvbDMueCA9IDAuMDtcbiAgICAgIHRoaXMuY29sMS55ID0gMC4wO1xuICAgICAgdGhpcy5jb2wyLnkgPSAxLjA7XG4gICAgICB0aGlzLmNvbDMueSA9IDAuMDtcbiAgICAgIHRoaXMuY29sMS56ID0gMC4wO1xuICAgICAgdGhpcy5jb2wyLnogPSAwLjA7XG4gICAgICB0aGlzLmNvbDMueiA9IDEuMDtcbiAgIH1cbiAgIGIyTWF0MzMucHJvdG90eXBlLlNldFplcm8gPSBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLmNvbDEueCA9IDAuMDtcbiAgICAgIHRoaXMuY29sMi54ID0gMC4wO1xuICAgICAgdGhpcy5jb2wzLnggPSAwLjA7XG4gICAgICB0aGlzLmNvbDEueSA9IDAuMDtcbiAgICAgIHRoaXMuY29sMi55ID0gMC4wO1xuICAgICAgdGhpcy5jb2wzLnkgPSAwLjA7XG4gICAgICB0aGlzLmNvbDEueiA9IDAuMDtcbiAgICAgIHRoaXMuY29sMi56ID0gMC4wO1xuICAgICAgdGhpcy5jb2wzLnogPSAwLjA7XG4gICB9XG4gICBiMk1hdDMzLnByb3RvdHlwZS5Tb2x2ZTIyID0gZnVuY3Rpb24gKG91dCwgYlgsIGJZKSB7XG4gICAgICBpZiAoYlggPT09IHVuZGVmaW5lZCkgYlggPSAwO1xuICAgICAgaWYgKGJZID09PSB1bmRlZmluZWQpIGJZID0gMDtcbiAgICAgIHZhciBhMTEgPSB0aGlzLmNvbDEueDtcbiAgICAgIHZhciBhMTIgPSB0aGlzLmNvbDIueDtcbiAgICAgIHZhciBhMjEgPSB0aGlzLmNvbDEueTtcbiAgICAgIHZhciBhMjIgPSB0aGlzLmNvbDIueTtcbiAgICAgIHZhciBkZXQgPSBhMTEgKiBhMjIgLSBhMTIgKiBhMjE7XG4gICAgICBpZiAoZGV0ICE9IDAuMCkge1xuICAgICAgICAgZGV0ID0gMS4wIC8gZGV0O1xuICAgICAgfVxuICAgICAgb3V0LnggPSBkZXQgKiAoYTIyICogYlggLSBhMTIgKiBiWSk7XG4gICAgICBvdXQueSA9IGRldCAqIChhMTEgKiBiWSAtIGEyMSAqIGJYKTtcbiAgICAgIHJldHVybiBvdXQ7XG4gICB9XG4gICBiMk1hdDMzLnByb3RvdHlwZS5Tb2x2ZTMzID0gZnVuY3Rpb24gKG91dCwgYlgsIGJZLCBiWikge1xuICAgICAgaWYgKGJYID09PSB1bmRlZmluZWQpIGJYID0gMDtcbiAgICAgIGlmIChiWSA9PT0gdW5kZWZpbmVkKSBiWSA9IDA7XG4gICAgICBpZiAoYlogPT09IHVuZGVmaW5lZCkgYlogPSAwO1xuICAgICAgdmFyIGExMSA9IHRoaXMuY29sMS54O1xuICAgICAgdmFyIGEyMSA9IHRoaXMuY29sMS55O1xuICAgICAgdmFyIGEzMSA9IHRoaXMuY29sMS56O1xuICAgICAgdmFyIGExMiA9IHRoaXMuY29sMi54O1xuICAgICAgdmFyIGEyMiA9IHRoaXMuY29sMi55O1xuICAgICAgdmFyIGEzMiA9IHRoaXMuY29sMi56O1xuICAgICAgdmFyIGExMyA9IHRoaXMuY29sMy54O1xuICAgICAgdmFyIGEyMyA9IHRoaXMuY29sMy55O1xuICAgICAgdmFyIGEzMyA9IHRoaXMuY29sMy56O1xuICAgICAgdmFyIGRldCA9IGExMSAqIChhMjIgKiBhMzMgLSBhMzIgKiBhMjMpICsgYTIxICogKGEzMiAqIGExMyAtIGExMiAqIGEzMykgKyBhMzEgKiAoYTEyICogYTIzIC0gYTIyICogYTEzKTtcbiAgICAgIGlmIChkZXQgIT0gMC4wKSB7XG4gICAgICAgICBkZXQgPSAxLjAgLyBkZXQ7XG4gICAgICB9XG4gICAgICBvdXQueCA9IGRldCAqIChiWCAqIChhMjIgKiBhMzMgLSBhMzIgKiBhMjMpICsgYlkgKiAoYTMyICogYTEzIC0gYTEyICogYTMzKSArIGJaICogKGExMiAqIGEyMyAtIGEyMiAqIGExMykpO1xuICAgICAgb3V0LnkgPSBkZXQgKiAoYTExICogKGJZICogYTMzIC0gYlogKiBhMjMpICsgYTIxICogKGJaICogYTEzIC0gYlggKiBhMzMpICsgYTMxICogKGJYICogYTIzIC0gYlkgKiBhMTMpKTtcbiAgICAgIG91dC56ID0gZGV0ICogKGExMSAqIChhMjIgKiBiWiAtIGEzMiAqIGJZKSArIGEyMSAqIChhMzIgKiBiWCAtIGExMiAqIGJaKSArIGEzMSAqIChhMTIgKiBiWSAtIGEyMiAqIGJYKSk7XG4gICAgICByZXR1cm4gb3V0O1xuICAgfVxuICAgYjJNYXRoLmIyTWF0aCA9IGZ1bmN0aW9uICgpIHt9O1xuICAgYjJNYXRoLklzVmFsaWQgPSBmdW5jdGlvbiAoeCkge1xuICAgICAgaWYgKHggPT09IHVuZGVmaW5lZCkgeCA9IDA7XG4gICAgICByZXR1cm4gaXNGaW5pdGUoeCk7XG4gICB9XG4gICBiMk1hdGguRG90ID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIHJldHVybiBhLnggKiBiLnggKyBhLnkgKiBiLnk7XG4gICB9XG4gICBiMk1hdGguQ3Jvc3NWViA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICByZXR1cm4gYS54ICogYi55IC0gYS55ICogYi54O1xuICAgfVxuICAgYjJNYXRoLkNyb3NzVkYgPSBmdW5jdGlvbiAoYSwgcykge1xuICAgICAgaWYgKHMgPT09IHVuZGVmaW5lZCkgcyA9IDA7XG4gICAgICB2YXIgdiA9IG5ldyBiMlZlYzIocyAqIGEueSwgKC1zICogYS54KSk7XG4gICAgICByZXR1cm4gdjtcbiAgIH1cbiAgIGIyTWF0aC5Dcm9zc0ZWID0gZnVuY3Rpb24gKHMsIGEpIHtcbiAgICAgIGlmIChzID09PSB1bmRlZmluZWQpIHMgPSAwO1xuICAgICAgdmFyIHYgPSBuZXcgYjJWZWMyKCgtcyAqIGEueSksIHMgKiBhLngpO1xuICAgICAgcmV0dXJuIHY7XG4gICB9XG4gICBiMk1hdGguTXVsTVYgPSBmdW5jdGlvbiAoQSwgdikge1xuICAgICAgdmFyIHUgPSBuZXcgYjJWZWMyKEEuY29sMS54ICogdi54ICsgQS5jb2wyLnggKiB2LnksIEEuY29sMS55ICogdi54ICsgQS5jb2wyLnkgKiB2LnkpO1xuICAgICAgcmV0dXJuIHU7XG4gICB9XG4gICBiMk1hdGguTXVsVE1WID0gZnVuY3Rpb24gKEEsIHYpIHtcbiAgICAgIHZhciB1ID0gbmV3IGIyVmVjMihiMk1hdGguRG90KHYsIEEuY29sMSksIGIyTWF0aC5Eb3QodiwgQS5jb2wyKSk7XG4gICAgICByZXR1cm4gdTtcbiAgIH1cbiAgIGIyTWF0aC5NdWxYID0gZnVuY3Rpb24gKFQsIHYpIHtcbiAgICAgIHZhciBhID0gYjJNYXRoLk11bE1WKFQuUiwgdik7XG4gICAgICBhLnggKz0gVC5wb3NpdGlvbi54O1xuICAgICAgYS55ICs9IFQucG9zaXRpb24ueTtcbiAgICAgIHJldHVybiBhO1xuICAgfVxuICAgYjJNYXRoLk11bFhUID0gZnVuY3Rpb24gKFQsIHYpIHtcbiAgICAgIHZhciBhID0gYjJNYXRoLlN1YnRyYWN0VlYodiwgVC5wb3NpdGlvbik7XG4gICAgICB2YXIgdFggPSAoYS54ICogVC5SLmNvbDEueCArIGEueSAqIFQuUi5jb2wxLnkpO1xuICAgICAgYS55ID0gKGEueCAqIFQuUi5jb2wyLnggKyBhLnkgKiBULlIuY29sMi55KTtcbiAgICAgIGEueCA9IHRYO1xuICAgICAgcmV0dXJuIGE7XG4gICB9XG4gICBiMk1hdGguQWRkVlYgPSBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgdmFyIHYgPSBuZXcgYjJWZWMyKGEueCArIGIueCwgYS55ICsgYi55KTtcbiAgICAgIHJldHVybiB2O1xuICAgfVxuICAgYjJNYXRoLlN1YnRyYWN0VlYgPSBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgdmFyIHYgPSBuZXcgYjJWZWMyKGEueCAtIGIueCwgYS55IC0gYi55KTtcbiAgICAgIHJldHVybiB2O1xuICAgfVxuICAgYjJNYXRoLkRpc3RhbmNlID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIHZhciBjWCA9IGEueCAtIGIueDtcbiAgICAgIHZhciBjWSA9IGEueSAtIGIueTtcbiAgICAgIHJldHVybiBNYXRoLnNxcnQoY1ggKiBjWCArIGNZICogY1kpO1xuICAgfVxuICAgYjJNYXRoLkRpc3RhbmNlU3F1YXJlZCA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICB2YXIgY1ggPSBhLnggLSBiLng7XG4gICAgICB2YXIgY1kgPSBhLnkgLSBiLnk7XG4gICAgICByZXR1cm4gKGNYICogY1ggKyBjWSAqIGNZKTtcbiAgIH1cbiAgIGIyTWF0aC5NdWxGViA9IGZ1bmN0aW9uIChzLCBhKSB7XG4gICAgICBpZiAocyA9PT0gdW5kZWZpbmVkKSBzID0gMDtcbiAgICAgIHZhciB2ID0gbmV3IGIyVmVjMihzICogYS54LCBzICogYS55KTtcbiAgICAgIHJldHVybiB2O1xuICAgfVxuICAgYjJNYXRoLkFkZE1NID0gZnVuY3Rpb24gKEEsIEIpIHtcbiAgICAgIHZhciBDID0gYjJNYXQyMi5Gcm9tVlYoYjJNYXRoLkFkZFZWKEEuY29sMSwgQi5jb2wxKSwgYjJNYXRoLkFkZFZWKEEuY29sMiwgQi5jb2wyKSk7XG4gICAgICByZXR1cm4gQztcbiAgIH1cbiAgIGIyTWF0aC5NdWxNTSA9IGZ1bmN0aW9uIChBLCBCKSB7XG4gICAgICB2YXIgQyA9IGIyTWF0MjIuRnJvbVZWKGIyTWF0aC5NdWxNVihBLCBCLmNvbDEpLCBiMk1hdGguTXVsTVYoQSwgQi5jb2wyKSk7XG4gICAgICByZXR1cm4gQztcbiAgIH1cbiAgIGIyTWF0aC5NdWxUTU0gPSBmdW5jdGlvbiAoQSwgQikge1xuICAgICAgdmFyIGMxID0gbmV3IGIyVmVjMihiMk1hdGguRG90KEEuY29sMSwgQi5jb2wxKSwgYjJNYXRoLkRvdChBLmNvbDIsIEIuY29sMSkpO1xuICAgICAgdmFyIGMyID0gbmV3IGIyVmVjMihiMk1hdGguRG90KEEuY29sMSwgQi5jb2wyKSwgYjJNYXRoLkRvdChBLmNvbDIsIEIuY29sMikpO1xuICAgICAgdmFyIEMgPSBiMk1hdDIyLkZyb21WVihjMSwgYzIpO1xuICAgICAgcmV0dXJuIEM7XG4gICB9XG4gICBiMk1hdGguQWJzID0gZnVuY3Rpb24gKGEpIHtcbiAgICAgIGlmIChhID09PSB1bmRlZmluZWQpIGEgPSAwO1xuICAgICAgcmV0dXJuIGEgPiAwLjAgPyBhIDogKC1hKTtcbiAgIH1cbiAgIGIyTWF0aC5BYnNWID0gZnVuY3Rpb24gKGEpIHtcbiAgICAgIHZhciBiID0gbmV3IGIyVmVjMihiMk1hdGguQWJzKGEueCksIGIyTWF0aC5BYnMoYS55KSk7XG4gICAgICByZXR1cm4gYjtcbiAgIH1cbiAgIGIyTWF0aC5BYnNNID0gZnVuY3Rpb24gKEEpIHtcbiAgICAgIHZhciBCID0gYjJNYXQyMi5Gcm9tVlYoYjJNYXRoLkFic1YoQS5jb2wxKSwgYjJNYXRoLkFic1YoQS5jb2wyKSk7XG4gICAgICByZXR1cm4gQjtcbiAgIH1cbiAgIGIyTWF0aC5NaW4gPSBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgaWYgKGEgPT09IHVuZGVmaW5lZCkgYSA9IDA7XG4gICAgICBpZiAoYiA9PT0gdW5kZWZpbmVkKSBiID0gMDtcbiAgICAgIHJldHVybiBhIDwgYiA/IGEgOiBiO1xuICAgfVxuICAgYjJNYXRoLk1pblYgPSBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgdmFyIGMgPSBuZXcgYjJWZWMyKGIyTWF0aC5NaW4oYS54LCBiLngpLCBiMk1hdGguTWluKGEueSwgYi55KSk7XG4gICAgICByZXR1cm4gYztcbiAgIH1cbiAgIGIyTWF0aC5NYXggPSBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgaWYgKGEgPT09IHVuZGVmaW5lZCkgYSA9IDA7XG4gICAgICBpZiAoYiA9PT0gdW5kZWZpbmVkKSBiID0gMDtcbiAgICAgIHJldHVybiBhID4gYiA/IGEgOiBiO1xuICAgfVxuICAgYjJNYXRoLk1heFYgPSBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgdmFyIGMgPSBuZXcgYjJWZWMyKGIyTWF0aC5NYXgoYS54LCBiLngpLCBiMk1hdGguTWF4KGEueSwgYi55KSk7XG4gICAgICByZXR1cm4gYztcbiAgIH1cbiAgIGIyTWF0aC5DbGFtcCA9IGZ1bmN0aW9uIChhLCBsb3csIGhpZ2gpIHtcbiAgICAgIGlmIChhID09PSB1bmRlZmluZWQpIGEgPSAwO1xuICAgICAgaWYgKGxvdyA9PT0gdW5kZWZpbmVkKSBsb3cgPSAwO1xuICAgICAgaWYgKGhpZ2ggPT09IHVuZGVmaW5lZCkgaGlnaCA9IDA7XG4gICAgICByZXR1cm4gYSA8IGxvdyA/IGxvdyA6IGEgPiBoaWdoID8gaGlnaCA6IGE7XG4gICB9XG4gICBiMk1hdGguQ2xhbXBWID0gZnVuY3Rpb24gKGEsIGxvdywgaGlnaCkge1xuICAgICAgcmV0dXJuIGIyTWF0aC5NYXhWKGxvdywgYjJNYXRoLk1pblYoYSwgaGlnaCkpO1xuICAgfVxuICAgYjJNYXRoLlN3YXAgPSBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgdmFyIHRtcCA9IGFbMF07XG4gICAgICBhWzBdID0gYlswXTtcbiAgICAgIGJbMF0gPSB0bXA7XG4gICB9XG4gICBiMk1hdGguUmFuZG9tID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIE1hdGgucmFuZG9tKCkgKiAyIC0gMTtcbiAgIH1cbiAgIGIyTWF0aC5SYW5kb21SYW5nZSA9IGZ1bmN0aW9uIChsbywgaGkpIHtcbiAgICAgIGlmIChsbyA9PT0gdW5kZWZpbmVkKSBsbyA9IDA7XG4gICAgICBpZiAoaGkgPT09IHVuZGVmaW5lZCkgaGkgPSAwO1xuICAgICAgdmFyIHIgPSBNYXRoLnJhbmRvbSgpO1xuICAgICAgciA9IChoaSAtIGxvKSAqIHIgKyBsbztcbiAgICAgIHJldHVybiByO1xuICAgfVxuICAgYjJNYXRoLk5leHRQb3dlck9mVHdvID0gZnVuY3Rpb24gKHgpIHtcbiAgICAgIGlmICh4ID09PSB1bmRlZmluZWQpIHggPSAwO1xuICAgICAgeCB8PSAoeCA+PiAxKSAmIDB4N0ZGRkZGRkY7XG4gICAgICB4IHw9ICh4ID4+IDIpICYgMHgzRkZGRkZGRjtcbiAgICAgIHggfD0gKHggPj4gNCkgJiAweDBGRkZGRkZGO1xuICAgICAgeCB8PSAoeCA+PiA4KSAmIDB4MDBGRkZGRkY7XG4gICAgICB4IHw9ICh4ID4+IDE2KSAmIDB4MDAwMEZGRkY7XG4gICAgICByZXR1cm4geCArIDE7XG4gICB9XG4gICBiMk1hdGguSXNQb3dlck9mVHdvID0gZnVuY3Rpb24gKHgpIHtcbiAgICAgIGlmICh4ID09PSB1bmRlZmluZWQpIHggPSAwO1xuICAgICAgdmFyIHJlc3VsdCA9IHggPiAwICYmICh4ICYgKHggLSAxKSkgPT0gMDtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICB9XG4gICBCb3gyRC5wb3N0RGVmcy5wdXNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIEJveDJELkNvbW1vbi5NYXRoLmIyTWF0aC5iMlZlYzJfemVybyA9IG5ldyBiMlZlYzIoMC4wLCAwLjApO1xuICAgICAgQm94MkQuQ29tbW9uLk1hdGguYjJNYXRoLmIyTWF0MjJfaWRlbnRpdHkgPSBiMk1hdDIyLkZyb21WVihuZXcgYjJWZWMyKDEuMCwgMC4wKSwgbmV3IGIyVmVjMigwLjAsIDEuMCkpO1xuICAgICAgQm94MkQuQ29tbW9uLk1hdGguYjJNYXRoLmIyVHJhbnNmb3JtX2lkZW50aXR5ID0gbmV3IGIyVHJhbnNmb3JtKGIyTWF0aC5iMlZlYzJfemVybywgYjJNYXRoLmIyTWF0MjJfaWRlbnRpdHkpO1xuICAgfSk7XG4gICBiMlN3ZWVwLmIyU3dlZXAgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLmxvY2FsQ2VudGVyID0gbmV3IGIyVmVjMigpO1xuICAgICAgdGhpcy5jMCA9IG5ldyBiMlZlYzI7XG4gICAgICB0aGlzLmMgPSBuZXcgYjJWZWMyKCk7XG4gICB9O1xuICAgYjJTd2VlcC5wcm90b3R5cGUuU2V0ID0gZnVuY3Rpb24gKG90aGVyKSB7XG4gICAgICB0aGlzLmxvY2FsQ2VudGVyLlNldFYob3RoZXIubG9jYWxDZW50ZXIpO1xuICAgICAgdGhpcy5jMC5TZXRWKG90aGVyLmMwKTtcbiAgICAgIHRoaXMuYy5TZXRWKG90aGVyLmMpO1xuICAgICAgdGhpcy5hMCA9IG90aGVyLmEwO1xuICAgICAgdGhpcy5hID0gb3RoZXIuYTtcbiAgICAgIHRoaXMudDAgPSBvdGhlci50MDtcbiAgIH1cbiAgIGIyU3dlZXAucHJvdG90eXBlLkNvcHkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgY29weSA9IG5ldyBiMlN3ZWVwKCk7XG4gICAgICBjb3B5LmxvY2FsQ2VudGVyLlNldFYodGhpcy5sb2NhbENlbnRlcik7XG4gICAgICBjb3B5LmMwLlNldFYodGhpcy5jMCk7XG4gICAgICBjb3B5LmMuU2V0Vih0aGlzLmMpO1xuICAgICAgY29weS5hMCA9IHRoaXMuYTA7XG4gICAgICBjb3B5LmEgPSB0aGlzLmE7XG4gICAgICBjb3B5LnQwID0gdGhpcy50MDtcbiAgICAgIHJldHVybiBjb3B5O1xuICAgfVxuICAgYjJTd2VlcC5wcm90b3R5cGUuR2V0VHJhbnNmb3JtID0gZnVuY3Rpb24gKHhmLCBhbHBoYSkge1xuICAgICAgaWYgKGFscGhhID09PSB1bmRlZmluZWQpIGFscGhhID0gMDtcbiAgICAgIHhmLnBvc2l0aW9uLnggPSAoMS4wIC0gYWxwaGEpICogdGhpcy5jMC54ICsgYWxwaGEgKiB0aGlzLmMueDtcbiAgICAgIHhmLnBvc2l0aW9uLnkgPSAoMS4wIC0gYWxwaGEpICogdGhpcy5jMC55ICsgYWxwaGEgKiB0aGlzLmMueTtcbiAgICAgIHZhciBhbmdsZSA9ICgxLjAgLSBhbHBoYSkgKiB0aGlzLmEwICsgYWxwaGEgKiB0aGlzLmE7XG4gICAgICB4Zi5SLlNldChhbmdsZSk7XG4gICAgICB2YXIgdE1hdCA9IHhmLlI7XG4gICAgICB4Zi5wb3NpdGlvbi54IC09ICh0TWF0LmNvbDEueCAqIHRoaXMubG9jYWxDZW50ZXIueCArIHRNYXQuY29sMi54ICogdGhpcy5sb2NhbENlbnRlci55KTtcbiAgICAgIHhmLnBvc2l0aW9uLnkgLT0gKHRNYXQuY29sMS55ICogdGhpcy5sb2NhbENlbnRlci54ICsgdE1hdC5jb2wyLnkgKiB0aGlzLmxvY2FsQ2VudGVyLnkpO1xuICAgfVxuICAgYjJTd2VlcC5wcm90b3R5cGUuQWR2YW5jZSA9IGZ1bmN0aW9uICh0KSB7XG4gICAgICBpZiAodCA9PT0gdW5kZWZpbmVkKSB0ID0gMDtcbiAgICAgIGlmICh0aGlzLnQwIDwgdCAmJiAxLjAgLSB0aGlzLnQwID4gTnVtYmVyLk1JTl9WQUxVRSkge1xuICAgICAgICAgdmFyIGFscGhhID0gKHQgLSB0aGlzLnQwKSAvICgxLjAgLSB0aGlzLnQwKTtcbiAgICAgICAgIHRoaXMuYzAueCA9ICgxLjAgLSBhbHBoYSkgKiB0aGlzLmMwLnggKyBhbHBoYSAqIHRoaXMuYy54O1xuICAgICAgICAgdGhpcy5jMC55ID0gKDEuMCAtIGFscGhhKSAqIHRoaXMuYzAueSArIGFscGhhICogdGhpcy5jLnk7XG4gICAgICAgICB0aGlzLmEwID0gKDEuMCAtIGFscGhhKSAqIHRoaXMuYTAgKyBhbHBoYSAqIHRoaXMuYTtcbiAgICAgICAgIHRoaXMudDAgPSB0O1xuICAgICAgfVxuICAgfVxuICAgYjJUcmFuc2Zvcm0uYjJUcmFuc2Zvcm0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLnBvc2l0aW9uID0gbmV3IGIyVmVjMjtcbiAgICAgIHRoaXMuUiA9IG5ldyBiMk1hdDIyKCk7XG4gICB9O1xuICAgYjJUcmFuc2Zvcm0ucHJvdG90eXBlLmIyVHJhbnNmb3JtID0gZnVuY3Rpb24gKHBvcywgcikge1xuICAgICAgaWYgKHBvcyA9PT0gdW5kZWZpbmVkKSBwb3MgPSBudWxsO1xuICAgICAgaWYgKHIgPT09IHVuZGVmaW5lZCkgciA9IG51bGw7XG4gICAgICBpZiAocG9zKSB7XG4gICAgICAgICB0aGlzLnBvc2l0aW9uLlNldFYocG9zKTtcbiAgICAgICAgIHRoaXMuUi5TZXRNKHIpO1xuICAgICAgfVxuICAgfVxuICAgYjJUcmFuc2Zvcm0ucHJvdG90eXBlLkluaXRpYWxpemUgPSBmdW5jdGlvbiAocG9zLCByKSB7XG4gICAgICB0aGlzLnBvc2l0aW9uLlNldFYocG9zKTtcbiAgICAgIHRoaXMuUi5TZXRNKHIpO1xuICAgfVxuICAgYjJUcmFuc2Zvcm0ucHJvdG90eXBlLlNldElkZW50aXR5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcy5wb3NpdGlvbi5TZXRaZXJvKCk7XG4gICAgICB0aGlzLlIuU2V0SWRlbnRpdHkoKTtcbiAgIH1cbiAgIGIyVHJhbnNmb3JtLnByb3RvdHlwZS5TZXQgPSBmdW5jdGlvbiAoeCkge1xuICAgICAgdGhpcy5wb3NpdGlvbi5TZXRWKHgucG9zaXRpb24pO1xuICAgICAgdGhpcy5SLlNldE0oeC5SKTtcbiAgIH1cbiAgIGIyVHJhbnNmb3JtLnByb3RvdHlwZS5HZXRBbmdsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBNYXRoLmF0YW4yKHRoaXMuUi5jb2wxLnksIHRoaXMuUi5jb2wxLngpO1xuICAgfVxuICAgYjJWZWMyLmIyVmVjMiA9IGZ1bmN0aW9uICgpIHt9O1xuICAgYjJWZWMyLnByb3RvdHlwZS5iMlZlYzIgPSBmdW5jdGlvbiAoeF8sIHlfKSB7XG4gICAgICBpZiAoeF8gPT09IHVuZGVmaW5lZCkgeF8gPSAwO1xuICAgICAgaWYgKHlfID09PSB1bmRlZmluZWQpIHlfID0gMDtcbiAgICAgIHRoaXMueCA9IHhfO1xuICAgICAgdGhpcy55ID0geV87XG4gICB9XG4gICBiMlZlYzIucHJvdG90eXBlLlNldFplcm8gPSBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLnggPSAwLjA7XG4gICAgICB0aGlzLnkgPSAwLjA7XG4gICB9XG4gICBiMlZlYzIucHJvdG90eXBlLlNldCA9IGZ1bmN0aW9uICh4XywgeV8pIHtcbiAgICAgIGlmICh4XyA9PT0gdW5kZWZpbmVkKSB4XyA9IDA7XG4gICAgICBpZiAoeV8gPT09IHVuZGVmaW5lZCkgeV8gPSAwO1xuICAgICAgdGhpcy54ID0geF87XG4gICAgICB0aGlzLnkgPSB5XztcbiAgIH1cbiAgIGIyVmVjMi5wcm90b3R5cGUuU2V0ViA9IGZ1bmN0aW9uICh2KSB7XG4gICAgICB0aGlzLnggPSB2Lng7XG4gICAgICB0aGlzLnkgPSB2Lnk7XG4gICB9XG4gICBiMlZlYzIucHJvdG90eXBlLkdldE5lZ2F0aXZlID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIG5ldyBiMlZlYzIoKC10aGlzLngpLCAoLXRoaXMueSkpO1xuICAgfVxuICAgYjJWZWMyLnByb3RvdHlwZS5OZWdhdGl2ZVNlbGYgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLnggPSAoLXRoaXMueCk7XG4gICAgICB0aGlzLnkgPSAoLXRoaXMueSk7XG4gICB9XG4gICBiMlZlYzIuTWFrZSA9IGZ1bmN0aW9uICh4XywgeV8pIHtcbiAgICAgIGlmICh4XyA9PT0gdW5kZWZpbmVkKSB4XyA9IDA7XG4gICAgICBpZiAoeV8gPT09IHVuZGVmaW5lZCkgeV8gPSAwO1xuICAgICAgcmV0dXJuIG5ldyBiMlZlYzIoeF8sIHlfKTtcbiAgIH1cbiAgIGIyVmVjMi5wcm90b3R5cGUuQ29weSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBuZXcgYjJWZWMyKHRoaXMueCwgdGhpcy55KTtcbiAgIH1cbiAgIGIyVmVjMi5wcm90b3R5cGUuQWRkID0gZnVuY3Rpb24gKHYpIHtcbiAgICAgIHRoaXMueCArPSB2Lng7XG4gICAgICB0aGlzLnkgKz0gdi55O1xuICAgfVxuICAgYjJWZWMyLnByb3RvdHlwZS5TdWJ0cmFjdCA9IGZ1bmN0aW9uICh2KSB7XG4gICAgICB0aGlzLnggLT0gdi54O1xuICAgICAgdGhpcy55IC09IHYueTtcbiAgIH1cbiAgIGIyVmVjMi5wcm90b3R5cGUuTXVsdGlwbHkgPSBmdW5jdGlvbiAoYSkge1xuICAgICAgaWYgKGEgPT09IHVuZGVmaW5lZCkgYSA9IDA7XG4gICAgICB0aGlzLnggKj0gYTtcbiAgICAgIHRoaXMueSAqPSBhO1xuICAgfVxuICAgYjJWZWMyLnByb3RvdHlwZS5NdWxNID0gZnVuY3Rpb24gKEEpIHtcbiAgICAgIHZhciB0WCA9IHRoaXMueDtcbiAgICAgIHRoaXMueCA9IEEuY29sMS54ICogdFggKyBBLmNvbDIueCAqIHRoaXMueTtcbiAgICAgIHRoaXMueSA9IEEuY29sMS55ICogdFggKyBBLmNvbDIueSAqIHRoaXMueTtcbiAgIH1cbiAgIGIyVmVjMi5wcm90b3R5cGUuTXVsVE0gPSBmdW5jdGlvbiAoQSkge1xuICAgICAgdmFyIHRYID0gYjJNYXRoLkRvdCh0aGlzLCBBLmNvbDEpO1xuICAgICAgdGhpcy55ID0gYjJNYXRoLkRvdCh0aGlzLCBBLmNvbDIpO1xuICAgICAgdGhpcy54ID0gdFg7XG4gICB9XG4gICBiMlZlYzIucHJvdG90eXBlLkNyb3NzVkYgPSBmdW5jdGlvbiAocykge1xuICAgICAgaWYgKHMgPT09IHVuZGVmaW5lZCkgcyA9IDA7XG4gICAgICB2YXIgdFggPSB0aGlzLng7XG4gICAgICB0aGlzLnggPSBzICogdGhpcy55O1xuICAgICAgdGhpcy55ID0gKC1zICogdFgpO1xuICAgfVxuICAgYjJWZWMyLnByb3RvdHlwZS5Dcm9zc0ZWID0gZnVuY3Rpb24gKHMpIHtcbiAgICAgIGlmIChzID09PSB1bmRlZmluZWQpIHMgPSAwO1xuICAgICAgdmFyIHRYID0gdGhpcy54O1xuICAgICAgdGhpcy54ID0gKC1zICogdGhpcy55KTtcbiAgICAgIHRoaXMueSA9IHMgKiB0WDtcbiAgIH1cbiAgIGIyVmVjMi5wcm90b3R5cGUuTWluViA9IGZ1bmN0aW9uIChiKSB7XG4gICAgICB0aGlzLnggPSB0aGlzLnggPCBiLnggPyB0aGlzLnggOiBiLng7XG4gICAgICB0aGlzLnkgPSB0aGlzLnkgPCBiLnkgPyB0aGlzLnkgOiBiLnk7XG4gICB9XG4gICBiMlZlYzIucHJvdG90eXBlLk1heFYgPSBmdW5jdGlvbiAoYikge1xuICAgICAgdGhpcy54ID0gdGhpcy54ID4gYi54ID8gdGhpcy54IDogYi54O1xuICAgICAgdGhpcy55ID0gdGhpcy55ID4gYi55ID8gdGhpcy55IDogYi55O1xuICAgfVxuICAgYjJWZWMyLnByb3RvdHlwZS5BYnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAodGhpcy54IDwgMCkgdGhpcy54ID0gKC10aGlzLngpO1xuICAgICAgaWYgKHRoaXMueSA8IDApIHRoaXMueSA9ICgtdGhpcy55KTtcbiAgIH1cbiAgIGIyVmVjMi5wcm90b3R5cGUuTGVuZ3RoID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIE1hdGguc3FydCh0aGlzLnggKiB0aGlzLnggKyB0aGlzLnkgKiB0aGlzLnkpO1xuICAgfVxuICAgYjJWZWMyLnByb3RvdHlwZS5MZW5ndGhTcXVhcmVkID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuICh0aGlzLnggKiB0aGlzLnggKyB0aGlzLnkgKiB0aGlzLnkpO1xuICAgfVxuICAgYjJWZWMyLnByb3RvdHlwZS5Ob3JtYWxpemUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gTWF0aC5zcXJ0KHRoaXMueCAqIHRoaXMueCArIHRoaXMueSAqIHRoaXMueSk7XG4gICAgICBpZiAobGVuZ3RoIDwgTnVtYmVyLk1JTl9WQUxVRSkge1xuICAgICAgICAgcmV0dXJuIDAuMDtcbiAgICAgIH1cbiAgICAgIHZhciBpbnZMZW5ndGggPSAxLjAgLyBsZW5ndGg7XG4gICAgICB0aGlzLnggKj0gaW52TGVuZ3RoO1xuICAgICAgdGhpcy55ICo9IGludkxlbmd0aDtcbiAgICAgIHJldHVybiBsZW5ndGg7XG4gICB9XG4gICBiMlZlYzIucHJvdG90eXBlLklzVmFsaWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gYjJNYXRoLklzVmFsaWQodGhpcy54KSAmJiBiMk1hdGguSXNWYWxpZCh0aGlzLnkpO1xuICAgfVxuICAgYjJWZWMzLmIyVmVjMyA9IGZ1bmN0aW9uICgpIHt9O1xuICAgYjJWZWMzLnByb3RvdHlwZS5iMlZlYzMgPSBmdW5jdGlvbiAoeCwgeSwgeikge1xuICAgICAgaWYgKHggPT09IHVuZGVmaW5lZCkgeCA9IDA7XG4gICAgICBpZiAoeSA9PT0gdW5kZWZpbmVkKSB5ID0gMDtcbiAgICAgIGlmICh6ID09PSB1bmRlZmluZWQpIHogPSAwO1xuICAgICAgdGhpcy54ID0geDtcbiAgICAgIHRoaXMueSA9IHk7XG4gICAgICB0aGlzLnogPSB6O1xuICAgfVxuICAgYjJWZWMzLnByb3RvdHlwZS5TZXRaZXJvID0gZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcy54ID0gdGhpcy55ID0gdGhpcy56ID0gMC4wO1xuICAgfVxuICAgYjJWZWMzLnByb3RvdHlwZS5TZXQgPSBmdW5jdGlvbiAoeCwgeSwgeikge1xuICAgICAgaWYgKHggPT09IHVuZGVmaW5lZCkgeCA9IDA7XG4gICAgICBpZiAoeSA9PT0gdW5kZWZpbmVkKSB5ID0gMDtcbiAgICAgIGlmICh6ID09PSB1bmRlZmluZWQpIHogPSAwO1xuICAgICAgdGhpcy54ID0geDtcbiAgICAgIHRoaXMueSA9IHk7XG4gICAgICB0aGlzLnogPSB6O1xuICAgfVxuICAgYjJWZWMzLnByb3RvdHlwZS5TZXRWID0gZnVuY3Rpb24gKHYpIHtcbiAgICAgIHRoaXMueCA9IHYueDtcbiAgICAgIHRoaXMueSA9IHYueTtcbiAgICAgIHRoaXMueiA9IHYuejtcbiAgIH1cbiAgIGIyVmVjMy5wcm90b3R5cGUuR2V0TmVnYXRpdmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gbmV3IGIyVmVjMygoLXRoaXMueCksICgtdGhpcy55KSwgKC10aGlzLnopKTtcbiAgIH1cbiAgIGIyVmVjMy5wcm90b3R5cGUuTmVnYXRpdmVTZWxmID0gZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcy54ID0gKC10aGlzLngpO1xuICAgICAgdGhpcy55ID0gKC10aGlzLnkpO1xuICAgICAgdGhpcy56ID0gKC10aGlzLnopO1xuICAgfVxuICAgYjJWZWMzLnByb3RvdHlwZS5Db3B5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIG5ldyBiMlZlYzModGhpcy54LCB0aGlzLnksIHRoaXMueik7XG4gICB9XG4gICBiMlZlYzMucHJvdG90eXBlLkFkZCA9IGZ1bmN0aW9uICh2KSB7XG4gICAgICB0aGlzLnggKz0gdi54O1xuICAgICAgdGhpcy55ICs9IHYueTtcbiAgICAgIHRoaXMueiArPSB2Lno7XG4gICB9XG4gICBiMlZlYzMucHJvdG90eXBlLlN1YnRyYWN0ID0gZnVuY3Rpb24gKHYpIHtcbiAgICAgIHRoaXMueCAtPSB2Lng7XG4gICAgICB0aGlzLnkgLT0gdi55O1xuICAgICAgdGhpcy56IC09IHYuejtcbiAgIH1cbiAgIGIyVmVjMy5wcm90b3R5cGUuTXVsdGlwbHkgPSBmdW5jdGlvbiAoYSkge1xuICAgICAgaWYgKGEgPT09IHVuZGVmaW5lZCkgYSA9IDA7XG4gICAgICB0aGlzLnggKj0gYTtcbiAgICAgIHRoaXMueSAqPSBhO1xuICAgICAgdGhpcy56ICo9IGE7XG4gICB9XG59KSgpO1xuKGZ1bmN0aW9uICgpIHtcbiAgIHZhciBiMkNvbnRyb2xsZXJFZGdlID0gQm94MkQuRHluYW1pY3MuQ29udHJvbGxlcnMuYjJDb250cm9sbGVyRWRnZSxcbiAgICAgIGIyTWF0MjIgPSBCb3gyRC5Db21tb24uTWF0aC5iMk1hdDIyLFxuICAgICAgYjJNYXQzMyA9IEJveDJELkNvbW1vbi5NYXRoLmIyTWF0MzMsXG4gICAgICBiMk1hdGggPSBCb3gyRC5Db21tb24uTWF0aC5iMk1hdGgsXG4gICAgICBiMlN3ZWVwID0gQm94MkQuQ29tbW9uLk1hdGguYjJTd2VlcCxcbiAgICAgIGIyVHJhbnNmb3JtID0gQm94MkQuQ29tbW9uLk1hdGguYjJUcmFuc2Zvcm0sXG4gICAgICBiMlZlYzIgPSBCb3gyRC5Db21tb24uTWF0aC5iMlZlYzIsXG4gICAgICBiMlZlYzMgPSBCb3gyRC5Db21tb24uTWF0aC5iMlZlYzMsXG4gICAgICBiMkNvbG9yID0gQm94MkQuQ29tbW9uLmIyQ29sb3IsXG4gICAgICBiMmludGVybmFsID0gQm94MkQuQ29tbW9uLmIyaW50ZXJuYWwsXG4gICAgICBiMlNldHRpbmdzID0gQm94MkQuQ29tbW9uLmIyU2V0dGluZ3MsXG4gICAgICBiMkFBQkIgPSBCb3gyRC5Db2xsaXNpb24uYjJBQUJCLFxuICAgICAgYjJCb3VuZCA9IEJveDJELkNvbGxpc2lvbi5iMkJvdW5kLFxuICAgICAgYjJCb3VuZFZhbHVlcyA9IEJveDJELkNvbGxpc2lvbi5iMkJvdW5kVmFsdWVzLFxuICAgICAgYjJDb2xsaXNpb24gPSBCb3gyRC5Db2xsaXNpb24uYjJDb2xsaXNpb24sXG4gICAgICBiMkNvbnRhY3RJRCA9IEJveDJELkNvbGxpc2lvbi5iMkNvbnRhY3RJRCxcbiAgICAgIGIyQ29udGFjdFBvaW50ID0gQm94MkQuQ29sbGlzaW9uLmIyQ29udGFjdFBvaW50LFxuICAgICAgYjJEaXN0YW5jZSA9IEJveDJELkNvbGxpc2lvbi5iMkRpc3RhbmNlLFxuICAgICAgYjJEaXN0YW5jZUlucHV0ID0gQm94MkQuQ29sbGlzaW9uLmIyRGlzdGFuY2VJbnB1dCxcbiAgICAgIGIyRGlzdGFuY2VPdXRwdXQgPSBCb3gyRC5Db2xsaXNpb24uYjJEaXN0YW5jZU91dHB1dCxcbiAgICAgIGIyRGlzdGFuY2VQcm94eSA9IEJveDJELkNvbGxpc2lvbi5iMkRpc3RhbmNlUHJveHksXG4gICAgICBiMkR5bmFtaWNUcmVlID0gQm94MkQuQ29sbGlzaW9uLmIyRHluYW1pY1RyZWUsXG4gICAgICBiMkR5bmFtaWNUcmVlQnJvYWRQaGFzZSA9IEJveDJELkNvbGxpc2lvbi5iMkR5bmFtaWNUcmVlQnJvYWRQaGFzZSxcbiAgICAgIGIyRHluYW1pY1RyZWVOb2RlID0gQm94MkQuQ29sbGlzaW9uLmIyRHluYW1pY1RyZWVOb2RlLFxuICAgICAgYjJEeW5hbWljVHJlZVBhaXIgPSBCb3gyRC5Db2xsaXNpb24uYjJEeW5hbWljVHJlZVBhaXIsXG4gICAgICBiMk1hbmlmb2xkID0gQm94MkQuQ29sbGlzaW9uLmIyTWFuaWZvbGQsXG4gICAgICBiMk1hbmlmb2xkUG9pbnQgPSBCb3gyRC5Db2xsaXNpb24uYjJNYW5pZm9sZFBvaW50LFxuICAgICAgYjJQb2ludCA9IEJveDJELkNvbGxpc2lvbi5iMlBvaW50LFxuICAgICAgYjJSYXlDYXN0SW5wdXQgPSBCb3gyRC5Db2xsaXNpb24uYjJSYXlDYXN0SW5wdXQsXG4gICAgICBiMlJheUNhc3RPdXRwdXQgPSBCb3gyRC5Db2xsaXNpb24uYjJSYXlDYXN0T3V0cHV0LFxuICAgICAgYjJTZWdtZW50ID0gQm94MkQuQ29sbGlzaW9uLmIyU2VnbWVudCxcbiAgICAgIGIyU2VwYXJhdGlvbkZ1bmN0aW9uID0gQm94MkQuQ29sbGlzaW9uLmIyU2VwYXJhdGlvbkZ1bmN0aW9uLFxuICAgICAgYjJTaW1wbGV4ID0gQm94MkQuQ29sbGlzaW9uLmIyU2ltcGxleCxcbiAgICAgIGIyU2ltcGxleENhY2hlID0gQm94MkQuQ29sbGlzaW9uLmIyU2ltcGxleENhY2hlLFxuICAgICAgYjJTaW1wbGV4VmVydGV4ID0gQm94MkQuQ29sbGlzaW9uLmIyU2ltcGxleFZlcnRleCxcbiAgICAgIGIyVGltZU9mSW1wYWN0ID0gQm94MkQuQ29sbGlzaW9uLmIyVGltZU9mSW1wYWN0LFxuICAgICAgYjJUT0lJbnB1dCA9IEJveDJELkNvbGxpc2lvbi5iMlRPSUlucHV0LFxuICAgICAgYjJXb3JsZE1hbmlmb2xkID0gQm94MkQuQ29sbGlzaW9uLmIyV29ybGRNYW5pZm9sZCxcbiAgICAgIENsaXBWZXJ0ZXggPSBCb3gyRC5Db2xsaXNpb24uQ2xpcFZlcnRleCxcbiAgICAgIEZlYXR1cmVzID0gQm94MkQuQ29sbGlzaW9uLkZlYXR1cmVzLFxuICAgICAgSUJyb2FkUGhhc2UgPSBCb3gyRC5Db2xsaXNpb24uSUJyb2FkUGhhc2UsXG4gICAgICBiMkNpcmNsZVNoYXBlID0gQm94MkQuQ29sbGlzaW9uLlNoYXBlcy5iMkNpcmNsZVNoYXBlLFxuICAgICAgYjJFZGdlQ2hhaW5EZWYgPSBCb3gyRC5Db2xsaXNpb24uU2hhcGVzLmIyRWRnZUNoYWluRGVmLFxuICAgICAgYjJFZGdlU2hhcGUgPSBCb3gyRC5Db2xsaXNpb24uU2hhcGVzLmIyRWRnZVNoYXBlLFxuICAgICAgYjJNYXNzRGF0YSA9IEJveDJELkNvbGxpc2lvbi5TaGFwZXMuYjJNYXNzRGF0YSxcbiAgICAgIGIyUG9seWdvblNoYXBlID0gQm94MkQuQ29sbGlzaW9uLlNoYXBlcy5iMlBvbHlnb25TaGFwZSxcbiAgICAgIGIyU2hhcGUgPSBCb3gyRC5Db2xsaXNpb24uU2hhcGVzLmIyU2hhcGUsXG4gICAgICBiMkJvZHkgPSBCb3gyRC5EeW5hbWljcy5iMkJvZHksXG4gICAgICBiMkJvZHlEZWYgPSBCb3gyRC5EeW5hbWljcy5iMkJvZHlEZWYsXG4gICAgICBiMkNvbnRhY3RGaWx0ZXIgPSBCb3gyRC5EeW5hbWljcy5iMkNvbnRhY3RGaWx0ZXIsXG4gICAgICBiMkNvbnRhY3RJbXB1bHNlID0gQm94MkQuRHluYW1pY3MuYjJDb250YWN0SW1wdWxzZSxcbiAgICAgIGIyQ29udGFjdExpc3RlbmVyID0gQm94MkQuRHluYW1pY3MuYjJDb250YWN0TGlzdGVuZXIsXG4gICAgICBiMkNvbnRhY3RNYW5hZ2VyID0gQm94MkQuRHluYW1pY3MuYjJDb250YWN0TWFuYWdlcixcbiAgICAgIGIyRGVidWdEcmF3ID0gQm94MkQuRHluYW1pY3MuYjJEZWJ1Z0RyYXcsXG4gICAgICBiMkRlc3RydWN0aW9uTGlzdGVuZXIgPSBCb3gyRC5EeW5hbWljcy5iMkRlc3RydWN0aW9uTGlzdGVuZXIsXG4gICAgICBiMkZpbHRlckRhdGEgPSBCb3gyRC5EeW5hbWljcy5iMkZpbHRlckRhdGEsXG4gICAgICBiMkZpeHR1cmUgPSBCb3gyRC5EeW5hbWljcy5iMkZpeHR1cmUsXG4gICAgICBiMkZpeHR1cmVEZWYgPSBCb3gyRC5EeW5hbWljcy5iMkZpeHR1cmVEZWYsXG4gICAgICBiMklzbGFuZCA9IEJveDJELkR5bmFtaWNzLmIySXNsYW5kLFxuICAgICAgYjJUaW1lU3RlcCA9IEJveDJELkR5bmFtaWNzLmIyVGltZVN0ZXAsXG4gICAgICBiMldvcmxkID0gQm94MkQuRHluYW1pY3MuYjJXb3JsZCxcbiAgICAgIGIyQ2lyY2xlQ29udGFjdCA9IEJveDJELkR5bmFtaWNzLkNvbnRhY3RzLmIyQ2lyY2xlQ29udGFjdCxcbiAgICAgIGIyQ29udGFjdCA9IEJveDJELkR5bmFtaWNzLkNvbnRhY3RzLmIyQ29udGFjdCxcbiAgICAgIGIyQ29udGFjdENvbnN0cmFpbnQgPSBCb3gyRC5EeW5hbWljcy5Db250YWN0cy5iMkNvbnRhY3RDb25zdHJhaW50LFxuICAgICAgYjJDb250YWN0Q29uc3RyYWludFBvaW50ID0gQm94MkQuRHluYW1pY3MuQ29udGFjdHMuYjJDb250YWN0Q29uc3RyYWludFBvaW50LFxuICAgICAgYjJDb250YWN0RWRnZSA9IEJveDJELkR5bmFtaWNzLkNvbnRhY3RzLmIyQ29udGFjdEVkZ2UsXG4gICAgICBiMkNvbnRhY3RGYWN0b3J5ID0gQm94MkQuRHluYW1pY3MuQ29udGFjdHMuYjJDb250YWN0RmFjdG9yeSxcbiAgICAgIGIyQ29udGFjdFJlZ2lzdGVyID0gQm94MkQuRHluYW1pY3MuQ29udGFjdHMuYjJDb250YWN0UmVnaXN0ZXIsXG4gICAgICBiMkNvbnRhY3RSZXN1bHQgPSBCb3gyRC5EeW5hbWljcy5Db250YWN0cy5iMkNvbnRhY3RSZXN1bHQsXG4gICAgICBiMkNvbnRhY3RTb2x2ZXIgPSBCb3gyRC5EeW5hbWljcy5Db250YWN0cy5iMkNvbnRhY3RTb2x2ZXIsXG4gICAgICBiMkVkZ2VBbmRDaXJjbGVDb250YWN0ID0gQm94MkQuRHluYW1pY3MuQ29udGFjdHMuYjJFZGdlQW5kQ2lyY2xlQ29udGFjdCxcbiAgICAgIGIyTnVsbENvbnRhY3QgPSBCb3gyRC5EeW5hbWljcy5Db250YWN0cy5iMk51bGxDb250YWN0LFxuICAgICAgYjJQb2x5QW5kQ2lyY2xlQ29udGFjdCA9IEJveDJELkR5bmFtaWNzLkNvbnRhY3RzLmIyUG9seUFuZENpcmNsZUNvbnRhY3QsXG4gICAgICBiMlBvbHlBbmRFZGdlQ29udGFjdCA9IEJveDJELkR5bmFtaWNzLkNvbnRhY3RzLmIyUG9seUFuZEVkZ2VDb250YWN0LFxuICAgICAgYjJQb2x5Z29uQ29udGFjdCA9IEJveDJELkR5bmFtaWNzLkNvbnRhY3RzLmIyUG9seWdvbkNvbnRhY3QsXG4gICAgICBiMlBvc2l0aW9uU29sdmVyTWFuaWZvbGQgPSBCb3gyRC5EeW5hbWljcy5Db250YWN0cy5iMlBvc2l0aW9uU29sdmVyTWFuaWZvbGQsXG4gICAgICBiMkNvbnRyb2xsZXIgPSBCb3gyRC5EeW5hbWljcy5Db250cm9sbGVycy5iMkNvbnRyb2xsZXIsXG4gICAgICBiMkRpc3RhbmNlSm9pbnQgPSBCb3gyRC5EeW5hbWljcy5Kb2ludHMuYjJEaXN0YW5jZUpvaW50LFxuICAgICAgYjJEaXN0YW5jZUpvaW50RGVmID0gQm94MkQuRHluYW1pY3MuSm9pbnRzLmIyRGlzdGFuY2VKb2ludERlZixcbiAgICAgIGIyRnJpY3Rpb25Kb2ludCA9IEJveDJELkR5bmFtaWNzLkpvaW50cy5iMkZyaWN0aW9uSm9pbnQsXG4gICAgICBiMkZyaWN0aW9uSm9pbnREZWYgPSBCb3gyRC5EeW5hbWljcy5Kb2ludHMuYjJGcmljdGlvbkpvaW50RGVmLFxuICAgICAgYjJHZWFySm9pbnQgPSBCb3gyRC5EeW5hbWljcy5Kb2ludHMuYjJHZWFySm9pbnQsXG4gICAgICBiMkdlYXJKb2ludERlZiA9IEJveDJELkR5bmFtaWNzLkpvaW50cy5iMkdlYXJKb2ludERlZixcbiAgICAgIGIySmFjb2JpYW4gPSBCb3gyRC5EeW5hbWljcy5Kb2ludHMuYjJKYWNvYmlhbixcbiAgICAgIGIySm9pbnQgPSBCb3gyRC5EeW5hbWljcy5Kb2ludHMuYjJKb2ludCxcbiAgICAgIGIySm9pbnREZWYgPSBCb3gyRC5EeW5hbWljcy5Kb2ludHMuYjJKb2ludERlZixcbiAgICAgIGIySm9pbnRFZGdlID0gQm94MkQuRHluYW1pY3MuSm9pbnRzLmIySm9pbnRFZGdlLFxuICAgICAgYjJMaW5lSm9pbnQgPSBCb3gyRC5EeW5hbWljcy5Kb2ludHMuYjJMaW5lSm9pbnQsXG4gICAgICBiMkxpbmVKb2ludERlZiA9IEJveDJELkR5bmFtaWNzLkpvaW50cy5iMkxpbmVKb2ludERlZixcbiAgICAgIGIyTW91c2VKb2ludCA9IEJveDJELkR5bmFtaWNzLkpvaW50cy5iMk1vdXNlSm9pbnQsXG4gICAgICBiMk1vdXNlSm9pbnREZWYgPSBCb3gyRC5EeW5hbWljcy5Kb2ludHMuYjJNb3VzZUpvaW50RGVmLFxuICAgICAgYjJQcmlzbWF0aWNKb2ludCA9IEJveDJELkR5bmFtaWNzLkpvaW50cy5iMlByaXNtYXRpY0pvaW50LFxuICAgICAgYjJQcmlzbWF0aWNKb2ludERlZiA9IEJveDJELkR5bmFtaWNzLkpvaW50cy5iMlByaXNtYXRpY0pvaW50RGVmLFxuICAgICAgYjJQdWxsZXlKb2ludCA9IEJveDJELkR5bmFtaWNzLkpvaW50cy5iMlB1bGxleUpvaW50LFxuICAgICAgYjJQdWxsZXlKb2ludERlZiA9IEJveDJELkR5bmFtaWNzLkpvaW50cy5iMlB1bGxleUpvaW50RGVmLFxuICAgICAgYjJSZXZvbHV0ZUpvaW50ID0gQm94MkQuRHluYW1pY3MuSm9pbnRzLmIyUmV2b2x1dGVKb2ludCxcbiAgICAgIGIyUmV2b2x1dGVKb2ludERlZiA9IEJveDJELkR5bmFtaWNzLkpvaW50cy5iMlJldm9sdXRlSm9pbnREZWYsXG4gICAgICBiMldlbGRKb2ludCA9IEJveDJELkR5bmFtaWNzLkpvaW50cy5iMldlbGRKb2ludCxcbiAgICAgIGIyV2VsZEpvaW50RGVmID0gQm94MkQuRHluYW1pY3MuSm9pbnRzLmIyV2VsZEpvaW50RGVmO1xuXG4gICBiMkJvZHkuYjJCb2R5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcy5tX3hmID0gbmV3IGIyVHJhbnNmb3JtKCk7XG4gICAgICB0aGlzLm1fc3dlZXAgPSBuZXcgYjJTd2VlcCgpO1xuICAgICAgdGhpcy5tX2xpbmVhclZlbG9jaXR5ID0gbmV3IGIyVmVjMigpO1xuICAgICAgdGhpcy5tX2ZvcmNlID0gbmV3IGIyVmVjMigpO1xuICAgfTtcbiAgIGIyQm9keS5wcm90b3R5cGUuY29ubmVjdEVkZ2VzID0gZnVuY3Rpb24gKHMxLCBzMiwgYW5nbGUxKSB7XG4gICAgICBpZiAoYW5nbGUxID09PSB1bmRlZmluZWQpIGFuZ2xlMSA9IDA7XG4gICAgICB2YXIgYW5nbGUyID0gTWF0aC5hdGFuMihzMi5HZXREaXJlY3Rpb25WZWN0b3IoKS55LCBzMi5HZXREaXJlY3Rpb25WZWN0b3IoKS54KTtcbiAgICAgIHZhciBjb3JlT2Zmc2V0ID0gTWF0aC50YW4oKGFuZ2xlMiAtIGFuZ2xlMSkgKiAwLjUpO1xuICAgICAgdmFyIGNvcmUgPSBiMk1hdGguTXVsRlYoY29yZU9mZnNldCwgczIuR2V0RGlyZWN0aW9uVmVjdG9yKCkpO1xuICAgICAgY29yZSA9IGIyTWF0aC5TdWJ0cmFjdFZWKGNvcmUsIHMyLkdldE5vcm1hbFZlY3RvcigpKTtcbiAgICAgIGNvcmUgPSBiMk1hdGguTXVsRlYoYjJTZXR0aW5ncy5iMl90b2lTbG9wLCBjb3JlKTtcbiAgICAgIGNvcmUgPSBiMk1hdGguQWRkVlYoY29yZSwgczIuR2V0VmVydGV4MSgpKTtcbiAgICAgIHZhciBjb3JuZXJEaXIgPSBiMk1hdGguQWRkVlYoczEuR2V0RGlyZWN0aW9uVmVjdG9yKCksIHMyLkdldERpcmVjdGlvblZlY3RvcigpKTtcbiAgICAgIGNvcm5lckRpci5Ob3JtYWxpemUoKTtcbiAgICAgIHZhciBjb252ZXggPSBiMk1hdGguRG90KHMxLkdldERpcmVjdGlvblZlY3RvcigpLCBzMi5HZXROb3JtYWxWZWN0b3IoKSkgPiAwLjA7XG4gICAgICBzMS5TZXROZXh0RWRnZShzMiwgY29yZSwgY29ybmVyRGlyLCBjb252ZXgpO1xuICAgICAgczIuU2V0UHJldkVkZ2UoczEsIGNvcmUsIGNvcm5lckRpciwgY29udmV4KTtcbiAgICAgIHJldHVybiBhbmdsZTI7XG4gICB9XG4gICBiMkJvZHkucHJvdG90eXBlLkNyZWF0ZUZpeHR1cmUgPSBmdW5jdGlvbiAoZGVmKSB7XG4gICAgICBpZiAodGhpcy5tX3dvcmxkLklzTG9ja2VkKCkgPT0gdHJ1ZSkge1xuICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgICB2YXIgZml4dHVyZSA9IG5ldyBiMkZpeHR1cmUoKTtcbiAgICAgIGZpeHR1cmUuQ3JlYXRlKHRoaXMsIHRoaXMubV94ZiwgZGVmKTtcbiAgICAgIGlmICh0aGlzLm1fZmxhZ3MgJiBiMkJvZHkuZV9hY3RpdmVGbGFnKSB7XG4gICAgICAgICB2YXIgYnJvYWRQaGFzZSA9IHRoaXMubV93b3JsZC5tX2NvbnRhY3RNYW5hZ2VyLm1fYnJvYWRQaGFzZTtcbiAgICAgICAgIGZpeHR1cmUuQ3JlYXRlUHJveHkoYnJvYWRQaGFzZSwgdGhpcy5tX3hmKTtcbiAgICAgIH1cbiAgICAgIGZpeHR1cmUubV9uZXh0ID0gdGhpcy5tX2ZpeHR1cmVMaXN0O1xuICAgICAgdGhpcy5tX2ZpeHR1cmVMaXN0ID0gZml4dHVyZTtcbiAgICAgICsrdGhpcy5tX2ZpeHR1cmVDb3VudDtcbiAgICAgIGZpeHR1cmUubV9ib2R5ID0gdGhpcztcbiAgICAgIGlmIChmaXh0dXJlLm1fZGVuc2l0eSA+IDAuMCkge1xuICAgICAgICAgdGhpcy5SZXNldE1hc3NEYXRhKCk7XG4gICAgICB9XG4gICAgICB0aGlzLm1fd29ybGQubV9mbGFncyB8PSBiMldvcmxkLmVfbmV3Rml4dHVyZTtcbiAgICAgIHJldHVybiBmaXh0dXJlO1xuICAgfVxuICAgYjJCb2R5LnByb3RvdHlwZS5DcmVhdGVGaXh0dXJlMiA9IGZ1bmN0aW9uIChzaGFwZSwgZGVuc2l0eSkge1xuICAgICAgaWYgKGRlbnNpdHkgPT09IHVuZGVmaW5lZCkgZGVuc2l0eSA9IDAuMDtcbiAgICAgIHZhciBkZWYgPSBuZXcgYjJGaXh0dXJlRGVmKCk7XG4gICAgICBkZWYuc2hhcGUgPSBzaGFwZTtcbiAgICAgIGRlZi5kZW5zaXR5ID0gZGVuc2l0eTtcbiAgICAgIHJldHVybiB0aGlzLkNyZWF0ZUZpeHR1cmUoZGVmKTtcbiAgIH1cbiAgIGIyQm9keS5wcm90b3R5cGUuRGVzdHJveUZpeHR1cmUgPSBmdW5jdGlvbiAoZml4dHVyZSkge1xuICAgICAgaWYgKHRoaXMubV93b3JsZC5Jc0xvY2tlZCgpID09IHRydWUpIHtcbiAgICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciBub2RlID0gdGhpcy5tX2ZpeHR1cmVMaXN0O1xuICAgICAgdmFyIHBwRiA9IG51bGw7XG4gICAgICB2YXIgZm91bmQgPSBmYWxzZTtcbiAgICAgIHdoaWxlIChub2RlICE9IG51bGwpIHtcbiAgICAgICAgIGlmIChub2RlID09IGZpeHR1cmUpIHtcbiAgICAgICAgICAgIGlmIChwcEYpIHBwRi5tX25leHQgPSBmaXh0dXJlLm1fbmV4dDtcbiAgICAgICAgICAgIGVsc2UgdGhpcy5tX2ZpeHR1cmVMaXN0ID0gZml4dHVyZS5tX25leHQ7XG4gICAgICAgICAgICBmb3VuZCA9IHRydWU7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgIH1cbiAgICAgICAgIHBwRiA9IG5vZGU7XG4gICAgICAgICBub2RlID0gbm9kZS5tX25leHQ7XG4gICAgICB9XG4gICAgICB2YXIgZWRnZSA9IHRoaXMubV9jb250YWN0TGlzdDtcbiAgICAgIHdoaWxlIChlZGdlKSB7XG4gICAgICAgICB2YXIgYyA9IGVkZ2UuY29udGFjdDtcbiAgICAgICAgIGVkZ2UgPSBlZGdlLm5leHQ7XG4gICAgICAgICB2YXIgZml4dHVyZUEgPSBjLkdldEZpeHR1cmVBKCk7XG4gICAgICAgICB2YXIgZml4dHVyZUIgPSBjLkdldEZpeHR1cmVCKCk7XG4gICAgICAgICBpZiAoZml4dHVyZSA9PSBmaXh0dXJlQSB8fCBmaXh0dXJlID09IGZpeHR1cmVCKSB7XG4gICAgICAgICAgICB0aGlzLm1fd29ybGQubV9jb250YWN0TWFuYWdlci5EZXN0cm95KGMpO1xuICAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHRoaXMubV9mbGFncyAmIGIyQm9keS5lX2FjdGl2ZUZsYWcpIHtcbiAgICAgICAgIHZhciBicm9hZFBoYXNlID0gdGhpcy5tX3dvcmxkLm1fY29udGFjdE1hbmFnZXIubV9icm9hZFBoYXNlO1xuICAgICAgICAgZml4dHVyZS5EZXN0cm95UHJveHkoYnJvYWRQaGFzZSk7XG4gICAgICB9XG4gICAgICBlbHNlIHt9XG4gICAgICBmaXh0dXJlLkRlc3Ryb3koKTtcbiAgICAgIGZpeHR1cmUubV9ib2R5ID0gbnVsbDtcbiAgICAgIGZpeHR1cmUubV9uZXh0ID0gbnVsbDtcbiAgICAgIC0tdGhpcy5tX2ZpeHR1cmVDb3VudDtcbiAgICAgIHRoaXMuUmVzZXRNYXNzRGF0YSgpO1xuICAgfVxuICAgYjJCb2R5LnByb3RvdHlwZS5TZXRQb3NpdGlvbkFuZEFuZ2xlID0gZnVuY3Rpb24gKHBvc2l0aW9uLCBhbmdsZSkge1xuICAgICAgaWYgKGFuZ2xlID09PSB1bmRlZmluZWQpIGFuZ2xlID0gMDtcbiAgICAgIHZhciBmO1xuICAgICAgaWYgKHRoaXMubV93b3JsZC5Jc0xvY2tlZCgpID09IHRydWUpIHtcbiAgICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHRoaXMubV94Zi5SLlNldChhbmdsZSk7XG4gICAgICB0aGlzLm1feGYucG9zaXRpb24uU2V0Vihwb3NpdGlvbik7XG4gICAgICB2YXIgdE1hdCA9IHRoaXMubV94Zi5SO1xuICAgICAgdmFyIHRWZWMgPSB0aGlzLm1fc3dlZXAubG9jYWxDZW50ZXI7XG4gICAgICB0aGlzLm1fc3dlZXAuYy54ID0gKHRNYXQuY29sMS54ICogdFZlYy54ICsgdE1hdC5jb2wyLnggKiB0VmVjLnkpO1xuICAgICAgdGhpcy5tX3N3ZWVwLmMueSA9ICh0TWF0LmNvbDEueSAqIHRWZWMueCArIHRNYXQuY29sMi55ICogdFZlYy55KTtcbiAgICAgIHRoaXMubV9zd2VlcC5jLnggKz0gdGhpcy5tX3hmLnBvc2l0aW9uLng7XG4gICAgICB0aGlzLm1fc3dlZXAuYy55ICs9IHRoaXMubV94Zi5wb3NpdGlvbi55O1xuICAgICAgdGhpcy5tX3N3ZWVwLmMwLlNldFYodGhpcy5tX3N3ZWVwLmMpO1xuICAgICAgdGhpcy5tX3N3ZWVwLmEwID0gdGhpcy5tX3N3ZWVwLmEgPSBhbmdsZTtcbiAgICAgIHZhciBicm9hZFBoYXNlID0gdGhpcy5tX3dvcmxkLm1fY29udGFjdE1hbmFnZXIubV9icm9hZFBoYXNlO1xuICAgICAgZm9yIChmID0gdGhpcy5tX2ZpeHR1cmVMaXN0O1xuICAgICAgZjsgZiA9IGYubV9uZXh0KSB7XG4gICAgICAgICBmLlN5bmNocm9uaXplKGJyb2FkUGhhc2UsIHRoaXMubV94ZiwgdGhpcy5tX3hmKTtcbiAgICAgIH1cbiAgICAgIHRoaXMubV93b3JsZC5tX2NvbnRhY3RNYW5hZ2VyLkZpbmROZXdDb250YWN0cygpO1xuICAgfVxuICAgYjJCb2R5LnByb3RvdHlwZS5TZXRUcmFuc2Zvcm0gPSBmdW5jdGlvbiAoeGYpIHtcbiAgICAgIHRoaXMuU2V0UG9zaXRpb25BbmRBbmdsZSh4Zi5wb3NpdGlvbiwgeGYuR2V0QW5nbGUoKSk7XG4gICB9XG4gICBiMkJvZHkucHJvdG90eXBlLkdldFRyYW5zZm9ybSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzLm1feGY7XG4gICB9XG4gICBiMkJvZHkucHJvdG90eXBlLkdldFBvc2l0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMubV94Zi5wb3NpdGlvbjtcbiAgIH1cbiAgIGIyQm9keS5wcm90b3R5cGUuU2V0UG9zaXRpb24gPSBmdW5jdGlvbiAocG9zaXRpb24pIHtcbiAgICAgIHRoaXMuU2V0UG9zaXRpb25BbmRBbmdsZShwb3NpdGlvbiwgdGhpcy5HZXRBbmdsZSgpKTtcbiAgIH1cbiAgIGIyQm9keS5wcm90b3R5cGUuR2V0QW5nbGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5tX3N3ZWVwLmE7XG4gICB9XG4gICBiMkJvZHkucHJvdG90eXBlLlNldEFuZ2xlID0gZnVuY3Rpb24gKGFuZ2xlKSB7XG4gICAgICBpZiAoYW5nbGUgPT09IHVuZGVmaW5lZCkgYW5nbGUgPSAwO1xuICAgICAgdGhpcy5TZXRQb3NpdGlvbkFuZEFuZ2xlKHRoaXMuR2V0UG9zaXRpb24oKSwgYW5nbGUpO1xuICAgfVxuICAgYjJCb2R5LnByb3RvdHlwZS5HZXRXb3JsZENlbnRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzLm1fc3dlZXAuYztcbiAgIH1cbiAgIGIyQm9keS5wcm90b3R5cGUuR2V0TG9jYWxDZW50ZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5tX3N3ZWVwLmxvY2FsQ2VudGVyO1xuICAgfVxuICAgYjJCb2R5LnByb3RvdHlwZS5TZXRMaW5lYXJWZWxvY2l0eSA9IGZ1bmN0aW9uICh2KSB7XG4gICAgICBpZiAodGhpcy5tX3R5cGUgPT0gYjJCb2R5LmIyX3N0YXRpY0JvZHkpIHtcbiAgICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHRoaXMubV9saW5lYXJWZWxvY2l0eS5TZXRWKHYpO1xuICAgfVxuICAgYjJCb2R5LnByb3RvdHlwZS5HZXRMaW5lYXJWZWxvY2l0eSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzLm1fbGluZWFyVmVsb2NpdHk7XG4gICB9XG4gICBiMkJvZHkucHJvdG90eXBlLlNldEFuZ3VsYXJWZWxvY2l0eSA9IGZ1bmN0aW9uIChvbWVnYSkge1xuICAgICAgaWYgKG9tZWdhID09PSB1bmRlZmluZWQpIG9tZWdhID0gMDtcbiAgICAgIGlmICh0aGlzLm1fdHlwZSA9PSBiMkJvZHkuYjJfc3RhdGljQm9keSkge1xuICAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdGhpcy5tX2FuZ3VsYXJWZWxvY2l0eSA9IG9tZWdhO1xuICAgfVxuICAgYjJCb2R5LnByb3RvdHlwZS5HZXRBbmd1bGFyVmVsb2NpdHkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5tX2FuZ3VsYXJWZWxvY2l0eTtcbiAgIH1cbiAgIGIyQm9keS5wcm90b3R5cGUuR2V0RGVmaW5pdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBiZCA9IG5ldyBiMkJvZHlEZWYoKTtcbiAgICAgIGJkLnR5cGUgPSB0aGlzLkdldFR5cGUoKTtcbiAgICAgIGJkLmFsbG93U2xlZXAgPSAodGhpcy5tX2ZsYWdzICYgYjJCb2R5LmVfYWxsb3dTbGVlcEZsYWcpID09IGIyQm9keS5lX2FsbG93U2xlZXBGbGFnO1xuICAgICAgYmQuYW5nbGUgPSB0aGlzLkdldEFuZ2xlKCk7XG4gICAgICBiZC5hbmd1bGFyRGFtcGluZyA9IHRoaXMubV9hbmd1bGFyRGFtcGluZztcbiAgICAgIGJkLmFuZ3VsYXJWZWxvY2l0eSA9IHRoaXMubV9hbmd1bGFyVmVsb2NpdHk7XG4gICAgICBiZC5maXhlZFJvdGF0aW9uID0gKHRoaXMubV9mbGFncyAmIGIyQm9keS5lX2ZpeGVkUm90YXRpb25GbGFnKSA9PSBiMkJvZHkuZV9maXhlZFJvdGF0aW9uRmxhZztcbiAgICAgIGJkLmJ1bGxldCA9ICh0aGlzLm1fZmxhZ3MgJiBiMkJvZHkuZV9idWxsZXRGbGFnKSA9PSBiMkJvZHkuZV9idWxsZXRGbGFnO1xuICAgICAgYmQuYXdha2UgPSAodGhpcy5tX2ZsYWdzICYgYjJCb2R5LmVfYXdha2VGbGFnKSA9PSBiMkJvZHkuZV9hd2FrZUZsYWc7XG4gICAgICBiZC5saW5lYXJEYW1waW5nID0gdGhpcy5tX2xpbmVhckRhbXBpbmc7XG4gICAgICBiZC5saW5lYXJWZWxvY2l0eS5TZXRWKHRoaXMuR2V0TGluZWFyVmVsb2NpdHkoKSk7XG4gICAgICBiZC5wb3NpdGlvbiA9IHRoaXMuR2V0UG9zaXRpb24oKTtcbiAgICAgIGJkLnVzZXJEYXRhID0gdGhpcy5HZXRVc2VyRGF0YSgpO1xuICAgICAgcmV0dXJuIGJkO1xuICAgfVxuICAgYjJCb2R5LnByb3RvdHlwZS5BcHBseUZvcmNlID0gZnVuY3Rpb24gKGZvcmNlLCBwb2ludCkge1xuICAgICAgaWYgKHRoaXMubV90eXBlICE9IGIyQm9keS5iMl9keW5hbWljQm9keSkge1xuICAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuSXNBd2FrZSgpID09IGZhbHNlKSB7XG4gICAgICAgICB0aGlzLlNldEF3YWtlKHRydWUpO1xuICAgICAgfVxuICAgICAgdGhpcy5tX2ZvcmNlLnggKz0gZm9yY2UueDtcbiAgICAgIHRoaXMubV9mb3JjZS55ICs9IGZvcmNlLnk7XG4gICAgICB0aGlzLm1fdG9ycXVlICs9ICgocG9pbnQueCAtIHRoaXMubV9zd2VlcC5jLngpICogZm9yY2UueSAtIChwb2ludC55IC0gdGhpcy5tX3N3ZWVwLmMueSkgKiBmb3JjZS54KTtcbiAgIH1cbiAgIGIyQm9keS5wcm90b3R5cGUuQXBwbHlUb3JxdWUgPSBmdW5jdGlvbiAodG9ycXVlKSB7XG4gICAgICBpZiAodG9ycXVlID09PSB1bmRlZmluZWQpIHRvcnF1ZSA9IDA7XG4gICAgICBpZiAodGhpcy5tX3R5cGUgIT0gYjJCb2R5LmIyX2R5bmFtaWNCb2R5KSB7XG4gICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5Jc0F3YWtlKCkgPT0gZmFsc2UpIHtcbiAgICAgICAgIHRoaXMuU2V0QXdha2UodHJ1ZSk7XG4gICAgICB9XG4gICAgICB0aGlzLm1fdG9ycXVlICs9IHRvcnF1ZTtcbiAgIH1cbiAgIGIyQm9keS5wcm90b3R5cGUuQXBwbHlJbXB1bHNlID0gZnVuY3Rpb24gKGltcHVsc2UsIHBvaW50KSB7XG4gICAgICBpZiAodGhpcy5tX3R5cGUgIT0gYjJCb2R5LmIyX2R5bmFtaWNCb2R5KSB7XG4gICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5Jc0F3YWtlKCkgPT0gZmFsc2UpIHtcbiAgICAgICAgIHRoaXMuU2V0QXdha2UodHJ1ZSk7XG4gICAgICB9XG4gICAgICB0aGlzLm1fbGluZWFyVmVsb2NpdHkueCArPSB0aGlzLm1faW52TWFzcyAqIGltcHVsc2UueDtcbiAgICAgIHRoaXMubV9saW5lYXJWZWxvY2l0eS55ICs9IHRoaXMubV9pbnZNYXNzICogaW1wdWxzZS55O1xuICAgICAgdGhpcy5tX2FuZ3VsYXJWZWxvY2l0eSArPSB0aGlzLm1faW52SSAqICgocG9pbnQueCAtIHRoaXMubV9zd2VlcC5jLngpICogaW1wdWxzZS55IC0gKHBvaW50LnkgLSB0aGlzLm1fc3dlZXAuYy55KSAqIGltcHVsc2UueCk7XG4gICB9XG4gICBiMkJvZHkucHJvdG90eXBlLlNwbGl0ID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICB2YXIgbGluZWFyVmVsb2NpdHkgPSB0aGlzLkdldExpbmVhclZlbG9jaXR5KCkuQ29weSgpO1xuICAgICAgdmFyIGFuZ3VsYXJWZWxvY2l0eSA9IHRoaXMuR2V0QW5ndWxhclZlbG9jaXR5KCk7XG4gICAgICB2YXIgY2VudGVyID0gdGhpcy5HZXRXb3JsZENlbnRlcigpO1xuICAgICAgdmFyIGJvZHkxID0gdGhpcztcbiAgICAgIHZhciBib2R5MiA9IHRoaXMubV93b3JsZC5DcmVhdGVCb2R5KHRoaXMuR2V0RGVmaW5pdGlvbigpKTtcbiAgICAgIHZhciBwcmV2O1xuICAgICAgZm9yICh2YXIgZiA9IGJvZHkxLm1fZml4dHVyZUxpc3Q7IGY7KSB7XG4gICAgICAgICBpZiAoY2FsbGJhY2soZikpIHtcbiAgICAgICAgICAgIHZhciBuZXh0ID0gZi5tX25leHQ7XG4gICAgICAgICAgICBpZiAocHJldikge1xuICAgICAgICAgICAgICAgcHJldi5tX25leHQgPSBuZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICBib2R5MS5tX2ZpeHR1cmVMaXN0ID0gbmV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJvZHkxLm1fZml4dHVyZUNvdW50LS07XG4gICAgICAgICAgICBmLm1fbmV4dCA9IGJvZHkyLm1fZml4dHVyZUxpc3Q7XG4gICAgICAgICAgICBib2R5Mi5tX2ZpeHR1cmVMaXN0ID0gZjtcbiAgICAgICAgICAgIGJvZHkyLm1fZml4dHVyZUNvdW50Kys7XG4gICAgICAgICAgICBmLm1fYm9keSA9IGJvZHkyO1xuICAgICAgICAgICAgZiA9IG5leHQ7XG4gICAgICAgICB9XG4gICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHByZXYgPSBmO1xuICAgICAgICAgICAgZiA9IGYubV9uZXh0O1xuICAgICAgICAgfVxuICAgICAgfVxuICAgICAgYm9keTEuUmVzZXRNYXNzRGF0YSgpO1xuICAgICAgYm9keTIuUmVzZXRNYXNzRGF0YSgpO1xuICAgICAgdmFyIGNlbnRlcjEgPSBib2R5MS5HZXRXb3JsZENlbnRlcigpO1xuICAgICAgdmFyIGNlbnRlcjIgPSBib2R5Mi5HZXRXb3JsZENlbnRlcigpO1xuICAgICAgdmFyIHZlbG9jaXR5MSA9IGIyTWF0aC5BZGRWVihsaW5lYXJWZWxvY2l0eSwgYjJNYXRoLkNyb3NzRlYoYW5ndWxhclZlbG9jaXR5LCBiMk1hdGguU3VidHJhY3RWVihjZW50ZXIxLCBjZW50ZXIpKSk7XG4gICAgICB2YXIgdmVsb2NpdHkyID0gYjJNYXRoLkFkZFZWKGxpbmVhclZlbG9jaXR5LCBiMk1hdGguQ3Jvc3NGVihhbmd1bGFyVmVsb2NpdHksIGIyTWF0aC5TdWJ0cmFjdFZWKGNlbnRlcjIsIGNlbnRlcikpKTtcbiAgICAgIGJvZHkxLlNldExpbmVhclZlbG9jaXR5KHZlbG9jaXR5MSk7XG4gICAgICBib2R5Mi5TZXRMaW5lYXJWZWxvY2l0eSh2ZWxvY2l0eTIpO1xuICAgICAgYm9keTEuU2V0QW5ndWxhclZlbG9jaXR5KGFuZ3VsYXJWZWxvY2l0eSk7XG4gICAgICBib2R5Mi5TZXRBbmd1bGFyVmVsb2NpdHkoYW5ndWxhclZlbG9jaXR5KTtcbiAgICAgIGJvZHkxLlN5bmNocm9uaXplRml4dHVyZXMoKTtcbiAgICAgIGJvZHkyLlN5bmNocm9uaXplRml4dHVyZXMoKTtcbiAgICAgIHJldHVybiBib2R5MjtcbiAgIH1cbiAgIGIyQm9keS5wcm90b3R5cGUuTWVyZ2UgPSBmdW5jdGlvbiAob3RoZXIpIHtcbiAgICAgIHZhciBmO1xuICAgICAgZm9yIChmID0gb3RoZXIubV9maXh0dXJlTGlzdDtcbiAgICAgIGY7KSB7XG4gICAgICAgICB2YXIgbmV4dCA9IGYubV9uZXh0O1xuICAgICAgICAgb3RoZXIubV9maXh0dXJlQ291bnQtLTtcbiAgICAgICAgIGYubV9uZXh0ID0gdGhpcy5tX2ZpeHR1cmVMaXN0O1xuICAgICAgICAgdGhpcy5tX2ZpeHR1cmVMaXN0ID0gZjtcbiAgICAgICAgIHRoaXMubV9maXh0dXJlQ291bnQrKztcbiAgICAgICAgIGYubV9ib2R5ID0gYm9keTI7XG4gICAgICAgICBmID0gbmV4dDtcbiAgICAgIH1cbiAgICAgIGJvZHkxLm1fZml4dHVyZUNvdW50ID0gMDtcbiAgICAgIHZhciBib2R5MSA9IHRoaXM7XG4gICAgICB2YXIgYm9keTIgPSBvdGhlcjtcbiAgICAgIHZhciBjZW50ZXIxID0gYm9keTEuR2V0V29ybGRDZW50ZXIoKTtcbiAgICAgIHZhciBjZW50ZXIyID0gYm9keTIuR2V0V29ybGRDZW50ZXIoKTtcbiAgICAgIHZhciB2ZWxvY2l0eTEgPSBib2R5MS5HZXRMaW5lYXJWZWxvY2l0eSgpLkNvcHkoKTtcbiAgICAgIHZhciB2ZWxvY2l0eTIgPSBib2R5Mi5HZXRMaW5lYXJWZWxvY2l0eSgpLkNvcHkoKTtcbiAgICAgIHZhciBhbmd1bGFyMSA9IGJvZHkxLkdldEFuZ3VsYXJWZWxvY2l0eSgpO1xuICAgICAgdmFyIGFuZ3VsYXIgPSBib2R5Mi5HZXRBbmd1bGFyVmVsb2NpdHkoKTtcbiAgICAgIGJvZHkxLlJlc2V0TWFzc0RhdGEoKTtcbiAgICAgIHRoaXMuU3luY2hyb25pemVGaXh0dXJlcygpO1xuICAgfVxuICAgYjJCb2R5LnByb3RvdHlwZS5HZXRNYXNzID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMubV9tYXNzO1xuICAgfVxuICAgYjJCb2R5LnByb3RvdHlwZS5HZXRJbmVydGlhID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMubV9JO1xuICAgfVxuICAgYjJCb2R5LnByb3RvdHlwZS5HZXRNYXNzRGF0YSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICBkYXRhLm1hc3MgPSB0aGlzLm1fbWFzcztcbiAgICAgIGRhdGEuSSA9IHRoaXMubV9JO1xuICAgICAgZGF0YS5jZW50ZXIuU2V0Vih0aGlzLm1fc3dlZXAubG9jYWxDZW50ZXIpO1xuICAgfVxuICAgYjJCb2R5LnByb3RvdHlwZS5TZXRNYXNzRGF0YSA9IGZ1bmN0aW9uIChtYXNzRGF0YSkge1xuICAgICAgYjJTZXR0aW5ncy5iMkFzc2VydCh0aGlzLm1fd29ybGQuSXNMb2NrZWQoKSA9PSBmYWxzZSk7XG4gICAgICBpZiAodGhpcy5tX3dvcmxkLklzTG9ja2VkKCkgPT0gdHJ1ZSkge1xuICAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMubV90eXBlICE9IGIyQm9keS5iMl9keW5hbWljQm9keSkge1xuICAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdGhpcy5tX2ludk1hc3MgPSAwLjA7XG4gICAgICB0aGlzLm1fSSA9IDAuMDtcbiAgICAgIHRoaXMubV9pbnZJID0gMC4wO1xuICAgICAgdGhpcy5tX21hc3MgPSBtYXNzRGF0YS5tYXNzO1xuICAgICAgaWYgKHRoaXMubV9tYXNzIDw9IDAuMCkge1xuICAgICAgICAgdGhpcy5tX21hc3MgPSAxLjA7XG4gICAgICB9XG4gICAgICB0aGlzLm1faW52TWFzcyA9IDEuMCAvIHRoaXMubV9tYXNzO1xuICAgICAgaWYgKG1hc3NEYXRhLkkgPiAwLjAgJiYgKHRoaXMubV9mbGFncyAmIGIyQm9keS5lX2ZpeGVkUm90YXRpb25GbGFnKSA9PSAwKSB7XG4gICAgICAgICB0aGlzLm1fSSA9IG1hc3NEYXRhLkkgLSB0aGlzLm1fbWFzcyAqIChtYXNzRGF0YS5jZW50ZXIueCAqIG1hc3NEYXRhLmNlbnRlci54ICsgbWFzc0RhdGEuY2VudGVyLnkgKiBtYXNzRGF0YS5jZW50ZXIueSk7XG4gICAgICAgICB0aGlzLm1faW52SSA9IDEuMCAvIHRoaXMubV9JO1xuICAgICAgfVxuICAgICAgdmFyIG9sZENlbnRlciA9IHRoaXMubV9zd2VlcC5jLkNvcHkoKTtcbiAgICAgIHRoaXMubV9zd2VlcC5sb2NhbENlbnRlci5TZXRWKG1hc3NEYXRhLmNlbnRlcik7XG4gICAgICB0aGlzLm1fc3dlZXAuYzAuU2V0VihiMk1hdGguTXVsWCh0aGlzLm1feGYsIHRoaXMubV9zd2VlcC5sb2NhbENlbnRlcikpO1xuICAgICAgdGhpcy5tX3N3ZWVwLmMuU2V0Vih0aGlzLm1fc3dlZXAuYzApO1xuICAgICAgdGhpcy5tX2xpbmVhclZlbG9jaXR5LnggKz0gdGhpcy5tX2FuZ3VsYXJWZWxvY2l0eSAqICgtKHRoaXMubV9zd2VlcC5jLnkgLSBvbGRDZW50ZXIueSkpO1xuICAgICAgdGhpcy5tX2xpbmVhclZlbG9jaXR5LnkgKz0gdGhpcy5tX2FuZ3VsYXJWZWxvY2l0eSAqICgrKHRoaXMubV9zd2VlcC5jLnggLSBvbGRDZW50ZXIueCkpO1xuICAgfVxuICAgYjJCb2R5LnByb3RvdHlwZS5SZXNldE1hc3NEYXRhID0gZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcy5tX21hc3MgPSAwLjA7XG4gICAgICB0aGlzLm1faW52TWFzcyA9IDAuMDtcbiAgICAgIHRoaXMubV9JID0gMC4wO1xuICAgICAgdGhpcy5tX2ludkkgPSAwLjA7XG4gICAgICB0aGlzLm1fc3dlZXAubG9jYWxDZW50ZXIuU2V0WmVybygpO1xuICAgICAgaWYgKHRoaXMubV90eXBlID09IGIyQm9keS5iMl9zdGF0aWNCb2R5IHx8IHRoaXMubV90eXBlID09IGIyQm9keS5iMl9raW5lbWF0aWNCb2R5KSB7XG4gICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgY2VudGVyID0gYjJWZWMyLk1ha2UoMCwgMCk7XG4gICAgICBmb3IgKHZhciBmID0gdGhpcy5tX2ZpeHR1cmVMaXN0OyBmOyBmID0gZi5tX25leHQpIHtcbiAgICAgICAgIGlmIChmLm1fZGVuc2l0eSA9PSAwLjApIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgfVxuICAgICAgICAgdmFyIG1hc3NEYXRhID0gZi5HZXRNYXNzRGF0YSgpO1xuICAgICAgICAgdGhpcy5tX21hc3MgKz0gbWFzc0RhdGEubWFzcztcbiAgICAgICAgIGNlbnRlci54ICs9IG1hc3NEYXRhLmNlbnRlci54ICogbWFzc0RhdGEubWFzcztcbiAgICAgICAgIGNlbnRlci55ICs9IG1hc3NEYXRhLmNlbnRlci55ICogbWFzc0RhdGEubWFzcztcbiAgICAgICAgIHRoaXMubV9JICs9IG1hc3NEYXRhLkk7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5tX21hc3MgPiAwLjApIHtcbiAgICAgICAgIHRoaXMubV9pbnZNYXNzID0gMS4wIC8gdGhpcy5tX21hc3M7XG4gICAgICAgICBjZW50ZXIueCAqPSB0aGlzLm1faW52TWFzcztcbiAgICAgICAgIGNlbnRlci55ICo9IHRoaXMubV9pbnZNYXNzO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgICB0aGlzLm1fbWFzcyA9IDEuMDtcbiAgICAgICAgIHRoaXMubV9pbnZNYXNzID0gMS4wO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMubV9JID4gMC4wICYmICh0aGlzLm1fZmxhZ3MgJiBiMkJvZHkuZV9maXhlZFJvdGF0aW9uRmxhZykgPT0gMCkge1xuICAgICAgICAgdGhpcy5tX0kgLT0gdGhpcy5tX21hc3MgKiAoY2VudGVyLnggKiBjZW50ZXIueCArIGNlbnRlci55ICogY2VudGVyLnkpO1xuICAgICAgICAgdGhpcy5tX0kgKj0gdGhpcy5tX2luZXJ0aWFTY2FsZTtcbiAgICAgICAgIGIyU2V0dGluZ3MuYjJBc3NlcnQodGhpcy5tX0kgPiAwKTtcbiAgICAgICAgIHRoaXMubV9pbnZJID0gMS4wIC8gdGhpcy5tX0k7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgIHRoaXMubV9JID0gMC4wO1xuICAgICAgICAgdGhpcy5tX2ludkkgPSAwLjA7XG4gICAgICB9XG4gICAgICB2YXIgb2xkQ2VudGVyID0gdGhpcy5tX3N3ZWVwLmMuQ29weSgpO1xuICAgICAgdGhpcy5tX3N3ZWVwLmxvY2FsQ2VudGVyLlNldFYoY2VudGVyKTtcbiAgICAgIHRoaXMubV9zd2VlcC5jMC5TZXRWKGIyTWF0aC5NdWxYKHRoaXMubV94ZiwgdGhpcy5tX3N3ZWVwLmxvY2FsQ2VudGVyKSk7XG4gICAgICB0aGlzLm1fc3dlZXAuYy5TZXRWKHRoaXMubV9zd2VlcC5jMCk7XG4gICAgICB0aGlzLm1fbGluZWFyVmVsb2NpdHkueCArPSB0aGlzLm1fYW5ndWxhclZlbG9jaXR5ICogKC0odGhpcy5tX3N3ZWVwLmMueSAtIG9sZENlbnRlci55KSk7XG4gICAgICB0aGlzLm1fbGluZWFyVmVsb2NpdHkueSArPSB0aGlzLm1fYW5ndWxhclZlbG9jaXR5ICogKCsodGhpcy5tX3N3ZWVwLmMueCAtIG9sZENlbnRlci54KSk7XG4gICB9XG4gICBiMkJvZHkucHJvdG90eXBlLkdldFdvcmxkUG9pbnQgPSBmdW5jdGlvbiAobG9jYWxQb2ludCkge1xuICAgICAgdmFyIEEgPSB0aGlzLm1feGYuUjtcbiAgICAgIHZhciB1ID0gbmV3IGIyVmVjMihBLmNvbDEueCAqIGxvY2FsUG9pbnQueCArIEEuY29sMi54ICogbG9jYWxQb2ludC55LCBBLmNvbDEueSAqIGxvY2FsUG9pbnQueCArIEEuY29sMi55ICogbG9jYWxQb2ludC55KTtcbiAgICAgIHUueCArPSB0aGlzLm1feGYucG9zaXRpb24ueDtcbiAgICAgIHUueSArPSB0aGlzLm1feGYucG9zaXRpb24ueTtcbiAgICAgIHJldHVybiB1O1xuICAgfVxuICAgYjJCb2R5LnByb3RvdHlwZS5HZXRXb3JsZFZlY3RvciA9IGZ1bmN0aW9uIChsb2NhbFZlY3Rvcikge1xuICAgICAgcmV0dXJuIGIyTWF0aC5NdWxNVih0aGlzLm1feGYuUiwgbG9jYWxWZWN0b3IpO1xuICAgfVxuICAgYjJCb2R5LnByb3RvdHlwZS5HZXRMb2NhbFBvaW50ID0gZnVuY3Rpb24gKHdvcmxkUG9pbnQpIHtcbiAgICAgIHJldHVybiBiMk1hdGguTXVsWFQodGhpcy5tX3hmLCB3b3JsZFBvaW50KTtcbiAgIH1cbiAgIGIyQm9keS5wcm90b3R5cGUuR2V0TG9jYWxWZWN0b3IgPSBmdW5jdGlvbiAod29ybGRWZWN0b3IpIHtcbiAgICAgIHJldHVybiBiMk1hdGguTXVsVE1WKHRoaXMubV94Zi5SLCB3b3JsZFZlY3Rvcik7XG4gICB9XG4gICBiMkJvZHkucHJvdG90eXBlLkdldExpbmVhclZlbG9jaXR5RnJvbVdvcmxkUG9pbnQgPSBmdW5jdGlvbiAod29ybGRQb2ludCkge1xuICAgICAgcmV0dXJuIG5ldyBiMlZlYzIodGhpcy5tX2xpbmVhclZlbG9jaXR5LnggLSB0aGlzLm1fYW5ndWxhclZlbG9jaXR5ICogKHdvcmxkUG9pbnQueSAtIHRoaXMubV9zd2VlcC5jLnkpLCB0aGlzLm1fbGluZWFyVmVsb2NpdHkueSArIHRoaXMubV9hbmd1bGFyVmVsb2NpdHkgKiAod29ybGRQb2ludC54IC0gdGhpcy5tX3N3ZWVwLmMueCkpO1xuICAgfVxuICAgYjJCb2R5LnByb3RvdHlwZS5HZXRMaW5lYXJWZWxvY2l0eUZyb21Mb2NhbFBvaW50ID0gZnVuY3Rpb24gKGxvY2FsUG9pbnQpIHtcbiAgICAgIHZhciBBID0gdGhpcy5tX3hmLlI7XG4gICAgICB2YXIgd29ybGRQb2ludCA9IG5ldyBiMlZlYzIoQS5jb2wxLnggKiBsb2NhbFBvaW50LnggKyBBLmNvbDIueCAqIGxvY2FsUG9pbnQueSwgQS5jb2wxLnkgKiBsb2NhbFBvaW50LnggKyBBLmNvbDIueSAqIGxvY2FsUG9pbnQueSk7XG4gICAgICB3b3JsZFBvaW50LnggKz0gdGhpcy5tX3hmLnBvc2l0aW9uLng7XG4gICAgICB3b3JsZFBvaW50LnkgKz0gdGhpcy5tX3hmLnBvc2l0aW9uLnk7XG4gICAgICByZXR1cm4gbmV3IGIyVmVjMih0aGlzLm1fbGluZWFyVmVsb2NpdHkueCAtIHRoaXMubV9hbmd1bGFyVmVsb2NpdHkgKiAod29ybGRQb2ludC55IC0gdGhpcy5tX3N3ZWVwLmMueSksIHRoaXMubV9saW5lYXJWZWxvY2l0eS55ICsgdGhpcy5tX2FuZ3VsYXJWZWxvY2l0eSAqICh3b3JsZFBvaW50LnggLSB0aGlzLm1fc3dlZXAuYy54KSk7XG4gICB9XG4gICBiMkJvZHkucHJvdG90eXBlLkdldExpbmVhckRhbXBpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5tX2xpbmVhckRhbXBpbmc7XG4gICB9XG4gICBiMkJvZHkucHJvdG90eXBlLlNldExpbmVhckRhbXBpbmcgPSBmdW5jdGlvbiAobGluZWFyRGFtcGluZykge1xuICAgICAgaWYgKGxpbmVhckRhbXBpbmcgPT09IHVuZGVmaW5lZCkgbGluZWFyRGFtcGluZyA9IDA7XG4gICAgICB0aGlzLm1fbGluZWFyRGFtcGluZyA9IGxpbmVhckRhbXBpbmc7XG4gICB9XG4gICBiMkJvZHkucHJvdG90eXBlLkdldEFuZ3VsYXJEYW1waW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMubV9hbmd1bGFyRGFtcGluZztcbiAgIH1cbiAgIGIyQm9keS5wcm90b3R5cGUuU2V0QW5ndWxhckRhbXBpbmcgPSBmdW5jdGlvbiAoYW5ndWxhckRhbXBpbmcpIHtcbiAgICAgIGlmIChhbmd1bGFyRGFtcGluZyA9PT0gdW5kZWZpbmVkKSBhbmd1bGFyRGFtcGluZyA9IDA7XG4gICAgICB0aGlzLm1fYW5ndWxhckRhbXBpbmcgPSBhbmd1bGFyRGFtcGluZztcbiAgIH1cbiAgIGIyQm9keS5wcm90b3R5cGUuU2V0VHlwZSA9IGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgICBpZiAodHlwZSA9PT0gdW5kZWZpbmVkKSB0eXBlID0gMDtcbiAgICAgIGlmICh0aGlzLm1fdHlwZSA9PSB0eXBlKSB7XG4gICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB0aGlzLm1fdHlwZSA9IHR5cGU7XG4gICAgICB0aGlzLlJlc2V0TWFzc0RhdGEoKTtcbiAgICAgIGlmICh0aGlzLm1fdHlwZSA9PSBiMkJvZHkuYjJfc3RhdGljQm9keSkge1xuICAgICAgICAgdGhpcy5tX2xpbmVhclZlbG9jaXR5LlNldFplcm8oKTtcbiAgICAgICAgIHRoaXMubV9hbmd1bGFyVmVsb2NpdHkgPSAwLjA7XG4gICAgICB9XG4gICAgICB0aGlzLlNldEF3YWtlKHRydWUpO1xuICAgICAgdGhpcy5tX2ZvcmNlLlNldFplcm8oKTtcbiAgICAgIHRoaXMubV90b3JxdWUgPSAwLjA7XG4gICAgICBmb3IgKHZhciBjZSA9IHRoaXMubV9jb250YWN0TGlzdDsgY2U7IGNlID0gY2UubmV4dCkge1xuICAgICAgICAgY2UuY29udGFjdC5GbGFnRm9yRmlsdGVyaW5nKCk7XG4gICAgICB9XG4gICB9XG4gICBiMkJvZHkucHJvdG90eXBlLkdldFR5cGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5tX3R5cGU7XG4gICB9XG4gICBiMkJvZHkucHJvdG90eXBlLlNldEJ1bGxldCA9IGZ1bmN0aW9uIChmbGFnKSB7XG4gICAgICBpZiAoZmxhZykge1xuICAgICAgICAgdGhpcy5tX2ZsYWdzIHw9IGIyQm9keS5lX2J1bGxldEZsYWc7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgIHRoaXMubV9mbGFncyAmPSB+YjJCb2R5LmVfYnVsbGV0RmxhZztcbiAgICAgIH1cbiAgIH1cbiAgIGIyQm9keS5wcm90b3R5cGUuSXNCdWxsZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gKHRoaXMubV9mbGFncyAmIGIyQm9keS5lX2J1bGxldEZsYWcpID09IGIyQm9keS5lX2J1bGxldEZsYWc7XG4gICB9XG4gICBiMkJvZHkucHJvdG90eXBlLlNldFNsZWVwaW5nQWxsb3dlZCA9IGZ1bmN0aW9uIChmbGFnKSB7XG4gICAgICBpZiAoZmxhZykge1xuICAgICAgICAgdGhpcy5tX2ZsYWdzIHw9IGIyQm9keS5lX2FsbG93U2xlZXBGbGFnO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgICB0aGlzLm1fZmxhZ3MgJj0gfmIyQm9keS5lX2FsbG93U2xlZXBGbGFnO1xuICAgICAgICAgdGhpcy5TZXRBd2FrZSh0cnVlKTtcbiAgICAgIH1cbiAgIH1cbiAgIGIyQm9keS5wcm90b3R5cGUuU2V0QXdha2UgPSBmdW5jdGlvbiAoZmxhZykge1xuICAgICAgaWYgKGZsYWcpIHtcbiAgICAgICAgIHRoaXMubV9mbGFncyB8PSBiMkJvZHkuZV9hd2FrZUZsYWc7XG4gICAgICAgICB0aGlzLm1fc2xlZXBUaW1lID0gMC4wO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgICB0aGlzLm1fZmxhZ3MgJj0gfmIyQm9keS5lX2F3YWtlRmxhZztcbiAgICAgICAgIHRoaXMubV9zbGVlcFRpbWUgPSAwLjA7XG4gICAgICAgICB0aGlzLm1fbGluZWFyVmVsb2NpdHkuU2V0WmVybygpO1xuICAgICAgICAgdGhpcy5tX2FuZ3VsYXJWZWxvY2l0eSA9IDAuMDtcbiAgICAgICAgIHRoaXMubV9mb3JjZS5TZXRaZXJvKCk7XG4gICAgICAgICB0aGlzLm1fdG9ycXVlID0gMC4wO1xuICAgICAgfVxuICAgfVxuICAgYjJCb2R5LnByb3RvdHlwZS5Jc0F3YWtlID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuICh0aGlzLm1fZmxhZ3MgJiBiMkJvZHkuZV9hd2FrZUZsYWcpID09IGIyQm9keS5lX2F3YWtlRmxhZztcbiAgIH1cbiAgIGIyQm9keS5wcm90b3R5cGUuU2V0Rml4ZWRSb3RhdGlvbiA9IGZ1bmN0aW9uIChmaXhlZCkge1xuICAgICAgaWYgKGZpeGVkKSB7XG4gICAgICAgICB0aGlzLm1fZmxhZ3MgfD0gYjJCb2R5LmVfZml4ZWRSb3RhdGlvbkZsYWc7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgIHRoaXMubV9mbGFncyAmPSB+YjJCb2R5LmVfZml4ZWRSb3RhdGlvbkZsYWc7XG4gICAgICB9XG4gICAgICB0aGlzLlJlc2V0TWFzc0RhdGEoKTtcbiAgIH1cbiAgIGIyQm9keS5wcm90b3R5cGUuSXNGaXhlZFJvdGF0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuICh0aGlzLm1fZmxhZ3MgJiBiMkJvZHkuZV9maXhlZFJvdGF0aW9uRmxhZykgPT0gYjJCb2R5LmVfZml4ZWRSb3RhdGlvbkZsYWc7XG4gICB9XG4gICBiMkJvZHkucHJvdG90eXBlLlNldEFjdGl2ZSA9IGZ1bmN0aW9uIChmbGFnKSB7XG4gICAgICBpZiAoZmxhZyA9PSB0aGlzLklzQWN0aXZlKCkpIHtcbiAgICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciBicm9hZFBoYXNlO1xuICAgICAgdmFyIGY7XG4gICAgICBpZiAoZmxhZykge1xuICAgICAgICAgdGhpcy5tX2ZsYWdzIHw9IGIyQm9keS5lX2FjdGl2ZUZsYWc7XG4gICAgICAgICBicm9hZFBoYXNlID0gdGhpcy5tX3dvcmxkLm1fY29udGFjdE1hbmFnZXIubV9icm9hZFBoYXNlO1xuICAgICAgICAgZm9yIChmID0gdGhpcy5tX2ZpeHR1cmVMaXN0O1xuICAgICAgICAgZjsgZiA9IGYubV9uZXh0KSB7XG4gICAgICAgICAgICBmLkNyZWF0ZVByb3h5KGJyb2FkUGhhc2UsIHRoaXMubV94Zik7XG4gICAgICAgICB9XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgIHRoaXMubV9mbGFncyAmPSB+YjJCb2R5LmVfYWN0aXZlRmxhZztcbiAgICAgICAgIGJyb2FkUGhhc2UgPSB0aGlzLm1fd29ybGQubV9jb250YWN0TWFuYWdlci5tX2Jyb2FkUGhhc2U7XG4gICAgICAgICBmb3IgKGYgPSB0aGlzLm1fZml4dHVyZUxpc3Q7XG4gICAgICAgICBmOyBmID0gZi5tX25leHQpIHtcbiAgICAgICAgICAgIGYuRGVzdHJveVByb3h5KGJyb2FkUGhhc2UpO1xuICAgICAgICAgfVxuICAgICAgICAgdmFyIGNlID0gdGhpcy5tX2NvbnRhY3RMaXN0O1xuICAgICAgICAgd2hpbGUgKGNlKSB7XG4gICAgICAgICAgICB2YXIgY2UwID0gY2U7XG4gICAgICAgICAgICBjZSA9IGNlLm5leHQ7XG4gICAgICAgICAgICB0aGlzLm1fd29ybGQubV9jb250YWN0TWFuYWdlci5EZXN0cm95KGNlMC5jb250YWN0KTtcbiAgICAgICAgIH1cbiAgICAgICAgIHRoaXMubV9jb250YWN0TGlzdCA9IG51bGw7XG4gICAgICB9XG4gICB9XG4gICBiMkJvZHkucHJvdG90eXBlLklzQWN0aXZlID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuICh0aGlzLm1fZmxhZ3MgJiBiMkJvZHkuZV9hY3RpdmVGbGFnKSA9PSBiMkJvZHkuZV9hY3RpdmVGbGFnO1xuICAgfVxuICAgYjJCb2R5LnByb3RvdHlwZS5Jc1NsZWVwaW5nQWxsb3dlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiAodGhpcy5tX2ZsYWdzICYgYjJCb2R5LmVfYWxsb3dTbGVlcEZsYWcpID09IGIyQm9keS5lX2FsbG93U2xlZXBGbGFnO1xuICAgfVxuICAgYjJCb2R5LnByb3RvdHlwZS5HZXRGaXh0dXJlTGlzdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzLm1fZml4dHVyZUxpc3Q7XG4gICB9XG4gICBiMkJvZHkucHJvdG90eXBlLkdldEpvaW50TGlzdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzLm1fam9pbnRMaXN0O1xuICAgfVxuICAgYjJCb2R5LnByb3RvdHlwZS5HZXRDb250cm9sbGVyTGlzdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzLm1fY29udHJvbGxlckxpc3Q7XG4gICB9XG4gICBiMkJvZHkucHJvdG90eXBlLkdldENvbnRhY3RMaXN0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMubV9jb250YWN0TGlzdDtcbiAgIH1cbiAgIGIyQm9keS5wcm90b3R5cGUuR2V0TmV4dCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzLm1fbmV4dDtcbiAgIH1cbiAgIGIyQm9keS5wcm90b3R5cGUuR2V0VXNlckRhdGEgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5tX3VzZXJEYXRhO1xuICAgfVxuICAgYjJCb2R5LnByb3RvdHlwZS5TZXRVc2VyRGF0YSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICB0aGlzLm1fdXNlckRhdGEgPSBkYXRhO1xuICAgfVxuICAgYjJCb2R5LnByb3RvdHlwZS5HZXRXb3JsZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzLm1fd29ybGQ7XG4gICB9XG4gICBiMkJvZHkucHJvdG90eXBlLmIyQm9keSA9IGZ1bmN0aW9uIChiZCwgd29ybGQpIHtcbiAgICAgIHRoaXMubV9mbGFncyA9IDA7XG4gICAgICBpZiAoYmQuYnVsbGV0KSB7XG4gICAgICAgICB0aGlzLm1fZmxhZ3MgfD0gYjJCb2R5LmVfYnVsbGV0RmxhZztcbiAgICAgIH1cbiAgICAgIGlmIChiZC5maXhlZFJvdGF0aW9uKSB7XG4gICAgICAgICB0aGlzLm1fZmxhZ3MgfD0gYjJCb2R5LmVfZml4ZWRSb3RhdGlvbkZsYWc7XG4gICAgICB9XG4gICAgICBpZiAoYmQuYWxsb3dTbGVlcCkge1xuICAgICAgICAgdGhpcy5tX2ZsYWdzIHw9IGIyQm9keS5lX2FsbG93U2xlZXBGbGFnO1xuICAgICAgfVxuICAgICAgaWYgKGJkLmF3YWtlKSB7XG4gICAgICAgICB0aGlzLm1fZmxhZ3MgfD0gYjJCb2R5LmVfYXdha2VGbGFnO1xuICAgICAgfVxuICAgICAgaWYgKGJkLmFjdGl2ZSkge1xuICAgICAgICAgdGhpcy5tX2ZsYWdzIHw9IGIyQm9keS5lX2FjdGl2ZUZsYWc7XG4gICAgICB9XG4gICAgICB0aGlzLm1fd29ybGQgPSB3b3JsZDtcbiAgICAgIHRoaXMubV94Zi5wb3NpdGlvbi5TZXRWKGJkLnBvc2l0aW9uKTtcbiAgICAgIHRoaXMubV94Zi5SLlNldChiZC5hbmdsZSk7XG4gICAgICB0aGlzLm1fc3dlZXAubG9jYWxDZW50ZXIuU2V0WmVybygpO1xuICAgICAgdGhpcy5tX3N3ZWVwLnQwID0gMS4wO1xuICAgICAgdGhpcy5tX3N3ZWVwLmEwID0gdGhpcy5tX3N3ZWVwLmEgPSBiZC5hbmdsZTtcbiAgICAgIHZhciB0TWF0ID0gdGhpcy5tX3hmLlI7XG4gICAgICB2YXIgdFZlYyA9IHRoaXMubV9zd2VlcC5sb2NhbENlbnRlcjtcbiAgICAgIHRoaXMubV9zd2VlcC5jLnggPSAodE1hdC5jb2wxLnggKiB0VmVjLnggKyB0TWF0LmNvbDIueCAqIHRWZWMueSk7XG4gICAgICB0aGlzLm1fc3dlZXAuYy55ID0gKHRNYXQuY29sMS55ICogdFZlYy54ICsgdE1hdC5jb2wyLnkgKiB0VmVjLnkpO1xuICAgICAgdGhpcy5tX3N3ZWVwLmMueCArPSB0aGlzLm1feGYucG9zaXRpb24ueDtcbiAgICAgIHRoaXMubV9zd2VlcC5jLnkgKz0gdGhpcy5tX3hmLnBvc2l0aW9uLnk7XG4gICAgICB0aGlzLm1fc3dlZXAuYzAuU2V0Vih0aGlzLm1fc3dlZXAuYyk7XG4gICAgICB0aGlzLm1fam9pbnRMaXN0ID0gbnVsbDtcbiAgICAgIHRoaXMubV9jb250cm9sbGVyTGlzdCA9IG51bGw7XG4gICAgICB0aGlzLm1fY29udGFjdExpc3QgPSBudWxsO1xuICAgICAgdGhpcy5tX2NvbnRyb2xsZXJDb3VudCA9IDA7XG4gICAgICB0aGlzLm1fcHJldiA9IG51bGw7XG4gICAgICB0aGlzLm1fbmV4dCA9IG51bGw7XG4gICAgICB0aGlzLm1fbGluZWFyVmVsb2NpdHkuU2V0VihiZC5saW5lYXJWZWxvY2l0eSk7XG4gICAgICB0aGlzLm1fYW5ndWxhclZlbG9jaXR5ID0gYmQuYW5ndWxhclZlbG9jaXR5O1xuICAgICAgdGhpcy5tX2xpbmVhckRhbXBpbmcgPSBiZC5saW5lYXJEYW1waW5nO1xuICAgICAgdGhpcy5tX2FuZ3VsYXJEYW1waW5nID0gYmQuYW5ndWxhckRhbXBpbmc7XG4gICAgICB0aGlzLm1fZm9yY2UuU2V0KDAuMCwgMC4wKTtcbiAgICAgIHRoaXMubV90b3JxdWUgPSAwLjA7XG4gICAgICB0aGlzLm1fc2xlZXBUaW1lID0gMC4wO1xuICAgICAgdGhpcy5tX3R5cGUgPSBiZC50eXBlO1xuICAgICAgaWYgKHRoaXMubV90eXBlID09IGIyQm9keS5iMl9keW5hbWljQm9keSkge1xuICAgICAgICAgdGhpcy5tX21hc3MgPSAxLjA7XG4gICAgICAgICB0aGlzLm1faW52TWFzcyA9IDEuMDtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICAgdGhpcy5tX21hc3MgPSAwLjA7XG4gICAgICAgICB0aGlzLm1faW52TWFzcyA9IDAuMDtcbiAgICAgIH1cbiAgICAgIHRoaXMubV9JID0gMC4wO1xuICAgICAgdGhpcy5tX2ludkkgPSAwLjA7XG4gICAgICB0aGlzLm1faW5lcnRpYVNjYWxlID0gYmQuaW5lcnRpYVNjYWxlO1xuICAgICAgdGhpcy5tX3VzZXJEYXRhID0gYmQudXNlckRhdGE7XG4gICAgICB0aGlzLm1fZml4dHVyZUxpc3QgPSBudWxsO1xuICAgICAgdGhpcy5tX2ZpeHR1cmVDb3VudCA9IDA7XG4gICB9XG4gICBiMkJvZHkucHJvdG90eXBlLlN5bmNocm9uaXplRml4dHVyZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgeGYxID0gYjJCb2R5LnNfeGYxO1xuICAgICAgeGYxLlIuU2V0KHRoaXMubV9zd2VlcC5hMCk7XG4gICAgICB2YXIgdE1hdCA9IHhmMS5SO1xuICAgICAgdmFyIHRWZWMgPSB0aGlzLm1fc3dlZXAubG9jYWxDZW50ZXI7XG4gICAgICB4ZjEucG9zaXRpb24ueCA9IHRoaXMubV9zd2VlcC5jMC54IC0gKHRNYXQuY29sMS54ICogdFZlYy54ICsgdE1hdC5jb2wyLnggKiB0VmVjLnkpO1xuICAgICAgeGYxLnBvc2l0aW9uLnkgPSB0aGlzLm1fc3dlZXAuYzAueSAtICh0TWF0LmNvbDEueSAqIHRWZWMueCArIHRNYXQuY29sMi55ICogdFZlYy55KTtcbiAgICAgIHZhciBmO1xuICAgICAgdmFyIGJyb2FkUGhhc2UgPSB0aGlzLm1fd29ybGQubV9jb250YWN0TWFuYWdlci5tX2Jyb2FkUGhhc2U7XG4gICAgICBmb3IgKGYgPSB0aGlzLm1fZml4dHVyZUxpc3Q7XG4gICAgICBmOyBmID0gZi5tX25leHQpIHtcbiAgICAgICAgIGYuU3luY2hyb25pemUoYnJvYWRQaGFzZSwgeGYxLCB0aGlzLm1feGYpO1xuICAgICAgfVxuICAgfVxuICAgYjJCb2R5LnByb3RvdHlwZS5TeW5jaHJvbml6ZVRyYW5zZm9ybSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMubV94Zi5SLlNldCh0aGlzLm1fc3dlZXAuYSk7XG4gICAgICB2YXIgdE1hdCA9IHRoaXMubV94Zi5SO1xuICAgICAgdmFyIHRWZWMgPSB0aGlzLm1fc3dlZXAubG9jYWxDZW50ZXI7XG4gICAgICB0aGlzLm1feGYucG9zaXRpb24ueCA9IHRoaXMubV9zd2VlcC5jLnggLSAodE1hdC5jb2wxLnggKiB0VmVjLnggKyB0TWF0LmNvbDIueCAqIHRWZWMueSk7XG4gICAgICB0aGlzLm1feGYucG9zaXRpb24ueSA9IHRoaXMubV9zd2VlcC5jLnkgLSAodE1hdC5jb2wxLnkgKiB0VmVjLnggKyB0TWF0LmNvbDIueSAqIHRWZWMueSk7XG4gICB9XG4gICBiMkJvZHkucHJvdG90eXBlLlNob3VsZENvbGxpZGUgPSBmdW5jdGlvbiAob3RoZXIpIHtcbiAgICAgIGlmICh0aGlzLm1fdHlwZSAhPSBiMkJvZHkuYjJfZHluYW1pY0JvZHkgJiYgb3RoZXIubV90eXBlICE9IGIyQm9keS5iMl9keW5hbWljQm9keSkge1xuICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgZm9yICh2YXIgam4gPSB0aGlzLm1fam9pbnRMaXN0OyBqbjsgam4gPSBqbi5uZXh0KSB7XG4gICAgICAgICBpZiAoam4ub3RoZXIgPT0gb3RoZXIpIGlmIChqbi5qb2ludC5tX2NvbGxpZGVDb25uZWN0ZWQgPT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgfVxuICAgYjJCb2R5LnByb3RvdHlwZS5BZHZhbmNlID0gZnVuY3Rpb24gKHQpIHtcbiAgICAgIGlmICh0ID09PSB1bmRlZmluZWQpIHQgPSAwO1xuICAgICAgdGhpcy5tX3N3ZWVwLkFkdmFuY2UodCk7XG4gICAgICB0aGlzLm1fc3dlZXAuYy5TZXRWKHRoaXMubV9zd2VlcC5jMCk7XG4gICAgICB0aGlzLm1fc3dlZXAuYSA9IHRoaXMubV9zd2VlcC5hMDtcbiAgICAgIHRoaXMuU3luY2hyb25pemVUcmFuc2Zvcm0oKTtcbiAgIH1cbiAgIEJveDJELnBvc3REZWZzLnB1c2goZnVuY3Rpb24gKCkge1xuICAgICAgQm94MkQuRHluYW1pY3MuYjJCb2R5LnNfeGYxID0gbmV3IGIyVHJhbnNmb3JtKCk7XG4gICAgICBCb3gyRC5EeW5hbWljcy5iMkJvZHkuZV9pc2xhbmRGbGFnID0gMHgwMDAxO1xuICAgICAgQm94MkQuRHluYW1pY3MuYjJCb2R5LmVfYXdha2VGbGFnID0gMHgwMDAyO1xuICAgICAgQm94MkQuRHluYW1pY3MuYjJCb2R5LmVfYWxsb3dTbGVlcEZsYWcgPSAweDAwMDQ7XG4gICAgICBCb3gyRC5EeW5hbWljcy5iMkJvZHkuZV9idWxsZXRGbGFnID0gMHgwMDA4O1xuICAgICAgQm94MkQuRHluYW1pY3MuYjJCb2R5LmVfZml4ZWRSb3RhdGlvbkZsYWcgPSAweDAwMTA7XG4gICAgICBCb3gyRC5EeW5hbWljcy5iMkJvZHkuZV9hY3RpdmVGbGFnID0gMHgwMDIwO1xuICAgICAgQm94MkQuRHluYW1pY3MuYjJCb2R5LmIyX3N0YXRpY0JvZHkgPSAwO1xuICAgICAgQm94MkQuRHluYW1pY3MuYjJCb2R5LmIyX2tpbmVtYXRpY0JvZHkgPSAxO1xuICAgICAgQm94MkQuRHluYW1pY3MuYjJCb2R5LmIyX2R5bmFtaWNCb2R5ID0gMjtcbiAgIH0pO1xuICAgYjJCb2R5RGVmLmIyQm9keURlZiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMucG9zaXRpb24gPSBuZXcgYjJWZWMyKCk7XG4gICAgICB0aGlzLmxpbmVhclZlbG9jaXR5ID0gbmV3IGIyVmVjMigpO1xuICAgfTtcbiAgIGIyQm9keURlZi5wcm90b3R5cGUuYjJCb2R5RGVmID0gZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcy51c2VyRGF0YSA9IG51bGw7XG4gICAgICB0aGlzLnBvc2l0aW9uLlNldCgwLjAsIDAuMCk7XG4gICAgICB0aGlzLmFuZ2xlID0gMC4wO1xuICAgICAgdGhpcy5saW5lYXJWZWxvY2l0eS5TZXQoMCwgMCk7XG4gICAgICB0aGlzLmFuZ3VsYXJWZWxvY2l0eSA9IDAuMDtcbiAgICAgIHRoaXMubGluZWFyRGFtcGluZyA9IDAuMDtcbiAgICAgIHRoaXMuYW5ndWxhckRhbXBpbmcgPSAwLjA7XG4gICAgICB0aGlzLmFsbG93U2xlZXAgPSB0cnVlO1xuICAgICAgdGhpcy5hd2FrZSA9IHRydWU7XG4gICAgICB0aGlzLmZpeGVkUm90YXRpb24gPSBmYWxzZTtcbiAgICAgIHRoaXMuYnVsbGV0ID0gZmFsc2U7XG4gICAgICB0aGlzLnR5cGUgPSBiMkJvZHkuYjJfc3RhdGljQm9keTtcbiAgICAgIHRoaXMuYWN0aXZlID0gdHJ1ZTtcbiAgICAgIHRoaXMuaW5lcnRpYVNjYWxlID0gMS4wO1xuICAgfVxuICAgYjJDb250YWN0RmlsdGVyLmIyQ29udGFjdEZpbHRlciA9IGZ1bmN0aW9uICgpIHt9O1xuICAgYjJDb250YWN0RmlsdGVyLnByb3RvdHlwZS5TaG91bGRDb2xsaWRlID0gZnVuY3Rpb24gKGZpeHR1cmVBLCBmaXh0dXJlQikge1xuICAgICAgdmFyIGZpbHRlcjEgPSBmaXh0dXJlQS5HZXRGaWx0ZXJEYXRhKCk7XG4gICAgICB2YXIgZmlsdGVyMiA9IGZpeHR1cmVCLkdldEZpbHRlckRhdGEoKTtcbiAgICAgIGlmIChmaWx0ZXIxLmdyb3VwSW5kZXggPT0gZmlsdGVyMi5ncm91cEluZGV4ICYmIGZpbHRlcjEuZ3JvdXBJbmRleCAhPSAwKSB7XG4gICAgICAgICByZXR1cm4gZmlsdGVyMS5ncm91cEluZGV4ID4gMDtcbiAgICAgIH1cbiAgICAgIHZhciBjb2xsaWRlID0gKGZpbHRlcjEubWFza0JpdHMgJiBmaWx0ZXIyLmNhdGVnb3J5Qml0cykgIT0gMCAmJiAoZmlsdGVyMS5jYXRlZ29yeUJpdHMgJiBmaWx0ZXIyLm1hc2tCaXRzKSAhPSAwO1xuICAgICAgcmV0dXJuIGNvbGxpZGU7XG4gICB9XG4gICBiMkNvbnRhY3RGaWx0ZXIucHJvdG90eXBlLlJheUNvbGxpZGUgPSBmdW5jdGlvbiAodXNlckRhdGEsIGZpeHR1cmUpIHtcbiAgICAgIGlmICghdXNlckRhdGEpIHJldHVybiB0cnVlO1xuICAgICAgcmV0dXJuIHRoaXMuU2hvdWxkQ29sbGlkZSgodXNlckRhdGEgaW5zdGFuY2VvZiBiMkZpeHR1cmUgPyB1c2VyRGF0YSA6IG51bGwpLCBmaXh0dXJlKTtcbiAgIH1cbiAgIEJveDJELnBvc3REZWZzLnB1c2goZnVuY3Rpb24gKCkge1xuICAgICAgQm94MkQuRHluYW1pY3MuYjJDb250YWN0RmlsdGVyLmIyX2RlZmF1bHRGaWx0ZXIgPSBuZXcgYjJDb250YWN0RmlsdGVyKCk7XG4gICB9KTtcbiAgIGIyQ29udGFjdEltcHVsc2UuYjJDb250YWN0SW1wdWxzZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMubm9ybWFsSW1wdWxzZXMgPSBuZXcgVmVjdG9yX2Eyal9OdW1iZXIoYjJTZXR0aW5ncy5iMl9tYXhNYW5pZm9sZFBvaW50cyk7XG4gICAgICB0aGlzLnRhbmdlbnRJbXB1bHNlcyA9IG5ldyBWZWN0b3JfYTJqX051bWJlcihiMlNldHRpbmdzLmIyX21heE1hbmlmb2xkUG9pbnRzKTtcbiAgIH07XG4gICBiMkNvbnRhY3RMaXN0ZW5lci5iMkNvbnRhY3RMaXN0ZW5lciA9IGZ1bmN0aW9uICgpIHt9O1xuICAgYjJDb250YWN0TGlzdGVuZXIucHJvdG90eXBlLkJlZ2luQ29udGFjdCA9IGZ1bmN0aW9uIChjb250YWN0KSB7fVxuICAgYjJDb250YWN0TGlzdGVuZXIucHJvdG90eXBlLkVuZENvbnRhY3QgPSBmdW5jdGlvbiAoY29udGFjdCkge31cbiAgIGIyQ29udGFjdExpc3RlbmVyLnByb3RvdHlwZS5QcmVTb2x2ZSA9IGZ1bmN0aW9uIChjb250YWN0LCBvbGRNYW5pZm9sZCkge31cbiAgIGIyQ29udGFjdExpc3RlbmVyLnByb3RvdHlwZS5Qb3N0U29sdmUgPSBmdW5jdGlvbiAoY29udGFjdCwgaW1wdWxzZSkge31cbiAgIEJveDJELnBvc3REZWZzLnB1c2goZnVuY3Rpb24gKCkge1xuICAgICAgQm94MkQuRHluYW1pY3MuYjJDb250YWN0TGlzdGVuZXIuYjJfZGVmYXVsdExpc3RlbmVyID0gbmV3IGIyQ29udGFjdExpc3RlbmVyKCk7XG4gICB9KTtcbiAgIGIyQ29udGFjdE1hbmFnZXIuYjJDb250YWN0TWFuYWdlciA9IGZ1bmN0aW9uICgpIHt9O1xuICAgYjJDb250YWN0TWFuYWdlci5wcm90b3R5cGUuYjJDb250YWN0TWFuYWdlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMubV93b3JsZCA9IG51bGw7XG4gICAgICB0aGlzLm1fY29udGFjdENvdW50ID0gMDtcbiAgICAgIHRoaXMubV9jb250YWN0RmlsdGVyID0gYjJDb250YWN0RmlsdGVyLmIyX2RlZmF1bHRGaWx0ZXI7XG4gICAgICB0aGlzLm1fY29udGFjdExpc3RlbmVyID0gYjJDb250YWN0TGlzdGVuZXIuYjJfZGVmYXVsdExpc3RlbmVyO1xuICAgICAgdGhpcy5tX2NvbnRhY3RGYWN0b3J5ID0gbmV3IGIyQ29udGFjdEZhY3RvcnkodGhpcy5tX2FsbG9jYXRvcik7XG4gICAgICB0aGlzLm1fYnJvYWRQaGFzZSA9IG5ldyBiMkR5bmFtaWNUcmVlQnJvYWRQaGFzZSgpO1xuICAgfVxuICAgYjJDb250YWN0TWFuYWdlci5wcm90b3R5cGUuQWRkUGFpciA9IGZ1bmN0aW9uIChwcm94eVVzZXJEYXRhQSwgcHJveHlVc2VyRGF0YUIpIHtcbiAgICAgIHZhciBmaXh0dXJlQSA9IChwcm94eVVzZXJEYXRhQSBpbnN0YW5jZW9mIGIyRml4dHVyZSA/IHByb3h5VXNlckRhdGFBIDogbnVsbCk7XG4gICAgICB2YXIgZml4dHVyZUIgPSAocHJveHlVc2VyRGF0YUIgaW5zdGFuY2VvZiBiMkZpeHR1cmUgPyBwcm94eVVzZXJEYXRhQiA6IG51bGwpO1xuICAgICAgdmFyIGJvZHlBID0gZml4dHVyZUEuR2V0Qm9keSgpO1xuICAgICAgdmFyIGJvZHlCID0gZml4dHVyZUIuR2V0Qm9keSgpO1xuICAgICAgaWYgKGJvZHlBID09IGJvZHlCKSByZXR1cm47XG4gICAgICB2YXIgZWRnZSA9IGJvZHlCLkdldENvbnRhY3RMaXN0KCk7XG4gICAgICB3aGlsZSAoZWRnZSkge1xuICAgICAgICAgaWYgKGVkZ2Uub3RoZXIgPT0gYm9keUEpIHtcbiAgICAgICAgICAgIHZhciBmQSA9IGVkZ2UuY29udGFjdC5HZXRGaXh0dXJlQSgpO1xuICAgICAgICAgICAgdmFyIGZCID0gZWRnZS5jb250YWN0LkdldEZpeHR1cmVCKCk7XG4gICAgICAgICAgICBpZiAoZkEgPT0gZml4dHVyZUEgJiYgZkIgPT0gZml4dHVyZUIpIHJldHVybjtcbiAgICAgICAgICAgIGlmIChmQSA9PSBmaXh0dXJlQiAmJiBmQiA9PSBmaXh0dXJlQSkgcmV0dXJuO1xuICAgICAgICAgfVxuICAgICAgICAgZWRnZSA9IGVkZ2UubmV4dDtcbiAgICAgIH1cbiAgICAgIGlmIChib2R5Qi5TaG91bGRDb2xsaWRlKGJvZHlBKSA9PSBmYWxzZSkge1xuICAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMubV9jb250YWN0RmlsdGVyLlNob3VsZENvbGxpZGUoZml4dHVyZUEsIGZpeHR1cmVCKSA9PSBmYWxzZSkge1xuICAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdmFyIGMgPSB0aGlzLm1fY29udGFjdEZhY3RvcnkuQ3JlYXRlKGZpeHR1cmVBLCBmaXh0dXJlQik7XG4gICAgICBmaXh0dXJlQSA9IGMuR2V0Rml4dHVyZUEoKTtcbiAgICAgIGZpeHR1cmVCID0gYy5HZXRGaXh0dXJlQigpO1xuICAgICAgYm9keUEgPSBmaXh0dXJlQS5tX2JvZHk7XG4gICAgICBib2R5QiA9IGZpeHR1cmVCLm1fYm9keTtcbiAgICAgIGMubV9wcmV2ID0gbnVsbDtcbiAgICAgIGMubV9uZXh0ID0gdGhpcy5tX3dvcmxkLm1fY29udGFjdExpc3Q7XG4gICAgICBpZiAodGhpcy5tX3dvcmxkLm1fY29udGFjdExpc3QgIT0gbnVsbCkge1xuICAgICAgICAgdGhpcy5tX3dvcmxkLm1fY29udGFjdExpc3QubV9wcmV2ID0gYztcbiAgICAgIH1cbiAgICAgIHRoaXMubV93b3JsZC5tX2NvbnRhY3RMaXN0ID0gYztcbiAgICAgIGMubV9ub2RlQS5jb250YWN0ID0gYztcbiAgICAgIGMubV9ub2RlQS5vdGhlciA9IGJvZHlCO1xuICAgICAgYy5tX25vZGVBLnByZXYgPSBudWxsO1xuICAgICAgYy5tX25vZGVBLm5leHQgPSBib2R5QS5tX2NvbnRhY3RMaXN0O1xuICAgICAgaWYgKGJvZHlBLm1fY29udGFjdExpc3QgIT0gbnVsbCkge1xuICAgICAgICAgYm9keUEubV9jb250YWN0TGlzdC5wcmV2ID0gYy5tX25vZGVBO1xuICAgICAgfVxuICAgICAgYm9keUEubV9jb250YWN0TGlzdCA9IGMubV9ub2RlQTtcbiAgICAgIGMubV9ub2RlQi5jb250YWN0ID0gYztcbiAgICAgIGMubV9ub2RlQi5vdGhlciA9IGJvZHlBO1xuICAgICAgYy5tX25vZGVCLnByZXYgPSBudWxsO1xuICAgICAgYy5tX25vZGVCLm5leHQgPSBib2R5Qi5tX2NvbnRhY3RMaXN0O1xuICAgICAgaWYgKGJvZHlCLm1fY29udGFjdExpc3QgIT0gbnVsbCkge1xuICAgICAgICAgYm9keUIubV9jb250YWN0TGlzdC5wcmV2ID0gYy5tX25vZGVCO1xuICAgICAgfVxuICAgICAgYm9keUIubV9jb250YWN0TGlzdCA9IGMubV9ub2RlQjtcbiAgICAgICsrdGhpcy5tX3dvcmxkLm1fY29udGFjdENvdW50O1xuICAgICAgcmV0dXJuO1xuICAgfVxuICAgYjJDb250YWN0TWFuYWdlci5wcm90b3R5cGUuRmluZE5ld0NvbnRhY3RzID0gZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcy5tX2Jyb2FkUGhhc2UuVXBkYXRlUGFpcnMoQm94MkQuZ2VuZXJhdGVDYWxsYmFjayh0aGlzLCB0aGlzLkFkZFBhaXIpKTtcbiAgIH1cbiAgIGIyQ29udGFjdE1hbmFnZXIucHJvdG90eXBlLkRlc3Ryb3kgPSBmdW5jdGlvbiAoYykge1xuICAgICAgdmFyIGZpeHR1cmVBID0gYy5HZXRGaXh0dXJlQSgpO1xuICAgICAgdmFyIGZpeHR1cmVCID0gYy5HZXRGaXh0dXJlQigpO1xuICAgICAgdmFyIGJvZHlBID0gZml4dHVyZUEuR2V0Qm9keSgpO1xuICAgICAgdmFyIGJvZHlCID0gZml4dHVyZUIuR2V0Qm9keSgpO1xuICAgICAgaWYgKGMuSXNUb3VjaGluZygpKSB7XG4gICAgICAgICB0aGlzLm1fY29udGFjdExpc3RlbmVyLkVuZENvbnRhY3QoYyk7XG4gICAgICB9XG4gICAgICBpZiAoYy5tX3ByZXYpIHtcbiAgICAgICAgIGMubV9wcmV2Lm1fbmV4dCA9IGMubV9uZXh0O1xuICAgICAgfVxuICAgICAgaWYgKGMubV9uZXh0KSB7XG4gICAgICAgICBjLm1fbmV4dC5tX3ByZXYgPSBjLm1fcHJldjtcbiAgICAgIH1cbiAgICAgIGlmIChjID09IHRoaXMubV93b3JsZC5tX2NvbnRhY3RMaXN0KSB7XG4gICAgICAgICB0aGlzLm1fd29ybGQubV9jb250YWN0TGlzdCA9IGMubV9uZXh0O1xuICAgICAgfVxuICAgICAgaWYgKGMubV9ub2RlQS5wcmV2KSB7XG4gICAgICAgICBjLm1fbm9kZUEucHJldi5uZXh0ID0gYy5tX25vZGVBLm5leHQ7XG4gICAgICB9XG4gICAgICBpZiAoYy5tX25vZGVBLm5leHQpIHtcbiAgICAgICAgIGMubV9ub2RlQS5uZXh0LnByZXYgPSBjLm1fbm9kZUEucHJldjtcbiAgICAgIH1cbiAgICAgIGlmIChjLm1fbm9kZUEgPT0gYm9keUEubV9jb250YWN0TGlzdCkge1xuICAgICAgICAgYm9keUEubV9jb250YWN0TGlzdCA9IGMubV9ub2RlQS5uZXh0O1xuICAgICAgfVxuICAgICAgaWYgKGMubV9ub2RlQi5wcmV2KSB7XG4gICAgICAgICBjLm1fbm9kZUIucHJldi5uZXh0ID0gYy5tX25vZGVCLm5leHQ7XG4gICAgICB9XG4gICAgICBpZiAoYy5tX25vZGVCLm5leHQpIHtcbiAgICAgICAgIGMubV9ub2RlQi5uZXh0LnByZXYgPSBjLm1fbm9kZUIucHJldjtcbiAgICAgIH1cbiAgICAgIGlmIChjLm1fbm9kZUIgPT0gYm9keUIubV9jb250YWN0TGlzdCkge1xuICAgICAgICAgYm9keUIubV9jb250YWN0TGlzdCA9IGMubV9ub2RlQi5uZXh0O1xuICAgICAgfVxuICAgICAgdGhpcy5tX2NvbnRhY3RGYWN0b3J5LkRlc3Ryb3koYyk7XG4gICAgICAtLXRoaXMubV9jb250YWN0Q291bnQ7XG4gICB9XG4gICBiMkNvbnRhY3RNYW5hZ2VyLnByb3RvdHlwZS5Db2xsaWRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGMgPSB0aGlzLm1fd29ybGQubV9jb250YWN0TGlzdDtcbiAgICAgIHdoaWxlIChjKSB7XG4gICAgICAgICB2YXIgZml4dHVyZUEgPSBjLkdldEZpeHR1cmVBKCk7XG4gICAgICAgICB2YXIgZml4dHVyZUIgPSBjLkdldEZpeHR1cmVCKCk7XG4gICAgICAgICB2YXIgYm9keUEgPSBmaXh0dXJlQS5HZXRCb2R5KCk7XG4gICAgICAgICB2YXIgYm9keUIgPSBmaXh0dXJlQi5HZXRCb2R5KCk7XG4gICAgICAgICBpZiAoYm9keUEuSXNBd2FrZSgpID09IGZhbHNlICYmIGJvZHlCLklzQXdha2UoKSA9PSBmYWxzZSkge1xuICAgICAgICAgICAgYyA9IGMuR2V0TmV4dCgpO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICB9XG4gICAgICAgICBpZiAoYy5tX2ZsYWdzICYgYjJDb250YWN0LmVfZmlsdGVyRmxhZykge1xuICAgICAgICAgICAgaWYgKGJvZHlCLlNob3VsZENvbGxpZGUoYm9keUEpID09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICB2YXIgY051a2UgPSBjO1xuICAgICAgICAgICAgICAgYyA9IGNOdWtlLkdldE5leHQoKTtcbiAgICAgICAgICAgICAgIHRoaXMuRGVzdHJveShjTnVrZSk7XG4gICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLm1fY29udGFjdEZpbHRlci5TaG91bGRDb2xsaWRlKGZpeHR1cmVBLCBmaXh0dXJlQikgPT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgIGNOdWtlID0gYztcbiAgICAgICAgICAgICAgIGMgPSBjTnVrZS5HZXROZXh0KCk7XG4gICAgICAgICAgICAgICB0aGlzLkRlc3Ryb3koY051a2UpO1xuICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjLm1fZmxhZ3MgJj0gfmIyQ29udGFjdC5lX2ZpbHRlckZsYWc7XG4gICAgICAgICB9XG4gICAgICAgICB2YXIgcHJveHlBID0gZml4dHVyZUEubV9wcm94eTtcbiAgICAgICAgIHZhciBwcm94eUIgPSBmaXh0dXJlQi5tX3Byb3h5O1xuICAgICAgICAgdmFyIG92ZXJsYXAgPSB0aGlzLm1fYnJvYWRQaGFzZS5UZXN0T3ZlcmxhcChwcm94eUEsIHByb3h5Qik7XG4gICAgICAgICBpZiAob3ZlcmxhcCA9PSBmYWxzZSkge1xuICAgICAgICAgICAgY051a2UgPSBjO1xuICAgICAgICAgICAgYyA9IGNOdWtlLkdldE5leHQoKTtcbiAgICAgICAgICAgIHRoaXMuRGVzdHJveShjTnVrZSk7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgIH1cbiAgICAgICAgIGMuVXBkYXRlKHRoaXMubV9jb250YWN0TGlzdGVuZXIpO1xuICAgICAgICAgYyA9IGMuR2V0TmV4dCgpO1xuICAgICAgfVxuICAgfVxuICAgQm94MkQucG9zdERlZnMucHVzaChmdW5jdGlvbiAoKSB7XG4gICAgICBCb3gyRC5EeW5hbWljcy5iMkNvbnRhY3RNYW5hZ2VyLnNfZXZhbENQID0gbmV3IGIyQ29udGFjdFBvaW50KCk7XG4gICB9KTtcbiAgIGIyRGVidWdEcmF3LmIyRGVidWdEcmF3ID0gZnVuY3Rpb24gKCkge307XG4gICBiMkRlYnVnRHJhdy5wcm90b3R5cGUuYjJEZWJ1Z0RyYXcgPSBmdW5jdGlvbiAoKSB7fVxuICAgYjJEZWJ1Z0RyYXcucHJvdG90eXBlLlNldEZsYWdzID0gZnVuY3Rpb24gKGZsYWdzKSB7XG4gICAgICBpZiAoZmxhZ3MgPT09IHVuZGVmaW5lZCkgZmxhZ3MgPSAwO1xuICAgfVxuICAgYjJEZWJ1Z0RyYXcucHJvdG90eXBlLkdldEZsYWdzID0gZnVuY3Rpb24gKCkge31cbiAgIGIyRGVidWdEcmF3LnByb3RvdHlwZS5BcHBlbmRGbGFncyA9IGZ1bmN0aW9uIChmbGFncykge1xuICAgICAgaWYgKGZsYWdzID09PSB1bmRlZmluZWQpIGZsYWdzID0gMDtcbiAgIH1cbiAgIGIyRGVidWdEcmF3LnByb3RvdHlwZS5DbGVhckZsYWdzID0gZnVuY3Rpb24gKGZsYWdzKSB7XG4gICAgICBpZiAoZmxhZ3MgPT09IHVuZGVmaW5lZCkgZmxhZ3MgPSAwO1xuICAgfVxuICAgYjJEZWJ1Z0RyYXcucHJvdG90eXBlLlNldFNwcml0ZSA9IGZ1bmN0aW9uIChzcHJpdGUpIHt9XG4gICBiMkRlYnVnRHJhdy5wcm90b3R5cGUuR2V0U3ByaXRlID0gZnVuY3Rpb24gKCkge31cbiAgIGIyRGVidWdEcmF3LnByb3RvdHlwZS5TZXREcmF3U2NhbGUgPSBmdW5jdGlvbiAoZHJhd1NjYWxlKSB7XG4gICAgICBpZiAoZHJhd1NjYWxlID09PSB1bmRlZmluZWQpIGRyYXdTY2FsZSA9IDA7XG4gICB9XG4gICBiMkRlYnVnRHJhdy5wcm90b3R5cGUuR2V0RHJhd1NjYWxlID0gZnVuY3Rpb24gKCkge31cbiAgIGIyRGVidWdEcmF3LnByb3RvdHlwZS5TZXRMaW5lVGhpY2tuZXNzID0gZnVuY3Rpb24gKGxpbmVUaGlja25lc3MpIHtcbiAgICAgIGlmIChsaW5lVGhpY2tuZXNzID09PSB1bmRlZmluZWQpIGxpbmVUaGlja25lc3MgPSAwO1xuICAgfVxuICAgYjJEZWJ1Z0RyYXcucHJvdG90eXBlLkdldExpbmVUaGlja25lc3MgPSBmdW5jdGlvbiAoKSB7fVxuICAgYjJEZWJ1Z0RyYXcucHJvdG90eXBlLlNldEFscGhhID0gZnVuY3Rpb24gKGFscGhhKSB7XG4gICAgICBpZiAoYWxwaGEgPT09IHVuZGVmaW5lZCkgYWxwaGEgPSAwO1xuICAgfVxuICAgYjJEZWJ1Z0RyYXcucHJvdG90eXBlLkdldEFscGhhID0gZnVuY3Rpb24gKCkge31cbiAgIGIyRGVidWdEcmF3LnByb3RvdHlwZS5TZXRGaWxsQWxwaGEgPSBmdW5jdGlvbiAoYWxwaGEpIHtcbiAgICAgIGlmIChhbHBoYSA9PT0gdW5kZWZpbmVkKSBhbHBoYSA9IDA7XG4gICB9XG4gICBiMkRlYnVnRHJhdy5wcm90b3R5cGUuR2V0RmlsbEFscGhhID0gZnVuY3Rpb24gKCkge31cbiAgIGIyRGVidWdEcmF3LnByb3RvdHlwZS5TZXRYRm9ybVNjYWxlID0gZnVuY3Rpb24gKHhmb3JtU2NhbGUpIHtcbiAgICAgIGlmICh4Zm9ybVNjYWxlID09PSB1bmRlZmluZWQpIHhmb3JtU2NhbGUgPSAwO1xuICAgfVxuICAgYjJEZWJ1Z0RyYXcucHJvdG90eXBlLkdldFhGb3JtU2NhbGUgPSBmdW5jdGlvbiAoKSB7fVxuICAgYjJEZWJ1Z0RyYXcucHJvdG90eXBlLkRyYXdQb2x5Z29uID0gZnVuY3Rpb24gKHZlcnRpY2VzLCB2ZXJ0ZXhDb3VudCwgY29sb3IpIHtcbiAgICAgIGlmICh2ZXJ0ZXhDb3VudCA9PT0gdW5kZWZpbmVkKSB2ZXJ0ZXhDb3VudCA9IDA7XG4gICB9XG4gICBiMkRlYnVnRHJhdy5wcm90b3R5cGUuRHJhd1NvbGlkUG9seWdvbiA9IGZ1bmN0aW9uICh2ZXJ0aWNlcywgdmVydGV4Q291bnQsIGNvbG9yKSB7XG4gICAgICBpZiAodmVydGV4Q291bnQgPT09IHVuZGVmaW5lZCkgdmVydGV4Q291bnQgPSAwO1xuICAgfVxuICAgYjJEZWJ1Z0RyYXcucHJvdG90eXBlLkRyYXdDaXJjbGUgPSBmdW5jdGlvbiAoY2VudGVyLCByYWRpdXMsIGNvbG9yKSB7XG4gICAgICBpZiAocmFkaXVzID09PSB1bmRlZmluZWQpIHJhZGl1cyA9IDA7XG4gICB9XG4gICBiMkRlYnVnRHJhdy5wcm90b3R5cGUuRHJhd1NvbGlkQ2lyY2xlID0gZnVuY3Rpb24gKGNlbnRlciwgcmFkaXVzLCBheGlzLCBjb2xvcikge1xuICAgICAgaWYgKHJhZGl1cyA9PT0gdW5kZWZpbmVkKSByYWRpdXMgPSAwO1xuICAgfVxuICAgYjJEZWJ1Z0RyYXcucHJvdG90eXBlLkRyYXdTZWdtZW50ID0gZnVuY3Rpb24gKHAxLCBwMiwgY29sb3IpIHt9XG4gICBiMkRlYnVnRHJhdy5wcm90b3R5cGUuRHJhd1RyYW5zZm9ybSA9IGZ1bmN0aW9uICh4Zikge31cbiAgIEJveDJELnBvc3REZWZzLnB1c2goZnVuY3Rpb24gKCkge1xuICAgICAgQm94MkQuRHluYW1pY3MuYjJEZWJ1Z0RyYXcuZV9zaGFwZUJpdCA9IDB4MDAwMTtcbiAgICAgIEJveDJELkR5bmFtaWNzLmIyRGVidWdEcmF3LmVfam9pbnRCaXQgPSAweDAwMDI7XG4gICAgICBCb3gyRC5EeW5hbWljcy5iMkRlYnVnRHJhdy5lX2FhYmJCaXQgPSAweDAwMDQ7XG4gICAgICBCb3gyRC5EeW5hbWljcy5iMkRlYnVnRHJhdy5lX3BhaXJCaXQgPSAweDAwMDg7XG4gICAgICBCb3gyRC5EeW5hbWljcy5iMkRlYnVnRHJhdy5lX2NlbnRlck9mTWFzc0JpdCA9IDB4MDAxMDtcbiAgICAgIEJveDJELkR5bmFtaWNzLmIyRGVidWdEcmF3LmVfY29udHJvbGxlckJpdCA9IDB4MDAyMDtcbiAgIH0pO1xuICAgYjJEZXN0cnVjdGlvbkxpc3RlbmVyLmIyRGVzdHJ1Y3Rpb25MaXN0ZW5lciA9IGZ1bmN0aW9uICgpIHt9O1xuICAgYjJEZXN0cnVjdGlvbkxpc3RlbmVyLnByb3RvdHlwZS5TYXlHb29kYnllSm9pbnQgPSBmdW5jdGlvbiAoam9pbnQpIHt9XG4gICBiMkRlc3RydWN0aW9uTGlzdGVuZXIucHJvdG90eXBlLlNheUdvb2RieWVGaXh0dXJlID0gZnVuY3Rpb24gKGZpeHR1cmUpIHt9XG4gICBiMkZpbHRlckRhdGEuYjJGaWx0ZXJEYXRhID0gZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcy5jYXRlZ29yeUJpdHMgPSAweDAwMDE7XG4gICAgICB0aGlzLm1hc2tCaXRzID0gMHhGRkZGO1xuICAgICAgdGhpcy5ncm91cEluZGV4ID0gMDtcbiAgIH07XG4gICBiMkZpbHRlckRhdGEucHJvdG90eXBlLkNvcHkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgY29weSA9IG5ldyBiMkZpbHRlckRhdGEoKTtcbiAgICAgIGNvcHkuY2F0ZWdvcnlCaXRzID0gdGhpcy5jYXRlZ29yeUJpdHM7XG4gICAgICBjb3B5Lm1hc2tCaXRzID0gdGhpcy5tYXNrQml0cztcbiAgICAgIGNvcHkuZ3JvdXBJbmRleCA9IHRoaXMuZ3JvdXBJbmRleDtcbiAgICAgIHJldHVybiBjb3B5O1xuICAgfVxuICAgYjJGaXh0dXJlLmIyRml4dHVyZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMubV9maWx0ZXIgPSBuZXcgYjJGaWx0ZXJEYXRhKCk7XG4gICB9O1xuICAgYjJGaXh0dXJlLnByb3RvdHlwZS5HZXRUeXBlID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMubV9zaGFwZS5HZXRUeXBlKCk7XG4gICB9XG4gICBiMkZpeHR1cmUucHJvdG90eXBlLkdldFNoYXBlID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMubV9zaGFwZTtcbiAgIH1cbiAgIGIyRml4dHVyZS5wcm90b3R5cGUuU2V0U2Vuc29yID0gZnVuY3Rpb24gKHNlbnNvcikge1xuICAgICAgaWYgKHRoaXMubV9pc1NlbnNvciA9PSBzZW5zb3IpIHJldHVybjtcbiAgICAgIHRoaXMubV9pc1NlbnNvciA9IHNlbnNvcjtcbiAgICAgIGlmICh0aGlzLm1fYm9keSA9PSBudWxsKSByZXR1cm47XG4gICAgICB2YXIgZWRnZSA9IHRoaXMubV9ib2R5LkdldENvbnRhY3RMaXN0KCk7XG4gICAgICB3aGlsZSAoZWRnZSkge1xuICAgICAgICAgdmFyIGNvbnRhY3QgPSBlZGdlLmNvbnRhY3Q7XG4gICAgICAgICB2YXIgZml4dHVyZUEgPSBjb250YWN0LkdldEZpeHR1cmVBKCk7XG4gICAgICAgICB2YXIgZml4dHVyZUIgPSBjb250YWN0LkdldEZpeHR1cmVCKCk7XG4gICAgICAgICBpZiAoZml4dHVyZUEgPT0gdGhpcyB8fCBmaXh0dXJlQiA9PSB0aGlzKSBjb250YWN0LlNldFNlbnNvcihmaXh0dXJlQS5Jc1NlbnNvcigpIHx8IGZpeHR1cmVCLklzU2Vuc29yKCkpO1xuICAgICAgICAgZWRnZSA9IGVkZ2UubmV4dDtcbiAgICAgIH1cbiAgIH1cbiAgIGIyRml4dHVyZS5wcm90b3R5cGUuSXNTZW5zb3IgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5tX2lzU2Vuc29yO1xuICAgfVxuICAgYjJGaXh0dXJlLnByb3RvdHlwZS5TZXRGaWx0ZXJEYXRhID0gZnVuY3Rpb24gKGZpbHRlcikge1xuICAgICAgdGhpcy5tX2ZpbHRlciA9IGZpbHRlci5Db3B5KCk7XG4gICAgICBpZiAodGhpcy5tX2JvZHkpIHJldHVybjtcbiAgICAgIHZhciBlZGdlID0gdGhpcy5tX2JvZHkuR2V0Q29udGFjdExpc3QoKTtcbiAgICAgIHdoaWxlIChlZGdlKSB7XG4gICAgICAgICB2YXIgY29udGFjdCA9IGVkZ2UuY29udGFjdDtcbiAgICAgICAgIHZhciBmaXh0dXJlQSA9IGNvbnRhY3QuR2V0Rml4dHVyZUEoKTtcbiAgICAgICAgIHZhciBmaXh0dXJlQiA9IGNvbnRhY3QuR2V0Rml4dHVyZUIoKTtcbiAgICAgICAgIGlmIChmaXh0dXJlQSA9PSB0aGlzIHx8IGZpeHR1cmVCID09IHRoaXMpIGNvbnRhY3QuRmxhZ0ZvckZpbHRlcmluZygpO1xuICAgICAgICAgZWRnZSA9IGVkZ2UubmV4dDtcbiAgICAgIH1cbiAgIH1cbiAgIGIyRml4dHVyZS5wcm90b3R5cGUuR2V0RmlsdGVyRGF0YSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzLm1fZmlsdGVyLkNvcHkoKTtcbiAgIH1cbiAgIGIyRml4dHVyZS5wcm90b3R5cGUuR2V0Qm9keSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzLm1fYm9keTtcbiAgIH1cbiAgIGIyRml4dHVyZS5wcm90b3R5cGUuR2V0TmV4dCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzLm1fbmV4dDtcbiAgIH1cbiAgIGIyRml4dHVyZS5wcm90b3R5cGUuR2V0VXNlckRhdGEgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5tX3VzZXJEYXRhO1xuICAgfVxuICAgYjJGaXh0dXJlLnByb3RvdHlwZS5TZXRVc2VyRGF0YSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICB0aGlzLm1fdXNlckRhdGEgPSBkYXRhO1xuICAgfVxuICAgYjJGaXh0dXJlLnByb3RvdHlwZS5UZXN0UG9pbnQgPSBmdW5jdGlvbiAocCkge1xuICAgICAgcmV0dXJuIHRoaXMubV9zaGFwZS5UZXN0UG9pbnQodGhpcy5tX2JvZHkuR2V0VHJhbnNmb3JtKCksIHApO1xuICAgfVxuICAgYjJGaXh0dXJlLnByb3RvdHlwZS5SYXlDYXN0ID0gZnVuY3Rpb24gKG91dHB1dCwgaW5wdXQpIHtcbiAgICAgIHJldHVybiB0aGlzLm1fc2hhcGUuUmF5Q2FzdChvdXRwdXQsIGlucHV0LCB0aGlzLm1fYm9keS5HZXRUcmFuc2Zvcm0oKSk7XG4gICB9XG4gICBiMkZpeHR1cmUucHJvdG90eXBlLkdldE1hc3NEYXRhID0gZnVuY3Rpb24gKG1hc3NEYXRhKSB7XG4gICAgICBpZiAobWFzc0RhdGEgPT09IHVuZGVmaW5lZCkgbWFzc0RhdGEgPSBudWxsO1xuICAgICAgaWYgKG1hc3NEYXRhID09IG51bGwpIHtcbiAgICAgICAgIG1hc3NEYXRhID0gbmV3IGIyTWFzc0RhdGEoKTtcbiAgICAgIH1cbiAgICAgIHRoaXMubV9zaGFwZS5Db21wdXRlTWFzcyhtYXNzRGF0YSwgdGhpcy5tX2RlbnNpdHkpO1xuICAgICAgcmV0dXJuIG1hc3NEYXRhO1xuICAgfVxuICAgYjJGaXh0dXJlLnByb3RvdHlwZS5TZXREZW5zaXR5ID0gZnVuY3Rpb24gKGRlbnNpdHkpIHtcbiAgICAgIGlmIChkZW5zaXR5ID09PSB1bmRlZmluZWQpIGRlbnNpdHkgPSAwO1xuICAgICAgdGhpcy5tX2RlbnNpdHkgPSBkZW5zaXR5O1xuICAgfVxuICAgYjJGaXh0dXJlLnByb3RvdHlwZS5HZXREZW5zaXR5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMubV9kZW5zaXR5O1xuICAgfVxuICAgYjJGaXh0dXJlLnByb3RvdHlwZS5HZXRGcmljdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzLm1fZnJpY3Rpb247XG4gICB9XG4gICBiMkZpeHR1cmUucHJvdG90eXBlLlNldEZyaWN0aW9uID0gZnVuY3Rpb24gKGZyaWN0aW9uKSB7XG4gICAgICBpZiAoZnJpY3Rpb24gPT09IHVuZGVmaW5lZCkgZnJpY3Rpb24gPSAwO1xuICAgICAgdGhpcy5tX2ZyaWN0aW9uID0gZnJpY3Rpb247XG4gICB9XG4gICBiMkZpeHR1cmUucHJvdG90eXBlLkdldFJlc3RpdHV0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMubV9yZXN0aXR1dGlvbjtcbiAgIH1cbiAgIGIyRml4dHVyZS5wcm90b3R5cGUuU2V0UmVzdGl0dXRpb24gPSBmdW5jdGlvbiAocmVzdGl0dXRpb24pIHtcbiAgICAgIGlmIChyZXN0aXR1dGlvbiA9PT0gdW5kZWZpbmVkKSByZXN0aXR1dGlvbiA9IDA7XG4gICAgICB0aGlzLm1fcmVzdGl0dXRpb24gPSByZXN0aXR1dGlvbjtcbiAgIH1cbiAgIGIyRml4dHVyZS5wcm90b3R5cGUuR2V0QUFCQiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzLm1fYWFiYjtcbiAgIH1cbiAgIGIyRml4dHVyZS5wcm90b3R5cGUuYjJGaXh0dXJlID0gZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcy5tX2FhYmIgPSBuZXcgYjJBQUJCKCk7XG4gICAgICB0aGlzLm1fdXNlckRhdGEgPSBudWxsO1xuICAgICAgdGhpcy5tX2JvZHkgPSBudWxsO1xuICAgICAgdGhpcy5tX25leHQgPSBudWxsO1xuICAgICAgdGhpcy5tX3NoYXBlID0gbnVsbDtcbiAgICAgIHRoaXMubV9kZW5zaXR5ID0gMC4wO1xuICAgICAgdGhpcy5tX2ZyaWN0aW9uID0gMC4wO1xuICAgICAgdGhpcy5tX3Jlc3RpdHV0aW9uID0gMC4wO1xuICAgfVxuICAgYjJGaXh0dXJlLnByb3RvdHlwZS5DcmVhdGUgPSBmdW5jdGlvbiAoYm9keSwgeGYsIGRlZikge1xuICAgICAgdGhpcy5tX3VzZXJEYXRhID0gZGVmLnVzZXJEYXRhO1xuICAgICAgdGhpcy5tX2ZyaWN0aW9uID0gZGVmLmZyaWN0aW9uO1xuICAgICAgdGhpcy5tX3Jlc3RpdHV0aW9uID0gZGVmLnJlc3RpdHV0aW9uO1xuICAgICAgdGhpcy5tX2JvZHkgPSBib2R5O1xuICAgICAgdGhpcy5tX25leHQgPSBudWxsO1xuICAgICAgdGhpcy5tX2ZpbHRlciA9IGRlZi5maWx0ZXIuQ29weSgpO1xuICAgICAgdGhpcy5tX2lzU2Vuc29yID0gZGVmLmlzU2Vuc29yO1xuICAgICAgdGhpcy5tX3NoYXBlID0gZGVmLnNoYXBlLkNvcHkoKTtcbiAgICAgIHRoaXMubV9kZW5zaXR5ID0gZGVmLmRlbnNpdHk7XG4gICB9XG4gICBiMkZpeHR1cmUucHJvdG90eXBlLkRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLm1fc2hhcGUgPSBudWxsO1xuICAgfVxuICAgYjJGaXh0dXJlLnByb3RvdHlwZS5DcmVhdGVQcm94eSA9IGZ1bmN0aW9uIChicm9hZFBoYXNlLCB4Zikge1xuICAgICAgdGhpcy5tX3NoYXBlLkNvbXB1dGVBQUJCKHRoaXMubV9hYWJiLCB4Zik7XG4gICAgICB0aGlzLm1fcHJveHkgPSBicm9hZFBoYXNlLkNyZWF0ZVByb3h5KHRoaXMubV9hYWJiLCB0aGlzKTtcbiAgIH1cbiAgIGIyRml4dHVyZS5wcm90b3R5cGUuRGVzdHJveVByb3h5ID0gZnVuY3Rpb24gKGJyb2FkUGhhc2UpIHtcbiAgICAgIGlmICh0aGlzLm1fcHJveHkgPT0gbnVsbCkge1xuICAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgYnJvYWRQaGFzZS5EZXN0cm95UHJveHkodGhpcy5tX3Byb3h5KTtcbiAgICAgIHRoaXMubV9wcm94eSA9IG51bGw7XG4gICB9XG4gICBiMkZpeHR1cmUucHJvdG90eXBlLlN5bmNocm9uaXplID0gZnVuY3Rpb24gKGJyb2FkUGhhc2UsIHRyYW5zZm9ybTEsIHRyYW5zZm9ybTIpIHtcbiAgICAgIGlmICghdGhpcy5tX3Byb3h5KSByZXR1cm47XG4gICAgICB2YXIgYWFiYjEgPSBuZXcgYjJBQUJCKCk7XG4gICAgICB2YXIgYWFiYjIgPSBuZXcgYjJBQUJCKCk7XG4gICAgICB0aGlzLm1fc2hhcGUuQ29tcHV0ZUFBQkIoYWFiYjEsIHRyYW5zZm9ybTEpO1xuICAgICAgdGhpcy5tX3NoYXBlLkNvbXB1dGVBQUJCKGFhYmIyLCB0cmFuc2Zvcm0yKTtcbiAgICAgIHRoaXMubV9hYWJiLkNvbWJpbmUoYWFiYjEsIGFhYmIyKTtcbiAgICAgIHZhciBkaXNwbGFjZW1lbnQgPSBiMk1hdGguU3VidHJhY3RWVih0cmFuc2Zvcm0yLnBvc2l0aW9uLCB0cmFuc2Zvcm0xLnBvc2l0aW9uKTtcbiAgICAgIGJyb2FkUGhhc2UuTW92ZVByb3h5KHRoaXMubV9wcm94eSwgdGhpcy5tX2FhYmIsIGRpc3BsYWNlbWVudCk7XG4gICB9XG4gICBiMkZpeHR1cmVEZWYuYjJGaXh0dXJlRGVmID0gZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcy5maWx0ZXIgPSBuZXcgYjJGaWx0ZXJEYXRhKCk7XG4gICB9O1xuICAgYjJGaXh0dXJlRGVmLnByb3RvdHlwZS5iMkZpeHR1cmVEZWYgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLnNoYXBlID0gbnVsbDtcbiAgICAgIHRoaXMudXNlckRhdGEgPSBudWxsO1xuICAgICAgdGhpcy5mcmljdGlvbiA9IDAuMjtcbiAgICAgIHRoaXMucmVzdGl0dXRpb24gPSAwLjA7XG4gICAgICB0aGlzLmRlbnNpdHkgPSAwLjA7XG4gICAgICB0aGlzLmZpbHRlci5jYXRlZ29yeUJpdHMgPSAweDAwMDE7XG4gICAgICB0aGlzLmZpbHRlci5tYXNrQml0cyA9IDB4RkZGRjtcbiAgICAgIHRoaXMuZmlsdGVyLmdyb3VwSW5kZXggPSAwO1xuICAgICAgdGhpcy5pc1NlbnNvciA9IGZhbHNlO1xuICAgfVxuICAgYjJJc2xhbmQuYjJJc2xhbmQgPSBmdW5jdGlvbiAoKSB7fTtcbiAgIGIySXNsYW5kLnByb3RvdHlwZS5iMklzbGFuZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMubV9ib2RpZXMgPSBuZXcgVmVjdG9yKCk7XG4gICAgICB0aGlzLm1fY29udGFjdHMgPSBuZXcgVmVjdG9yKCk7XG4gICAgICB0aGlzLm1fam9pbnRzID0gbmV3IFZlY3RvcigpO1xuICAgfVxuICAgYjJJc2xhbmQucHJvdG90eXBlLkluaXRpYWxpemUgPSBmdW5jdGlvbiAoYm9keUNhcGFjaXR5LCBjb250YWN0Q2FwYWNpdHksIGpvaW50Q2FwYWNpdHksIGFsbG9jYXRvciwgbGlzdGVuZXIsIGNvbnRhY3RTb2x2ZXIpIHtcbiAgICAgIGlmIChib2R5Q2FwYWNpdHkgPT09IHVuZGVmaW5lZCkgYm9keUNhcGFjaXR5ID0gMDtcbiAgICAgIGlmIChjb250YWN0Q2FwYWNpdHkgPT09IHVuZGVmaW5lZCkgY29udGFjdENhcGFjaXR5ID0gMDtcbiAgICAgIGlmIChqb2ludENhcGFjaXR5ID09PSB1bmRlZmluZWQpIGpvaW50Q2FwYWNpdHkgPSAwO1xuICAgICAgdmFyIGkgPSAwO1xuICAgICAgdGhpcy5tX2JvZHlDYXBhY2l0eSA9IGJvZHlDYXBhY2l0eTtcbiAgICAgIHRoaXMubV9jb250YWN0Q2FwYWNpdHkgPSBjb250YWN0Q2FwYWNpdHk7XG4gICAgICB0aGlzLm1fam9pbnRDYXBhY2l0eSA9IGpvaW50Q2FwYWNpdHk7XG4gICAgICB0aGlzLm1fYm9keUNvdW50ID0gMDtcbiAgICAgIHRoaXMubV9jb250YWN0Q291bnQgPSAwO1xuICAgICAgdGhpcy5tX2pvaW50Q291bnQgPSAwO1xuICAgICAgdGhpcy5tX2FsbG9jYXRvciA9IGFsbG9jYXRvcjtcbiAgICAgIHRoaXMubV9saXN0ZW5lciA9IGxpc3RlbmVyO1xuICAgICAgdGhpcy5tX2NvbnRhY3RTb2x2ZXIgPSBjb250YWN0U29sdmVyO1xuICAgICAgZm9yIChpID0gdGhpcy5tX2JvZGllcy5sZW5ndGg7XG4gICAgICBpIDwgYm9keUNhcGFjaXR5OyBpKyspXG4gICAgICB0aGlzLm1fYm9kaWVzW2ldID0gbnVsbDtcbiAgICAgIGZvciAoaSA9IHRoaXMubV9jb250YWN0cy5sZW5ndGg7XG4gICAgICBpIDwgY29udGFjdENhcGFjaXR5OyBpKyspXG4gICAgICB0aGlzLm1fY29udGFjdHNbaV0gPSBudWxsO1xuICAgICAgZm9yIChpID0gdGhpcy5tX2pvaW50cy5sZW5ndGg7XG4gICAgICBpIDwgam9pbnRDYXBhY2l0eTsgaSsrKVxuICAgICAgdGhpcy5tX2pvaW50c1tpXSA9IG51bGw7XG4gICB9XG4gICBiMklzbGFuZC5wcm90b3R5cGUuQ2xlYXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLm1fYm9keUNvdW50ID0gMDtcbiAgICAgIHRoaXMubV9jb250YWN0Q291bnQgPSAwO1xuICAgICAgdGhpcy5tX2pvaW50Q291bnQgPSAwO1xuICAgfVxuICAgYjJJc2xhbmQucHJvdG90eXBlLlNvbHZlID0gZnVuY3Rpb24gKHN0ZXAsIGdyYXZpdHksIGFsbG93U2xlZXApIHtcbiAgICAgIHZhciBpID0gMDtcbiAgICAgIHZhciBqID0gMDtcbiAgICAgIHZhciBiO1xuICAgICAgdmFyIGpvaW50O1xuICAgICAgZm9yIChpID0gMDtcbiAgICAgIGkgPCB0aGlzLm1fYm9keUNvdW50OyArK2kpIHtcbiAgICAgICAgIGIgPSB0aGlzLm1fYm9kaWVzW2ldO1xuICAgICAgICAgaWYgKGIuR2V0VHlwZSgpICE9IGIyQm9keS5iMl9keW5hbWljQm9keSkgY29udGludWU7XG4gICAgICAgICBiLm1fbGluZWFyVmVsb2NpdHkueCArPSBzdGVwLmR0ICogKGdyYXZpdHkueCArIGIubV9pbnZNYXNzICogYi5tX2ZvcmNlLngpO1xuICAgICAgICAgYi5tX2xpbmVhclZlbG9jaXR5LnkgKz0gc3RlcC5kdCAqIChncmF2aXR5LnkgKyBiLm1faW52TWFzcyAqIGIubV9mb3JjZS55KTtcbiAgICAgICAgIGIubV9hbmd1bGFyVmVsb2NpdHkgKz0gc3RlcC5kdCAqIGIubV9pbnZJICogYi5tX3RvcnF1ZTtcbiAgICAgICAgIGIubV9saW5lYXJWZWxvY2l0eS5NdWx0aXBseShiMk1hdGguQ2xhbXAoMS4wIC0gc3RlcC5kdCAqIGIubV9saW5lYXJEYW1waW5nLCAwLjAsIDEuMCkpO1xuICAgICAgICAgYi5tX2FuZ3VsYXJWZWxvY2l0eSAqPSBiMk1hdGguQ2xhbXAoMS4wIC0gc3RlcC5kdCAqIGIubV9hbmd1bGFyRGFtcGluZywgMC4wLCAxLjApO1xuICAgICAgfVxuICAgICAgdGhpcy5tX2NvbnRhY3RTb2x2ZXIuSW5pdGlhbGl6ZShzdGVwLCB0aGlzLm1fY29udGFjdHMsIHRoaXMubV9jb250YWN0Q291bnQsIHRoaXMubV9hbGxvY2F0b3IpO1xuICAgICAgdmFyIGNvbnRhY3RTb2x2ZXIgPSB0aGlzLm1fY29udGFjdFNvbHZlcjtcbiAgICAgIGNvbnRhY3RTb2x2ZXIuSW5pdFZlbG9jaXR5Q29uc3RyYWludHMoc3RlcCk7XG4gICAgICBmb3IgKGkgPSAwO1xuICAgICAgaSA8IHRoaXMubV9qb2ludENvdW50OyArK2kpIHtcbiAgICAgICAgIGpvaW50ID0gdGhpcy5tX2pvaW50c1tpXTtcbiAgICAgICAgIGpvaW50LkluaXRWZWxvY2l0eUNvbnN0cmFpbnRzKHN0ZXApO1xuICAgICAgfVxuICAgICAgZm9yIChpID0gMDtcbiAgICAgIGkgPCBzdGVwLnZlbG9jaXR5SXRlcmF0aW9uczsgKytpKSB7XG4gICAgICAgICBmb3IgKGogPSAwO1xuICAgICAgICAgaiA8IHRoaXMubV9qb2ludENvdW50OyArK2opIHtcbiAgICAgICAgICAgIGpvaW50ID0gdGhpcy5tX2pvaW50c1tqXTtcbiAgICAgICAgICAgIGpvaW50LlNvbHZlVmVsb2NpdHlDb25zdHJhaW50cyhzdGVwKTtcbiAgICAgICAgIH1cbiAgICAgICAgIGNvbnRhY3RTb2x2ZXIuU29sdmVWZWxvY2l0eUNvbnN0cmFpbnRzKCk7XG4gICAgICB9XG4gICAgICBmb3IgKGkgPSAwO1xuICAgICAgaSA8IHRoaXMubV9qb2ludENvdW50OyArK2kpIHtcbiAgICAgICAgIGpvaW50ID0gdGhpcy5tX2pvaW50c1tpXTtcbiAgICAgICAgIGpvaW50LkZpbmFsaXplVmVsb2NpdHlDb25zdHJhaW50cygpO1xuICAgICAgfVxuICAgICAgY29udGFjdFNvbHZlci5GaW5hbGl6ZVZlbG9jaXR5Q29uc3RyYWludHMoKTtcbiAgICAgIGZvciAoaSA9IDA7XG4gICAgICBpIDwgdGhpcy5tX2JvZHlDb3VudDsgKytpKSB7XG4gICAgICAgICBiID0gdGhpcy5tX2JvZGllc1tpXTtcbiAgICAgICAgIGlmIChiLkdldFR5cGUoKSA9PSBiMkJvZHkuYjJfc3RhdGljQm9keSkgY29udGludWU7XG4gICAgICAgICB2YXIgdHJhbnNsYXRpb25YID0gc3RlcC5kdCAqIGIubV9saW5lYXJWZWxvY2l0eS54O1xuICAgICAgICAgdmFyIHRyYW5zbGF0aW9uWSA9IHN0ZXAuZHQgKiBiLm1fbGluZWFyVmVsb2NpdHkueTtcbiAgICAgICAgIGlmICgodHJhbnNsYXRpb25YICogdHJhbnNsYXRpb25YICsgdHJhbnNsYXRpb25ZICogdHJhbnNsYXRpb25ZKSA+IGIyU2V0dGluZ3MuYjJfbWF4VHJhbnNsYXRpb25TcXVhcmVkKSB7XG4gICAgICAgICAgICBiLm1fbGluZWFyVmVsb2NpdHkuTm9ybWFsaXplKCk7XG4gICAgICAgICAgICBiLm1fbGluZWFyVmVsb2NpdHkueCAqPSBiMlNldHRpbmdzLmIyX21heFRyYW5zbGF0aW9uICogc3RlcC5pbnZfZHQ7XG4gICAgICAgICAgICBiLm1fbGluZWFyVmVsb2NpdHkueSAqPSBiMlNldHRpbmdzLmIyX21heFRyYW5zbGF0aW9uICogc3RlcC5pbnZfZHQ7XG4gICAgICAgICB9XG4gICAgICAgICB2YXIgcm90YXRpb24gPSBzdGVwLmR0ICogYi5tX2FuZ3VsYXJWZWxvY2l0eTtcbiAgICAgICAgIGlmIChyb3RhdGlvbiAqIHJvdGF0aW9uID4gYjJTZXR0aW5ncy5iMl9tYXhSb3RhdGlvblNxdWFyZWQpIHtcbiAgICAgICAgICAgIGlmIChiLm1fYW5ndWxhclZlbG9jaXR5IDwgMC4wKSB7XG4gICAgICAgICAgICAgICBiLm1fYW5ndWxhclZlbG9jaXR5ID0gKC1iMlNldHRpbmdzLmIyX21heFJvdGF0aW9uICogc3RlcC5pbnZfZHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICBiLm1fYW5ndWxhclZlbG9jaXR5ID0gYjJTZXR0aW5ncy5iMl9tYXhSb3RhdGlvbiAqIHN0ZXAuaW52X2R0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgfVxuICAgICAgICAgYi5tX3N3ZWVwLmMwLlNldFYoYi5tX3N3ZWVwLmMpO1xuICAgICAgICAgYi5tX3N3ZWVwLmEwID0gYi5tX3N3ZWVwLmE7XG4gICAgICAgICBiLm1fc3dlZXAuYy54ICs9IHN0ZXAuZHQgKiBiLm1fbGluZWFyVmVsb2NpdHkueDtcbiAgICAgICAgIGIubV9zd2VlcC5jLnkgKz0gc3RlcC5kdCAqIGIubV9saW5lYXJWZWxvY2l0eS55O1xuICAgICAgICAgYi5tX3N3ZWVwLmEgKz0gc3RlcC5kdCAqIGIubV9hbmd1bGFyVmVsb2NpdHk7XG4gICAgICAgICBiLlN5bmNocm9uaXplVHJhbnNmb3JtKCk7XG4gICAgICB9XG4gICAgICBmb3IgKGkgPSAwO1xuICAgICAgaSA8IHN0ZXAucG9zaXRpb25JdGVyYXRpb25zOyArK2kpIHtcbiAgICAgICAgIHZhciBjb250YWN0c09rYXkgPSBjb250YWN0U29sdmVyLlNvbHZlUG9zaXRpb25Db25zdHJhaW50cyhiMlNldHRpbmdzLmIyX2NvbnRhY3RCYXVtZ2FydGUpO1xuICAgICAgICAgdmFyIGpvaW50c09rYXkgPSB0cnVlO1xuICAgICAgICAgZm9yIChqID0gMDtcbiAgICAgICAgIGogPCB0aGlzLm1fam9pbnRDb3VudDsgKytqKSB7XG4gICAgICAgICAgICBqb2ludCA9IHRoaXMubV9qb2ludHNbal07XG4gICAgICAgICAgICB2YXIgam9pbnRPa2F5ID0gam9pbnQuU29sdmVQb3NpdGlvbkNvbnN0cmFpbnRzKGIyU2V0dGluZ3MuYjJfY29udGFjdEJhdW1nYXJ0ZSk7XG4gICAgICAgICAgICBqb2ludHNPa2F5ID0gam9pbnRzT2theSAmJiBqb2ludE9rYXk7XG4gICAgICAgICB9XG4gICAgICAgICBpZiAoY29udGFjdHNPa2F5ICYmIGpvaW50c09rYXkpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhpcy5SZXBvcnQoY29udGFjdFNvbHZlci5tX2NvbnN0cmFpbnRzKTtcbiAgICAgIGlmIChhbGxvd1NsZWVwKSB7XG4gICAgICAgICB2YXIgbWluU2xlZXBUaW1lID0gTnVtYmVyLk1BWF9WQUxVRTtcbiAgICAgICAgIHZhciBsaW5Ub2xTcXIgPSBiMlNldHRpbmdzLmIyX2xpbmVhclNsZWVwVG9sZXJhbmNlICogYjJTZXR0aW5ncy5iMl9saW5lYXJTbGVlcFRvbGVyYW5jZTtcbiAgICAgICAgIHZhciBhbmdUb2xTcXIgPSBiMlNldHRpbmdzLmIyX2FuZ3VsYXJTbGVlcFRvbGVyYW5jZSAqIGIyU2V0dGluZ3MuYjJfYW5ndWxhclNsZWVwVG9sZXJhbmNlO1xuICAgICAgICAgZm9yIChpID0gMDtcbiAgICAgICAgIGkgPCB0aGlzLm1fYm9keUNvdW50OyArK2kpIHtcbiAgICAgICAgICAgIGIgPSB0aGlzLm1fYm9kaWVzW2ldO1xuICAgICAgICAgICAgaWYgKGIuR2V0VHlwZSgpID09IGIyQm9keS5iMl9zdGF0aWNCb2R5KSB7XG4gICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICgoYi5tX2ZsYWdzICYgYjJCb2R5LmVfYWxsb3dTbGVlcEZsYWcpID09IDApIHtcbiAgICAgICAgICAgICAgIGIubV9zbGVlcFRpbWUgPSAwLjA7XG4gICAgICAgICAgICAgICBtaW5TbGVlcFRpbWUgPSAwLjA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoKGIubV9mbGFncyAmIGIyQm9keS5lX2FsbG93U2xlZXBGbGFnKSA9PSAwIHx8IGIubV9hbmd1bGFyVmVsb2NpdHkgKiBiLm1fYW5ndWxhclZlbG9jaXR5ID4gYW5nVG9sU3FyIHx8IGIyTWF0aC5Eb3QoYi5tX2xpbmVhclZlbG9jaXR5LCBiLm1fbGluZWFyVmVsb2NpdHkpID4gbGluVG9sU3FyKSB7XG4gICAgICAgICAgICAgICBiLm1fc2xlZXBUaW1lID0gMC4wO1xuICAgICAgICAgICAgICAgbWluU2xlZXBUaW1lID0gMC4wO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICBiLm1fc2xlZXBUaW1lICs9IHN0ZXAuZHQ7XG4gICAgICAgICAgICAgICBtaW5TbGVlcFRpbWUgPSBiMk1hdGguTWluKG1pblNsZWVwVGltZSwgYi5tX3NsZWVwVGltZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICB9XG4gICAgICAgICBpZiAobWluU2xlZXBUaW1lID49IGIyU2V0dGluZ3MuYjJfdGltZVRvU2xlZXApIHtcbiAgICAgICAgICAgIGZvciAoaSA9IDA7XG4gICAgICAgICAgICBpIDwgdGhpcy5tX2JvZHlDb3VudDsgKytpKSB7XG4gICAgICAgICAgICAgICBiID0gdGhpcy5tX2JvZGllc1tpXTtcbiAgICAgICAgICAgICAgIGIuU2V0QXdha2UoZmFsc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgfVxuICAgICAgfVxuICAgfVxuICAgYjJJc2xhbmQucHJvdG90eXBlLlNvbHZlVE9JID0gZnVuY3Rpb24gKHN1YlN0ZXApIHtcbiAgICAgIHZhciBpID0gMDtcbiAgICAgIHZhciBqID0gMDtcbiAgICAgIHRoaXMubV9jb250YWN0U29sdmVyLkluaXRpYWxpemUoc3ViU3RlcCwgdGhpcy5tX2NvbnRhY3RzLCB0aGlzLm1fY29udGFjdENvdW50LCB0aGlzLm1fYWxsb2NhdG9yKTtcbiAgICAgIHZhciBjb250YWN0U29sdmVyID0gdGhpcy5tX2NvbnRhY3RTb2x2ZXI7XG4gICAgICBmb3IgKGkgPSAwO1xuICAgICAgaSA8IHRoaXMubV9qb2ludENvdW50OyArK2kpIHtcbiAgICAgICAgIHRoaXMubV9qb2ludHNbaV0uSW5pdFZlbG9jaXR5Q29uc3RyYWludHMoc3ViU3RlcCk7XG4gICAgICB9XG4gICAgICBmb3IgKGkgPSAwO1xuICAgICAgaSA8IHN1YlN0ZXAudmVsb2NpdHlJdGVyYXRpb25zOyArK2kpIHtcbiAgICAgICAgIGNvbnRhY3RTb2x2ZXIuU29sdmVWZWxvY2l0eUNvbnN0cmFpbnRzKCk7XG4gICAgICAgICBmb3IgKGogPSAwO1xuICAgICAgICAgaiA8IHRoaXMubV9qb2ludENvdW50OyArK2opIHtcbiAgICAgICAgICAgIHRoaXMubV9qb2ludHNbal0uU29sdmVWZWxvY2l0eUNvbnN0cmFpbnRzKHN1YlN0ZXApO1xuICAgICAgICAgfVxuICAgICAgfVxuICAgICAgZm9yIChpID0gMDtcbiAgICAgIGkgPCB0aGlzLm1fYm9keUNvdW50OyArK2kpIHtcbiAgICAgICAgIHZhciBiID0gdGhpcy5tX2JvZGllc1tpXTtcbiAgICAgICAgIGlmIChiLkdldFR5cGUoKSA9PSBiMkJvZHkuYjJfc3RhdGljQm9keSkgY29udGludWU7XG4gICAgICAgICB2YXIgdHJhbnNsYXRpb25YID0gc3ViU3RlcC5kdCAqIGIubV9saW5lYXJWZWxvY2l0eS54O1xuICAgICAgICAgdmFyIHRyYW5zbGF0aW9uWSA9IHN1YlN0ZXAuZHQgKiBiLm1fbGluZWFyVmVsb2NpdHkueTtcbiAgICAgICAgIGlmICgodHJhbnNsYXRpb25YICogdHJhbnNsYXRpb25YICsgdHJhbnNsYXRpb25ZICogdHJhbnNsYXRpb25ZKSA+IGIyU2V0dGluZ3MuYjJfbWF4VHJhbnNsYXRpb25TcXVhcmVkKSB7XG4gICAgICAgICAgICBiLm1fbGluZWFyVmVsb2NpdHkuTm9ybWFsaXplKCk7XG4gICAgICAgICAgICBiLm1fbGluZWFyVmVsb2NpdHkueCAqPSBiMlNldHRpbmdzLmIyX21heFRyYW5zbGF0aW9uICogc3ViU3RlcC5pbnZfZHQ7XG4gICAgICAgICAgICBiLm1fbGluZWFyVmVsb2NpdHkueSAqPSBiMlNldHRpbmdzLmIyX21heFRyYW5zbGF0aW9uICogc3ViU3RlcC5pbnZfZHQ7XG4gICAgICAgICB9XG4gICAgICAgICB2YXIgcm90YXRpb24gPSBzdWJTdGVwLmR0ICogYi5tX2FuZ3VsYXJWZWxvY2l0eTtcbiAgICAgICAgIGlmIChyb3RhdGlvbiAqIHJvdGF0aW9uID4gYjJTZXR0aW5ncy5iMl9tYXhSb3RhdGlvblNxdWFyZWQpIHtcbiAgICAgICAgICAgIGlmIChiLm1fYW5ndWxhclZlbG9jaXR5IDwgMC4wKSB7XG4gICAgICAgICAgICAgICBiLm1fYW5ndWxhclZlbG9jaXR5ID0gKC1iMlNldHRpbmdzLmIyX21heFJvdGF0aW9uICogc3ViU3RlcC5pbnZfZHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICBiLm1fYW5ndWxhclZlbG9jaXR5ID0gYjJTZXR0aW5ncy5iMl9tYXhSb3RhdGlvbiAqIHN1YlN0ZXAuaW52X2R0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgfVxuICAgICAgICAgYi5tX3N3ZWVwLmMwLlNldFYoYi5tX3N3ZWVwLmMpO1xuICAgICAgICAgYi5tX3N3ZWVwLmEwID0gYi5tX3N3ZWVwLmE7XG4gICAgICAgICBiLm1fc3dlZXAuYy54ICs9IHN1YlN0ZXAuZHQgKiBiLm1fbGluZWFyVmVsb2NpdHkueDtcbiAgICAgICAgIGIubV9zd2VlcC5jLnkgKz0gc3ViU3RlcC5kdCAqIGIubV9saW5lYXJWZWxvY2l0eS55O1xuICAgICAgICAgYi5tX3N3ZWVwLmEgKz0gc3ViU3RlcC5kdCAqIGIubV9hbmd1bGFyVmVsb2NpdHk7XG4gICAgICAgICBiLlN5bmNocm9uaXplVHJhbnNmb3JtKCk7XG4gICAgICB9XG4gICAgICB2YXIga190b2lCYXVtZ2FydGUgPSAwLjc1O1xuICAgICAgZm9yIChpID0gMDtcbiAgICAgIGkgPCBzdWJTdGVwLnBvc2l0aW9uSXRlcmF0aW9uczsgKytpKSB7XG4gICAgICAgICB2YXIgY29udGFjdHNPa2F5ID0gY29udGFjdFNvbHZlci5Tb2x2ZVBvc2l0aW9uQ29uc3RyYWludHMoa190b2lCYXVtZ2FydGUpO1xuICAgICAgICAgdmFyIGpvaW50c09rYXkgPSB0cnVlO1xuICAgICAgICAgZm9yIChqID0gMDtcbiAgICAgICAgIGogPCB0aGlzLm1fam9pbnRDb3VudDsgKytqKSB7XG4gICAgICAgICAgICB2YXIgam9pbnRPa2F5ID0gdGhpcy5tX2pvaW50c1tqXS5Tb2x2ZVBvc2l0aW9uQ29uc3RyYWludHMoYjJTZXR0aW5ncy5iMl9jb250YWN0QmF1bWdhcnRlKTtcbiAgICAgICAgICAgIGpvaW50c09rYXkgPSBqb2ludHNPa2F5ICYmIGpvaW50T2theTtcbiAgICAgICAgIH1cbiAgICAgICAgIGlmIChjb250YWN0c09rYXkgJiYgam9pbnRzT2theSkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICB9XG4gICAgICB9XG4gICAgICB0aGlzLlJlcG9ydChjb250YWN0U29sdmVyLm1fY29uc3RyYWludHMpO1xuICAgfVxuICAgYjJJc2xhbmQucHJvdG90eXBlLlJlcG9ydCA9IGZ1bmN0aW9uIChjb25zdHJhaW50cykge1xuICAgICAgaWYgKHRoaXMubV9saXN0ZW5lciA9PSBudWxsKSB7XG4gICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubV9jb250YWN0Q291bnQ7ICsraSkge1xuICAgICAgICAgdmFyIGMgPSB0aGlzLm1fY29udGFjdHNbaV07XG4gICAgICAgICB2YXIgY2MgPSBjb25zdHJhaW50c1tpXTtcbiAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgY2MucG9pbnRDb3VudDsgKytqKSB7XG4gICAgICAgICAgICBiMklzbGFuZC5zX2ltcHVsc2Uubm9ybWFsSW1wdWxzZXNbal0gPSBjYy5wb2ludHNbal0ubm9ybWFsSW1wdWxzZTtcbiAgICAgICAgICAgIGIySXNsYW5kLnNfaW1wdWxzZS50YW5nZW50SW1wdWxzZXNbal0gPSBjYy5wb2ludHNbal0udGFuZ2VudEltcHVsc2U7XG4gICAgICAgICB9XG4gICAgICAgICB0aGlzLm1fbGlzdGVuZXIuUG9zdFNvbHZlKGMsIGIySXNsYW5kLnNfaW1wdWxzZSk7XG4gICAgICB9XG4gICB9XG4gICBiMklzbGFuZC5wcm90b3R5cGUuQWRkQm9keSA9IGZ1bmN0aW9uIChib2R5KSB7XG4gICAgICBib2R5Lm1faXNsYW5kSW5kZXggPSB0aGlzLm1fYm9keUNvdW50O1xuICAgICAgdGhpcy5tX2JvZGllc1t0aGlzLm1fYm9keUNvdW50KytdID0gYm9keTtcbiAgIH1cbiAgIGIySXNsYW5kLnByb3RvdHlwZS5BZGRDb250YWN0ID0gZnVuY3Rpb24gKGNvbnRhY3QpIHtcbiAgICAgIHRoaXMubV9jb250YWN0c1t0aGlzLm1fY29udGFjdENvdW50KytdID0gY29udGFjdDtcbiAgIH1cbiAgIGIySXNsYW5kLnByb3RvdHlwZS5BZGRKb2ludCA9IGZ1bmN0aW9uIChqb2ludCkge1xuICAgICAgdGhpcy5tX2pvaW50c1t0aGlzLm1fam9pbnRDb3VudCsrXSA9IGpvaW50O1xuICAgfVxuICAgQm94MkQucG9zdERlZnMucHVzaChmdW5jdGlvbiAoKSB7XG4gICAgICBCb3gyRC5EeW5hbWljcy5iMklzbGFuZC5zX2ltcHVsc2UgPSBuZXcgYjJDb250YWN0SW1wdWxzZSgpO1xuICAgfSk7XG4gICBiMlRpbWVTdGVwLmIyVGltZVN0ZXAgPSBmdW5jdGlvbiAoKSB7fTtcbiAgIGIyVGltZVN0ZXAucHJvdG90eXBlLlNldCA9IGZ1bmN0aW9uIChzdGVwKSB7XG4gICAgICB0aGlzLmR0ID0gc3RlcC5kdDtcbiAgICAgIHRoaXMuaW52X2R0ID0gc3RlcC5pbnZfZHQ7XG4gICAgICB0aGlzLnBvc2l0aW9uSXRlcmF0aW9ucyA9IHN0ZXAucG9zaXRpb25JdGVyYXRpb25zO1xuICAgICAgdGhpcy52ZWxvY2l0eUl0ZXJhdGlvbnMgPSBzdGVwLnZlbG9jaXR5SXRlcmF0aW9ucztcbiAgICAgIHRoaXMud2FybVN0YXJ0aW5nID0gc3RlcC53YXJtU3RhcnRpbmc7XG4gICB9XG4gICBiMldvcmxkLmIyV29ybGQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLnNfc3RhY2sgPSBuZXcgVmVjdG9yKCk7XG4gICAgICB0aGlzLm1fY29udGFjdE1hbmFnZXIgPSBuZXcgYjJDb250YWN0TWFuYWdlcigpO1xuICAgICAgdGhpcy5tX2NvbnRhY3RTb2x2ZXIgPSBuZXcgYjJDb250YWN0U29sdmVyKCk7XG4gICAgICB0aGlzLm1faXNsYW5kID0gbmV3IGIySXNsYW5kKCk7XG4gICB9O1xuICAgYjJXb3JsZC5wcm90b3R5cGUuYjJXb3JsZCA9IGZ1bmN0aW9uIChncmF2aXR5LCBkb1NsZWVwKSB7XG4gICAgICB0aGlzLm1fZGVzdHJ1Y3Rpb25MaXN0ZW5lciA9IG51bGw7XG4gICAgICB0aGlzLm1fZGVidWdEcmF3ID0gbnVsbDtcbiAgICAgIHRoaXMubV9ib2R5TGlzdCA9IG51bGw7XG4gICAgICB0aGlzLm1fY29udGFjdExpc3QgPSBudWxsO1xuICAgICAgdGhpcy5tX2pvaW50TGlzdCA9IG51bGw7XG4gICAgICB0aGlzLm1fY29udHJvbGxlckxpc3QgPSBudWxsO1xuICAgICAgdGhpcy5tX2JvZHlDb3VudCA9IDA7XG4gICAgICB0aGlzLm1fY29udGFjdENvdW50ID0gMDtcbiAgICAgIHRoaXMubV9qb2ludENvdW50ID0gMDtcbiAgICAgIHRoaXMubV9jb250cm9sbGVyQ291bnQgPSAwO1xuICAgICAgYjJXb3JsZC5tX3dhcm1TdGFydGluZyA9IHRydWU7XG4gICAgICBiMldvcmxkLm1fY29udGludW91c1BoeXNpY3MgPSB0cnVlO1xuICAgICAgdGhpcy5tX2FsbG93U2xlZXAgPSBkb1NsZWVwO1xuICAgICAgdGhpcy5tX2dyYXZpdHkgPSBncmF2aXR5O1xuICAgICAgdGhpcy5tX2ludl9kdDAgPSAwLjA7XG4gICAgICB0aGlzLm1fY29udGFjdE1hbmFnZXIubV93b3JsZCA9IHRoaXM7XG4gICAgICB2YXIgYmQgPSBuZXcgYjJCb2R5RGVmKCk7XG4gICAgICB0aGlzLm1fZ3JvdW5kQm9keSA9IHRoaXMuQ3JlYXRlQm9keShiZCk7XG4gICB9XG4gICBiMldvcmxkLnByb3RvdHlwZS5TZXREZXN0cnVjdGlvbkxpc3RlbmVyID0gZnVuY3Rpb24gKGxpc3RlbmVyKSB7XG4gICAgICB0aGlzLm1fZGVzdHJ1Y3Rpb25MaXN0ZW5lciA9IGxpc3RlbmVyO1xuICAgfVxuICAgYjJXb3JsZC5wcm90b3R5cGUuU2V0Q29udGFjdEZpbHRlciA9IGZ1bmN0aW9uIChmaWx0ZXIpIHtcbiAgICAgIHRoaXMubV9jb250YWN0TWFuYWdlci5tX2NvbnRhY3RGaWx0ZXIgPSBmaWx0ZXI7XG4gICB9XG4gICBiMldvcmxkLnByb3RvdHlwZS5TZXRDb250YWN0TGlzdGVuZXIgPSBmdW5jdGlvbiAobGlzdGVuZXIpIHtcbiAgICAgIHRoaXMubV9jb250YWN0TWFuYWdlci5tX2NvbnRhY3RMaXN0ZW5lciA9IGxpc3RlbmVyO1xuICAgfVxuICAgYjJXb3JsZC5wcm90b3R5cGUuU2V0RGVidWdEcmF3ID0gZnVuY3Rpb24gKGRlYnVnRHJhdykge1xuICAgICAgdGhpcy5tX2RlYnVnRHJhdyA9IGRlYnVnRHJhdztcbiAgIH1cbiAgIGIyV29ybGQucHJvdG90eXBlLlNldEJyb2FkUGhhc2UgPSBmdW5jdGlvbiAoYnJvYWRQaGFzZSkge1xuICAgICAgdmFyIG9sZEJyb2FkUGhhc2UgPSB0aGlzLm1fY29udGFjdE1hbmFnZXIubV9icm9hZFBoYXNlO1xuICAgICAgdGhpcy5tX2NvbnRhY3RNYW5hZ2VyLm1fYnJvYWRQaGFzZSA9IGJyb2FkUGhhc2U7XG4gICAgICBmb3IgKHZhciBiID0gdGhpcy5tX2JvZHlMaXN0OyBiOyBiID0gYi5tX25leHQpIHtcbiAgICAgICAgIGZvciAodmFyIGYgPSBiLm1fZml4dHVyZUxpc3Q7IGY7IGYgPSBmLm1fbmV4dCkge1xuICAgICAgICAgICAgZi5tX3Byb3h5ID0gYnJvYWRQaGFzZS5DcmVhdGVQcm94eShvbGRCcm9hZFBoYXNlLkdldEZhdEFBQkIoZi5tX3Byb3h5KSwgZik7XG4gICAgICAgICB9XG4gICAgICB9XG4gICB9XG4gICBiMldvcmxkLnByb3RvdHlwZS5WYWxpZGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMubV9jb250YWN0TWFuYWdlci5tX2Jyb2FkUGhhc2UuVmFsaWRhdGUoKTtcbiAgIH1cbiAgIGIyV29ybGQucHJvdG90eXBlLkdldFByb3h5Q291bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5tX2NvbnRhY3RNYW5hZ2VyLm1fYnJvYWRQaGFzZS5HZXRQcm94eUNvdW50KCk7XG4gICB9XG4gICBiMldvcmxkLnByb3RvdHlwZS5DcmVhdGVCb2R5ID0gZnVuY3Rpb24gKGRlZikge1xuICAgICAgaWYgKHRoaXMuSXNMb2NrZWQoKSA9PSB0cnVlKSB7XG4gICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICAgIHZhciBiID0gbmV3IGIyQm9keShkZWYsIHRoaXMpO1xuICAgICAgYi5tX3ByZXYgPSBudWxsO1xuICAgICAgYi5tX25leHQgPSB0aGlzLm1fYm9keUxpc3Q7XG4gICAgICBpZiAodGhpcy5tX2JvZHlMaXN0KSB7XG4gICAgICAgICB0aGlzLm1fYm9keUxpc3QubV9wcmV2ID0gYjtcbiAgICAgIH1cbiAgICAgIHRoaXMubV9ib2R5TGlzdCA9IGI7XG4gICAgICArK3RoaXMubV9ib2R5Q291bnQ7XG4gICAgICByZXR1cm4gYjtcbiAgIH1cbiAgIGIyV29ybGQucHJvdG90eXBlLkRlc3Ryb3lCb2R5ID0gZnVuY3Rpb24gKGIpIHtcbiAgICAgIGlmICh0aGlzLklzTG9ja2VkKCkgPT0gdHJ1ZSkge1xuICAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdmFyIGpuID0gYi5tX2pvaW50TGlzdDtcbiAgICAgIHdoaWxlIChqbikge1xuICAgICAgICAgdmFyIGpuMCA9IGpuO1xuICAgICAgICAgam4gPSBqbi5uZXh0O1xuICAgICAgICAgaWYgKHRoaXMubV9kZXN0cnVjdGlvbkxpc3RlbmVyKSB7XG4gICAgICAgICAgICB0aGlzLm1fZGVzdHJ1Y3Rpb25MaXN0ZW5lci5TYXlHb29kYnllSm9pbnQoam4wLmpvaW50KTtcbiAgICAgICAgIH1cbiAgICAgICAgIHRoaXMuRGVzdHJveUpvaW50KGpuMC5qb2ludCk7XG4gICAgICB9XG4gICAgICB2YXIgY29lID0gYi5tX2NvbnRyb2xsZXJMaXN0O1xuICAgICAgd2hpbGUgKGNvZSkge1xuICAgICAgICAgdmFyIGNvZTAgPSBjb2U7XG4gICAgICAgICBjb2UgPSBjb2UubmV4dENvbnRyb2xsZXI7XG4gICAgICAgICBjb2UwLmNvbnRyb2xsZXIuUmVtb3ZlQm9keShiKTtcbiAgICAgIH1cbiAgICAgIHZhciBjZSA9IGIubV9jb250YWN0TGlzdDtcbiAgICAgIHdoaWxlIChjZSkge1xuICAgICAgICAgdmFyIGNlMCA9IGNlO1xuICAgICAgICAgY2UgPSBjZS5uZXh0O1xuICAgICAgICAgdGhpcy5tX2NvbnRhY3RNYW5hZ2VyLkRlc3Ryb3koY2UwLmNvbnRhY3QpO1xuICAgICAgfVxuICAgICAgYi5tX2NvbnRhY3RMaXN0ID0gbnVsbDtcbiAgICAgIHZhciBmID0gYi5tX2ZpeHR1cmVMaXN0O1xuICAgICAgd2hpbGUgKGYpIHtcbiAgICAgICAgIHZhciBmMCA9IGY7XG4gICAgICAgICBmID0gZi5tX25leHQ7XG4gICAgICAgICBpZiAodGhpcy5tX2Rlc3RydWN0aW9uTGlzdGVuZXIpIHtcbiAgICAgICAgICAgIHRoaXMubV9kZXN0cnVjdGlvbkxpc3RlbmVyLlNheUdvb2RieWVGaXh0dXJlKGYwKTtcbiAgICAgICAgIH1cbiAgICAgICAgIGYwLkRlc3Ryb3lQcm94eSh0aGlzLm1fY29udGFjdE1hbmFnZXIubV9icm9hZFBoYXNlKTtcbiAgICAgICAgIGYwLkRlc3Ryb3koKTtcbiAgICAgIH1cbiAgICAgIGIubV9maXh0dXJlTGlzdCA9IG51bGw7XG4gICAgICBiLm1fZml4dHVyZUNvdW50ID0gMDtcbiAgICAgIGlmIChiLm1fcHJldikge1xuICAgICAgICAgYi5tX3ByZXYubV9uZXh0ID0gYi5tX25leHQ7XG4gICAgICB9XG4gICAgICBpZiAoYi5tX25leHQpIHtcbiAgICAgICAgIGIubV9uZXh0Lm1fcHJldiA9IGIubV9wcmV2O1xuICAgICAgfVxuICAgICAgaWYgKGIgPT0gdGhpcy5tX2JvZHlMaXN0KSB7XG4gICAgICAgICB0aGlzLm1fYm9keUxpc3QgPSBiLm1fbmV4dDtcbiAgICAgIH0tLXRoaXMubV9ib2R5Q291bnQ7XG4gICB9XG4gICBiMldvcmxkLnByb3RvdHlwZS5DcmVhdGVKb2ludCA9IGZ1bmN0aW9uIChkZWYpIHtcbiAgICAgIHZhciBqID0gYjJKb2ludC5DcmVhdGUoZGVmLCBudWxsKTtcbiAgICAgIGoubV9wcmV2ID0gbnVsbDtcbiAgICAgIGoubV9uZXh0ID0gdGhpcy5tX2pvaW50TGlzdDtcbiAgICAgIGlmICh0aGlzLm1fam9pbnRMaXN0KSB7XG4gICAgICAgICB0aGlzLm1fam9pbnRMaXN0Lm1fcHJldiA9IGo7XG4gICAgICB9XG4gICAgICB0aGlzLm1fam9pbnRMaXN0ID0gajtcbiAgICAgICsrdGhpcy5tX2pvaW50Q291bnQ7XG4gICAgICBqLm1fZWRnZUEuam9pbnQgPSBqO1xuICAgICAgai5tX2VkZ2VBLm90aGVyID0gai5tX2JvZHlCO1xuICAgICAgai5tX2VkZ2VBLnByZXYgPSBudWxsO1xuICAgICAgai5tX2VkZ2VBLm5leHQgPSBqLm1fYm9keUEubV9qb2ludExpc3Q7XG4gICAgICBpZiAoai5tX2JvZHlBLm1fam9pbnRMaXN0KSBqLm1fYm9keUEubV9qb2ludExpc3QucHJldiA9IGoubV9lZGdlQTtcbiAgICAgIGoubV9ib2R5QS5tX2pvaW50TGlzdCA9IGoubV9lZGdlQTtcbiAgICAgIGoubV9lZGdlQi5qb2ludCA9IGo7XG4gICAgICBqLm1fZWRnZUIub3RoZXIgPSBqLm1fYm9keUE7XG4gICAgICBqLm1fZWRnZUIucHJldiA9IG51bGw7XG4gICAgICBqLm1fZWRnZUIubmV4dCA9IGoubV9ib2R5Qi5tX2pvaW50TGlzdDtcbiAgICAgIGlmIChqLm1fYm9keUIubV9qb2ludExpc3QpIGoubV9ib2R5Qi5tX2pvaW50TGlzdC5wcmV2ID0gai5tX2VkZ2VCO1xuICAgICAgai5tX2JvZHlCLm1fam9pbnRMaXN0ID0gai5tX2VkZ2VCO1xuICAgICAgdmFyIGJvZHlBID0gZGVmLmJvZHlBO1xuICAgICAgdmFyIGJvZHlCID0gZGVmLmJvZHlCO1xuICAgICAgaWYgKGRlZi5jb2xsaWRlQ29ubmVjdGVkID09IGZhbHNlKSB7XG4gICAgICAgICB2YXIgZWRnZSA9IGJvZHlCLkdldENvbnRhY3RMaXN0KCk7XG4gICAgICAgICB3aGlsZSAoZWRnZSkge1xuICAgICAgICAgICAgaWYgKGVkZ2Uub3RoZXIgPT0gYm9keUEpIHtcbiAgICAgICAgICAgICAgIGVkZ2UuY29udGFjdC5GbGFnRm9yRmlsdGVyaW5nKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlZGdlID0gZWRnZS5uZXh0O1xuICAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGo7XG4gICB9XG4gICBiMldvcmxkLnByb3RvdHlwZS5EZXN0cm95Sm9pbnQgPSBmdW5jdGlvbiAoaikge1xuICAgICAgdmFyIGNvbGxpZGVDb25uZWN0ZWQgPSBqLm1fY29sbGlkZUNvbm5lY3RlZDtcbiAgICAgIGlmIChqLm1fcHJldikge1xuICAgICAgICAgai5tX3ByZXYubV9uZXh0ID0gai5tX25leHQ7XG4gICAgICB9XG4gICAgICBpZiAoai5tX25leHQpIHtcbiAgICAgICAgIGoubV9uZXh0Lm1fcHJldiA9IGoubV9wcmV2O1xuICAgICAgfVxuICAgICAgaWYgKGogPT0gdGhpcy5tX2pvaW50TGlzdCkge1xuICAgICAgICAgdGhpcy5tX2pvaW50TGlzdCA9IGoubV9uZXh0O1xuICAgICAgfVxuICAgICAgdmFyIGJvZHlBID0gai5tX2JvZHlBO1xuICAgICAgdmFyIGJvZHlCID0gai5tX2JvZHlCO1xuICAgICAgYm9keUEuU2V0QXdha2UodHJ1ZSk7XG4gICAgICBib2R5Qi5TZXRBd2FrZSh0cnVlKTtcbiAgICAgIGlmIChqLm1fZWRnZUEucHJldikge1xuICAgICAgICAgai5tX2VkZ2VBLnByZXYubmV4dCA9IGoubV9lZGdlQS5uZXh0O1xuICAgICAgfVxuICAgICAgaWYgKGoubV9lZGdlQS5uZXh0KSB7XG4gICAgICAgICBqLm1fZWRnZUEubmV4dC5wcmV2ID0gai5tX2VkZ2VBLnByZXY7XG4gICAgICB9XG4gICAgICBpZiAoai5tX2VkZ2VBID09IGJvZHlBLm1fam9pbnRMaXN0KSB7XG4gICAgICAgICBib2R5QS5tX2pvaW50TGlzdCA9IGoubV9lZGdlQS5uZXh0O1xuICAgICAgfVxuICAgICAgai5tX2VkZ2VBLnByZXYgPSBudWxsO1xuICAgICAgai5tX2VkZ2VBLm5leHQgPSBudWxsO1xuICAgICAgaWYgKGoubV9lZGdlQi5wcmV2KSB7XG4gICAgICAgICBqLm1fZWRnZUIucHJldi5uZXh0ID0gai5tX2VkZ2VCLm5leHQ7XG4gICAgICB9XG4gICAgICBpZiAoai5tX2VkZ2VCLm5leHQpIHtcbiAgICAgICAgIGoubV9lZGdlQi5uZXh0LnByZXYgPSBqLm1fZWRnZUIucHJldjtcbiAgICAgIH1cbiAgICAgIGlmIChqLm1fZWRnZUIgPT0gYm9keUIubV9qb2ludExpc3QpIHtcbiAgICAgICAgIGJvZHlCLm1fam9pbnRMaXN0ID0gai5tX2VkZ2VCLm5leHQ7XG4gICAgICB9XG4gICAgICBqLm1fZWRnZUIucHJldiA9IG51bGw7XG4gICAgICBqLm1fZWRnZUIubmV4dCA9IG51bGw7XG4gICAgICBiMkpvaW50LkRlc3Ryb3koaiwgbnVsbCk7XG4gICAgICAtLXRoaXMubV9qb2ludENvdW50O1xuICAgICAgaWYgKGNvbGxpZGVDb25uZWN0ZWQgPT0gZmFsc2UpIHtcbiAgICAgICAgIHZhciBlZGdlID0gYm9keUIuR2V0Q29udGFjdExpc3QoKTtcbiAgICAgICAgIHdoaWxlIChlZGdlKSB7XG4gICAgICAgICAgICBpZiAoZWRnZS5vdGhlciA9PSBib2R5QSkge1xuICAgICAgICAgICAgICAgZWRnZS5jb250YWN0LkZsYWdGb3JGaWx0ZXJpbmcoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVkZ2UgPSBlZGdlLm5leHQ7XG4gICAgICAgICB9XG4gICAgICB9XG4gICB9XG4gICBiMldvcmxkLnByb3RvdHlwZS5BZGRDb250cm9sbGVyID0gZnVuY3Rpb24gKGMpIHtcbiAgICAgIGMubV9uZXh0ID0gdGhpcy5tX2NvbnRyb2xsZXJMaXN0O1xuICAgICAgYy5tX3ByZXYgPSBudWxsO1xuICAgICAgdGhpcy5tX2NvbnRyb2xsZXJMaXN0ID0gYztcbiAgICAgIGMubV93b3JsZCA9IHRoaXM7XG4gICAgICB0aGlzLm1fY29udHJvbGxlckNvdW50Kys7XG4gICAgICByZXR1cm4gYztcbiAgIH1cbiAgIGIyV29ybGQucHJvdG90eXBlLlJlbW92ZUNvbnRyb2xsZXIgPSBmdW5jdGlvbiAoYykge1xuICAgICAgaWYgKGMubV9wcmV2KSBjLm1fcHJldi5tX25leHQgPSBjLm1fbmV4dDtcbiAgICAgIGlmIChjLm1fbmV4dCkgYy5tX25leHQubV9wcmV2ID0gYy5tX3ByZXY7XG4gICAgICBpZiAodGhpcy5tX2NvbnRyb2xsZXJMaXN0ID09IGMpIHRoaXMubV9jb250cm9sbGVyTGlzdCA9IGMubV9uZXh0O1xuICAgICAgdGhpcy5tX2NvbnRyb2xsZXJDb3VudC0tO1xuICAgfVxuICAgYjJXb3JsZC5wcm90b3R5cGUuQ3JlYXRlQ29udHJvbGxlciA9IGZ1bmN0aW9uIChjb250cm9sbGVyKSB7XG4gICAgICBpZiAoY29udHJvbGxlci5tX3dvcmxkICE9IHRoaXMpIHRocm93IG5ldyBFcnJvcihcIkNvbnRyb2xsZXIgY2FuIG9ubHkgYmUgYSBtZW1iZXIgb2Ygb25lIHdvcmxkXCIpO1xuICAgICAgY29udHJvbGxlci5tX25leHQgPSB0aGlzLm1fY29udHJvbGxlckxpc3Q7XG4gICAgICBjb250cm9sbGVyLm1fcHJldiA9IG51bGw7XG4gICAgICBpZiAodGhpcy5tX2NvbnRyb2xsZXJMaXN0KSB0aGlzLm1fY29udHJvbGxlckxpc3QubV9wcmV2ID0gY29udHJvbGxlcjtcbiAgICAgIHRoaXMubV9jb250cm9sbGVyTGlzdCA9IGNvbnRyb2xsZXI7XG4gICAgICArK3RoaXMubV9jb250cm9sbGVyQ291bnQ7XG4gICAgICBjb250cm9sbGVyLm1fd29ybGQgPSB0aGlzO1xuICAgICAgcmV0dXJuIGNvbnRyb2xsZXI7XG4gICB9XG4gICBiMldvcmxkLnByb3RvdHlwZS5EZXN0cm95Q29udHJvbGxlciA9IGZ1bmN0aW9uIChjb250cm9sbGVyKSB7XG4gICAgICBjb250cm9sbGVyLkNsZWFyKCk7XG4gICAgICBpZiAoY29udHJvbGxlci5tX25leHQpIGNvbnRyb2xsZXIubV9uZXh0Lm1fcHJldiA9IGNvbnRyb2xsZXIubV9wcmV2O1xuICAgICAgaWYgKGNvbnRyb2xsZXIubV9wcmV2KSBjb250cm9sbGVyLm1fcHJldi5tX25leHQgPSBjb250cm9sbGVyLm1fbmV4dDtcbiAgICAgIGlmIChjb250cm9sbGVyID09IHRoaXMubV9jb250cm9sbGVyTGlzdCkgdGhpcy5tX2NvbnRyb2xsZXJMaXN0ID0gY29udHJvbGxlci5tX25leHQ7XG4gICAgICAtLXRoaXMubV9jb250cm9sbGVyQ291bnQ7XG4gICB9XG4gICBiMldvcmxkLnByb3RvdHlwZS5TZXRXYXJtU3RhcnRpbmcgPSBmdW5jdGlvbiAoZmxhZykge1xuICAgICAgYjJXb3JsZC5tX3dhcm1TdGFydGluZyA9IGZsYWc7XG4gICB9XG4gICBiMldvcmxkLnByb3RvdHlwZS5TZXRDb250aW51b3VzUGh5c2ljcyA9IGZ1bmN0aW9uIChmbGFnKSB7XG4gICAgICBiMldvcmxkLm1fY29udGludW91c1BoeXNpY3MgPSBmbGFnO1xuICAgfVxuICAgYjJXb3JsZC5wcm90b3R5cGUuR2V0Qm9keUNvdW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMubV9ib2R5Q291bnQ7XG4gICB9XG4gICBiMldvcmxkLnByb3RvdHlwZS5HZXRKb2ludENvdW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMubV9qb2ludENvdW50O1xuICAgfVxuICAgYjJXb3JsZC5wcm90b3R5cGUuR2V0Q29udGFjdENvdW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMubV9jb250YWN0Q291bnQ7XG4gICB9XG4gICBiMldvcmxkLnByb3RvdHlwZS5TZXRHcmF2aXR5ID0gZnVuY3Rpb24gKGdyYXZpdHkpIHtcbiAgICAgIHRoaXMubV9ncmF2aXR5ID0gZ3Jhdml0eTtcbiAgIH1cbiAgIGIyV29ybGQucHJvdG90eXBlLkdldEdyYXZpdHkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5tX2dyYXZpdHk7XG4gICB9XG4gICBiMldvcmxkLnByb3RvdHlwZS5HZXRHcm91bmRCb2R5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMubV9ncm91bmRCb2R5O1xuICAgfVxuICAgYjJXb3JsZC5wcm90b3R5cGUuU3RlcCA9IGZ1bmN0aW9uIChkdCwgdmVsb2NpdHlJdGVyYXRpb25zLCBwb3NpdGlvbkl0ZXJhdGlvbnMpIHtcbiAgICAgIGlmIChkdCA9PT0gdW5kZWZpbmVkKSBkdCA9IDA7XG4gICAgICBpZiAodmVsb2NpdHlJdGVyYXRpb25zID09PSB1bmRlZmluZWQpIHZlbG9jaXR5SXRlcmF0aW9ucyA9IDA7XG4gICAgICBpZiAocG9zaXRpb25JdGVyYXRpb25zID09PSB1bmRlZmluZWQpIHBvc2l0aW9uSXRlcmF0aW9ucyA9IDA7XG4gICAgICBpZiAodGhpcy5tX2ZsYWdzICYgYjJXb3JsZC5lX25ld0ZpeHR1cmUpIHtcbiAgICAgICAgIHRoaXMubV9jb250YWN0TWFuYWdlci5GaW5kTmV3Q29udGFjdHMoKTtcbiAgICAgICAgIHRoaXMubV9mbGFncyAmPSB+YjJXb3JsZC5lX25ld0ZpeHR1cmU7XG4gICAgICB9XG4gICAgICB0aGlzLm1fZmxhZ3MgfD0gYjJXb3JsZC5lX2xvY2tlZDtcbiAgICAgIHZhciBzdGVwID0gYjJXb3JsZC5zX3RpbWVzdGVwMjtcbiAgICAgIHN0ZXAuZHQgPSBkdDtcbiAgICAgIHN0ZXAudmVsb2NpdHlJdGVyYXRpb25zID0gdmVsb2NpdHlJdGVyYXRpb25zO1xuICAgICAgc3RlcC5wb3NpdGlvbkl0ZXJhdGlvbnMgPSBwb3NpdGlvbkl0ZXJhdGlvbnM7XG4gICAgICBpZiAoZHQgPiAwLjApIHtcbiAgICAgICAgIHN0ZXAuaW52X2R0ID0gMS4wIC8gZHQ7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgIHN0ZXAuaW52X2R0ID0gMC4wO1xuICAgICAgfVxuICAgICAgc3RlcC5kdFJhdGlvID0gdGhpcy5tX2ludl9kdDAgKiBkdDtcbiAgICAgIHN0ZXAud2FybVN0YXJ0aW5nID0gYjJXb3JsZC5tX3dhcm1TdGFydGluZztcbiAgICAgIHRoaXMubV9jb250YWN0TWFuYWdlci5Db2xsaWRlKCk7XG4gICAgICBpZiAoc3RlcC5kdCA+IDAuMCkge1xuICAgICAgICAgdGhpcy5Tb2x2ZShzdGVwKTtcbiAgICAgIH1cbiAgICAgIGlmIChiMldvcmxkLm1fY29udGludW91c1BoeXNpY3MgJiYgc3RlcC5kdCA+IDAuMCkge1xuICAgICAgICAgdGhpcy5Tb2x2ZVRPSShzdGVwKTtcbiAgICAgIH1cbiAgICAgIGlmIChzdGVwLmR0ID4gMC4wKSB7XG4gICAgICAgICB0aGlzLm1faW52X2R0MCA9IHN0ZXAuaW52X2R0O1xuICAgICAgfVxuICAgICAgdGhpcy5tX2ZsYWdzICY9IH5iMldvcmxkLmVfbG9ja2VkO1xuICAgfVxuICAgYjJXb3JsZC5wcm90b3R5cGUuQ2xlYXJGb3JjZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBmb3IgKHZhciBib2R5ID0gdGhpcy5tX2JvZHlMaXN0OyBib2R5OyBib2R5ID0gYm9keS5tX25leHQpIHtcbiAgICAgICAgIGJvZHkubV9mb3JjZS5TZXRaZXJvKCk7XG4gICAgICAgICBib2R5Lm1fdG9ycXVlID0gMC4wO1xuICAgICAgfVxuICAgfVxuICAgYjJXb3JsZC5wcm90b3R5cGUuRHJhd0RlYnVnRGF0YSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICh0aGlzLm1fZGVidWdEcmF3ID09IG51bGwpIHtcbiAgICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHRoaXMubV9kZWJ1Z0RyYXcubV9zcHJpdGUuZ3JhcGhpY3MuY2xlYXIoKTtcbiAgICAgIHZhciBmbGFncyA9IHRoaXMubV9kZWJ1Z0RyYXcuR2V0RmxhZ3MoKTtcbiAgICAgIHZhciBpID0gMDtcbiAgICAgIHZhciBiO1xuICAgICAgdmFyIGY7XG4gICAgICB2YXIgcztcbiAgICAgIHZhciBqO1xuICAgICAgdmFyIGJwO1xuICAgICAgdmFyIGludlEgPSBuZXcgYjJWZWMyO1xuICAgICAgdmFyIHgxID0gbmV3IGIyVmVjMjtcbiAgICAgIHZhciB4MiA9IG5ldyBiMlZlYzI7XG4gICAgICB2YXIgeGY7XG4gICAgICB2YXIgYjEgPSBuZXcgYjJBQUJCKCk7XG4gICAgICB2YXIgYjIgPSBuZXcgYjJBQUJCKCk7XG4gICAgICB2YXIgdnMgPSBbbmV3IGIyVmVjMigpLCBuZXcgYjJWZWMyKCksIG5ldyBiMlZlYzIoKSwgbmV3IGIyVmVjMigpXTtcbiAgICAgIHZhciBjb2xvciA9IG5ldyBiMkNvbG9yKDAsIDAsIDApO1xuICAgICAgaWYgKGZsYWdzICYgYjJEZWJ1Z0RyYXcuZV9zaGFwZUJpdCkge1xuICAgICAgICAgZm9yIChiID0gdGhpcy5tX2JvZHlMaXN0O1xuICAgICAgICAgYjsgYiA9IGIubV9uZXh0KSB7XG4gICAgICAgICAgICB4ZiA9IGIubV94ZjtcbiAgICAgICAgICAgIGZvciAoZiA9IGIuR2V0Rml4dHVyZUxpc3QoKTtcbiAgICAgICAgICAgIGY7IGYgPSBmLm1fbmV4dCkge1xuICAgICAgICAgICAgICAgcyA9IGYuR2V0U2hhcGUoKTtcbiAgICAgICAgICAgICAgIGlmIChiLklzQWN0aXZlKCkgPT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgIGNvbG9yLlNldCgwLjUsIDAuNSwgMC4zKTtcbiAgICAgICAgICAgICAgICAgIHRoaXMuRHJhd1NoYXBlKHMsIHhmLCBjb2xvcik7XG4gICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICBlbHNlIGlmIChiLkdldFR5cGUoKSA9PSBiMkJvZHkuYjJfc3RhdGljQm9keSkge1xuICAgICAgICAgICAgICAgICAgY29sb3IuU2V0KDAuNSwgMC45LCAwLjUpO1xuICAgICAgICAgICAgICAgICAgdGhpcy5EcmF3U2hhcGUocywgeGYsIGNvbG9yKTtcbiAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgIGVsc2UgaWYgKGIuR2V0VHlwZSgpID09IGIyQm9keS5iMl9raW5lbWF0aWNCb2R5KSB7XG4gICAgICAgICAgICAgICAgICBjb2xvci5TZXQoMC41LCAwLjUsIDAuOSk7XG4gICAgICAgICAgICAgICAgICB0aGlzLkRyYXdTaGFwZShzLCB4ZiwgY29sb3IpO1xuICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgZWxzZSBpZiAoYi5Jc0F3YWtlKCkgPT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgIGNvbG9yLlNldCgwLjYsIDAuNiwgMC42KTtcbiAgICAgICAgICAgICAgICAgIHRoaXMuRHJhd1NoYXBlKHMsIHhmLCBjb2xvcik7XG4gICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIGNvbG9yLlNldCgwLjksIDAuNywgMC43KTtcbiAgICAgICAgICAgICAgICAgIHRoaXMuRHJhd1NoYXBlKHMsIHhmLCBjb2xvcik7XG4gICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoZmxhZ3MgJiBiMkRlYnVnRHJhdy5lX2pvaW50Qml0KSB7XG4gICAgICAgICBmb3IgKGogPSB0aGlzLm1fam9pbnRMaXN0O1xuICAgICAgICAgajsgaiA9IGoubV9uZXh0KSB7XG4gICAgICAgICAgICB0aGlzLkRyYXdKb2ludChqKTtcbiAgICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChmbGFncyAmIGIyRGVidWdEcmF3LmVfY29udHJvbGxlckJpdCkge1xuICAgICAgICAgZm9yICh2YXIgYyA9IHRoaXMubV9jb250cm9sbGVyTGlzdDsgYzsgYyA9IGMubV9uZXh0KSB7XG4gICAgICAgICAgICBjLkRyYXcodGhpcy5tX2RlYnVnRHJhdyk7XG4gICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoZmxhZ3MgJiBiMkRlYnVnRHJhdy5lX3BhaXJCaXQpIHtcbiAgICAgICAgIGNvbG9yLlNldCgwLjMsIDAuOSwgMC45KTtcbiAgICAgICAgIGZvciAodmFyIGNvbnRhY3QgPSB0aGlzLm1fY29udGFjdE1hbmFnZXIubV9jb250YWN0TGlzdDsgY29udGFjdDsgY29udGFjdCA9IGNvbnRhY3QuR2V0TmV4dCgpKSB7XG4gICAgICAgICAgICB2YXIgZml4dHVyZUEgPSBjb250YWN0LkdldEZpeHR1cmVBKCk7XG4gICAgICAgICAgICB2YXIgZml4dHVyZUIgPSBjb250YWN0LkdldEZpeHR1cmVCKCk7XG4gICAgICAgICAgICB2YXIgY0EgPSBmaXh0dXJlQS5HZXRBQUJCKCkuR2V0Q2VudGVyKCk7XG4gICAgICAgICAgICB2YXIgY0IgPSBmaXh0dXJlQi5HZXRBQUJCKCkuR2V0Q2VudGVyKCk7XG4gICAgICAgICAgICB0aGlzLm1fZGVidWdEcmF3LkRyYXdTZWdtZW50KGNBLCBjQiwgY29sb3IpO1xuICAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGZsYWdzICYgYjJEZWJ1Z0RyYXcuZV9hYWJiQml0KSB7XG4gICAgICAgICBicCA9IHRoaXMubV9jb250YWN0TWFuYWdlci5tX2Jyb2FkUGhhc2U7XG4gICAgICAgICB2cyA9IFtuZXcgYjJWZWMyKCksIG5ldyBiMlZlYzIoKSwgbmV3IGIyVmVjMigpLCBuZXcgYjJWZWMyKCldO1xuICAgICAgICAgZm9yIChiID0gdGhpcy5tX2JvZHlMaXN0O1xuICAgICAgICAgYjsgYiA9IGIuR2V0TmV4dCgpKSB7XG4gICAgICAgICAgICBpZiAoYi5Jc0FjdGl2ZSgpID09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAoZiA9IGIuR2V0Rml4dHVyZUxpc3QoKTtcbiAgICAgICAgICAgIGY7IGYgPSBmLkdldE5leHQoKSkge1xuICAgICAgICAgICAgICAgdmFyIGFhYmIgPSBicC5HZXRGYXRBQUJCKGYubV9wcm94eSk7XG4gICAgICAgICAgICAgICB2c1swXS5TZXQoYWFiYi5sb3dlckJvdW5kLngsIGFhYmIubG93ZXJCb3VuZC55KTtcbiAgICAgICAgICAgICAgIHZzWzFdLlNldChhYWJiLnVwcGVyQm91bmQueCwgYWFiYi5sb3dlckJvdW5kLnkpO1xuICAgICAgICAgICAgICAgdnNbMl0uU2V0KGFhYmIudXBwZXJCb3VuZC54LCBhYWJiLnVwcGVyQm91bmQueSk7XG4gICAgICAgICAgICAgICB2c1szXS5TZXQoYWFiYi5sb3dlckJvdW5kLngsIGFhYmIudXBwZXJCb3VuZC55KTtcbiAgICAgICAgICAgICAgIHRoaXMubV9kZWJ1Z0RyYXcuRHJhd1BvbHlnb24odnMsIDQsIGNvbG9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChmbGFncyAmIGIyRGVidWdEcmF3LmVfY2VudGVyT2ZNYXNzQml0KSB7XG4gICAgICAgICBmb3IgKGIgPSB0aGlzLm1fYm9keUxpc3Q7XG4gICAgICAgICBiOyBiID0gYi5tX25leHQpIHtcbiAgICAgICAgICAgIHhmID0gYjJXb3JsZC5zX3hmO1xuICAgICAgICAgICAgeGYuUiA9IGIubV94Zi5SO1xuICAgICAgICAgICAgeGYucG9zaXRpb24gPSBiLkdldFdvcmxkQ2VudGVyKCk7XG4gICAgICAgICAgICB0aGlzLm1fZGVidWdEcmF3LkRyYXdUcmFuc2Zvcm0oeGYpO1xuICAgICAgICAgfVxuICAgICAgfVxuICAgfVxuICAgYjJXb3JsZC5wcm90b3R5cGUuUXVlcnlBQUJCID0gZnVuY3Rpb24gKGNhbGxiYWNrLCBhYWJiKSB7XG4gICAgICB2YXIgX190aGlzID0gdGhpcztcbiAgICAgIHZhciBicm9hZFBoYXNlID0gX190aGlzLm1fY29udGFjdE1hbmFnZXIubV9icm9hZFBoYXNlO1xuXG4gICAgICBmdW5jdGlvbiBXb3JsZFF1ZXJ5V3JhcHBlcihwcm94eSkge1xuICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGJyb2FkUGhhc2UuR2V0VXNlckRhdGEocHJveHkpKTtcbiAgICAgIH07XG4gICAgICBicm9hZFBoYXNlLlF1ZXJ5KFdvcmxkUXVlcnlXcmFwcGVyLCBhYWJiKTtcbiAgIH1cbiAgIGIyV29ybGQucHJvdG90eXBlLlF1ZXJ5U2hhcGUgPSBmdW5jdGlvbiAoY2FsbGJhY2ssIHNoYXBlLCB0cmFuc2Zvcm0pIHtcbiAgICAgIHZhciBfX3RoaXMgPSB0aGlzO1xuICAgICAgaWYgKHRyYW5zZm9ybSA9PT0gdW5kZWZpbmVkKSB0cmFuc2Zvcm0gPSBudWxsO1xuICAgICAgaWYgKHRyYW5zZm9ybSA9PSBudWxsKSB7XG4gICAgICAgICB0cmFuc2Zvcm0gPSBuZXcgYjJUcmFuc2Zvcm0oKTtcbiAgICAgICAgIHRyYW5zZm9ybS5TZXRJZGVudGl0eSgpO1xuICAgICAgfVxuICAgICAgdmFyIGJyb2FkUGhhc2UgPSBfX3RoaXMubV9jb250YWN0TWFuYWdlci5tX2Jyb2FkUGhhc2U7XG5cbiAgICAgIGZ1bmN0aW9uIFdvcmxkUXVlcnlXcmFwcGVyKHByb3h5KSB7XG4gICAgICAgICB2YXIgZml4dHVyZSA9IChicm9hZFBoYXNlLkdldFVzZXJEYXRhKHByb3h5KSBpbnN0YW5jZW9mIGIyRml4dHVyZSA/IGJyb2FkUGhhc2UuR2V0VXNlckRhdGEocHJveHkpIDogbnVsbCk7XG4gICAgICAgICBpZiAoYjJTaGFwZS5UZXN0T3ZlcmxhcChzaGFwZSwgdHJhbnNmb3JtLCBmaXh0dXJlLkdldFNoYXBlKCksIGZpeHR1cmUuR2V0Qm9keSgpLkdldFRyYW5zZm9ybSgpKSkgcmV0dXJuIGNhbGxiYWNrKGZpeHR1cmUpO1xuICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9O1xuICAgICAgdmFyIGFhYmIgPSBuZXcgYjJBQUJCKCk7XG4gICAgICBzaGFwZS5Db21wdXRlQUFCQihhYWJiLCB0cmFuc2Zvcm0pO1xuICAgICAgYnJvYWRQaGFzZS5RdWVyeShXb3JsZFF1ZXJ5V3JhcHBlciwgYWFiYik7XG4gICB9XG4gICBiMldvcmxkLnByb3RvdHlwZS5RdWVyeVBvaW50ID0gZnVuY3Rpb24gKGNhbGxiYWNrLCBwKSB7XG4gICAgICB2YXIgX190aGlzID0gdGhpcztcbiAgICAgIHZhciBicm9hZFBoYXNlID0gX190aGlzLm1fY29udGFjdE1hbmFnZXIubV9icm9hZFBoYXNlO1xuXG4gICAgICBmdW5jdGlvbiBXb3JsZFF1ZXJ5V3JhcHBlcihwcm94eSkge1xuICAgICAgICAgdmFyIGZpeHR1cmUgPSAoYnJvYWRQaGFzZS5HZXRVc2VyRGF0YShwcm94eSkgaW5zdGFuY2VvZiBiMkZpeHR1cmUgPyBicm9hZFBoYXNlLkdldFVzZXJEYXRhKHByb3h5KSA6IG51bGwpO1xuICAgICAgICAgaWYgKGZpeHR1cmUuVGVzdFBvaW50KHApKSByZXR1cm4gY2FsbGJhY2soZml4dHVyZSk7XG4gICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH07XG4gICAgICB2YXIgYWFiYiA9IG5ldyBiMkFBQkIoKTtcbiAgICAgIGFhYmIubG93ZXJCb3VuZC5TZXQocC54IC0gYjJTZXR0aW5ncy5iMl9saW5lYXJTbG9wLCBwLnkgLSBiMlNldHRpbmdzLmIyX2xpbmVhclNsb3ApO1xuICAgICAgYWFiYi51cHBlckJvdW5kLlNldChwLnggKyBiMlNldHRpbmdzLmIyX2xpbmVhclNsb3AsIHAueSArIGIyU2V0dGluZ3MuYjJfbGluZWFyU2xvcCk7XG4gICAgICBicm9hZFBoYXNlLlF1ZXJ5KFdvcmxkUXVlcnlXcmFwcGVyLCBhYWJiKTtcbiAgIH1cbiAgIGIyV29ybGQucHJvdG90eXBlLlJheUNhc3QgPSBmdW5jdGlvbiAoY2FsbGJhY2ssIHBvaW50MSwgcG9pbnQyKSB7XG4gICAgICB2YXIgX190aGlzID0gdGhpcztcbiAgICAgIHZhciBicm9hZFBoYXNlID0gX190aGlzLm1fY29udGFjdE1hbmFnZXIubV9icm9hZFBoYXNlO1xuICAgICAgdmFyIG91dHB1dCA9IG5ldyBiMlJheUNhc3RPdXRwdXQ7XG5cbiAgICAgIGZ1bmN0aW9uIFJheUNhc3RXcmFwcGVyKGlucHV0LCBwcm94eSkge1xuICAgICAgICAgdmFyIHVzZXJEYXRhID0gYnJvYWRQaGFzZS5HZXRVc2VyRGF0YShwcm94eSk7XG4gICAgICAgICB2YXIgZml4dHVyZSA9ICh1c2VyRGF0YSBpbnN0YW5jZW9mIGIyRml4dHVyZSA/IHVzZXJEYXRhIDogbnVsbCk7XG4gICAgICAgICB2YXIgaGl0ID0gZml4dHVyZS5SYXlDYXN0KG91dHB1dCwgaW5wdXQpO1xuICAgICAgICAgaWYgKGhpdCkge1xuICAgICAgICAgICAgdmFyIGZyYWN0aW9uID0gb3V0cHV0LmZyYWN0aW9uO1xuICAgICAgICAgICAgdmFyIHBvaW50ID0gbmV3IGIyVmVjMigoMS4wIC0gZnJhY3Rpb24pICogcG9pbnQxLnggKyBmcmFjdGlvbiAqIHBvaW50Mi54LCAoMS4wIC0gZnJhY3Rpb24pICogcG9pbnQxLnkgKyBmcmFjdGlvbiAqIHBvaW50Mi55KTtcbiAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhmaXh0dXJlLCBwb2ludCwgb3V0cHV0Lm5vcm1hbCwgZnJhY3Rpb24pO1xuICAgICAgICAgfVxuICAgICAgICAgcmV0dXJuIGlucHV0Lm1heEZyYWN0aW9uO1xuICAgICAgfTtcbiAgICAgIHZhciBpbnB1dCA9IG5ldyBiMlJheUNhc3RJbnB1dChwb2ludDEsIHBvaW50Mik7XG4gICAgICBicm9hZFBoYXNlLlJheUNhc3QoUmF5Q2FzdFdyYXBwZXIsIGlucHV0KTtcbiAgIH1cbiAgIGIyV29ybGQucHJvdG90eXBlLlJheUNhc3RPbmUgPSBmdW5jdGlvbiAocG9pbnQxLCBwb2ludDIpIHtcbiAgICAgIHZhciBfX3RoaXMgPSB0aGlzO1xuICAgICAgdmFyIHJlc3VsdDtcblxuICAgICAgZnVuY3Rpb24gUmF5Q2FzdE9uZVdyYXBwZXIoZml4dHVyZSwgcG9pbnQsIG5vcm1hbCwgZnJhY3Rpb24pIHtcbiAgICAgICAgIGlmIChmcmFjdGlvbiA9PT0gdW5kZWZpbmVkKSBmcmFjdGlvbiA9IDA7XG4gICAgICAgICByZXN1bHQgPSBmaXh0dXJlO1xuICAgICAgICAgcmV0dXJuIGZyYWN0aW9uO1xuICAgICAgfTtcbiAgICAgIF9fdGhpcy5SYXlDYXN0KFJheUNhc3RPbmVXcmFwcGVyLCBwb2ludDEsIHBvaW50Mik7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgfVxuICAgYjJXb3JsZC5wcm90b3R5cGUuUmF5Q2FzdEFsbCA9IGZ1bmN0aW9uIChwb2ludDEsIHBvaW50Mikge1xuICAgICAgdmFyIF9fdGhpcyA9IHRoaXM7XG4gICAgICB2YXIgcmVzdWx0ID0gbmV3IFZlY3RvcigpO1xuXG4gICAgICBmdW5jdGlvbiBSYXlDYXN0QWxsV3JhcHBlcihmaXh0dXJlLCBwb2ludCwgbm9ybWFsLCBmcmFjdGlvbikge1xuICAgICAgICAgaWYgKGZyYWN0aW9uID09PSB1bmRlZmluZWQpIGZyYWN0aW9uID0gMDtcbiAgICAgICAgIHJlc3VsdFtyZXN1bHQubGVuZ3RoXSA9IGZpeHR1cmU7XG4gICAgICAgICByZXR1cm4gMTtcbiAgICAgIH07XG4gICAgICBfX3RoaXMuUmF5Q2FzdChSYXlDYXN0QWxsV3JhcHBlciwgcG9pbnQxLCBwb2ludDIpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgIH1cbiAgIGIyV29ybGQucHJvdG90eXBlLkdldEJvZHlMaXN0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMubV9ib2R5TGlzdDtcbiAgIH1cbiAgIGIyV29ybGQucHJvdG90eXBlLkdldEpvaW50TGlzdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzLm1fam9pbnRMaXN0O1xuICAgfVxuICAgYjJXb3JsZC5wcm90b3R5cGUuR2V0Q29udGFjdExpc3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5tX2NvbnRhY3RMaXN0O1xuICAgfVxuICAgYjJXb3JsZC5wcm90b3R5cGUuSXNMb2NrZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gKHRoaXMubV9mbGFncyAmIGIyV29ybGQuZV9sb2NrZWQpID4gMDtcbiAgIH1cbiAgIGIyV29ybGQucHJvdG90eXBlLlNvbHZlID0gZnVuY3Rpb24gKHN0ZXApIHtcbiAgICAgIHZhciBiO1xuICAgICAgZm9yICh2YXIgY29udHJvbGxlciA9IHRoaXMubV9jb250cm9sbGVyTGlzdDsgY29udHJvbGxlcjsgY29udHJvbGxlciA9IGNvbnRyb2xsZXIubV9uZXh0KSB7XG4gICAgICAgICBjb250cm9sbGVyLlN0ZXAoc3RlcCk7XG4gICAgICB9XG4gICAgICB2YXIgaXNsYW5kID0gdGhpcy5tX2lzbGFuZDtcbiAgICAgIGlzbGFuZC5Jbml0aWFsaXplKHRoaXMubV9ib2R5Q291bnQsIHRoaXMubV9jb250YWN0Q291bnQsIHRoaXMubV9qb2ludENvdW50LCBudWxsLCB0aGlzLm1fY29udGFjdE1hbmFnZXIubV9jb250YWN0TGlzdGVuZXIsIHRoaXMubV9jb250YWN0U29sdmVyKTtcbiAgICAgIGZvciAoYiA9IHRoaXMubV9ib2R5TGlzdDtcbiAgICAgIGI7IGIgPSBiLm1fbmV4dCkge1xuICAgICAgICAgYi5tX2ZsYWdzICY9IH5iMkJvZHkuZV9pc2xhbmRGbGFnO1xuICAgICAgfVxuICAgICAgZm9yICh2YXIgYyA9IHRoaXMubV9jb250YWN0TGlzdDsgYzsgYyA9IGMubV9uZXh0KSB7XG4gICAgICAgICBjLm1fZmxhZ3MgJj0gfmIyQ29udGFjdC5lX2lzbGFuZEZsYWc7XG4gICAgICB9XG4gICAgICBmb3IgKHZhciBqID0gdGhpcy5tX2pvaW50TGlzdDsgajsgaiA9IGoubV9uZXh0KSB7XG4gICAgICAgICBqLm1faXNsYW5kRmxhZyA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIHN0YWNrU2l6ZSA9IHBhcnNlSW50KHRoaXMubV9ib2R5Q291bnQpO1xuICAgICAgdmFyIHN0YWNrID0gdGhpcy5zX3N0YWNrO1xuICAgICAgZm9yICh2YXIgc2VlZCA9IHRoaXMubV9ib2R5TGlzdDsgc2VlZDsgc2VlZCA9IHNlZWQubV9uZXh0KSB7XG4gICAgICAgICBpZiAoc2VlZC5tX2ZsYWdzICYgYjJCb2R5LmVfaXNsYW5kRmxhZykge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICB9XG4gICAgICAgICBpZiAoc2VlZC5Jc0F3YWtlKCkgPT0gZmFsc2UgfHwgc2VlZC5Jc0FjdGl2ZSgpID09IGZhbHNlKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgIH1cbiAgICAgICAgIGlmIChzZWVkLkdldFR5cGUoKSA9PSBiMkJvZHkuYjJfc3RhdGljQm9keSkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICB9XG4gICAgICAgICBpc2xhbmQuQ2xlYXIoKTtcbiAgICAgICAgIHZhciBzdGFja0NvdW50ID0gMDtcbiAgICAgICAgIHN0YWNrW3N0YWNrQ291bnQrK10gPSBzZWVkO1xuICAgICAgICAgc2VlZC5tX2ZsYWdzIHw9IGIyQm9keS5lX2lzbGFuZEZsYWc7XG4gICAgICAgICB3aGlsZSAoc3RhY2tDb3VudCA+IDApIHtcbiAgICAgICAgICAgIGIgPSBzdGFja1stLXN0YWNrQ291bnRdO1xuICAgICAgICAgICAgaXNsYW5kLkFkZEJvZHkoYik7XG4gICAgICAgICAgICBpZiAoYi5Jc0F3YWtlKCkgPT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgIGIuU2V0QXdha2UodHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYi5HZXRUeXBlKCkgPT0gYjJCb2R5LmIyX3N0YXRpY0JvZHkpIHtcbiAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIG90aGVyO1xuICAgICAgICAgICAgZm9yICh2YXIgY2UgPSBiLm1fY29udGFjdExpc3Q7IGNlOyBjZSA9IGNlLm5leHQpIHtcbiAgICAgICAgICAgICAgIGlmIChjZS5jb250YWN0Lm1fZmxhZ3MgJiBiMkNvbnRhY3QuZV9pc2xhbmRGbGFnKSB7XG4gICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgIGlmIChjZS5jb250YWN0LklzU2Vuc29yKCkgPT0gdHJ1ZSB8fCBjZS5jb250YWN0LklzRW5hYmxlZCgpID09IGZhbHNlIHx8IGNlLmNvbnRhY3QuSXNUb3VjaGluZygpID09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgIGlzbGFuZC5BZGRDb250YWN0KGNlLmNvbnRhY3QpO1xuICAgICAgICAgICAgICAgY2UuY29udGFjdC5tX2ZsYWdzIHw9IGIyQ29udGFjdC5lX2lzbGFuZEZsYWc7XG4gICAgICAgICAgICAgICBvdGhlciA9IGNlLm90aGVyO1xuICAgICAgICAgICAgICAgaWYgKG90aGVyLm1fZmxhZ3MgJiBiMkJvZHkuZV9pc2xhbmRGbGFnKSB7XG4gICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgIHN0YWNrW3N0YWNrQ291bnQrK10gPSBvdGhlcjtcbiAgICAgICAgICAgICAgIG90aGVyLm1fZmxhZ3MgfD0gYjJCb2R5LmVfaXNsYW5kRmxhZztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAodmFyIGpuID0gYi5tX2pvaW50TGlzdDsgam47IGpuID0gam4ubmV4dCkge1xuICAgICAgICAgICAgICAgaWYgKGpuLmpvaW50Lm1faXNsYW5kRmxhZyA9PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgIG90aGVyID0gam4ub3RoZXI7XG4gICAgICAgICAgICAgICBpZiAob3RoZXIuSXNBY3RpdmUoKSA9PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICBpc2xhbmQuQWRkSm9pbnQoam4uam9pbnQpO1xuICAgICAgICAgICAgICAgam4uam9pbnQubV9pc2xhbmRGbGFnID0gdHJ1ZTtcbiAgICAgICAgICAgICAgIGlmIChvdGhlci5tX2ZsYWdzICYgYjJCb2R5LmVfaXNsYW5kRmxhZykge1xuICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICBzdGFja1tzdGFja0NvdW50KytdID0gb3RoZXI7XG4gICAgICAgICAgICAgICBvdGhlci5tX2ZsYWdzIHw9IGIyQm9keS5lX2lzbGFuZEZsYWc7XG4gICAgICAgICAgICB9XG4gICAgICAgICB9XG4gICAgICAgICBpc2xhbmQuU29sdmUoc3RlcCwgdGhpcy5tX2dyYXZpdHksIHRoaXMubV9hbGxvd1NsZWVwKTtcbiAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaXNsYW5kLm1fYm9keUNvdW50OyArK2kpIHtcbiAgICAgICAgICAgIGIgPSBpc2xhbmQubV9ib2RpZXNbaV07XG4gICAgICAgICAgICBpZiAoYi5HZXRUeXBlKCkgPT0gYjJCb2R5LmIyX3N0YXRpY0JvZHkpIHtcbiAgICAgICAgICAgICAgIGIubV9mbGFncyAmPSB+YjJCb2R5LmVfaXNsYW5kRmxhZztcbiAgICAgICAgICAgIH1cbiAgICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGZvciAoaSA9IDA7XG4gICAgICBpIDwgc3RhY2subGVuZ3RoOyArK2kpIHtcbiAgICAgICAgIGlmICghc3RhY2tbaV0pIGJyZWFrO1xuICAgICAgICAgc3RhY2tbaV0gPSBudWxsO1xuICAgICAgfVxuICAgICAgZm9yIChiID0gdGhpcy5tX2JvZHlMaXN0O1xuICAgICAgYjsgYiA9IGIubV9uZXh0KSB7XG4gICAgICAgICBpZiAoYi5Jc0F3YWtlKCkgPT0gZmFsc2UgfHwgYi5Jc0FjdGl2ZSgpID09IGZhbHNlKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgIH1cbiAgICAgICAgIGlmIChiLkdldFR5cGUoKSA9PSBiMkJvZHkuYjJfc3RhdGljQm9keSkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICB9XG4gICAgICAgICBiLlN5bmNocm9uaXplRml4dHVyZXMoKTtcbiAgICAgIH1cbiAgICAgIHRoaXMubV9jb250YWN0TWFuYWdlci5GaW5kTmV3Q29udGFjdHMoKTtcbiAgIH1cbiAgIGIyV29ybGQucHJvdG90eXBlLlNvbHZlVE9JID0gZnVuY3Rpb24gKHN0ZXApIHtcbiAgICAgIHZhciBiO1xuICAgICAgdmFyIGZBO1xuICAgICAgdmFyIGZCO1xuICAgICAgdmFyIGJBO1xuICAgICAgdmFyIGJCO1xuICAgICAgdmFyIGNFZGdlO1xuICAgICAgdmFyIGo7XG4gICAgICB2YXIgaXNsYW5kID0gdGhpcy5tX2lzbGFuZDtcbiAgICAgIGlzbGFuZC5Jbml0aWFsaXplKHRoaXMubV9ib2R5Q291bnQsIGIyU2V0dGluZ3MuYjJfbWF4VE9JQ29udGFjdHNQZXJJc2xhbmQsIGIyU2V0dGluZ3MuYjJfbWF4VE9JSm9pbnRzUGVySXNsYW5kLCBudWxsLCB0aGlzLm1fY29udGFjdE1hbmFnZXIubV9jb250YWN0TGlzdGVuZXIsIHRoaXMubV9jb250YWN0U29sdmVyKTtcbiAgICAgIHZhciBxdWV1ZSA9IGIyV29ybGQuc19xdWV1ZTtcbiAgICAgIGZvciAoYiA9IHRoaXMubV9ib2R5TGlzdDtcbiAgICAgIGI7IGIgPSBiLm1fbmV4dCkge1xuICAgICAgICAgYi5tX2ZsYWdzICY9IH5iMkJvZHkuZV9pc2xhbmRGbGFnO1xuICAgICAgICAgYi5tX3N3ZWVwLnQwID0gMC4wO1xuICAgICAgfVxuICAgICAgdmFyIGM7XG4gICAgICBmb3IgKGMgPSB0aGlzLm1fY29udGFjdExpc3Q7XG4gICAgICBjOyBjID0gYy5tX25leHQpIHtcbiAgICAgICAgIGMubV9mbGFncyAmPSB+IChiMkNvbnRhY3QuZV90b2lGbGFnIHwgYjJDb250YWN0LmVfaXNsYW5kRmxhZyk7XG4gICAgICB9XG4gICAgICBmb3IgKGogPSB0aGlzLm1fam9pbnRMaXN0O1xuICAgICAgajsgaiA9IGoubV9uZXh0KSB7XG4gICAgICAgICBqLm1faXNsYW5kRmxhZyA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgZm9yICg7Oykge1xuICAgICAgICAgdmFyIG1pbkNvbnRhY3QgPSBudWxsO1xuICAgICAgICAgdmFyIG1pblRPSSA9IDEuMDtcbiAgICAgICAgIGZvciAoYyA9IHRoaXMubV9jb250YWN0TGlzdDtcbiAgICAgICAgIGM7IGMgPSBjLm1fbmV4dCkge1xuICAgICAgICAgICAgaWYgKGMuSXNTZW5zb3IoKSA9PSB0cnVlIHx8IGMuSXNFbmFibGVkKCkgPT0gZmFsc2UgfHwgYy5Jc0NvbnRpbnVvdXMoKSA9PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgdG9pID0gMS4wO1xuICAgICAgICAgICAgaWYgKGMubV9mbGFncyAmIGIyQ29udGFjdC5lX3RvaUZsYWcpIHtcbiAgICAgICAgICAgICAgIHRvaSA9IGMubV90b2k7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgIGZBID0gYy5tX2ZpeHR1cmVBO1xuICAgICAgICAgICAgICAgZkIgPSBjLm1fZml4dHVyZUI7XG4gICAgICAgICAgICAgICBiQSA9IGZBLm1fYm9keTtcbiAgICAgICAgICAgICAgIGJCID0gZkIubV9ib2R5O1xuICAgICAgICAgICAgICAgaWYgKChiQS5HZXRUeXBlKCkgIT0gYjJCb2R5LmIyX2R5bmFtaWNCb2R5IHx8IGJBLklzQXdha2UoKSA9PSBmYWxzZSkgJiYgKGJCLkdldFR5cGUoKSAhPSBiMkJvZHkuYjJfZHluYW1pY0JvZHkgfHwgYkIuSXNBd2FrZSgpID09IGZhbHNlKSkge1xuICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICB2YXIgdDAgPSBiQS5tX3N3ZWVwLnQwO1xuICAgICAgICAgICAgICAgaWYgKGJBLm1fc3dlZXAudDAgPCBiQi5tX3N3ZWVwLnQwKSB7XG4gICAgICAgICAgICAgICAgICB0MCA9IGJCLm1fc3dlZXAudDA7XG4gICAgICAgICAgICAgICAgICBiQS5tX3N3ZWVwLkFkdmFuY2UodDApO1xuICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgZWxzZSBpZiAoYkIubV9zd2VlcC50MCA8IGJBLm1fc3dlZXAudDApIHtcbiAgICAgICAgICAgICAgICAgIHQwID0gYkEubV9zd2VlcC50MDtcbiAgICAgICAgICAgICAgICAgIGJCLm1fc3dlZXAuQWR2YW5jZSh0MCk7XG4gICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICB0b2kgPSBjLkNvbXB1dGVUT0koYkEubV9zd2VlcCwgYkIubV9zd2VlcCk7XG4gICAgICAgICAgICAgICBiMlNldHRpbmdzLmIyQXNzZXJ0KDAuMCA8PSB0b2kgJiYgdG9pIDw9IDEuMCk7XG4gICAgICAgICAgICAgICBpZiAodG9pID4gMC4wICYmIHRvaSA8IDEuMCkge1xuICAgICAgICAgICAgICAgICAgdG9pID0gKDEuMCAtIHRvaSkgKiB0MCArIHRvaTtcbiAgICAgICAgICAgICAgICAgIGlmICh0b2kgPiAxKSB0b2kgPSAxO1xuICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgYy5tX3RvaSA9IHRvaTtcbiAgICAgICAgICAgICAgIGMubV9mbGFncyB8PSBiMkNvbnRhY3QuZV90b2lGbGFnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKE51bWJlci5NSU5fVkFMVUUgPCB0b2kgJiYgdG9pIDwgbWluVE9JKSB7XG4gICAgICAgICAgICAgICBtaW5Db250YWN0ID0gYztcbiAgICAgICAgICAgICAgIG1pblRPSSA9IHRvaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgIH1cbiAgICAgICAgIGlmIChtaW5Db250YWN0ID09IG51bGwgfHwgMS4wIC0gMTAwLjAgKiBOdW1iZXIuTUlOX1ZBTFVFIDwgbWluVE9JKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgIH1cbiAgICAgICAgIGZBID0gbWluQ29udGFjdC5tX2ZpeHR1cmVBO1xuICAgICAgICAgZkIgPSBtaW5Db250YWN0Lm1fZml4dHVyZUI7XG4gICAgICAgICBiQSA9IGZBLm1fYm9keTtcbiAgICAgICAgIGJCID0gZkIubV9ib2R5O1xuICAgICAgICAgYjJXb3JsZC5zX2JhY2t1cEEuU2V0KGJBLm1fc3dlZXApO1xuICAgICAgICAgYjJXb3JsZC5zX2JhY2t1cEIuU2V0KGJCLm1fc3dlZXApO1xuICAgICAgICAgYkEuQWR2YW5jZShtaW5UT0kpO1xuICAgICAgICAgYkIuQWR2YW5jZShtaW5UT0kpO1xuICAgICAgICAgbWluQ29udGFjdC5VcGRhdGUodGhpcy5tX2NvbnRhY3RNYW5hZ2VyLm1fY29udGFjdExpc3RlbmVyKTtcbiAgICAgICAgIG1pbkNvbnRhY3QubV9mbGFncyAmPSB+YjJDb250YWN0LmVfdG9pRmxhZztcbiAgICAgICAgIGlmIChtaW5Db250YWN0LklzU2Vuc29yKCkgPT0gdHJ1ZSB8fCBtaW5Db250YWN0LklzRW5hYmxlZCgpID09IGZhbHNlKSB7XG4gICAgICAgICAgICBiQS5tX3N3ZWVwLlNldChiMldvcmxkLnNfYmFja3VwQSk7XG4gICAgICAgICAgICBiQi5tX3N3ZWVwLlNldChiMldvcmxkLnNfYmFja3VwQik7XG4gICAgICAgICAgICBiQS5TeW5jaHJvbml6ZVRyYW5zZm9ybSgpO1xuICAgICAgICAgICAgYkIuU3luY2hyb25pemVUcmFuc2Zvcm0oKTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgfVxuICAgICAgICAgaWYgKG1pbkNvbnRhY3QuSXNUb3VjaGluZygpID09IGZhbHNlKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgIH1cbiAgICAgICAgIHZhciBzZWVkID0gYkE7XG4gICAgICAgICBpZiAoc2VlZC5HZXRUeXBlKCkgIT0gYjJCb2R5LmIyX2R5bmFtaWNCb2R5KSB7XG4gICAgICAgICAgICBzZWVkID0gYkI7XG4gICAgICAgICB9XG4gICAgICAgICBpc2xhbmQuQ2xlYXIoKTtcbiAgICAgICAgIHZhciBxdWV1ZVN0YXJ0ID0gMDtcbiAgICAgICAgIHZhciBxdWV1ZVNpemUgPSAwO1xuICAgICAgICAgcXVldWVbcXVldWVTdGFydCArIHF1ZXVlU2l6ZSsrXSA9IHNlZWQ7XG4gICAgICAgICBzZWVkLm1fZmxhZ3MgfD0gYjJCb2R5LmVfaXNsYW5kRmxhZztcbiAgICAgICAgIHdoaWxlIChxdWV1ZVNpemUgPiAwKSB7XG4gICAgICAgICAgICBiID0gcXVldWVbcXVldWVTdGFydCsrXTtcbiAgICAgICAgICAgIC0tcXVldWVTaXplO1xuICAgICAgICAgICAgaXNsYW5kLkFkZEJvZHkoYik7XG4gICAgICAgICAgICBpZiAoYi5Jc0F3YWtlKCkgPT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgIGIuU2V0QXdha2UodHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYi5HZXRUeXBlKCkgIT0gYjJCb2R5LmIyX2R5bmFtaWNCb2R5KSB7XG4gICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAoY0VkZ2UgPSBiLm1fY29udGFjdExpc3Q7XG4gICAgICAgICAgICBjRWRnZTsgY0VkZ2UgPSBjRWRnZS5uZXh0KSB7XG4gICAgICAgICAgICAgICBpZiAoaXNsYW5kLm1fY29udGFjdENvdW50ID09IGlzbGFuZC5tX2NvbnRhY3RDYXBhY2l0eSkge1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICBpZiAoY0VkZ2UuY29udGFjdC5tX2ZsYWdzICYgYjJDb250YWN0LmVfaXNsYW5kRmxhZykge1xuICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICBpZiAoY0VkZ2UuY29udGFjdC5Jc1NlbnNvcigpID09IHRydWUgfHwgY0VkZ2UuY29udGFjdC5Jc0VuYWJsZWQoKSA9PSBmYWxzZSB8fCBjRWRnZS5jb250YWN0LklzVG91Y2hpbmcoKSA9PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICBpc2xhbmQuQWRkQ29udGFjdChjRWRnZS5jb250YWN0KTtcbiAgICAgICAgICAgICAgIGNFZGdlLmNvbnRhY3QubV9mbGFncyB8PSBiMkNvbnRhY3QuZV9pc2xhbmRGbGFnO1xuICAgICAgICAgICAgICAgdmFyIG90aGVyID0gY0VkZ2Uub3RoZXI7XG4gICAgICAgICAgICAgICBpZiAob3RoZXIubV9mbGFncyAmIGIyQm9keS5lX2lzbGFuZEZsYWcpIHtcbiAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgaWYgKG90aGVyLkdldFR5cGUoKSAhPSBiMkJvZHkuYjJfc3RhdGljQm9keSkge1xuICAgICAgICAgICAgICAgICAgb3RoZXIuQWR2YW5jZShtaW5UT0kpO1xuICAgICAgICAgICAgICAgICAgb3RoZXIuU2V0QXdha2UodHJ1ZSk7XG4gICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICBxdWV1ZVtxdWV1ZVN0YXJ0ICsgcXVldWVTaXplXSA9IG90aGVyO1xuICAgICAgICAgICAgICAgKytxdWV1ZVNpemU7XG4gICAgICAgICAgICAgICBvdGhlci5tX2ZsYWdzIHw9IGIyQm9keS5lX2lzbGFuZEZsYWc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKHZhciBqRWRnZSA9IGIubV9qb2ludExpc3Q7IGpFZGdlOyBqRWRnZSA9IGpFZGdlLm5leHQpIHtcbiAgICAgICAgICAgICAgIGlmIChpc2xhbmQubV9qb2ludENvdW50ID09IGlzbGFuZC5tX2pvaW50Q2FwYWNpdHkpIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgaWYgKGpFZGdlLmpvaW50Lm1faXNsYW5kRmxhZyA9PSB0cnVlKSBjb250aW51ZTtcbiAgICAgICAgICAgICAgIG90aGVyID0gakVkZ2Uub3RoZXI7XG4gICAgICAgICAgICAgICBpZiAob3RoZXIuSXNBY3RpdmUoKSA9PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICBpc2xhbmQuQWRkSm9pbnQoakVkZ2Uuam9pbnQpO1xuICAgICAgICAgICAgICAgakVkZ2Uuam9pbnQubV9pc2xhbmRGbGFnID0gdHJ1ZTtcbiAgICAgICAgICAgICAgIGlmIChvdGhlci5tX2ZsYWdzICYgYjJCb2R5LmVfaXNsYW5kRmxhZykgY29udGludWU7XG4gICAgICAgICAgICAgICBpZiAob3RoZXIuR2V0VHlwZSgpICE9IGIyQm9keS5iMl9zdGF0aWNCb2R5KSB7XG4gICAgICAgICAgICAgICAgICBvdGhlci5BZHZhbmNlKG1pblRPSSk7XG4gICAgICAgICAgICAgICAgICBvdGhlci5TZXRBd2FrZSh0cnVlKTtcbiAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgIHF1ZXVlW3F1ZXVlU3RhcnQgKyBxdWV1ZVNpemVdID0gb3RoZXI7XG4gICAgICAgICAgICAgICArK3F1ZXVlU2l6ZTtcbiAgICAgICAgICAgICAgIG90aGVyLm1fZmxhZ3MgfD0gYjJCb2R5LmVfaXNsYW5kRmxhZztcbiAgICAgICAgICAgIH1cbiAgICAgICAgIH1cbiAgICAgICAgIHZhciBzdWJTdGVwID0gYjJXb3JsZC5zX3RpbWVzdGVwO1xuICAgICAgICAgc3ViU3RlcC53YXJtU3RhcnRpbmcgPSBmYWxzZTtcbiAgICAgICAgIHN1YlN0ZXAuZHQgPSAoMS4wIC0gbWluVE9JKSAqIHN0ZXAuZHQ7XG4gICAgICAgICBzdWJTdGVwLmludl9kdCA9IDEuMCAvIHN1YlN0ZXAuZHQ7XG4gICAgICAgICBzdWJTdGVwLmR0UmF0aW8gPSAwLjA7XG4gICAgICAgICBzdWJTdGVwLnZlbG9jaXR5SXRlcmF0aW9ucyA9IHN0ZXAudmVsb2NpdHlJdGVyYXRpb25zO1xuICAgICAgICAgc3ViU3RlcC5wb3NpdGlvbkl0ZXJhdGlvbnMgPSBzdGVwLnBvc2l0aW9uSXRlcmF0aW9ucztcbiAgICAgICAgIGlzbGFuZC5Tb2x2ZVRPSShzdWJTdGVwKTtcbiAgICAgICAgIHZhciBpID0gMDtcbiAgICAgICAgIGZvciAoaSA9IDA7XG4gICAgICAgICBpIDwgaXNsYW5kLm1fYm9keUNvdW50OyArK2kpIHtcbiAgICAgICAgICAgIGIgPSBpc2xhbmQubV9ib2RpZXNbaV07XG4gICAgICAgICAgICBiLm1fZmxhZ3MgJj0gfmIyQm9keS5lX2lzbGFuZEZsYWc7XG4gICAgICAgICAgICBpZiAoYi5Jc0F3YWtlKCkgPT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGIuR2V0VHlwZSgpICE9IGIyQm9keS5iMl9keW5hbWljQm9keSkge1xuICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBiLlN5bmNocm9uaXplRml4dHVyZXMoKTtcbiAgICAgICAgICAgIGZvciAoY0VkZ2UgPSBiLm1fY29udGFjdExpc3Q7XG4gICAgICAgICAgICBjRWRnZTsgY0VkZ2UgPSBjRWRnZS5uZXh0KSB7XG4gICAgICAgICAgICAgICBjRWRnZS5jb250YWN0Lm1fZmxhZ3MgJj0gfmIyQ29udGFjdC5lX3RvaUZsYWc7XG4gICAgICAgICAgICB9XG4gICAgICAgICB9XG4gICAgICAgICBmb3IgKGkgPSAwO1xuICAgICAgICAgaSA8IGlzbGFuZC5tX2NvbnRhY3RDb3VudDsgKytpKSB7XG4gICAgICAgICAgICBjID0gaXNsYW5kLm1fY29udGFjdHNbaV07XG4gICAgICAgICAgICBjLm1fZmxhZ3MgJj0gfiAoYjJDb250YWN0LmVfdG9pRmxhZyB8IGIyQ29udGFjdC5lX2lzbGFuZEZsYWcpO1xuICAgICAgICAgfVxuICAgICAgICAgZm9yIChpID0gMDtcbiAgICAgICAgIGkgPCBpc2xhbmQubV9qb2ludENvdW50OyArK2kpIHtcbiAgICAgICAgICAgIGogPSBpc2xhbmQubV9qb2ludHNbaV07XG4gICAgICAgICAgICBqLm1faXNsYW5kRmxhZyA9IGZhbHNlO1xuICAgICAgICAgfVxuICAgICAgICAgdGhpcy5tX2NvbnRhY3RNYW5hZ2VyLkZpbmROZXdDb250YWN0cygpO1xuICAgICAgfVxuICAgfVxuICAgYjJXb3JsZC5wcm90b3R5cGUuRHJhd0pvaW50ID0gZnVuY3Rpb24gKGpvaW50KSB7XG4gICAgICB2YXIgYjEgPSBqb2ludC5HZXRCb2R5QSgpO1xuICAgICAgdmFyIGIyID0gam9pbnQuR2V0Qm9keUIoKTtcbiAgICAgIHZhciB4ZjEgPSBiMS5tX3hmO1xuICAgICAgdmFyIHhmMiA9IGIyLm1feGY7XG4gICAgICB2YXIgeDEgPSB4ZjEucG9zaXRpb247XG4gICAgICB2YXIgeDIgPSB4ZjIucG9zaXRpb247XG4gICAgICB2YXIgcDEgPSBqb2ludC5HZXRBbmNob3JBKCk7XG4gICAgICB2YXIgcDIgPSBqb2ludC5HZXRBbmNob3JCKCk7XG4gICAgICB2YXIgY29sb3IgPSBiMldvcmxkLnNfam9pbnRDb2xvcjtcbiAgICAgIHN3aXRjaCAoam9pbnQubV90eXBlKSB7XG4gICAgICBjYXNlIGIySm9pbnQuZV9kaXN0YW5jZUpvaW50OlxuICAgICAgICAgdGhpcy5tX2RlYnVnRHJhdy5EcmF3U2VnbWVudChwMSwgcDIsIGNvbG9yKTtcbiAgICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBiMkpvaW50LmVfcHVsbGV5Sm9pbnQ6XG4gICAgICAgICB7XG4gICAgICAgICAgICB2YXIgcHVsbGV5ID0gKChqb2ludCBpbnN0YW5jZW9mIGIyUHVsbGV5Sm9pbnQgPyBqb2ludCA6IG51bGwpKTtcbiAgICAgICAgICAgIHZhciBzMSA9IHB1bGxleS5HZXRHcm91bmRBbmNob3JBKCk7XG4gICAgICAgICAgICB2YXIgczIgPSBwdWxsZXkuR2V0R3JvdW5kQW5jaG9yQigpO1xuICAgICAgICAgICAgdGhpcy5tX2RlYnVnRHJhdy5EcmF3U2VnbWVudChzMSwgcDEsIGNvbG9yKTtcbiAgICAgICAgICAgIHRoaXMubV9kZWJ1Z0RyYXcuRHJhd1NlZ21lbnQoczIsIHAyLCBjb2xvcik7XG4gICAgICAgICAgICB0aGlzLm1fZGVidWdEcmF3LkRyYXdTZWdtZW50KHMxLCBzMiwgY29sb3IpO1xuICAgICAgICAgfVxuICAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIGIySm9pbnQuZV9tb3VzZUpvaW50OlxuICAgICAgICAgdGhpcy5tX2RlYnVnRHJhdy5EcmF3U2VnbWVudChwMSwgcDIsIGNvbG9yKTtcbiAgICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgIGlmIChiMSAhPSB0aGlzLm1fZ3JvdW5kQm9keSkgdGhpcy5tX2RlYnVnRHJhdy5EcmF3U2VnbWVudCh4MSwgcDEsIGNvbG9yKTtcbiAgICAgICAgIHRoaXMubV9kZWJ1Z0RyYXcuRHJhd1NlZ21lbnQocDEsIHAyLCBjb2xvcik7XG4gICAgICAgICBpZiAoYjIgIT0gdGhpcy5tX2dyb3VuZEJvZHkpIHRoaXMubV9kZWJ1Z0RyYXcuRHJhd1NlZ21lbnQoeDIsIHAyLCBjb2xvcik7XG4gICAgICB9XG4gICB9XG4gICBiMldvcmxkLnByb3RvdHlwZS5EcmF3U2hhcGUgPSBmdW5jdGlvbiAoc2hhcGUsIHhmLCBjb2xvcikge1xuICAgICAgc3dpdGNoIChzaGFwZS5tX3R5cGUpIHtcbiAgICAgIGNhc2UgYjJTaGFwZS5lX2NpcmNsZVNoYXBlOlxuICAgICAgICAge1xuICAgICAgICAgICAgdmFyIGNpcmNsZSA9ICgoc2hhcGUgaW5zdGFuY2VvZiBiMkNpcmNsZVNoYXBlID8gc2hhcGUgOiBudWxsKSk7XG4gICAgICAgICAgICB2YXIgY2VudGVyID0gYjJNYXRoLk11bFgoeGYsIGNpcmNsZS5tX3ApO1xuICAgICAgICAgICAgdmFyIHJhZGl1cyA9IGNpcmNsZS5tX3JhZGl1cztcbiAgICAgICAgICAgIHZhciBheGlzID0geGYuUi5jb2wxO1xuICAgICAgICAgICAgdGhpcy5tX2RlYnVnRHJhdy5EcmF3U29saWRDaXJjbGUoY2VudGVyLCByYWRpdXMsIGF4aXMsIGNvbG9yKTtcbiAgICAgICAgIH1cbiAgICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBiMlNoYXBlLmVfcG9seWdvblNoYXBlOlxuICAgICAgICAge1xuICAgICAgICAgICAgdmFyIGkgPSAwO1xuICAgICAgICAgICAgdmFyIHBvbHkgPSAoKHNoYXBlIGluc3RhbmNlb2YgYjJQb2x5Z29uU2hhcGUgPyBzaGFwZSA6IG51bGwpKTtcbiAgICAgICAgICAgIHZhciB2ZXJ0ZXhDb3VudCA9IHBhcnNlSW50KHBvbHkuR2V0VmVydGV4Q291bnQoKSk7XG4gICAgICAgICAgICB2YXIgbG9jYWxWZXJ0aWNlcyA9IHBvbHkuR2V0VmVydGljZXMoKTtcbiAgICAgICAgICAgIHZhciB2ZXJ0aWNlcyA9IG5ldyBWZWN0b3IodmVydGV4Q291bnQpO1xuICAgICAgICAgICAgZm9yIChpID0gMDtcbiAgICAgICAgICAgIGkgPCB2ZXJ0ZXhDb3VudDsgKytpKSB7XG4gICAgICAgICAgICAgICB2ZXJ0aWNlc1tpXSA9IGIyTWF0aC5NdWxYKHhmLCBsb2NhbFZlcnRpY2VzW2ldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMubV9kZWJ1Z0RyYXcuRHJhd1NvbGlkUG9seWdvbih2ZXJ0aWNlcywgdmVydGV4Q291bnQsIGNvbG9yKTtcbiAgICAgICAgIH1cbiAgICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBiMlNoYXBlLmVfZWRnZVNoYXBlOlxuICAgICAgICAge1xuICAgICAgICAgICAgdmFyIGVkZ2UgPSAoc2hhcGUgaW5zdGFuY2VvZiBiMkVkZ2VTaGFwZSA/IHNoYXBlIDogbnVsbCk7XG4gICAgICAgICAgICB0aGlzLm1fZGVidWdEcmF3LkRyYXdTZWdtZW50KGIyTWF0aC5NdWxYKHhmLCBlZGdlLkdldFZlcnRleDEoKSksIGIyTWF0aC5NdWxYKHhmLCBlZGdlLkdldFZlcnRleDIoKSksIGNvbG9yKTtcbiAgICAgICAgIH1cbiAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgfVxuICAgQm94MkQucG9zdERlZnMucHVzaChmdW5jdGlvbiAoKSB7XG4gICAgICBCb3gyRC5EeW5hbWljcy5iMldvcmxkLnNfdGltZXN0ZXAyID0gbmV3IGIyVGltZVN0ZXAoKTtcbiAgICAgIEJveDJELkR5bmFtaWNzLmIyV29ybGQuc194ZiA9IG5ldyBiMlRyYW5zZm9ybSgpO1xuICAgICAgQm94MkQuRHluYW1pY3MuYjJXb3JsZC5zX2JhY2t1cEEgPSBuZXcgYjJTd2VlcCgpO1xuICAgICAgQm94MkQuRHluYW1pY3MuYjJXb3JsZC5zX2JhY2t1cEIgPSBuZXcgYjJTd2VlcCgpO1xuICAgICAgQm94MkQuRHluYW1pY3MuYjJXb3JsZC5zX3RpbWVzdGVwID0gbmV3IGIyVGltZVN0ZXAoKTtcbiAgICAgIEJveDJELkR5bmFtaWNzLmIyV29ybGQuc19xdWV1ZSA9IG5ldyBWZWN0b3IoKTtcbiAgICAgIEJveDJELkR5bmFtaWNzLmIyV29ybGQuc19qb2ludENvbG9yID0gbmV3IGIyQ29sb3IoMC41LCAwLjgsIDAuOCk7XG4gICAgICBCb3gyRC5EeW5hbWljcy5iMldvcmxkLmVfbmV3Rml4dHVyZSA9IDB4MDAwMTtcbiAgICAgIEJveDJELkR5bmFtaWNzLmIyV29ybGQuZV9sb2NrZWQgPSAweDAwMDI7XG4gICB9KTtcbn0pKCk7XG4oZnVuY3Rpb24gKCkge1xuICAgdmFyIGIyQ2lyY2xlU2hhcGUgPSBCb3gyRC5Db2xsaXNpb24uU2hhcGVzLmIyQ2lyY2xlU2hhcGUsXG4gICAgICBiMkVkZ2VDaGFpbkRlZiA9IEJveDJELkNvbGxpc2lvbi5TaGFwZXMuYjJFZGdlQ2hhaW5EZWYsXG4gICAgICBiMkVkZ2VTaGFwZSA9IEJveDJELkNvbGxpc2lvbi5TaGFwZXMuYjJFZGdlU2hhcGUsXG4gICAgICBiMk1hc3NEYXRhID0gQm94MkQuQ29sbGlzaW9uLlNoYXBlcy5iMk1hc3NEYXRhLFxuICAgICAgYjJQb2x5Z29uU2hhcGUgPSBCb3gyRC5Db2xsaXNpb24uU2hhcGVzLmIyUG9seWdvblNoYXBlLFxuICAgICAgYjJTaGFwZSA9IEJveDJELkNvbGxpc2lvbi5TaGFwZXMuYjJTaGFwZSxcbiAgICAgIGIyQ2lyY2xlQ29udGFjdCA9IEJveDJELkR5bmFtaWNzLkNvbnRhY3RzLmIyQ2lyY2xlQ29udGFjdCxcbiAgICAgIGIyQ29udGFjdCA9IEJveDJELkR5bmFtaWNzLkNvbnRhY3RzLmIyQ29udGFjdCxcbiAgICAgIGIyQ29udGFjdENvbnN0cmFpbnQgPSBCb3gyRC5EeW5hbWljcy5Db250YWN0cy5iMkNvbnRhY3RDb25zdHJhaW50LFxuICAgICAgYjJDb250YWN0Q29uc3RyYWludFBvaW50ID0gQm94MkQuRHluYW1pY3MuQ29udGFjdHMuYjJDb250YWN0Q29uc3RyYWludFBvaW50LFxuICAgICAgYjJDb250YWN0RWRnZSA9IEJveDJELkR5bmFtaWNzLkNvbnRhY3RzLmIyQ29udGFjdEVkZ2UsXG4gICAgICBiMkNvbnRhY3RGYWN0b3J5ID0gQm94MkQuRHluYW1pY3MuQ29udGFjdHMuYjJDb250YWN0RmFjdG9yeSxcbiAgICAgIGIyQ29udGFjdFJlZ2lzdGVyID0gQm94MkQuRHluYW1pY3MuQ29udGFjdHMuYjJDb250YWN0UmVnaXN0ZXIsXG4gICAgICBiMkNvbnRhY3RSZXN1bHQgPSBCb3gyRC5EeW5hbWljcy5Db250YWN0cy5iMkNvbnRhY3RSZXN1bHQsXG4gICAgICBiMkNvbnRhY3RTb2x2ZXIgPSBCb3gyRC5EeW5hbWljcy5Db250YWN0cy5iMkNvbnRhY3RTb2x2ZXIsXG4gICAgICBiMkVkZ2VBbmRDaXJjbGVDb250YWN0ID0gQm94MkQuRHluYW1pY3MuQ29udGFjdHMuYjJFZGdlQW5kQ2lyY2xlQ29udGFjdCxcbiAgICAgIGIyTnVsbENvbnRhY3QgPSBCb3gyRC5EeW5hbWljcy5Db250YWN0cy5iMk51bGxDb250YWN0LFxuICAgICAgYjJQb2x5QW5kQ2lyY2xlQ29udGFjdCA9IEJveDJELkR5bmFtaWNzLkNvbnRhY3RzLmIyUG9seUFuZENpcmNsZUNvbnRhY3QsXG4gICAgICBiMlBvbHlBbmRFZGdlQ29udGFjdCA9IEJveDJELkR5bmFtaWNzLkNvbnRhY3RzLmIyUG9seUFuZEVkZ2VDb250YWN0LFxuICAgICAgYjJQb2x5Z29uQ29udGFjdCA9IEJveDJELkR5bmFtaWNzLkNvbnRhY3RzLmIyUG9seWdvbkNvbnRhY3QsXG4gICAgICBiMlBvc2l0aW9uU29sdmVyTWFuaWZvbGQgPSBCb3gyRC5EeW5hbWljcy5Db250YWN0cy5iMlBvc2l0aW9uU29sdmVyTWFuaWZvbGQsXG4gICAgICBiMkJvZHkgPSBCb3gyRC5EeW5hbWljcy5iMkJvZHksXG4gICAgICBiMkJvZHlEZWYgPSBCb3gyRC5EeW5hbWljcy5iMkJvZHlEZWYsXG4gICAgICBiMkNvbnRhY3RGaWx0ZXIgPSBCb3gyRC5EeW5hbWljcy5iMkNvbnRhY3RGaWx0ZXIsXG4gICAgICBiMkNvbnRhY3RJbXB1bHNlID0gQm94MkQuRHluYW1pY3MuYjJDb250YWN0SW1wdWxzZSxcbiAgICAgIGIyQ29udGFjdExpc3RlbmVyID0gQm94MkQuRHluYW1pY3MuYjJDb250YWN0TGlzdGVuZXIsXG4gICAgICBiMkNvbnRhY3RNYW5hZ2VyID0gQm94MkQuRHluYW1pY3MuYjJDb250YWN0TWFuYWdlcixcbiAgICAgIGIyRGVidWdEcmF3ID0gQm94MkQuRHluYW1pY3MuYjJEZWJ1Z0RyYXcsXG4gICAgICBiMkRlc3RydWN0aW9uTGlzdGVuZXIgPSBCb3gyRC5EeW5hbWljcy5iMkRlc3RydWN0aW9uTGlzdGVuZXIsXG4gICAgICBiMkZpbHRlckRhdGEgPSBCb3gyRC5EeW5hbWljcy5iMkZpbHRlckRhdGEsXG4gICAgICBiMkZpeHR1cmUgPSBCb3gyRC5EeW5hbWljcy5iMkZpeHR1cmUsXG4gICAgICBiMkZpeHR1cmVEZWYgPSBCb3gyRC5EeW5hbWljcy5iMkZpeHR1cmVEZWYsXG4gICAgICBiMklzbGFuZCA9IEJveDJELkR5bmFtaWNzLmIySXNsYW5kLFxuICAgICAgYjJUaW1lU3RlcCA9IEJveDJELkR5bmFtaWNzLmIyVGltZVN0ZXAsXG4gICAgICBiMldvcmxkID0gQm94MkQuRHluYW1pY3MuYjJXb3JsZCxcbiAgICAgIGIyQ29sb3IgPSBCb3gyRC5Db21tb24uYjJDb2xvcixcbiAgICAgIGIyaW50ZXJuYWwgPSBCb3gyRC5Db21tb24uYjJpbnRlcm5hbCxcbiAgICAgIGIyU2V0dGluZ3MgPSBCb3gyRC5Db21tb24uYjJTZXR0aW5ncyxcbiAgICAgIGIyTWF0MjIgPSBCb3gyRC5Db21tb24uTWF0aC5iMk1hdDIyLFxuICAgICAgYjJNYXQzMyA9IEJveDJELkNvbW1vbi5NYXRoLmIyTWF0MzMsXG4gICAgICBiMk1hdGggPSBCb3gyRC5Db21tb24uTWF0aC5iMk1hdGgsXG4gICAgICBiMlN3ZWVwID0gQm94MkQuQ29tbW9uLk1hdGguYjJTd2VlcCxcbiAgICAgIGIyVHJhbnNmb3JtID0gQm94MkQuQ29tbW9uLk1hdGguYjJUcmFuc2Zvcm0sXG4gICAgICBiMlZlYzIgPSBCb3gyRC5Db21tb24uTWF0aC5iMlZlYzIsXG4gICAgICBiMlZlYzMgPSBCb3gyRC5Db21tb24uTWF0aC5iMlZlYzMsXG4gICAgICBiMkFBQkIgPSBCb3gyRC5Db2xsaXNpb24uYjJBQUJCLFxuICAgICAgYjJCb3VuZCA9IEJveDJELkNvbGxpc2lvbi5iMkJvdW5kLFxuICAgICAgYjJCb3VuZFZhbHVlcyA9IEJveDJELkNvbGxpc2lvbi5iMkJvdW5kVmFsdWVzLFxuICAgICAgYjJDb2xsaXNpb24gPSBCb3gyRC5Db2xsaXNpb24uYjJDb2xsaXNpb24sXG4gICAgICBiMkNvbnRhY3RJRCA9IEJveDJELkNvbGxpc2lvbi5iMkNvbnRhY3RJRCxcbiAgICAgIGIyQ29udGFjdFBvaW50ID0gQm94MkQuQ29sbGlzaW9uLmIyQ29udGFjdFBvaW50LFxuICAgICAgYjJEaXN0YW5jZSA9IEJveDJELkNvbGxpc2lvbi5iMkRpc3RhbmNlLFxuICAgICAgYjJEaXN0YW5jZUlucHV0ID0gQm94MkQuQ29sbGlzaW9uLmIyRGlzdGFuY2VJbnB1dCxcbiAgICAgIGIyRGlzdGFuY2VPdXRwdXQgPSBCb3gyRC5Db2xsaXNpb24uYjJEaXN0YW5jZU91dHB1dCxcbiAgICAgIGIyRGlzdGFuY2VQcm94eSA9IEJveDJELkNvbGxpc2lvbi5iMkRpc3RhbmNlUHJveHksXG4gICAgICBiMkR5bmFtaWNUcmVlID0gQm94MkQuQ29sbGlzaW9uLmIyRHluYW1pY1RyZWUsXG4gICAgICBiMkR5bmFtaWNUcmVlQnJvYWRQaGFzZSA9IEJveDJELkNvbGxpc2lvbi5iMkR5bmFtaWNUcmVlQnJvYWRQaGFzZSxcbiAgICAgIGIyRHluYW1pY1RyZWVOb2RlID0gQm94MkQuQ29sbGlzaW9uLmIyRHluYW1pY1RyZWVOb2RlLFxuICAgICAgYjJEeW5hbWljVHJlZVBhaXIgPSBCb3gyRC5Db2xsaXNpb24uYjJEeW5hbWljVHJlZVBhaXIsXG4gICAgICBiMk1hbmlmb2xkID0gQm94MkQuQ29sbGlzaW9uLmIyTWFuaWZvbGQsXG4gICAgICBiMk1hbmlmb2xkUG9pbnQgPSBCb3gyRC5Db2xsaXNpb24uYjJNYW5pZm9sZFBvaW50LFxuICAgICAgYjJQb2ludCA9IEJveDJELkNvbGxpc2lvbi5iMlBvaW50LFxuICAgICAgYjJSYXlDYXN0SW5wdXQgPSBCb3gyRC5Db2xsaXNpb24uYjJSYXlDYXN0SW5wdXQsXG4gICAgICBiMlJheUNhc3RPdXRwdXQgPSBCb3gyRC5Db2xsaXNpb24uYjJSYXlDYXN0T3V0cHV0LFxuICAgICAgYjJTZWdtZW50ID0gQm94MkQuQ29sbGlzaW9uLmIyU2VnbWVudCxcbiAgICAgIGIyU2VwYXJhdGlvbkZ1bmN0aW9uID0gQm94MkQuQ29sbGlzaW9uLmIyU2VwYXJhdGlvbkZ1bmN0aW9uLFxuICAgICAgYjJTaW1wbGV4ID0gQm94MkQuQ29sbGlzaW9uLmIyU2ltcGxleCxcbiAgICAgIGIyU2ltcGxleENhY2hlID0gQm94MkQuQ29sbGlzaW9uLmIyU2ltcGxleENhY2hlLFxuICAgICAgYjJTaW1wbGV4VmVydGV4ID0gQm94MkQuQ29sbGlzaW9uLmIyU2ltcGxleFZlcnRleCxcbiAgICAgIGIyVGltZU9mSW1wYWN0ID0gQm94MkQuQ29sbGlzaW9uLmIyVGltZU9mSW1wYWN0LFxuICAgICAgYjJUT0lJbnB1dCA9IEJveDJELkNvbGxpc2lvbi5iMlRPSUlucHV0LFxuICAgICAgYjJXb3JsZE1hbmlmb2xkID0gQm94MkQuQ29sbGlzaW9uLmIyV29ybGRNYW5pZm9sZCxcbiAgICAgIENsaXBWZXJ0ZXggPSBCb3gyRC5Db2xsaXNpb24uQ2xpcFZlcnRleCxcbiAgICAgIEZlYXR1cmVzID0gQm94MkQuQ29sbGlzaW9uLkZlYXR1cmVzLFxuICAgICAgSUJyb2FkUGhhc2UgPSBCb3gyRC5Db2xsaXNpb24uSUJyb2FkUGhhc2U7XG5cbiAgIEJveDJELmluaGVyaXQoYjJDaXJjbGVDb250YWN0LCBCb3gyRC5EeW5hbWljcy5Db250YWN0cy5iMkNvbnRhY3QpO1xuICAgYjJDaXJjbGVDb250YWN0LnByb3RvdHlwZS5fX3N1cGVyID0gQm94MkQuRHluYW1pY3MuQ29udGFjdHMuYjJDb250YWN0LnByb3RvdHlwZTtcbiAgIGIyQ2lyY2xlQ29udGFjdC5iMkNpcmNsZUNvbnRhY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBCb3gyRC5EeW5hbWljcy5Db250YWN0cy5iMkNvbnRhY3QuYjJDb250YWN0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICB9O1xuICAgYjJDaXJjbGVDb250YWN0LkNyZWF0ZSA9IGZ1bmN0aW9uIChhbGxvY2F0b3IpIHtcbiAgICAgIHJldHVybiBuZXcgYjJDaXJjbGVDb250YWN0KCk7XG4gICB9XG4gICBiMkNpcmNsZUNvbnRhY3QuRGVzdHJveSA9IGZ1bmN0aW9uIChjb250YWN0LCBhbGxvY2F0b3IpIHt9XG4gICBiMkNpcmNsZUNvbnRhY3QucHJvdG90eXBlLlJlc2V0ID0gZnVuY3Rpb24gKGZpeHR1cmVBLCBmaXh0dXJlQikge1xuICAgICAgdGhpcy5fX3N1cGVyLlJlc2V0LmNhbGwodGhpcywgZml4dHVyZUEsIGZpeHR1cmVCKTtcbiAgIH1cbiAgIGIyQ2lyY2xlQ29udGFjdC5wcm90b3R5cGUuRXZhbHVhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgYkEgPSB0aGlzLm1fZml4dHVyZUEuR2V0Qm9keSgpO1xuICAgICAgdmFyIGJCID0gdGhpcy5tX2ZpeHR1cmVCLkdldEJvZHkoKTtcbiAgICAgIGIyQ29sbGlzaW9uLkNvbGxpZGVDaXJjbGVzKHRoaXMubV9tYW5pZm9sZCwgKHRoaXMubV9maXh0dXJlQS5HZXRTaGFwZSgpIGluc3RhbmNlb2YgYjJDaXJjbGVTaGFwZSA/IHRoaXMubV9maXh0dXJlQS5HZXRTaGFwZSgpIDogbnVsbCksIGJBLm1feGYsICh0aGlzLm1fZml4dHVyZUIuR2V0U2hhcGUoKSBpbnN0YW5jZW9mIGIyQ2lyY2xlU2hhcGUgPyB0aGlzLm1fZml4dHVyZUIuR2V0U2hhcGUoKSA6IG51bGwpLCBiQi5tX3hmKTtcbiAgIH1cbiAgIGIyQ29udGFjdC5iMkNvbnRhY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLm1fbm9kZUEgPSBuZXcgYjJDb250YWN0RWRnZSgpO1xuICAgICAgdGhpcy5tX25vZGVCID0gbmV3IGIyQ29udGFjdEVkZ2UoKTtcbiAgICAgIHRoaXMubV9tYW5pZm9sZCA9IG5ldyBiMk1hbmlmb2xkKCk7XG4gICAgICB0aGlzLm1fb2xkTWFuaWZvbGQgPSBuZXcgYjJNYW5pZm9sZCgpO1xuICAgfTtcbiAgIGIyQ29udGFjdC5wcm90b3R5cGUuR2V0TWFuaWZvbGQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5tX21hbmlmb2xkO1xuICAgfVxuICAgYjJDb250YWN0LnByb3RvdHlwZS5HZXRXb3JsZE1hbmlmb2xkID0gZnVuY3Rpb24gKHdvcmxkTWFuaWZvbGQpIHtcbiAgICAgIHZhciBib2R5QSA9IHRoaXMubV9maXh0dXJlQS5HZXRCb2R5KCk7XG4gICAgICB2YXIgYm9keUIgPSB0aGlzLm1fZml4dHVyZUIuR2V0Qm9keSgpO1xuICAgICAgdmFyIHNoYXBlQSA9IHRoaXMubV9maXh0dXJlQS5HZXRTaGFwZSgpO1xuICAgICAgdmFyIHNoYXBlQiA9IHRoaXMubV9maXh0dXJlQi5HZXRTaGFwZSgpO1xuICAgICAgd29ybGRNYW5pZm9sZC5Jbml0aWFsaXplKHRoaXMubV9tYW5pZm9sZCwgYm9keUEuR2V0VHJhbnNmb3JtKCksIHNoYXBlQS5tX3JhZGl1cywgYm9keUIuR2V0VHJhbnNmb3JtKCksIHNoYXBlQi5tX3JhZGl1cyk7XG4gICB9XG4gICBiMkNvbnRhY3QucHJvdG90eXBlLklzVG91Y2hpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gKHRoaXMubV9mbGFncyAmIGIyQ29udGFjdC5lX3RvdWNoaW5nRmxhZykgPT0gYjJDb250YWN0LmVfdG91Y2hpbmdGbGFnO1xuICAgfVxuICAgYjJDb250YWN0LnByb3RvdHlwZS5Jc0NvbnRpbnVvdXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gKHRoaXMubV9mbGFncyAmIGIyQ29udGFjdC5lX2NvbnRpbnVvdXNGbGFnKSA9PSBiMkNvbnRhY3QuZV9jb250aW51b3VzRmxhZztcbiAgIH1cbiAgIGIyQ29udGFjdC5wcm90b3R5cGUuU2V0U2Vuc29yID0gZnVuY3Rpb24gKHNlbnNvcikge1xuICAgICAgaWYgKHNlbnNvcikge1xuICAgICAgICAgdGhpcy5tX2ZsYWdzIHw9IGIyQ29udGFjdC5lX3NlbnNvckZsYWc7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgIHRoaXMubV9mbGFncyAmPSB+YjJDb250YWN0LmVfc2Vuc29yRmxhZztcbiAgICAgIH1cbiAgIH1cbiAgIGIyQ29udGFjdC5wcm90b3R5cGUuSXNTZW5zb3IgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gKHRoaXMubV9mbGFncyAmIGIyQ29udGFjdC5lX3NlbnNvckZsYWcpID09IGIyQ29udGFjdC5lX3NlbnNvckZsYWc7XG4gICB9XG4gICBiMkNvbnRhY3QucHJvdG90eXBlLlNldEVuYWJsZWQgPSBmdW5jdGlvbiAoZmxhZykge1xuICAgICAgaWYgKGZsYWcpIHtcbiAgICAgICAgIHRoaXMubV9mbGFncyB8PSBiMkNvbnRhY3QuZV9lbmFibGVkRmxhZztcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICAgdGhpcy5tX2ZsYWdzICY9IH5iMkNvbnRhY3QuZV9lbmFibGVkRmxhZztcbiAgICAgIH1cbiAgIH1cbiAgIGIyQ29udGFjdC5wcm90b3R5cGUuSXNFbmFibGVkID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuICh0aGlzLm1fZmxhZ3MgJiBiMkNvbnRhY3QuZV9lbmFibGVkRmxhZykgPT0gYjJDb250YWN0LmVfZW5hYmxlZEZsYWc7XG4gICB9XG4gICBiMkNvbnRhY3QucHJvdG90eXBlLkdldE5leHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5tX25leHQ7XG4gICB9XG4gICBiMkNvbnRhY3QucHJvdG90eXBlLkdldEZpeHR1cmVBID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMubV9maXh0dXJlQTtcbiAgIH1cbiAgIGIyQ29udGFjdC5wcm90b3R5cGUuR2V0Rml4dHVyZUIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5tX2ZpeHR1cmVCO1xuICAgfVxuICAgYjJDb250YWN0LnByb3RvdHlwZS5GbGFnRm9yRmlsdGVyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcy5tX2ZsYWdzIHw9IGIyQ29udGFjdC5lX2ZpbHRlckZsYWc7XG4gICB9XG4gICBiMkNvbnRhY3QucHJvdG90eXBlLmIyQ29udGFjdCA9IGZ1bmN0aW9uICgpIHt9XG4gICBiMkNvbnRhY3QucHJvdG90eXBlLlJlc2V0ID0gZnVuY3Rpb24gKGZpeHR1cmVBLCBmaXh0dXJlQikge1xuICAgICAgaWYgKGZpeHR1cmVBID09PSB1bmRlZmluZWQpIGZpeHR1cmVBID0gbnVsbDtcbiAgICAgIGlmIChmaXh0dXJlQiA9PT0gdW5kZWZpbmVkKSBmaXh0dXJlQiA9IG51bGw7XG4gICAgICB0aGlzLm1fZmxhZ3MgPSBiMkNvbnRhY3QuZV9lbmFibGVkRmxhZztcbiAgICAgIGlmICghZml4dHVyZUEgfHwgIWZpeHR1cmVCKSB7XG4gICAgICAgICB0aGlzLm1fZml4dHVyZUEgPSBudWxsO1xuICAgICAgICAgdGhpcy5tX2ZpeHR1cmVCID0gbnVsbDtcbiAgICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChmaXh0dXJlQS5Jc1NlbnNvcigpIHx8IGZpeHR1cmVCLklzU2Vuc29yKCkpIHtcbiAgICAgICAgIHRoaXMubV9mbGFncyB8PSBiMkNvbnRhY3QuZV9zZW5zb3JGbGFnO1xuICAgICAgfVxuICAgICAgdmFyIGJvZHlBID0gZml4dHVyZUEuR2V0Qm9keSgpO1xuICAgICAgdmFyIGJvZHlCID0gZml4dHVyZUIuR2V0Qm9keSgpO1xuICAgICAgaWYgKGJvZHlBLkdldFR5cGUoKSAhPSBiMkJvZHkuYjJfZHluYW1pY0JvZHkgfHwgYm9keUEuSXNCdWxsZXQoKSB8fCBib2R5Qi5HZXRUeXBlKCkgIT0gYjJCb2R5LmIyX2R5bmFtaWNCb2R5IHx8IGJvZHlCLklzQnVsbGV0KCkpIHtcbiAgICAgICAgIHRoaXMubV9mbGFncyB8PSBiMkNvbnRhY3QuZV9jb250aW51b3VzRmxhZztcbiAgICAgIH1cbiAgICAgIHRoaXMubV9maXh0dXJlQSA9IGZpeHR1cmVBO1xuICAgICAgdGhpcy5tX2ZpeHR1cmVCID0gZml4dHVyZUI7XG4gICAgICB0aGlzLm1fbWFuaWZvbGQubV9wb2ludENvdW50ID0gMDtcbiAgICAgIHRoaXMubV9wcmV2ID0gbnVsbDtcbiAgICAgIHRoaXMubV9uZXh0ID0gbnVsbDtcbiAgICAgIHRoaXMubV9ub2RlQS5jb250YWN0ID0gbnVsbDtcbiAgICAgIHRoaXMubV9ub2RlQS5wcmV2ID0gbnVsbDtcbiAgICAgIHRoaXMubV9ub2RlQS5uZXh0ID0gbnVsbDtcbiAgICAgIHRoaXMubV9ub2RlQS5vdGhlciA9IG51bGw7XG4gICAgICB0aGlzLm1fbm9kZUIuY29udGFjdCA9IG51bGw7XG4gICAgICB0aGlzLm1fbm9kZUIucHJldiA9IG51bGw7XG4gICAgICB0aGlzLm1fbm9kZUIubmV4dCA9IG51bGw7XG4gICAgICB0aGlzLm1fbm9kZUIub3RoZXIgPSBudWxsO1xuICAgfVxuICAgYjJDb250YWN0LnByb3RvdHlwZS5VcGRhdGUgPSBmdW5jdGlvbiAobGlzdGVuZXIpIHtcbiAgICAgIHZhciB0TWFuaWZvbGQgPSB0aGlzLm1fb2xkTWFuaWZvbGQ7XG4gICAgICB0aGlzLm1fb2xkTWFuaWZvbGQgPSB0aGlzLm1fbWFuaWZvbGQ7XG4gICAgICB0aGlzLm1fbWFuaWZvbGQgPSB0TWFuaWZvbGQ7XG4gICAgICB0aGlzLm1fZmxhZ3MgfD0gYjJDb250YWN0LmVfZW5hYmxlZEZsYWc7XG4gICAgICB2YXIgdG91Y2hpbmcgPSBmYWxzZTtcbiAgICAgIHZhciB3YXNUb3VjaGluZyA9ICh0aGlzLm1fZmxhZ3MgJiBiMkNvbnRhY3QuZV90b3VjaGluZ0ZsYWcpID09IGIyQ29udGFjdC5lX3RvdWNoaW5nRmxhZztcbiAgICAgIHZhciBib2R5QSA9IHRoaXMubV9maXh0dXJlQS5tX2JvZHk7XG4gICAgICB2YXIgYm9keUIgPSB0aGlzLm1fZml4dHVyZUIubV9ib2R5O1xuICAgICAgdmFyIGFhYmJPdmVybGFwID0gdGhpcy5tX2ZpeHR1cmVBLm1fYWFiYi5UZXN0T3ZlcmxhcCh0aGlzLm1fZml4dHVyZUIubV9hYWJiKTtcbiAgICAgIGlmICh0aGlzLm1fZmxhZ3MgJiBiMkNvbnRhY3QuZV9zZW5zb3JGbGFnKSB7XG4gICAgICAgICBpZiAoYWFiYk92ZXJsYXApIHtcbiAgICAgICAgICAgIHZhciBzaGFwZUEgPSB0aGlzLm1fZml4dHVyZUEuR2V0U2hhcGUoKTtcbiAgICAgICAgICAgIHZhciBzaGFwZUIgPSB0aGlzLm1fZml4dHVyZUIuR2V0U2hhcGUoKTtcbiAgICAgICAgICAgIHZhciB4ZkEgPSBib2R5QS5HZXRUcmFuc2Zvcm0oKTtcbiAgICAgICAgICAgIHZhciB4ZkIgPSBib2R5Qi5HZXRUcmFuc2Zvcm0oKTtcbiAgICAgICAgICAgIHRvdWNoaW5nID0gYjJTaGFwZS5UZXN0T3ZlcmxhcChzaGFwZUEsIHhmQSwgc2hhcGVCLCB4ZkIpO1xuICAgICAgICAgfVxuICAgICAgICAgdGhpcy5tX21hbmlmb2xkLm1fcG9pbnRDb3VudCA9IDA7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgIGlmIChib2R5QS5HZXRUeXBlKCkgIT0gYjJCb2R5LmIyX2R5bmFtaWNCb2R5IHx8IGJvZHlBLklzQnVsbGV0KCkgfHwgYm9keUIuR2V0VHlwZSgpICE9IGIyQm9keS5iMl9keW5hbWljQm9keSB8fCBib2R5Qi5Jc0J1bGxldCgpKSB7XG4gICAgICAgICAgICB0aGlzLm1fZmxhZ3MgfD0gYjJDb250YWN0LmVfY29udGludW91c0ZsYWc7XG4gICAgICAgICB9XG4gICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMubV9mbGFncyAmPSB+YjJDb250YWN0LmVfY29udGludW91c0ZsYWc7XG4gICAgICAgICB9XG4gICAgICAgICBpZiAoYWFiYk92ZXJsYXApIHtcbiAgICAgICAgICAgIHRoaXMuRXZhbHVhdGUoKTtcbiAgICAgICAgICAgIHRvdWNoaW5nID0gdGhpcy5tX21hbmlmb2xkLm1fcG9pbnRDb3VudCA+IDA7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubV9tYW5pZm9sZC5tX3BvaW50Q291bnQ7ICsraSkge1xuICAgICAgICAgICAgICAgdmFyIG1wMiA9IHRoaXMubV9tYW5pZm9sZC5tX3BvaW50c1tpXTtcbiAgICAgICAgICAgICAgIG1wMi5tX25vcm1hbEltcHVsc2UgPSAwLjA7XG4gICAgICAgICAgICAgICBtcDIubV90YW5nZW50SW1wdWxzZSA9IDAuMDtcbiAgICAgICAgICAgICAgIHZhciBpZDIgPSBtcDIubV9pZDtcbiAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdGhpcy5tX29sZE1hbmlmb2xkLm1fcG9pbnRDb3VudDsgKytqKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgbXAxID0gdGhpcy5tX29sZE1hbmlmb2xkLm1fcG9pbnRzW2pdO1xuICAgICAgICAgICAgICAgICAgaWYgKG1wMS5tX2lkLmtleSA9PSBpZDIua2V5KSB7XG4gICAgICAgICAgICAgICAgICAgICBtcDIubV9ub3JtYWxJbXB1bHNlID0gbXAxLm1fbm9ybWFsSW1wdWxzZTtcbiAgICAgICAgICAgICAgICAgICAgIG1wMi5tX3RhbmdlbnRJbXB1bHNlID0gbXAxLm1fdGFuZ2VudEltcHVsc2U7XG4gICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgIH1cbiAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5tX21hbmlmb2xkLm1fcG9pbnRDb3VudCA9IDA7XG4gICAgICAgICB9XG4gICAgICAgICBpZiAodG91Y2hpbmcgIT0gd2FzVG91Y2hpbmcpIHtcbiAgICAgICAgICAgIGJvZHlBLlNldEF3YWtlKHRydWUpO1xuICAgICAgICAgICAgYm9keUIuU2V0QXdha2UodHJ1ZSk7XG4gICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAodG91Y2hpbmcpIHtcbiAgICAgICAgIHRoaXMubV9mbGFncyB8PSBiMkNvbnRhY3QuZV90b3VjaGluZ0ZsYWc7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgIHRoaXMubV9mbGFncyAmPSB+YjJDb250YWN0LmVfdG91Y2hpbmdGbGFnO1xuICAgICAgfVxuICAgICAgaWYgKHdhc1RvdWNoaW5nID09IGZhbHNlICYmIHRvdWNoaW5nID09IHRydWUpIHtcbiAgICAgICAgIGxpc3RlbmVyLkJlZ2luQ29udGFjdCh0aGlzKTtcbiAgICAgIH1cbiAgICAgIGlmICh3YXNUb3VjaGluZyA9PSB0cnVlICYmIHRvdWNoaW5nID09IGZhbHNlKSB7XG4gICAgICAgICBsaXN0ZW5lci5FbmRDb250YWN0KHRoaXMpO1xuICAgICAgfVxuICAgICAgaWYgKCh0aGlzLm1fZmxhZ3MgJiBiMkNvbnRhY3QuZV9zZW5zb3JGbGFnKSA9PSAwKSB7XG4gICAgICAgICBsaXN0ZW5lci5QcmVTb2x2ZSh0aGlzLCB0aGlzLm1fb2xkTWFuaWZvbGQpO1xuICAgICAgfVxuICAgfVxuICAgYjJDb250YWN0LnByb3RvdHlwZS5FdmFsdWF0ZSA9IGZ1bmN0aW9uICgpIHt9XG4gICBiMkNvbnRhY3QucHJvdG90eXBlLkNvbXB1dGVUT0kgPSBmdW5jdGlvbiAoc3dlZXBBLCBzd2VlcEIpIHtcbiAgICAgIGIyQ29udGFjdC5zX2lucHV0LnByb3h5QS5TZXQodGhpcy5tX2ZpeHR1cmVBLkdldFNoYXBlKCkpO1xuICAgICAgYjJDb250YWN0LnNfaW5wdXQucHJveHlCLlNldCh0aGlzLm1fZml4dHVyZUIuR2V0U2hhcGUoKSk7XG4gICAgICBiMkNvbnRhY3Quc19pbnB1dC5zd2VlcEEgPSBzd2VlcEE7XG4gICAgICBiMkNvbnRhY3Quc19pbnB1dC5zd2VlcEIgPSBzd2VlcEI7XG4gICAgICBiMkNvbnRhY3Quc19pbnB1dC50b2xlcmFuY2UgPSBiMlNldHRpbmdzLmIyX2xpbmVhclNsb3A7XG4gICAgICByZXR1cm4gYjJUaW1lT2ZJbXBhY3QuVGltZU9mSW1wYWN0KGIyQ29udGFjdC5zX2lucHV0KTtcbiAgIH1cbiAgIEJveDJELnBvc3REZWZzLnB1c2goZnVuY3Rpb24gKCkge1xuICAgICAgQm94MkQuRHluYW1pY3MuQ29udGFjdHMuYjJDb250YWN0LmVfc2Vuc29yRmxhZyA9IDB4MDAwMTtcbiAgICAgIEJveDJELkR5bmFtaWNzLkNvbnRhY3RzLmIyQ29udGFjdC5lX2NvbnRpbnVvdXNGbGFnID0gMHgwMDAyO1xuICAgICAgQm94MkQuRHluYW1pY3MuQ29udGFjdHMuYjJDb250YWN0LmVfaXNsYW5kRmxhZyA9IDB4MDAwNDtcbiAgICAgIEJveDJELkR5bmFtaWNzLkNvbnRhY3RzLmIyQ29udGFjdC5lX3RvaUZsYWcgPSAweDAwMDg7XG4gICAgICBCb3gyRC5EeW5hbWljcy5Db250YWN0cy5iMkNvbnRhY3QuZV90b3VjaGluZ0ZsYWcgPSAweDAwMTA7XG4gICAgICBCb3gyRC5EeW5hbWljcy5Db250YWN0cy5iMkNvbnRhY3QuZV9lbmFibGVkRmxhZyA9IDB4MDAyMDtcbiAgICAgIEJveDJELkR5bmFtaWNzLkNvbnRhY3RzLmIyQ29udGFjdC5lX2ZpbHRlckZsYWcgPSAweDAwNDA7XG4gICAgICBCb3gyRC5EeW5hbWljcy5Db250YWN0cy5iMkNvbnRhY3Quc19pbnB1dCA9IG5ldyBiMlRPSUlucHV0KCk7XG4gICB9KTtcbiAgIGIyQ29udGFjdENvbnN0cmFpbnQuYjJDb250YWN0Q29uc3RyYWludCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMubG9jYWxQbGFuZU5vcm1hbCA9IG5ldyBiMlZlYzIoKTtcbiAgICAgIHRoaXMubG9jYWxQb2ludCA9IG5ldyBiMlZlYzIoKTtcbiAgICAgIHRoaXMubm9ybWFsID0gbmV3IGIyVmVjMigpO1xuICAgICAgdGhpcy5ub3JtYWxNYXNzID0gbmV3IGIyTWF0MjIoKTtcbiAgICAgIHRoaXMuSyA9IG5ldyBiMk1hdDIyKCk7XG4gICB9O1xuICAgYjJDb250YWN0Q29uc3RyYWludC5wcm90b3R5cGUuYjJDb250YWN0Q29uc3RyYWludCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMucG9pbnRzID0gbmV3IFZlY3RvcihiMlNldHRpbmdzLmIyX21heE1hbmlmb2xkUG9pbnRzKTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYjJTZXR0aW5ncy5iMl9tYXhNYW5pZm9sZFBvaW50czsgaSsrKSB7XG4gICAgICAgICB0aGlzLnBvaW50c1tpXSA9IG5ldyBiMkNvbnRhY3RDb25zdHJhaW50UG9pbnQoKTtcbiAgICAgIH1cbiAgIH1cbiAgIGIyQ29udGFjdENvbnN0cmFpbnRQb2ludC5iMkNvbnRhY3RDb25zdHJhaW50UG9pbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLmxvY2FsUG9pbnQgPSBuZXcgYjJWZWMyKCk7XG4gICAgICB0aGlzLnJBID0gbmV3IGIyVmVjMigpO1xuICAgICAgdGhpcy5yQiA9IG5ldyBiMlZlYzIoKTtcbiAgIH07XG4gICBiMkNvbnRhY3RFZGdlLmIyQ29udGFjdEVkZ2UgPSBmdW5jdGlvbiAoKSB7fTtcbiAgIGIyQ29udGFjdEZhY3RvcnkuYjJDb250YWN0RmFjdG9yeSA9IGZ1bmN0aW9uICgpIHt9O1xuICAgYjJDb250YWN0RmFjdG9yeS5wcm90b3R5cGUuYjJDb250YWN0RmFjdG9yeSA9IGZ1bmN0aW9uIChhbGxvY2F0b3IpIHtcbiAgICAgIHRoaXMubV9hbGxvY2F0b3IgPSBhbGxvY2F0b3I7XG4gICAgICB0aGlzLkluaXRpYWxpemVSZWdpc3RlcnMoKTtcbiAgIH1cbiAgIGIyQ29udGFjdEZhY3RvcnkucHJvdG90eXBlLkFkZFR5cGUgPSBmdW5jdGlvbiAoY3JlYXRlRmNuLCBkZXN0cm95RmNuLCB0eXBlMSwgdHlwZTIpIHtcbiAgICAgIGlmICh0eXBlMSA9PT0gdW5kZWZpbmVkKSB0eXBlMSA9IDA7XG4gICAgICBpZiAodHlwZTIgPT09IHVuZGVmaW5lZCkgdHlwZTIgPSAwO1xuICAgICAgdGhpcy5tX3JlZ2lzdGVyc1t0eXBlMV1bdHlwZTJdLmNyZWF0ZUZjbiA9IGNyZWF0ZUZjbjtcbiAgICAgIHRoaXMubV9yZWdpc3RlcnNbdHlwZTFdW3R5cGUyXS5kZXN0cm95RmNuID0gZGVzdHJveUZjbjtcbiAgICAgIHRoaXMubV9yZWdpc3RlcnNbdHlwZTFdW3R5cGUyXS5wcmltYXJ5ID0gdHJ1ZTtcbiAgICAgIGlmICh0eXBlMSAhPSB0eXBlMikge1xuICAgICAgICAgdGhpcy5tX3JlZ2lzdGVyc1t0eXBlMl1bdHlwZTFdLmNyZWF0ZUZjbiA9IGNyZWF0ZUZjbjtcbiAgICAgICAgIHRoaXMubV9yZWdpc3RlcnNbdHlwZTJdW3R5cGUxXS5kZXN0cm95RmNuID0gZGVzdHJveUZjbjtcbiAgICAgICAgIHRoaXMubV9yZWdpc3RlcnNbdHlwZTJdW3R5cGUxXS5wcmltYXJ5ID0gZmFsc2U7XG4gICAgICB9XG4gICB9XG4gICBiMkNvbnRhY3RGYWN0b3J5LnByb3RvdHlwZS5Jbml0aWFsaXplUmVnaXN0ZXJzID0gZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcy5tX3JlZ2lzdGVycyA9IG5ldyBWZWN0b3IoYjJTaGFwZS5lX3NoYXBlVHlwZUNvdW50KTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYjJTaGFwZS5lX3NoYXBlVHlwZUNvdW50OyBpKyspIHtcbiAgICAgICAgIHRoaXMubV9yZWdpc3RlcnNbaV0gPSBuZXcgVmVjdG9yKGIyU2hhcGUuZV9zaGFwZVR5cGVDb3VudCk7XG4gICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGIyU2hhcGUuZV9zaGFwZVR5cGVDb3VudDsgaisrKSB7XG4gICAgICAgICAgICB0aGlzLm1fcmVnaXN0ZXJzW2ldW2pdID0gbmV3IGIyQ29udGFjdFJlZ2lzdGVyKCk7XG4gICAgICAgICB9XG4gICAgICB9XG4gICAgICB0aGlzLkFkZFR5cGUoYjJDaXJjbGVDb250YWN0LkNyZWF0ZSwgYjJDaXJjbGVDb250YWN0LkRlc3Ryb3ksIGIyU2hhcGUuZV9jaXJjbGVTaGFwZSwgYjJTaGFwZS5lX2NpcmNsZVNoYXBlKTtcbiAgICAgIHRoaXMuQWRkVHlwZShiMlBvbHlBbmRDaXJjbGVDb250YWN0LkNyZWF0ZSwgYjJQb2x5QW5kQ2lyY2xlQ29udGFjdC5EZXN0cm95LCBiMlNoYXBlLmVfcG9seWdvblNoYXBlLCBiMlNoYXBlLmVfY2lyY2xlU2hhcGUpO1xuICAgICAgdGhpcy5BZGRUeXBlKGIyUG9seWdvbkNvbnRhY3QuQ3JlYXRlLCBiMlBvbHlnb25Db250YWN0LkRlc3Ryb3ksIGIyU2hhcGUuZV9wb2x5Z29uU2hhcGUsIGIyU2hhcGUuZV9wb2x5Z29uU2hhcGUpO1xuICAgICAgdGhpcy5BZGRUeXBlKGIyRWRnZUFuZENpcmNsZUNvbnRhY3QuQ3JlYXRlLCBiMkVkZ2VBbmRDaXJjbGVDb250YWN0LkRlc3Ryb3ksIGIyU2hhcGUuZV9lZGdlU2hhcGUsIGIyU2hhcGUuZV9jaXJjbGVTaGFwZSk7XG4gICAgICB0aGlzLkFkZFR5cGUoYjJQb2x5QW5kRWRnZUNvbnRhY3QuQ3JlYXRlLCBiMlBvbHlBbmRFZGdlQ29udGFjdC5EZXN0cm95LCBiMlNoYXBlLmVfcG9seWdvblNoYXBlLCBiMlNoYXBlLmVfZWRnZVNoYXBlKTtcbiAgIH1cbiAgIGIyQ29udGFjdEZhY3RvcnkucHJvdG90eXBlLkNyZWF0ZSA9IGZ1bmN0aW9uIChmaXh0dXJlQSwgZml4dHVyZUIpIHtcbiAgICAgIHZhciB0eXBlMSA9IHBhcnNlSW50KGZpeHR1cmVBLkdldFR5cGUoKSk7XG4gICAgICB2YXIgdHlwZTIgPSBwYXJzZUludChmaXh0dXJlQi5HZXRUeXBlKCkpO1xuICAgICAgdmFyIHJlZyA9IHRoaXMubV9yZWdpc3RlcnNbdHlwZTFdW3R5cGUyXTtcbiAgICAgIHZhciBjO1xuICAgICAgaWYgKHJlZy5wb29sKSB7XG4gICAgICAgICBjID0gcmVnLnBvb2w7XG4gICAgICAgICByZWcucG9vbCA9IGMubV9uZXh0O1xuICAgICAgICAgcmVnLnBvb2xDb3VudC0tO1xuICAgICAgICAgYy5SZXNldChmaXh0dXJlQSwgZml4dHVyZUIpO1xuICAgICAgICAgcmV0dXJuIGM7XG4gICAgICB9XG4gICAgICB2YXIgY3JlYXRlRmNuID0gcmVnLmNyZWF0ZUZjbjtcbiAgICAgIGlmIChjcmVhdGVGY24gIT0gbnVsbCkge1xuICAgICAgICAgaWYgKHJlZy5wcmltYXJ5KSB7XG4gICAgICAgICAgICBjID0gY3JlYXRlRmNuKHRoaXMubV9hbGxvY2F0b3IpO1xuICAgICAgICAgICAgYy5SZXNldChmaXh0dXJlQSwgZml4dHVyZUIpO1xuICAgICAgICAgICAgcmV0dXJuIGM7XG4gICAgICAgICB9XG4gICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGMgPSBjcmVhdGVGY24odGhpcy5tX2FsbG9jYXRvcik7XG4gICAgICAgICAgICBjLlJlc2V0KGZpeHR1cmVCLCBmaXh0dXJlQSk7XG4gICAgICAgICAgICByZXR1cm4gYztcbiAgICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICB9XG4gICBiMkNvbnRhY3RGYWN0b3J5LnByb3RvdHlwZS5EZXN0cm95ID0gZnVuY3Rpb24gKGNvbnRhY3QpIHtcbiAgICAgIGlmIChjb250YWN0Lm1fbWFuaWZvbGQubV9wb2ludENvdW50ID4gMCkge1xuICAgICAgICAgY29udGFjdC5tX2ZpeHR1cmVBLm1fYm9keS5TZXRBd2FrZSh0cnVlKTtcbiAgICAgICAgIGNvbnRhY3QubV9maXh0dXJlQi5tX2JvZHkuU2V0QXdha2UodHJ1ZSk7XG4gICAgICB9XG4gICAgICB2YXIgdHlwZTEgPSBwYXJzZUludChjb250YWN0Lm1fZml4dHVyZUEuR2V0VHlwZSgpKTtcbiAgICAgIHZhciB0eXBlMiA9IHBhcnNlSW50KGNvbnRhY3QubV9maXh0dXJlQi5HZXRUeXBlKCkpO1xuICAgICAgdmFyIHJlZyA9IHRoaXMubV9yZWdpc3RlcnNbdHlwZTFdW3R5cGUyXTtcbiAgICAgIGlmICh0cnVlKSB7XG4gICAgICAgICByZWcucG9vbENvdW50Kys7XG4gICAgICAgICBjb250YWN0Lm1fbmV4dCA9IHJlZy5wb29sO1xuICAgICAgICAgcmVnLnBvb2wgPSBjb250YWN0O1xuICAgICAgfVxuICAgICAgdmFyIGRlc3Ryb3lGY24gPSByZWcuZGVzdHJveUZjbjtcbiAgICAgIGRlc3Ryb3lGY24oY29udGFjdCwgdGhpcy5tX2FsbG9jYXRvcik7XG4gICB9XG4gICBiMkNvbnRhY3RSZWdpc3Rlci5iMkNvbnRhY3RSZWdpc3RlciA9IGZ1bmN0aW9uICgpIHt9O1xuICAgYjJDb250YWN0UmVzdWx0LmIyQ29udGFjdFJlc3VsdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMucG9zaXRpb24gPSBuZXcgYjJWZWMyKCk7XG4gICAgICB0aGlzLm5vcm1hbCA9IG5ldyBiMlZlYzIoKTtcbiAgICAgIHRoaXMuaWQgPSBuZXcgYjJDb250YWN0SUQoKTtcbiAgIH07XG4gICBiMkNvbnRhY3RTb2x2ZXIuYjJDb250YWN0U29sdmVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcy5tX3N0ZXAgPSBuZXcgYjJUaW1lU3RlcCgpO1xuICAgICAgdGhpcy5tX2NvbnN0cmFpbnRzID0gbmV3IFZlY3RvcigpO1xuICAgfTtcbiAgIGIyQ29udGFjdFNvbHZlci5wcm90b3R5cGUuYjJDb250YWN0U29sdmVyID0gZnVuY3Rpb24gKCkge31cbiAgIGIyQ29udGFjdFNvbHZlci5wcm90b3R5cGUuSW5pdGlhbGl6ZSA9IGZ1bmN0aW9uIChzdGVwLCBjb250YWN0cywgY29udGFjdENvdW50LCBhbGxvY2F0b3IpIHtcbiAgICAgIGlmIChjb250YWN0Q291bnQgPT09IHVuZGVmaW5lZCkgY29udGFjdENvdW50ID0gMDtcbiAgICAgIHZhciBjb250YWN0O1xuICAgICAgdGhpcy5tX3N0ZXAuU2V0KHN0ZXApO1xuICAgICAgdGhpcy5tX2FsbG9jYXRvciA9IGFsbG9jYXRvcjtcbiAgICAgIHZhciBpID0gMDtcbiAgICAgIHZhciB0VmVjO1xuICAgICAgdmFyIHRNYXQ7XG4gICAgICB0aGlzLm1fY29uc3RyYWludENvdW50ID0gY29udGFjdENvdW50O1xuICAgICAgd2hpbGUgKHRoaXMubV9jb25zdHJhaW50cy5sZW5ndGggPCB0aGlzLm1fY29uc3RyYWludENvdW50KSB7XG4gICAgICAgICB0aGlzLm1fY29uc3RyYWludHNbdGhpcy5tX2NvbnN0cmFpbnRzLmxlbmd0aF0gPSBuZXcgYjJDb250YWN0Q29uc3RyYWludCgpO1xuICAgICAgfVxuICAgICAgZm9yIChpID0gMDtcbiAgICAgIGkgPCBjb250YWN0Q291bnQ7ICsraSkge1xuICAgICAgICAgY29udGFjdCA9IGNvbnRhY3RzW2ldO1xuICAgICAgICAgdmFyIGZpeHR1cmVBID0gY29udGFjdC5tX2ZpeHR1cmVBO1xuICAgICAgICAgdmFyIGZpeHR1cmVCID0gY29udGFjdC5tX2ZpeHR1cmVCO1xuICAgICAgICAgdmFyIHNoYXBlQSA9IGZpeHR1cmVBLm1fc2hhcGU7XG4gICAgICAgICB2YXIgc2hhcGVCID0gZml4dHVyZUIubV9zaGFwZTtcbiAgICAgICAgIHZhciByYWRpdXNBID0gc2hhcGVBLm1fcmFkaXVzO1xuICAgICAgICAgdmFyIHJhZGl1c0IgPSBzaGFwZUIubV9yYWRpdXM7XG4gICAgICAgICB2YXIgYm9keUEgPSBmaXh0dXJlQS5tX2JvZHk7XG4gICAgICAgICB2YXIgYm9keUIgPSBmaXh0dXJlQi5tX2JvZHk7XG4gICAgICAgICB2YXIgbWFuaWZvbGQgPSBjb250YWN0LkdldE1hbmlmb2xkKCk7XG4gICAgICAgICB2YXIgZnJpY3Rpb24gPSBiMlNldHRpbmdzLmIyTWl4RnJpY3Rpb24oZml4dHVyZUEuR2V0RnJpY3Rpb24oKSwgZml4dHVyZUIuR2V0RnJpY3Rpb24oKSk7XG4gICAgICAgICB2YXIgcmVzdGl0dXRpb24gPSBiMlNldHRpbmdzLmIyTWl4UmVzdGl0dXRpb24oZml4dHVyZUEuR2V0UmVzdGl0dXRpb24oKSwgZml4dHVyZUIuR2V0UmVzdGl0dXRpb24oKSk7XG4gICAgICAgICB2YXIgdkFYID0gYm9keUEubV9saW5lYXJWZWxvY2l0eS54O1xuICAgICAgICAgdmFyIHZBWSA9IGJvZHlBLm1fbGluZWFyVmVsb2NpdHkueTtcbiAgICAgICAgIHZhciB2QlggPSBib2R5Qi5tX2xpbmVhclZlbG9jaXR5Lng7XG4gICAgICAgICB2YXIgdkJZID0gYm9keUIubV9saW5lYXJWZWxvY2l0eS55O1xuICAgICAgICAgdmFyIHdBID0gYm9keUEubV9hbmd1bGFyVmVsb2NpdHk7XG4gICAgICAgICB2YXIgd0IgPSBib2R5Qi5tX2FuZ3VsYXJWZWxvY2l0eTtcbiAgICAgICAgIGIyU2V0dGluZ3MuYjJBc3NlcnQobWFuaWZvbGQubV9wb2ludENvdW50ID4gMCk7XG4gICAgICAgICBiMkNvbnRhY3RTb2x2ZXIuc193b3JsZE1hbmlmb2xkLkluaXRpYWxpemUobWFuaWZvbGQsIGJvZHlBLm1feGYsIHJhZGl1c0EsIGJvZHlCLm1feGYsIHJhZGl1c0IpO1xuICAgICAgICAgdmFyIG5vcm1hbFggPSBiMkNvbnRhY3RTb2x2ZXIuc193b3JsZE1hbmlmb2xkLm1fbm9ybWFsLng7XG4gICAgICAgICB2YXIgbm9ybWFsWSA9IGIyQ29udGFjdFNvbHZlci5zX3dvcmxkTWFuaWZvbGQubV9ub3JtYWwueTtcbiAgICAgICAgIHZhciBjYyA9IHRoaXMubV9jb25zdHJhaW50c1tpXTtcbiAgICAgICAgIGNjLmJvZHlBID0gYm9keUE7XG4gICAgICAgICBjYy5ib2R5QiA9IGJvZHlCO1xuICAgICAgICAgY2MubWFuaWZvbGQgPSBtYW5pZm9sZDtcbiAgICAgICAgIGNjLm5vcm1hbC54ID0gbm9ybWFsWDtcbiAgICAgICAgIGNjLm5vcm1hbC55ID0gbm9ybWFsWTtcbiAgICAgICAgIGNjLnBvaW50Q291bnQgPSBtYW5pZm9sZC5tX3BvaW50Q291bnQ7XG4gICAgICAgICBjYy5mcmljdGlvbiA9IGZyaWN0aW9uO1xuICAgICAgICAgY2MucmVzdGl0dXRpb24gPSByZXN0aXR1dGlvbjtcbiAgICAgICAgIGNjLmxvY2FsUGxhbmVOb3JtYWwueCA9IG1hbmlmb2xkLm1fbG9jYWxQbGFuZU5vcm1hbC54O1xuICAgICAgICAgY2MubG9jYWxQbGFuZU5vcm1hbC55ID0gbWFuaWZvbGQubV9sb2NhbFBsYW5lTm9ybWFsLnk7XG4gICAgICAgICBjYy5sb2NhbFBvaW50LnggPSBtYW5pZm9sZC5tX2xvY2FsUG9pbnQueDtcbiAgICAgICAgIGNjLmxvY2FsUG9pbnQueSA9IG1hbmlmb2xkLm1fbG9jYWxQb2ludC55O1xuICAgICAgICAgY2MucmFkaXVzID0gcmFkaXVzQSArIHJhZGl1c0I7XG4gICAgICAgICBjYy50eXBlID0gbWFuaWZvbGQubV90eXBlO1xuICAgICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCBjYy5wb2ludENvdW50OyArK2spIHtcbiAgICAgICAgICAgIHZhciBjcCA9IG1hbmlmb2xkLm1fcG9pbnRzW2tdO1xuICAgICAgICAgICAgdmFyIGNjcCA9IGNjLnBvaW50c1trXTtcbiAgICAgICAgICAgIGNjcC5ub3JtYWxJbXB1bHNlID0gY3AubV9ub3JtYWxJbXB1bHNlO1xuICAgICAgICAgICAgY2NwLnRhbmdlbnRJbXB1bHNlID0gY3AubV90YW5nZW50SW1wdWxzZTtcbiAgICAgICAgICAgIGNjcC5sb2NhbFBvaW50LlNldFYoY3AubV9sb2NhbFBvaW50KTtcbiAgICAgICAgICAgIHZhciByQVggPSBjY3AuckEueCA9IGIyQ29udGFjdFNvbHZlci5zX3dvcmxkTWFuaWZvbGQubV9wb2ludHNba10ueCAtIGJvZHlBLm1fc3dlZXAuYy54O1xuICAgICAgICAgICAgdmFyIHJBWSA9IGNjcC5yQS55ID0gYjJDb250YWN0U29sdmVyLnNfd29ybGRNYW5pZm9sZC5tX3BvaW50c1trXS55IC0gYm9keUEubV9zd2VlcC5jLnk7XG4gICAgICAgICAgICB2YXIgckJYID0gY2NwLnJCLnggPSBiMkNvbnRhY3RTb2x2ZXIuc193b3JsZE1hbmlmb2xkLm1fcG9pbnRzW2tdLnggLSBib2R5Qi5tX3N3ZWVwLmMueDtcbiAgICAgICAgICAgIHZhciByQlkgPSBjY3AuckIueSA9IGIyQ29udGFjdFNvbHZlci5zX3dvcmxkTWFuaWZvbGQubV9wb2ludHNba10ueSAtIGJvZHlCLm1fc3dlZXAuYy55O1xuICAgICAgICAgICAgdmFyIHJuQSA9IHJBWCAqIG5vcm1hbFkgLSByQVkgKiBub3JtYWxYO1xuICAgICAgICAgICAgdmFyIHJuQiA9IHJCWCAqIG5vcm1hbFkgLSByQlkgKiBub3JtYWxYO1xuICAgICAgICAgICAgcm5BICo9IHJuQTtcbiAgICAgICAgICAgIHJuQiAqPSBybkI7XG4gICAgICAgICAgICB2YXIga05vcm1hbCA9IGJvZHlBLm1faW52TWFzcyArIGJvZHlCLm1faW52TWFzcyArIGJvZHlBLm1faW52SSAqIHJuQSArIGJvZHlCLm1faW52SSAqIHJuQjtcbiAgICAgICAgICAgIGNjcC5ub3JtYWxNYXNzID0gMS4wIC8ga05vcm1hbDtcbiAgICAgICAgICAgIHZhciBrRXF1YWxpemVkID0gYm9keUEubV9tYXNzICogYm9keUEubV9pbnZNYXNzICsgYm9keUIubV9tYXNzICogYm9keUIubV9pbnZNYXNzO1xuICAgICAgICAgICAga0VxdWFsaXplZCArPSBib2R5QS5tX21hc3MgKiBib2R5QS5tX2ludkkgKiBybkEgKyBib2R5Qi5tX21hc3MgKiBib2R5Qi5tX2ludkkgKiBybkI7XG4gICAgICAgICAgICBjY3AuZXF1YWxpemVkTWFzcyA9IDEuMCAvIGtFcXVhbGl6ZWQ7XG4gICAgICAgICAgICB2YXIgdGFuZ2VudFggPSBub3JtYWxZO1xuICAgICAgICAgICAgdmFyIHRhbmdlbnRZID0gKC1ub3JtYWxYKTtcbiAgICAgICAgICAgIHZhciBydEEgPSByQVggKiB0YW5nZW50WSAtIHJBWSAqIHRhbmdlbnRYO1xuICAgICAgICAgICAgdmFyIHJ0QiA9IHJCWCAqIHRhbmdlbnRZIC0gckJZICogdGFuZ2VudFg7XG4gICAgICAgICAgICBydEEgKj0gcnRBO1xuICAgICAgICAgICAgcnRCICo9IHJ0QjtcbiAgICAgICAgICAgIHZhciBrVGFuZ2VudCA9IGJvZHlBLm1faW52TWFzcyArIGJvZHlCLm1faW52TWFzcyArIGJvZHlBLm1faW52SSAqIHJ0QSArIGJvZHlCLm1faW52SSAqIHJ0QjtcbiAgICAgICAgICAgIGNjcC50YW5nZW50TWFzcyA9IDEuMCAvIGtUYW5nZW50O1xuICAgICAgICAgICAgY2NwLnZlbG9jaXR5QmlhcyA9IDAuMDtcbiAgICAgICAgICAgIHZhciB0WCA9IHZCWCArICgoLXdCICogckJZKSkgLSB2QVggLSAoKC13QSAqIHJBWSkpO1xuICAgICAgICAgICAgdmFyIHRZID0gdkJZICsgKHdCICogckJYKSAtIHZBWSAtICh3QSAqIHJBWCk7XG4gICAgICAgICAgICB2YXIgdlJlbCA9IGNjLm5vcm1hbC54ICogdFggKyBjYy5ub3JtYWwueSAqIHRZO1xuICAgICAgICAgICAgaWYgKHZSZWwgPCAoLWIyU2V0dGluZ3MuYjJfdmVsb2NpdHlUaHJlc2hvbGQpKSB7XG4gICAgICAgICAgICAgICBjY3AudmVsb2NpdHlCaWFzICs9ICgtY2MucmVzdGl0dXRpb24gKiB2UmVsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgIH1cbiAgICAgICAgIGlmIChjYy5wb2ludENvdW50ID09IDIpIHtcbiAgICAgICAgICAgIHZhciBjY3AxID0gY2MucG9pbnRzWzBdO1xuICAgICAgICAgICAgdmFyIGNjcDIgPSBjYy5wb2ludHNbMV07XG4gICAgICAgICAgICB2YXIgaW52TWFzc0EgPSBib2R5QS5tX2ludk1hc3M7XG4gICAgICAgICAgICB2YXIgaW52SUEgPSBib2R5QS5tX2ludkk7XG4gICAgICAgICAgICB2YXIgaW52TWFzc0IgPSBib2R5Qi5tX2ludk1hc3M7XG4gICAgICAgICAgICB2YXIgaW52SUIgPSBib2R5Qi5tX2ludkk7XG4gICAgICAgICAgICB2YXIgcm4xQSA9IGNjcDEuckEueCAqIG5vcm1hbFkgLSBjY3AxLnJBLnkgKiBub3JtYWxYO1xuICAgICAgICAgICAgdmFyIHJuMUIgPSBjY3AxLnJCLnggKiBub3JtYWxZIC0gY2NwMS5yQi55ICogbm9ybWFsWDtcbiAgICAgICAgICAgIHZhciBybjJBID0gY2NwMi5yQS54ICogbm9ybWFsWSAtIGNjcDIuckEueSAqIG5vcm1hbFg7XG4gICAgICAgICAgICB2YXIgcm4yQiA9IGNjcDIuckIueCAqIG5vcm1hbFkgLSBjY3AyLnJCLnkgKiBub3JtYWxYO1xuICAgICAgICAgICAgdmFyIGsxMSA9IGludk1hc3NBICsgaW52TWFzc0IgKyBpbnZJQSAqIHJuMUEgKiBybjFBICsgaW52SUIgKiBybjFCICogcm4xQjtcbiAgICAgICAgICAgIHZhciBrMjIgPSBpbnZNYXNzQSArIGludk1hc3NCICsgaW52SUEgKiBybjJBICogcm4yQSArIGludklCICogcm4yQiAqIHJuMkI7XG4gICAgICAgICAgICB2YXIgazEyID0gaW52TWFzc0EgKyBpbnZNYXNzQiArIGludklBICogcm4xQSAqIHJuMkEgKyBpbnZJQiAqIHJuMUIgKiBybjJCO1xuICAgICAgICAgICAgdmFyIGtfbWF4Q29uZGl0aW9uTnVtYmVyID0gMTAwLjA7XG4gICAgICAgICAgICBpZiAoazExICogazExIDwga19tYXhDb25kaXRpb25OdW1iZXIgKiAoazExICogazIyIC0gazEyICogazEyKSkge1xuICAgICAgICAgICAgICAgY2MuSy5jb2wxLlNldChrMTEsIGsxMik7XG4gICAgICAgICAgICAgICBjYy5LLmNvbDIuU2V0KGsxMiwgazIyKTtcbiAgICAgICAgICAgICAgIGNjLksuR2V0SW52ZXJzZShjYy5ub3JtYWxNYXNzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgY2MucG9pbnRDb3VudCA9IDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICB9XG4gICAgICB9XG4gICB9XG4gICBiMkNvbnRhY3RTb2x2ZXIucHJvdG90eXBlLkluaXRWZWxvY2l0eUNvbnN0cmFpbnRzID0gZnVuY3Rpb24gKHN0ZXApIHtcbiAgICAgIHZhciB0VmVjO1xuICAgICAgdmFyIHRWZWMyO1xuICAgICAgdmFyIHRNYXQ7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubV9jb25zdHJhaW50Q291bnQ7ICsraSkge1xuICAgICAgICAgdmFyIGMgPSB0aGlzLm1fY29uc3RyYWludHNbaV07XG4gICAgICAgICB2YXIgYm9keUEgPSBjLmJvZHlBO1xuICAgICAgICAgdmFyIGJvZHlCID0gYy5ib2R5QjtcbiAgICAgICAgIHZhciBpbnZNYXNzQSA9IGJvZHlBLm1faW52TWFzcztcbiAgICAgICAgIHZhciBpbnZJQSA9IGJvZHlBLm1faW52STtcbiAgICAgICAgIHZhciBpbnZNYXNzQiA9IGJvZHlCLm1faW52TWFzcztcbiAgICAgICAgIHZhciBpbnZJQiA9IGJvZHlCLm1faW52STtcbiAgICAgICAgIHZhciBub3JtYWxYID0gYy5ub3JtYWwueDtcbiAgICAgICAgIHZhciBub3JtYWxZID0gYy5ub3JtYWwueTtcbiAgICAgICAgIHZhciB0YW5nZW50WCA9IG5vcm1hbFk7XG4gICAgICAgICB2YXIgdGFuZ2VudFkgPSAoLW5vcm1hbFgpO1xuICAgICAgICAgdmFyIHRYID0gMDtcbiAgICAgICAgIHZhciBqID0gMDtcbiAgICAgICAgIHZhciB0Q291bnQgPSAwO1xuICAgICAgICAgaWYgKHN0ZXAud2FybVN0YXJ0aW5nKSB7XG4gICAgICAgICAgICB0Q291bnQgPSBjLnBvaW50Q291bnQ7XG4gICAgICAgICAgICBmb3IgKGogPSAwO1xuICAgICAgICAgICAgaiA8IHRDb3VudDsgKytqKSB7XG4gICAgICAgICAgICAgICB2YXIgY2NwID0gYy5wb2ludHNbal07XG4gICAgICAgICAgICAgICBjY3Aubm9ybWFsSW1wdWxzZSAqPSBzdGVwLmR0UmF0aW87XG4gICAgICAgICAgICAgICBjY3AudGFuZ2VudEltcHVsc2UgKj0gc3RlcC5kdFJhdGlvO1xuICAgICAgICAgICAgICAgdmFyIFBYID0gY2NwLm5vcm1hbEltcHVsc2UgKiBub3JtYWxYICsgY2NwLnRhbmdlbnRJbXB1bHNlICogdGFuZ2VudFg7XG4gICAgICAgICAgICAgICB2YXIgUFkgPSBjY3Aubm9ybWFsSW1wdWxzZSAqIG5vcm1hbFkgKyBjY3AudGFuZ2VudEltcHVsc2UgKiB0YW5nZW50WTtcbiAgICAgICAgICAgICAgIGJvZHlBLm1fYW5ndWxhclZlbG9jaXR5IC09IGludklBICogKGNjcC5yQS54ICogUFkgLSBjY3AuckEueSAqIFBYKTtcbiAgICAgICAgICAgICAgIGJvZHlBLm1fbGluZWFyVmVsb2NpdHkueCAtPSBpbnZNYXNzQSAqIFBYO1xuICAgICAgICAgICAgICAgYm9keUEubV9saW5lYXJWZWxvY2l0eS55IC09IGludk1hc3NBICogUFk7XG4gICAgICAgICAgICAgICBib2R5Qi5tX2FuZ3VsYXJWZWxvY2l0eSArPSBpbnZJQiAqIChjY3AuckIueCAqIFBZIC0gY2NwLnJCLnkgKiBQWCk7XG4gICAgICAgICAgICAgICBib2R5Qi5tX2xpbmVhclZlbG9jaXR5LnggKz0gaW52TWFzc0IgKiBQWDtcbiAgICAgICAgICAgICAgIGJvZHlCLm1fbGluZWFyVmVsb2NpdHkueSArPSBpbnZNYXNzQiAqIFBZO1xuICAgICAgICAgICAgfVxuICAgICAgICAgfVxuICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0Q291bnQgPSBjLnBvaW50Q291bnQ7XG4gICAgICAgICAgICBmb3IgKGogPSAwO1xuICAgICAgICAgICAgaiA8IHRDb3VudDsgKytqKSB7XG4gICAgICAgICAgICAgICB2YXIgY2NwMiA9IGMucG9pbnRzW2pdO1xuICAgICAgICAgICAgICAgY2NwMi5ub3JtYWxJbXB1bHNlID0gMC4wO1xuICAgICAgICAgICAgICAgY2NwMi50YW5nZW50SW1wdWxzZSA9IDAuMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgIH1cbiAgICAgIH1cbiAgIH1cbiAgIGIyQ29udGFjdFNvbHZlci5wcm90b3R5cGUuU29sdmVWZWxvY2l0eUNvbnN0cmFpbnRzID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGogPSAwO1xuICAgICAgdmFyIGNjcDtcbiAgICAgIHZhciByQVggPSAwO1xuICAgICAgdmFyIHJBWSA9IDA7XG4gICAgICB2YXIgckJYID0gMDtcbiAgICAgIHZhciByQlkgPSAwO1xuICAgICAgdmFyIGR2WCA9IDA7XG4gICAgICB2YXIgZHZZID0gMDtcbiAgICAgIHZhciB2biA9IDA7XG4gICAgICB2YXIgdnQgPSAwO1xuICAgICAgdmFyIGxhbWJkYSA9IDA7XG4gICAgICB2YXIgbWF4RnJpY3Rpb24gPSAwO1xuICAgICAgdmFyIG5ld0ltcHVsc2UgPSAwO1xuICAgICAgdmFyIFBYID0gMDtcbiAgICAgIHZhciBQWSA9IDA7XG4gICAgICB2YXIgZFggPSAwO1xuICAgICAgdmFyIGRZID0gMDtcbiAgICAgIHZhciBQMVggPSAwO1xuICAgICAgdmFyIFAxWSA9IDA7XG4gICAgICB2YXIgUDJYID0gMDtcbiAgICAgIHZhciBQMlkgPSAwO1xuICAgICAgdmFyIHRNYXQ7XG4gICAgICB2YXIgdFZlYztcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5tX2NvbnN0cmFpbnRDb3VudDsgKytpKSB7XG4gICAgICAgICB2YXIgYyA9IHRoaXMubV9jb25zdHJhaW50c1tpXTtcbiAgICAgICAgIHZhciBib2R5QSA9IGMuYm9keUE7XG4gICAgICAgICB2YXIgYm9keUIgPSBjLmJvZHlCO1xuICAgICAgICAgdmFyIHdBID0gYm9keUEubV9hbmd1bGFyVmVsb2NpdHk7XG4gICAgICAgICB2YXIgd0IgPSBib2R5Qi5tX2FuZ3VsYXJWZWxvY2l0eTtcbiAgICAgICAgIHZhciB2QSA9IGJvZHlBLm1fbGluZWFyVmVsb2NpdHk7XG4gICAgICAgICB2YXIgdkIgPSBib2R5Qi5tX2xpbmVhclZlbG9jaXR5O1xuICAgICAgICAgdmFyIGludk1hc3NBID0gYm9keUEubV9pbnZNYXNzO1xuICAgICAgICAgdmFyIGludklBID0gYm9keUEubV9pbnZJO1xuICAgICAgICAgdmFyIGludk1hc3NCID0gYm9keUIubV9pbnZNYXNzO1xuICAgICAgICAgdmFyIGludklCID0gYm9keUIubV9pbnZJO1xuICAgICAgICAgdmFyIG5vcm1hbFggPSBjLm5vcm1hbC54O1xuICAgICAgICAgdmFyIG5vcm1hbFkgPSBjLm5vcm1hbC55O1xuICAgICAgICAgdmFyIHRhbmdlbnRYID0gbm9ybWFsWTtcbiAgICAgICAgIHZhciB0YW5nZW50WSA9ICgtbm9ybWFsWCk7XG4gICAgICAgICB2YXIgZnJpY3Rpb24gPSBjLmZyaWN0aW9uO1xuICAgICAgICAgdmFyIHRYID0gMDtcbiAgICAgICAgIGZvciAoaiA9IDA7XG4gICAgICAgICBqIDwgYy5wb2ludENvdW50OyBqKyspIHtcbiAgICAgICAgICAgIGNjcCA9IGMucG9pbnRzW2pdO1xuICAgICAgICAgICAgZHZYID0gdkIueCAtIHdCICogY2NwLnJCLnkgLSB2QS54ICsgd0EgKiBjY3AuckEueTtcbiAgICAgICAgICAgIGR2WSA9IHZCLnkgKyB3QiAqIGNjcC5yQi54IC0gdkEueSAtIHdBICogY2NwLnJBLng7XG4gICAgICAgICAgICB2dCA9IGR2WCAqIHRhbmdlbnRYICsgZHZZICogdGFuZ2VudFk7XG4gICAgICAgICAgICBsYW1iZGEgPSBjY3AudGFuZ2VudE1hc3MgKiAoLXZ0KTtcbiAgICAgICAgICAgIG1heEZyaWN0aW9uID0gZnJpY3Rpb24gKiBjY3Aubm9ybWFsSW1wdWxzZTtcbiAgICAgICAgICAgIG5ld0ltcHVsc2UgPSBiMk1hdGguQ2xhbXAoY2NwLnRhbmdlbnRJbXB1bHNlICsgbGFtYmRhLCAoLW1heEZyaWN0aW9uKSwgbWF4RnJpY3Rpb24pO1xuICAgICAgICAgICAgbGFtYmRhID0gbmV3SW1wdWxzZSAtIGNjcC50YW5nZW50SW1wdWxzZTtcbiAgICAgICAgICAgIFBYID0gbGFtYmRhICogdGFuZ2VudFg7XG4gICAgICAgICAgICBQWSA9IGxhbWJkYSAqIHRhbmdlbnRZO1xuICAgICAgICAgICAgdkEueCAtPSBpbnZNYXNzQSAqIFBYO1xuICAgICAgICAgICAgdkEueSAtPSBpbnZNYXNzQSAqIFBZO1xuICAgICAgICAgICAgd0EgLT0gaW52SUEgKiAoY2NwLnJBLnggKiBQWSAtIGNjcC5yQS55ICogUFgpO1xuICAgICAgICAgICAgdkIueCArPSBpbnZNYXNzQiAqIFBYO1xuICAgICAgICAgICAgdkIueSArPSBpbnZNYXNzQiAqIFBZO1xuICAgICAgICAgICAgd0IgKz0gaW52SUIgKiAoY2NwLnJCLnggKiBQWSAtIGNjcC5yQi55ICogUFgpO1xuICAgICAgICAgICAgY2NwLnRhbmdlbnRJbXB1bHNlID0gbmV3SW1wdWxzZTtcbiAgICAgICAgIH1cbiAgICAgICAgIHZhciB0Q291bnQgPSBwYXJzZUludChjLnBvaW50Q291bnQpO1xuICAgICAgICAgaWYgKGMucG9pbnRDb3VudCA9PSAxKSB7XG4gICAgICAgICAgICBjY3AgPSBjLnBvaW50c1swXTtcbiAgICAgICAgICAgIGR2WCA9IHZCLnggKyAoKC13QiAqIGNjcC5yQi55KSkgLSB2QS54IC0gKCgtd0EgKiBjY3AuckEueSkpO1xuICAgICAgICAgICAgZHZZID0gdkIueSArICh3QiAqIGNjcC5yQi54KSAtIHZBLnkgLSAod0EgKiBjY3AuckEueCk7XG4gICAgICAgICAgICB2biA9IGR2WCAqIG5vcm1hbFggKyBkdlkgKiBub3JtYWxZO1xuICAgICAgICAgICAgbGFtYmRhID0gKC1jY3Aubm9ybWFsTWFzcyAqICh2biAtIGNjcC52ZWxvY2l0eUJpYXMpKTtcbiAgICAgICAgICAgIG5ld0ltcHVsc2UgPSBjY3Aubm9ybWFsSW1wdWxzZSArIGxhbWJkYTtcbiAgICAgICAgICAgIG5ld0ltcHVsc2UgPSBuZXdJbXB1bHNlID4gMCA/IG5ld0ltcHVsc2UgOiAwLjA7XG4gICAgICAgICAgICBsYW1iZGEgPSBuZXdJbXB1bHNlIC0gY2NwLm5vcm1hbEltcHVsc2U7XG4gICAgICAgICAgICBQWCA9IGxhbWJkYSAqIG5vcm1hbFg7XG4gICAgICAgICAgICBQWSA9IGxhbWJkYSAqIG5vcm1hbFk7XG4gICAgICAgICAgICB2QS54IC09IGludk1hc3NBICogUFg7XG4gICAgICAgICAgICB2QS55IC09IGludk1hc3NBICogUFk7XG4gICAgICAgICAgICB3QSAtPSBpbnZJQSAqIChjY3AuckEueCAqIFBZIC0gY2NwLnJBLnkgKiBQWCk7XG4gICAgICAgICAgICB2Qi54ICs9IGludk1hc3NCICogUFg7XG4gICAgICAgICAgICB2Qi55ICs9IGludk1hc3NCICogUFk7XG4gICAgICAgICAgICB3QiArPSBpbnZJQiAqIChjY3AuckIueCAqIFBZIC0gY2NwLnJCLnkgKiBQWCk7XG4gICAgICAgICAgICBjY3Aubm9ybWFsSW1wdWxzZSA9IG5ld0ltcHVsc2U7XG4gICAgICAgICB9XG4gICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHZhciBjcDEgPSBjLnBvaW50c1swXTtcbiAgICAgICAgICAgIHZhciBjcDIgPSBjLnBvaW50c1sxXTtcbiAgICAgICAgICAgIHZhciBhWCA9IGNwMS5ub3JtYWxJbXB1bHNlO1xuICAgICAgICAgICAgdmFyIGFZID0gY3AyLm5vcm1hbEltcHVsc2U7XG4gICAgICAgICAgICB2YXIgZHYxWCA9IHZCLnggLSB3QiAqIGNwMS5yQi55IC0gdkEueCArIHdBICogY3AxLnJBLnk7XG4gICAgICAgICAgICB2YXIgZHYxWSA9IHZCLnkgKyB3QiAqIGNwMS5yQi54IC0gdkEueSAtIHdBICogY3AxLnJBLng7XG4gICAgICAgICAgICB2YXIgZHYyWCA9IHZCLnggLSB3QiAqIGNwMi5yQi55IC0gdkEueCArIHdBICogY3AyLnJBLnk7XG4gICAgICAgICAgICB2YXIgZHYyWSA9IHZCLnkgKyB3QiAqIGNwMi5yQi54IC0gdkEueSAtIHdBICogY3AyLnJBLng7XG4gICAgICAgICAgICB2YXIgdm4xID0gZHYxWCAqIG5vcm1hbFggKyBkdjFZICogbm9ybWFsWTtcbiAgICAgICAgICAgIHZhciB2bjIgPSBkdjJYICogbm9ybWFsWCArIGR2MlkgKiBub3JtYWxZO1xuICAgICAgICAgICAgdmFyIGJYID0gdm4xIC0gY3AxLnZlbG9jaXR5QmlhcztcbiAgICAgICAgICAgIHZhciBiWSA9IHZuMiAtIGNwMi52ZWxvY2l0eUJpYXM7XG4gICAgICAgICAgICB0TWF0ID0gYy5LO1xuICAgICAgICAgICAgYlggLT0gdE1hdC5jb2wxLnggKiBhWCArIHRNYXQuY29sMi54ICogYVk7XG4gICAgICAgICAgICBiWSAtPSB0TWF0LmNvbDEueSAqIGFYICsgdE1hdC5jb2wyLnkgKiBhWTtcbiAgICAgICAgICAgIHZhciBrX2Vycm9yVG9sID0gMC4wMDE7XG4gICAgICAgICAgICBmb3IgKDs7KSB7XG4gICAgICAgICAgICAgICB0TWF0ID0gYy5ub3JtYWxNYXNzO1xuICAgICAgICAgICAgICAgdmFyIHhYID0gKC0odE1hdC5jb2wxLnggKiBiWCArIHRNYXQuY29sMi54ICogYlkpKTtcbiAgICAgICAgICAgICAgIHZhciB4WSA9ICgtKHRNYXQuY29sMS55ICogYlggKyB0TWF0LmNvbDIueSAqIGJZKSk7XG4gICAgICAgICAgICAgICBpZiAoeFggPj0gMC4wICYmIHhZID49IDAuMCkge1xuICAgICAgICAgICAgICAgICAgZFggPSB4WCAtIGFYO1xuICAgICAgICAgICAgICAgICAgZFkgPSB4WSAtIGFZO1xuICAgICAgICAgICAgICAgICAgUDFYID0gZFggKiBub3JtYWxYO1xuICAgICAgICAgICAgICAgICAgUDFZID0gZFggKiBub3JtYWxZO1xuICAgICAgICAgICAgICAgICAgUDJYID0gZFkgKiBub3JtYWxYO1xuICAgICAgICAgICAgICAgICAgUDJZID0gZFkgKiBub3JtYWxZO1xuICAgICAgICAgICAgICAgICAgdkEueCAtPSBpbnZNYXNzQSAqIChQMVggKyBQMlgpO1xuICAgICAgICAgICAgICAgICAgdkEueSAtPSBpbnZNYXNzQSAqIChQMVkgKyBQMlkpO1xuICAgICAgICAgICAgICAgICAgd0EgLT0gaW52SUEgKiAoY3AxLnJBLnggKiBQMVkgLSBjcDEuckEueSAqIFAxWCArIGNwMi5yQS54ICogUDJZIC0gY3AyLnJBLnkgKiBQMlgpO1xuICAgICAgICAgICAgICAgICAgdkIueCArPSBpbnZNYXNzQiAqIChQMVggKyBQMlgpO1xuICAgICAgICAgICAgICAgICAgdkIueSArPSBpbnZNYXNzQiAqIChQMVkgKyBQMlkpO1xuICAgICAgICAgICAgICAgICAgd0IgKz0gaW52SUIgKiAoY3AxLnJCLnggKiBQMVkgLSBjcDEuckIueSAqIFAxWCArIGNwMi5yQi54ICogUDJZIC0gY3AyLnJCLnkgKiBQMlgpO1xuICAgICAgICAgICAgICAgICAgY3AxLm5vcm1hbEltcHVsc2UgPSB4WDtcbiAgICAgICAgICAgICAgICAgIGNwMi5ub3JtYWxJbXB1bHNlID0geFk7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgIHhYID0gKC1jcDEubm9ybWFsTWFzcyAqIGJYKTtcbiAgICAgICAgICAgICAgIHhZID0gMC4wO1xuICAgICAgICAgICAgICAgdm4xID0gMC4wO1xuICAgICAgICAgICAgICAgdm4yID0gYy5LLmNvbDEueSAqIHhYICsgYlk7XG4gICAgICAgICAgICAgICBpZiAoeFggPj0gMC4wICYmIHZuMiA+PSAwLjApIHtcbiAgICAgICAgICAgICAgICAgIGRYID0geFggLSBhWDtcbiAgICAgICAgICAgICAgICAgIGRZID0geFkgLSBhWTtcbiAgICAgICAgICAgICAgICAgIFAxWCA9IGRYICogbm9ybWFsWDtcbiAgICAgICAgICAgICAgICAgIFAxWSA9IGRYICogbm9ybWFsWTtcbiAgICAgICAgICAgICAgICAgIFAyWCA9IGRZICogbm9ybWFsWDtcbiAgICAgICAgICAgICAgICAgIFAyWSA9IGRZICogbm9ybWFsWTtcbiAgICAgICAgICAgICAgICAgIHZBLnggLT0gaW52TWFzc0EgKiAoUDFYICsgUDJYKTtcbiAgICAgICAgICAgICAgICAgIHZBLnkgLT0gaW52TWFzc0EgKiAoUDFZICsgUDJZKTtcbiAgICAgICAgICAgICAgICAgIHdBIC09IGludklBICogKGNwMS5yQS54ICogUDFZIC0gY3AxLnJBLnkgKiBQMVggKyBjcDIuckEueCAqIFAyWSAtIGNwMi5yQS55ICogUDJYKTtcbiAgICAgICAgICAgICAgICAgIHZCLnggKz0gaW52TWFzc0IgKiAoUDFYICsgUDJYKTtcbiAgICAgICAgICAgICAgICAgIHZCLnkgKz0gaW52TWFzc0IgKiAoUDFZICsgUDJZKTtcbiAgICAgICAgICAgICAgICAgIHdCICs9IGludklCICogKGNwMS5yQi54ICogUDFZIC0gY3AxLnJCLnkgKiBQMVggKyBjcDIuckIueCAqIFAyWSAtIGNwMi5yQi55ICogUDJYKTtcbiAgICAgICAgICAgICAgICAgIGNwMS5ub3JtYWxJbXB1bHNlID0geFg7XG4gICAgICAgICAgICAgICAgICBjcDIubm9ybWFsSW1wdWxzZSA9IHhZO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICB4WCA9IDAuMDtcbiAgICAgICAgICAgICAgIHhZID0gKC1jcDIubm9ybWFsTWFzcyAqIGJZKTtcbiAgICAgICAgICAgICAgIHZuMSA9IGMuSy5jb2wyLnggKiB4WSArIGJYO1xuICAgICAgICAgICAgICAgdm4yID0gMC4wO1xuICAgICAgICAgICAgICAgaWYgKHhZID49IDAuMCAmJiB2bjEgPj0gMC4wKSB7XG4gICAgICAgICAgICAgICAgICBkWCA9IHhYIC0gYVg7XG4gICAgICAgICAgICAgICAgICBkWSA9IHhZIC0gYVk7XG4gICAgICAgICAgICAgICAgICBQMVggPSBkWCAqIG5vcm1hbFg7XG4gICAgICAgICAgICAgICAgICBQMVkgPSBkWCAqIG5vcm1hbFk7XG4gICAgICAgICAgICAgICAgICBQMlggPSBkWSAqIG5vcm1hbFg7XG4gICAgICAgICAgICAgICAgICBQMlkgPSBkWSAqIG5vcm1hbFk7XG4gICAgICAgICAgICAgICAgICB2QS54IC09IGludk1hc3NBICogKFAxWCArIFAyWCk7XG4gICAgICAgICAgICAgICAgICB2QS55IC09IGludk1hc3NBICogKFAxWSArIFAyWSk7XG4gICAgICAgICAgICAgICAgICB3QSAtPSBpbnZJQSAqIChjcDEuckEueCAqIFAxWSAtIGNwMS5yQS55ICogUDFYICsgY3AyLnJBLnggKiBQMlkgLSBjcDIuckEueSAqIFAyWCk7XG4gICAgICAgICAgICAgICAgICB2Qi54ICs9IGludk1hc3NCICogKFAxWCArIFAyWCk7XG4gICAgICAgICAgICAgICAgICB2Qi55ICs9IGludk1hc3NCICogKFAxWSArIFAyWSk7XG4gICAgICAgICAgICAgICAgICB3QiArPSBpbnZJQiAqIChjcDEuckIueCAqIFAxWSAtIGNwMS5yQi55ICogUDFYICsgY3AyLnJCLnggKiBQMlkgLSBjcDIuckIueSAqIFAyWCk7XG4gICAgICAgICAgICAgICAgICBjcDEubm9ybWFsSW1wdWxzZSA9IHhYO1xuICAgICAgICAgICAgICAgICAgY3AyLm5vcm1hbEltcHVsc2UgPSB4WTtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgeFggPSAwLjA7XG4gICAgICAgICAgICAgICB4WSA9IDAuMDtcbiAgICAgICAgICAgICAgIHZuMSA9IGJYO1xuICAgICAgICAgICAgICAgdm4yID0gYlk7XG4gICAgICAgICAgICAgICBpZiAodm4xID49IDAuMCAmJiB2bjIgPj0gMC4wKSB7XG4gICAgICAgICAgICAgICAgICBkWCA9IHhYIC0gYVg7XG4gICAgICAgICAgICAgICAgICBkWSA9IHhZIC0gYVk7XG4gICAgICAgICAgICAgICAgICBQMVggPSBkWCAqIG5vcm1hbFg7XG4gICAgICAgICAgICAgICAgICBQMVkgPSBkWCAqIG5vcm1hbFk7XG4gICAgICAgICAgICAgICAgICBQMlggPSBkWSAqIG5vcm1hbFg7XG4gICAgICAgICAgICAgICAgICBQMlkgPSBkWSAqIG5vcm1hbFk7XG4gICAgICAgICAgICAgICAgICB2QS54IC09IGludk1hc3NBICogKFAxWCArIFAyWCk7XG4gICAgICAgICAgICAgICAgICB2QS55IC09IGludk1hc3NBICogKFAxWSArIFAyWSk7XG4gICAgICAgICAgICAgICAgICB3QSAtPSBpbnZJQSAqIChjcDEuckEueCAqIFAxWSAtIGNwMS5yQS55ICogUDFYICsgY3AyLnJBLnggKiBQMlkgLSBjcDIuckEueSAqIFAyWCk7XG4gICAgICAgICAgICAgICAgICB2Qi54ICs9IGludk1hc3NCICogKFAxWCArIFAyWCk7XG4gICAgICAgICAgICAgICAgICB2Qi55ICs9IGludk1hc3NCICogKFAxWSArIFAyWSk7XG4gICAgICAgICAgICAgICAgICB3QiArPSBpbnZJQiAqIChjcDEuckIueCAqIFAxWSAtIGNwMS5yQi55ICogUDFYICsgY3AyLnJCLnggKiBQMlkgLSBjcDIuckIueSAqIFAyWCk7XG4gICAgICAgICAgICAgICAgICBjcDEubm9ybWFsSW1wdWxzZSA9IHhYO1xuICAgICAgICAgICAgICAgICAgY3AyLm5vcm1hbEltcHVsc2UgPSB4WTtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICB9XG4gICAgICAgICBib2R5QS5tX2FuZ3VsYXJWZWxvY2l0eSA9IHdBO1xuICAgICAgICAgYm9keUIubV9hbmd1bGFyVmVsb2NpdHkgPSB3QjtcbiAgICAgIH1cbiAgIH1cbiAgIGIyQ29udGFjdFNvbHZlci5wcm90b3R5cGUuRmluYWxpemVWZWxvY2l0eUNvbnN0cmFpbnRzID0gZnVuY3Rpb24gKCkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLm1fY29uc3RyYWludENvdW50OyArK2kpIHtcbiAgICAgICAgIHZhciBjID0gdGhpcy5tX2NvbnN0cmFpbnRzW2ldO1xuICAgICAgICAgdmFyIG0gPSBjLm1hbmlmb2xkO1xuICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBjLnBvaW50Q291bnQ7ICsraikge1xuICAgICAgICAgICAgdmFyIHBvaW50MSA9IG0ubV9wb2ludHNbal07XG4gICAgICAgICAgICB2YXIgcG9pbnQyID0gYy5wb2ludHNbal07XG4gICAgICAgICAgICBwb2ludDEubV9ub3JtYWxJbXB1bHNlID0gcG9pbnQyLm5vcm1hbEltcHVsc2U7XG4gICAgICAgICAgICBwb2ludDEubV90YW5nZW50SW1wdWxzZSA9IHBvaW50Mi50YW5nZW50SW1wdWxzZTtcbiAgICAgICAgIH1cbiAgICAgIH1cbiAgIH1cbiAgIGIyQ29udGFjdFNvbHZlci5wcm90b3R5cGUuU29sdmVQb3NpdGlvbkNvbnN0cmFpbnRzID0gZnVuY3Rpb24gKGJhdW1nYXJ0ZSkge1xuICAgICAgaWYgKGJhdW1nYXJ0ZSA9PT0gdW5kZWZpbmVkKSBiYXVtZ2FydGUgPSAwO1xuICAgICAgdmFyIG1pblNlcGFyYXRpb24gPSAwLjA7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubV9jb25zdHJhaW50Q291bnQ7IGkrKykge1xuICAgICAgICAgdmFyIGMgPSB0aGlzLm1fY29uc3RyYWludHNbaV07XG4gICAgICAgICB2YXIgYm9keUEgPSBjLmJvZHlBO1xuICAgICAgICAgdmFyIGJvZHlCID0gYy5ib2R5QjtcbiAgICAgICAgIHZhciBpbnZNYXNzQSA9IGJvZHlBLm1fbWFzcyAqIGJvZHlBLm1faW52TWFzcztcbiAgICAgICAgIHZhciBpbnZJQSA9IGJvZHlBLm1fbWFzcyAqIGJvZHlBLm1faW52STtcbiAgICAgICAgIHZhciBpbnZNYXNzQiA9IGJvZHlCLm1fbWFzcyAqIGJvZHlCLm1faW52TWFzcztcbiAgICAgICAgIHZhciBpbnZJQiA9IGJvZHlCLm1fbWFzcyAqIGJvZHlCLm1faW52STtcbiAgICAgICAgIGIyQ29udGFjdFNvbHZlci5zX3BzbS5Jbml0aWFsaXplKGMpO1xuICAgICAgICAgdmFyIG5vcm1hbCA9IGIyQ29udGFjdFNvbHZlci5zX3BzbS5tX25vcm1hbDtcbiAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgYy5wb2ludENvdW50OyBqKyspIHtcbiAgICAgICAgICAgIHZhciBjY3AgPSBjLnBvaW50c1tqXTtcbiAgICAgICAgICAgIHZhciBwb2ludCA9IGIyQ29udGFjdFNvbHZlci5zX3BzbS5tX3BvaW50c1tqXTtcbiAgICAgICAgICAgIHZhciBzZXBhcmF0aW9uID0gYjJDb250YWN0U29sdmVyLnNfcHNtLm1fc2VwYXJhdGlvbnNbal07XG4gICAgICAgICAgICB2YXIgckFYID0gcG9pbnQueCAtIGJvZHlBLm1fc3dlZXAuYy54O1xuICAgICAgICAgICAgdmFyIHJBWSA9IHBvaW50LnkgLSBib2R5QS5tX3N3ZWVwLmMueTtcbiAgICAgICAgICAgIHZhciByQlggPSBwb2ludC54IC0gYm9keUIubV9zd2VlcC5jLng7XG4gICAgICAgICAgICB2YXIgckJZID0gcG9pbnQueSAtIGJvZHlCLm1fc3dlZXAuYy55O1xuICAgICAgICAgICAgbWluU2VwYXJhdGlvbiA9IG1pblNlcGFyYXRpb24gPCBzZXBhcmF0aW9uID8gbWluU2VwYXJhdGlvbiA6IHNlcGFyYXRpb247XG4gICAgICAgICAgICB2YXIgQyA9IGIyTWF0aC5DbGFtcChiYXVtZ2FydGUgKiAoc2VwYXJhdGlvbiArIGIyU2V0dGluZ3MuYjJfbGluZWFyU2xvcCksICgtYjJTZXR0aW5ncy5iMl9tYXhMaW5lYXJDb3JyZWN0aW9uKSwgMC4wKTtcbiAgICAgICAgICAgIHZhciBpbXB1bHNlID0gKC1jY3AuZXF1YWxpemVkTWFzcyAqIEMpO1xuICAgICAgICAgICAgdmFyIFBYID0gaW1wdWxzZSAqIG5vcm1hbC54O1xuICAgICAgICAgICAgdmFyIFBZID0gaW1wdWxzZSAqIG5vcm1hbC55O2JvZHlBLm1fc3dlZXAuYy54IC09IGludk1hc3NBICogUFg7XG4gICAgICAgICAgICBib2R5QS5tX3N3ZWVwLmMueSAtPSBpbnZNYXNzQSAqIFBZO1xuICAgICAgICAgICAgYm9keUEubV9zd2VlcC5hIC09IGludklBICogKHJBWCAqIFBZIC0gckFZICogUFgpO1xuICAgICAgICAgICAgYm9keUEuU3luY2hyb25pemVUcmFuc2Zvcm0oKTtcbiAgICAgICAgICAgIGJvZHlCLm1fc3dlZXAuYy54ICs9IGludk1hc3NCICogUFg7XG4gICAgICAgICAgICBib2R5Qi5tX3N3ZWVwLmMueSArPSBpbnZNYXNzQiAqIFBZO1xuICAgICAgICAgICAgYm9keUIubV9zd2VlcC5hICs9IGludklCICogKHJCWCAqIFBZIC0gckJZICogUFgpO1xuICAgICAgICAgICAgYm9keUIuU3luY2hyb25pemVUcmFuc2Zvcm0oKTtcbiAgICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBtaW5TZXBhcmF0aW9uID4gKC0xLjUgKiBiMlNldHRpbmdzLmIyX2xpbmVhclNsb3ApO1xuICAgfVxuICAgQm94MkQucG9zdERlZnMucHVzaChmdW5jdGlvbiAoKSB7XG4gICAgICBCb3gyRC5EeW5hbWljcy5Db250YWN0cy5iMkNvbnRhY3RTb2x2ZXIuc193b3JsZE1hbmlmb2xkID0gbmV3IGIyV29ybGRNYW5pZm9sZCgpO1xuICAgICAgQm94MkQuRHluYW1pY3MuQ29udGFjdHMuYjJDb250YWN0U29sdmVyLnNfcHNtID0gbmV3IGIyUG9zaXRpb25Tb2x2ZXJNYW5pZm9sZCgpO1xuICAgfSk7XG4gICBCb3gyRC5pbmhlcml0KGIyRWRnZUFuZENpcmNsZUNvbnRhY3QsIEJveDJELkR5bmFtaWNzLkNvbnRhY3RzLmIyQ29udGFjdCk7XG4gICBiMkVkZ2VBbmRDaXJjbGVDb250YWN0LnByb3RvdHlwZS5fX3N1cGVyID0gQm94MkQuRHluYW1pY3MuQ29udGFjdHMuYjJDb250YWN0LnByb3RvdHlwZTtcbiAgIGIyRWRnZUFuZENpcmNsZUNvbnRhY3QuYjJFZGdlQW5kQ2lyY2xlQ29udGFjdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIEJveDJELkR5bmFtaWNzLkNvbnRhY3RzLmIyQ29udGFjdC5iMkNvbnRhY3QuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgIH07XG4gICBiMkVkZ2VBbmRDaXJjbGVDb250YWN0LkNyZWF0ZSA9IGZ1bmN0aW9uIChhbGxvY2F0b3IpIHtcbiAgICAgIHJldHVybiBuZXcgYjJFZGdlQW5kQ2lyY2xlQ29udGFjdCgpO1xuICAgfVxuICAgYjJFZGdlQW5kQ2lyY2xlQ29udGFjdC5EZXN0cm95ID0gZnVuY3Rpb24gKGNvbnRhY3QsIGFsbG9jYXRvcikge31cbiAgIGIyRWRnZUFuZENpcmNsZUNvbnRhY3QucHJvdG90eXBlLlJlc2V0ID0gZnVuY3Rpb24gKGZpeHR1cmVBLCBmaXh0dXJlQikge1xuICAgICAgdGhpcy5fX3N1cGVyLlJlc2V0LmNhbGwodGhpcywgZml4dHVyZUEsIGZpeHR1cmVCKTtcbiAgIH1cbiAgIGIyRWRnZUFuZENpcmNsZUNvbnRhY3QucHJvdG90eXBlLkV2YWx1YXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGJBID0gdGhpcy5tX2ZpeHR1cmVBLkdldEJvZHkoKTtcbiAgICAgIHZhciBiQiA9IHRoaXMubV9maXh0dXJlQi5HZXRCb2R5KCk7XG4gICAgICB0aGlzLmIyQ29sbGlkZUVkZ2VBbmRDaXJjbGUodGhpcy5tX21hbmlmb2xkLCAodGhpcy5tX2ZpeHR1cmVBLkdldFNoYXBlKCkgaW5zdGFuY2VvZiBiMkVkZ2VTaGFwZSA/IHRoaXMubV9maXh0dXJlQS5HZXRTaGFwZSgpIDogbnVsbCksIGJBLm1feGYsICh0aGlzLm1fZml4dHVyZUIuR2V0U2hhcGUoKSBpbnN0YW5jZW9mIGIyQ2lyY2xlU2hhcGUgPyB0aGlzLm1fZml4dHVyZUIuR2V0U2hhcGUoKSA6IG51bGwpLCBiQi5tX3hmKTtcbiAgIH1cbiAgIGIyRWRnZUFuZENpcmNsZUNvbnRhY3QucHJvdG90eXBlLmIyQ29sbGlkZUVkZ2VBbmRDaXJjbGUgPSBmdW5jdGlvbiAobWFuaWZvbGQsIGVkZ2UsIHhmMSwgY2lyY2xlLCB4ZjIpIHt9XG4gICBCb3gyRC5pbmhlcml0KGIyTnVsbENvbnRhY3QsIEJveDJELkR5bmFtaWNzLkNvbnRhY3RzLmIyQ29udGFjdCk7XG4gICBiMk51bGxDb250YWN0LnByb3RvdHlwZS5fX3N1cGVyID0gQm94MkQuRHluYW1pY3MuQ29udGFjdHMuYjJDb250YWN0LnByb3RvdHlwZTtcbiAgIGIyTnVsbENvbnRhY3QuYjJOdWxsQ29udGFjdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIEJveDJELkR5bmFtaWNzLkNvbnRhY3RzLmIyQ29udGFjdC5iMkNvbnRhY3QuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgIH07XG4gICBiMk51bGxDb250YWN0LnByb3RvdHlwZS5iMk51bGxDb250YWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcy5fX3N1cGVyLmIyQ29udGFjdC5jYWxsKHRoaXMpO1xuICAgfVxuICAgYjJOdWxsQ29udGFjdC5wcm90b3R5cGUuRXZhbHVhdGUgPSBmdW5jdGlvbiAoKSB7fVxuICAgQm94MkQuaW5oZXJpdChiMlBvbHlBbmRDaXJjbGVDb250YWN0LCBCb3gyRC5EeW5hbWljcy5Db250YWN0cy5iMkNvbnRhY3QpO1xuICAgYjJQb2x5QW5kQ2lyY2xlQ29udGFjdC5wcm90b3R5cGUuX19zdXBlciA9IEJveDJELkR5bmFtaWNzLkNvbnRhY3RzLmIyQ29udGFjdC5wcm90b3R5cGU7XG4gICBiMlBvbHlBbmRDaXJjbGVDb250YWN0LmIyUG9seUFuZENpcmNsZUNvbnRhY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBCb3gyRC5EeW5hbWljcy5Db250YWN0cy5iMkNvbnRhY3QuYjJDb250YWN0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICB9O1xuICAgYjJQb2x5QW5kQ2lyY2xlQ29udGFjdC5DcmVhdGUgPSBmdW5jdGlvbiAoYWxsb2NhdG9yKSB7XG4gICAgICByZXR1cm4gbmV3IGIyUG9seUFuZENpcmNsZUNvbnRhY3QoKTtcbiAgIH1cbiAgIGIyUG9seUFuZENpcmNsZUNvbnRhY3QuRGVzdHJveSA9IGZ1bmN0aW9uIChjb250YWN0LCBhbGxvY2F0b3IpIHt9XG4gICBiMlBvbHlBbmRDaXJjbGVDb250YWN0LnByb3RvdHlwZS5SZXNldCA9IGZ1bmN0aW9uIChmaXh0dXJlQSwgZml4dHVyZUIpIHtcbiAgICAgIHRoaXMuX19zdXBlci5SZXNldC5jYWxsKHRoaXMsIGZpeHR1cmVBLCBmaXh0dXJlQik7XG4gICAgICBiMlNldHRpbmdzLmIyQXNzZXJ0KGZpeHR1cmVBLkdldFR5cGUoKSA9PSBiMlNoYXBlLmVfcG9seWdvblNoYXBlKTtcbiAgICAgIGIyU2V0dGluZ3MuYjJBc3NlcnQoZml4dHVyZUIuR2V0VHlwZSgpID09IGIyU2hhcGUuZV9jaXJjbGVTaGFwZSk7XG4gICB9XG4gICBiMlBvbHlBbmRDaXJjbGVDb250YWN0LnByb3RvdHlwZS5FdmFsdWF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBiQSA9IHRoaXMubV9maXh0dXJlQS5tX2JvZHk7XG4gICAgICB2YXIgYkIgPSB0aGlzLm1fZml4dHVyZUIubV9ib2R5O1xuICAgICAgYjJDb2xsaXNpb24uQ29sbGlkZVBvbHlnb25BbmRDaXJjbGUodGhpcy5tX21hbmlmb2xkLCAodGhpcy5tX2ZpeHR1cmVBLkdldFNoYXBlKCkgaW5zdGFuY2VvZiBiMlBvbHlnb25TaGFwZSA/IHRoaXMubV9maXh0dXJlQS5HZXRTaGFwZSgpIDogbnVsbCksIGJBLm1feGYsICh0aGlzLm1fZml4dHVyZUIuR2V0U2hhcGUoKSBpbnN0YW5jZW9mIGIyQ2lyY2xlU2hhcGUgPyB0aGlzLm1fZml4dHVyZUIuR2V0U2hhcGUoKSA6IG51bGwpLCBiQi5tX3hmKTtcbiAgIH1cbiAgIEJveDJELmluaGVyaXQoYjJQb2x5QW5kRWRnZUNvbnRhY3QsIEJveDJELkR5bmFtaWNzLkNvbnRhY3RzLmIyQ29udGFjdCk7XG4gICBiMlBvbHlBbmRFZGdlQ29udGFjdC5wcm90b3R5cGUuX19zdXBlciA9IEJveDJELkR5bmFtaWNzLkNvbnRhY3RzLmIyQ29udGFjdC5wcm90b3R5cGU7XG4gICBiMlBvbHlBbmRFZGdlQ29udGFjdC5iMlBvbHlBbmRFZGdlQ29udGFjdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIEJveDJELkR5bmFtaWNzLkNvbnRhY3RzLmIyQ29udGFjdC5iMkNvbnRhY3QuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgIH07XG4gICBiMlBvbHlBbmRFZGdlQ29udGFjdC5DcmVhdGUgPSBmdW5jdGlvbiAoYWxsb2NhdG9yKSB7XG4gICAgICByZXR1cm4gbmV3IGIyUG9seUFuZEVkZ2VDb250YWN0KCk7XG4gICB9XG4gICBiMlBvbHlBbmRFZGdlQ29udGFjdC5EZXN0cm95ID0gZnVuY3Rpb24gKGNvbnRhY3QsIGFsbG9jYXRvcikge31cbiAgIGIyUG9seUFuZEVkZ2VDb250YWN0LnByb3RvdHlwZS5SZXNldCA9IGZ1bmN0aW9uIChmaXh0dXJlQSwgZml4dHVyZUIpIHtcbiAgICAgIHRoaXMuX19zdXBlci5SZXNldC5jYWxsKHRoaXMsIGZpeHR1cmVBLCBmaXh0dXJlQik7XG4gICAgICBiMlNldHRpbmdzLmIyQXNzZXJ0KGZpeHR1cmVBLkdldFR5cGUoKSA9PSBiMlNoYXBlLmVfcG9seWdvblNoYXBlKTtcbiAgICAgIGIyU2V0dGluZ3MuYjJBc3NlcnQoZml4dHVyZUIuR2V0VHlwZSgpID09IGIyU2hhcGUuZV9lZGdlU2hhcGUpO1xuICAgfVxuICAgYjJQb2x5QW5kRWRnZUNvbnRhY3QucHJvdG90eXBlLkV2YWx1YXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGJBID0gdGhpcy5tX2ZpeHR1cmVBLkdldEJvZHkoKTtcbiAgICAgIHZhciBiQiA9IHRoaXMubV9maXh0dXJlQi5HZXRCb2R5KCk7XG4gICAgICB0aGlzLmIyQ29sbGlkZVBvbHlBbmRFZGdlKHRoaXMubV9tYW5pZm9sZCwgKHRoaXMubV9maXh0dXJlQS5HZXRTaGFwZSgpIGluc3RhbmNlb2YgYjJQb2x5Z29uU2hhcGUgPyB0aGlzLm1fZml4dHVyZUEuR2V0U2hhcGUoKSA6IG51bGwpLCBiQS5tX3hmLCAodGhpcy5tX2ZpeHR1cmVCLkdldFNoYXBlKCkgaW5zdGFuY2VvZiBiMkVkZ2VTaGFwZSA/IHRoaXMubV9maXh0dXJlQi5HZXRTaGFwZSgpIDogbnVsbCksIGJCLm1feGYpO1xuICAgfVxuICAgYjJQb2x5QW5kRWRnZUNvbnRhY3QucHJvdG90eXBlLmIyQ29sbGlkZVBvbHlBbmRFZGdlID0gZnVuY3Rpb24gKG1hbmlmb2xkLCBwb2x5Z29uLCB4ZjEsIGVkZ2UsIHhmMikge31cbiAgIEJveDJELmluaGVyaXQoYjJQb2x5Z29uQ29udGFjdCwgQm94MkQuRHluYW1pY3MuQ29udGFjdHMuYjJDb250YWN0KTtcbiAgIGIyUG9seWdvbkNvbnRhY3QucHJvdG90eXBlLl9fc3VwZXIgPSBCb3gyRC5EeW5hbWljcy5Db250YWN0cy5iMkNvbnRhY3QucHJvdG90eXBlO1xuICAgYjJQb2x5Z29uQ29udGFjdC5iMlBvbHlnb25Db250YWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgQm94MkQuRHluYW1pY3MuQ29udGFjdHMuYjJDb250YWN0LmIyQ29udGFjdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgfTtcbiAgIGIyUG9seWdvbkNvbnRhY3QuQ3JlYXRlID0gZnVuY3Rpb24gKGFsbG9jYXRvcikge1xuICAgICAgcmV0dXJuIG5ldyBiMlBvbHlnb25Db250YWN0KCk7XG4gICB9XG4gICBiMlBvbHlnb25Db250YWN0LkRlc3Ryb3kgPSBmdW5jdGlvbiAoY29udGFjdCwgYWxsb2NhdG9yKSB7fVxuICAgYjJQb2x5Z29uQ29udGFjdC5wcm90b3R5cGUuUmVzZXQgPSBmdW5jdGlvbiAoZml4dHVyZUEsIGZpeHR1cmVCKSB7XG4gICAgICB0aGlzLl9fc3VwZXIuUmVzZXQuY2FsbCh0aGlzLCBmaXh0dXJlQSwgZml4dHVyZUIpO1xuICAgfVxuICAgYjJQb2x5Z29uQ29udGFjdC5wcm90b3R5cGUuRXZhbHVhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgYkEgPSB0aGlzLm1fZml4dHVyZUEuR2V0Qm9keSgpO1xuICAgICAgdmFyIGJCID0gdGhpcy5tX2ZpeHR1cmVCLkdldEJvZHkoKTtcbiAgICAgIGIyQ29sbGlzaW9uLkNvbGxpZGVQb2x5Z29ucyh0aGlzLm1fbWFuaWZvbGQsICh0aGlzLm1fZml4dHVyZUEuR2V0U2hhcGUoKSBpbnN0YW5jZW9mIGIyUG9seWdvblNoYXBlID8gdGhpcy5tX2ZpeHR1cmVBLkdldFNoYXBlKCkgOiBudWxsKSwgYkEubV94ZiwgKHRoaXMubV9maXh0dXJlQi5HZXRTaGFwZSgpIGluc3RhbmNlb2YgYjJQb2x5Z29uU2hhcGUgPyB0aGlzLm1fZml4dHVyZUIuR2V0U2hhcGUoKSA6IG51bGwpLCBiQi5tX3hmKTtcbiAgIH1cbiAgIGIyUG9zaXRpb25Tb2x2ZXJNYW5pZm9sZC5iMlBvc2l0aW9uU29sdmVyTWFuaWZvbGQgPSBmdW5jdGlvbiAoKSB7fTtcbiAgIGIyUG9zaXRpb25Tb2x2ZXJNYW5pZm9sZC5wcm90b3R5cGUuYjJQb3NpdGlvblNvbHZlck1hbmlmb2xkID0gZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcy5tX25vcm1hbCA9IG5ldyBiMlZlYzIoKTtcbiAgICAgIHRoaXMubV9zZXBhcmF0aW9ucyA9IG5ldyBWZWN0b3JfYTJqX051bWJlcihiMlNldHRpbmdzLmIyX21heE1hbmlmb2xkUG9pbnRzKTtcbiAgICAgIHRoaXMubV9wb2ludHMgPSBuZXcgVmVjdG9yKGIyU2V0dGluZ3MuYjJfbWF4TWFuaWZvbGRQb2ludHMpO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBiMlNldHRpbmdzLmIyX21heE1hbmlmb2xkUG9pbnRzOyBpKyspIHtcbiAgICAgICAgIHRoaXMubV9wb2ludHNbaV0gPSBuZXcgYjJWZWMyKCk7XG4gICAgICB9XG4gICB9XG4gICBiMlBvc2l0aW9uU29sdmVyTWFuaWZvbGQucHJvdG90eXBlLkluaXRpYWxpemUgPSBmdW5jdGlvbiAoY2MpIHtcbiAgICAgIGIyU2V0dGluZ3MuYjJBc3NlcnQoY2MucG9pbnRDb3VudCA+IDApO1xuICAgICAgdmFyIGkgPSAwO1xuICAgICAgdmFyIGNsaXBQb2ludFggPSAwO1xuICAgICAgdmFyIGNsaXBQb2ludFkgPSAwO1xuICAgICAgdmFyIHRNYXQ7XG4gICAgICB2YXIgdFZlYztcbiAgICAgIHZhciBwbGFuZVBvaW50WCA9IDA7XG4gICAgICB2YXIgcGxhbmVQb2ludFkgPSAwO1xuICAgICAgc3dpdGNoIChjYy50eXBlKSB7XG4gICAgICBjYXNlIGIyTWFuaWZvbGQuZV9jaXJjbGVzOlxuICAgICAgICAge1xuICAgICAgICAgICAgdE1hdCA9IGNjLmJvZHlBLm1feGYuUjtcbiAgICAgICAgICAgIHRWZWMgPSBjYy5sb2NhbFBvaW50O1xuICAgICAgICAgICAgdmFyIHBvaW50QVggPSBjYy5ib2R5QS5tX3hmLnBvc2l0aW9uLnggKyAodE1hdC5jb2wxLnggKiB0VmVjLnggKyB0TWF0LmNvbDIueCAqIHRWZWMueSk7XG4gICAgICAgICAgICB2YXIgcG9pbnRBWSA9IGNjLmJvZHlBLm1feGYucG9zaXRpb24ueSArICh0TWF0LmNvbDEueSAqIHRWZWMueCArIHRNYXQuY29sMi55ICogdFZlYy55KTtcbiAgICAgICAgICAgIHRNYXQgPSBjYy5ib2R5Qi5tX3hmLlI7XG4gICAgICAgICAgICB0VmVjID0gY2MucG9pbnRzWzBdLmxvY2FsUG9pbnQ7XG4gICAgICAgICAgICB2YXIgcG9pbnRCWCA9IGNjLmJvZHlCLm1feGYucG9zaXRpb24ueCArICh0TWF0LmNvbDEueCAqIHRWZWMueCArIHRNYXQuY29sMi54ICogdFZlYy55KTtcbiAgICAgICAgICAgIHZhciBwb2ludEJZID0gY2MuYm9keUIubV94Zi5wb3NpdGlvbi55ICsgKHRNYXQuY29sMS55ICogdFZlYy54ICsgdE1hdC5jb2wyLnkgKiB0VmVjLnkpO1xuICAgICAgICAgICAgdmFyIGRYID0gcG9pbnRCWCAtIHBvaW50QVg7XG4gICAgICAgICAgICB2YXIgZFkgPSBwb2ludEJZIC0gcG9pbnRBWTtcbiAgICAgICAgICAgIHZhciBkMiA9IGRYICogZFggKyBkWSAqIGRZO1xuICAgICAgICAgICAgaWYgKGQyID4gTnVtYmVyLk1JTl9WQUxVRSAqIE51bWJlci5NSU5fVkFMVUUpIHtcbiAgICAgICAgICAgICAgIHZhciBkID0gTWF0aC5zcXJ0KGQyKTtcbiAgICAgICAgICAgICAgIHRoaXMubV9ub3JtYWwueCA9IGRYIC8gZDtcbiAgICAgICAgICAgICAgIHRoaXMubV9ub3JtYWwueSA9IGRZIC8gZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgdGhpcy5tX25vcm1hbC54ID0gMS4wO1xuICAgICAgICAgICAgICAgdGhpcy5tX25vcm1hbC55ID0gMC4wO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5tX3BvaW50c1swXS54ID0gMC41ICogKHBvaW50QVggKyBwb2ludEJYKTtcbiAgICAgICAgICAgIHRoaXMubV9wb2ludHNbMF0ueSA9IDAuNSAqIChwb2ludEFZICsgcG9pbnRCWSk7XG4gICAgICAgICAgICB0aGlzLm1fc2VwYXJhdGlvbnNbMF0gPSBkWCAqIHRoaXMubV9ub3JtYWwueCArIGRZICogdGhpcy5tX25vcm1hbC55IC0gY2MucmFkaXVzO1xuICAgICAgICAgfVxuICAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIGIyTWFuaWZvbGQuZV9mYWNlQTpcbiAgICAgICAgIHtcbiAgICAgICAgICAgIHRNYXQgPSBjYy5ib2R5QS5tX3hmLlI7XG4gICAgICAgICAgICB0VmVjID0gY2MubG9jYWxQbGFuZU5vcm1hbDtcbiAgICAgICAgICAgIHRoaXMubV9ub3JtYWwueCA9IHRNYXQuY29sMS54ICogdFZlYy54ICsgdE1hdC5jb2wyLnggKiB0VmVjLnk7XG4gICAgICAgICAgICB0aGlzLm1fbm9ybWFsLnkgPSB0TWF0LmNvbDEueSAqIHRWZWMueCArIHRNYXQuY29sMi55ICogdFZlYy55O1xuICAgICAgICAgICAgdE1hdCA9IGNjLmJvZHlBLm1feGYuUjtcbiAgICAgICAgICAgIHRWZWMgPSBjYy5sb2NhbFBvaW50O1xuICAgICAgICAgICAgcGxhbmVQb2ludFggPSBjYy5ib2R5QS5tX3hmLnBvc2l0aW9uLnggKyAodE1hdC5jb2wxLnggKiB0VmVjLnggKyB0TWF0LmNvbDIueCAqIHRWZWMueSk7XG4gICAgICAgICAgICBwbGFuZVBvaW50WSA9IGNjLmJvZHlBLm1feGYucG9zaXRpb24ueSArICh0TWF0LmNvbDEueSAqIHRWZWMueCArIHRNYXQuY29sMi55ICogdFZlYy55KTtcbiAgICAgICAgICAgIHRNYXQgPSBjYy5ib2R5Qi5tX3hmLlI7XG4gICAgICAgICAgICBmb3IgKGkgPSAwO1xuICAgICAgICAgICAgaSA8IGNjLnBvaW50Q291bnQ7ICsraSkge1xuICAgICAgICAgICAgICAgdFZlYyA9IGNjLnBvaW50c1tpXS5sb2NhbFBvaW50O1xuICAgICAgICAgICAgICAgY2xpcFBvaW50WCA9IGNjLmJvZHlCLm1feGYucG9zaXRpb24ueCArICh0TWF0LmNvbDEueCAqIHRWZWMueCArIHRNYXQuY29sMi54ICogdFZlYy55KTtcbiAgICAgICAgICAgICAgIGNsaXBQb2ludFkgPSBjYy5ib2R5Qi5tX3hmLnBvc2l0aW9uLnkgKyAodE1hdC5jb2wxLnkgKiB0VmVjLnggKyB0TWF0LmNvbDIueSAqIHRWZWMueSk7XG4gICAgICAgICAgICAgICB0aGlzLm1fc2VwYXJhdGlvbnNbaV0gPSAoY2xpcFBvaW50WCAtIHBsYW5lUG9pbnRYKSAqIHRoaXMubV9ub3JtYWwueCArIChjbGlwUG9pbnRZIC0gcGxhbmVQb2ludFkpICogdGhpcy5tX25vcm1hbC55IC0gY2MucmFkaXVzO1xuICAgICAgICAgICAgICAgdGhpcy5tX3BvaW50c1tpXS54ID0gY2xpcFBvaW50WDtcbiAgICAgICAgICAgICAgIHRoaXMubV9wb2ludHNbaV0ueSA9IGNsaXBQb2ludFk7XG4gICAgICAgICAgICB9XG4gICAgICAgICB9XG4gICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgYjJNYW5pZm9sZC5lX2ZhY2VCOlxuICAgICAgICAge1xuICAgICAgICAgICAgdE1hdCA9IGNjLmJvZHlCLm1feGYuUjtcbiAgICAgICAgICAgIHRWZWMgPSBjYy5sb2NhbFBsYW5lTm9ybWFsO1xuICAgICAgICAgICAgdGhpcy5tX25vcm1hbC54ID0gdE1hdC5jb2wxLnggKiB0VmVjLnggKyB0TWF0LmNvbDIueCAqIHRWZWMueTtcbiAgICAgICAgICAgIHRoaXMubV9ub3JtYWwueSA9IHRNYXQuY29sMS55ICogdFZlYy54ICsgdE1hdC5jb2wyLnkgKiB0VmVjLnk7XG4gICAgICAgICAgICB0TWF0ID0gY2MuYm9keUIubV94Zi5SO1xuICAgICAgICAgICAgdFZlYyA9IGNjLmxvY2FsUG9pbnQ7XG4gICAgICAgICAgICBwbGFuZVBvaW50WCA9IGNjLmJvZHlCLm1feGYucG9zaXRpb24ueCArICh0TWF0LmNvbDEueCAqIHRWZWMueCArIHRNYXQuY29sMi54ICogdFZlYy55KTtcbiAgICAgICAgICAgIHBsYW5lUG9pbnRZID0gY2MuYm9keUIubV94Zi5wb3NpdGlvbi55ICsgKHRNYXQuY29sMS55ICogdFZlYy54ICsgdE1hdC5jb2wyLnkgKiB0VmVjLnkpO1xuICAgICAgICAgICAgdE1hdCA9IGNjLmJvZHlBLm1feGYuUjtcbiAgICAgICAgICAgIGZvciAoaSA9IDA7XG4gICAgICAgICAgICBpIDwgY2MucG9pbnRDb3VudDsgKytpKSB7XG4gICAgICAgICAgICAgICB0VmVjID0gY2MucG9pbnRzW2ldLmxvY2FsUG9pbnQ7XG4gICAgICAgICAgICAgICBjbGlwUG9pbnRYID0gY2MuYm9keUEubV94Zi5wb3NpdGlvbi54ICsgKHRNYXQuY29sMS54ICogdFZlYy54ICsgdE1hdC5jb2wyLnggKiB0VmVjLnkpO1xuICAgICAgICAgICAgICAgY2xpcFBvaW50WSA9IGNjLmJvZHlBLm1feGYucG9zaXRpb24ueSArICh0TWF0LmNvbDEueSAqIHRWZWMueCArIHRNYXQuY29sMi55ICogdFZlYy55KTtcbiAgICAgICAgICAgICAgIHRoaXMubV9zZXBhcmF0aW9uc1tpXSA9IChjbGlwUG9pbnRYIC0gcGxhbmVQb2ludFgpICogdGhpcy5tX25vcm1hbC54ICsgKGNsaXBQb2ludFkgLSBwbGFuZVBvaW50WSkgKiB0aGlzLm1fbm9ybWFsLnkgLSBjYy5yYWRpdXM7XG4gICAgICAgICAgICAgICB0aGlzLm1fcG9pbnRzW2ldLlNldChjbGlwUG9pbnRYLCBjbGlwUG9pbnRZKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMubV9ub3JtYWwueCAqPSAoLTEpO1xuICAgICAgICAgICAgdGhpcy5tX25vcm1hbC55ICo9ICgtMSk7XG4gICAgICAgICB9XG4gICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgIH1cbiAgIEJveDJELnBvc3REZWZzLnB1c2goZnVuY3Rpb24gKCkge1xuICAgICAgQm94MkQuRHluYW1pY3MuQ29udGFjdHMuYjJQb3NpdGlvblNvbHZlck1hbmlmb2xkLmNpcmNsZVBvaW50QSA9IG5ldyBiMlZlYzIoKTtcbiAgICAgIEJveDJELkR5bmFtaWNzLkNvbnRhY3RzLmIyUG9zaXRpb25Tb2x2ZXJNYW5pZm9sZC5jaXJjbGVQb2ludEIgPSBuZXcgYjJWZWMyKCk7XG4gICB9KTtcbn0pKCk7XG4oZnVuY3Rpb24gKCkge1xuICAgdmFyIGIyQm9keSA9IEJveDJELkR5bmFtaWNzLmIyQm9keSxcbiAgICAgIGIyQm9keURlZiA9IEJveDJELkR5bmFtaWNzLmIyQm9keURlZixcbiAgICAgIGIyQ29udGFjdEZpbHRlciA9IEJveDJELkR5bmFtaWNzLmIyQ29udGFjdEZpbHRlcixcbiAgICAgIGIyQ29udGFjdEltcHVsc2UgPSBCb3gyRC5EeW5hbWljcy5iMkNvbnRhY3RJbXB1bHNlLFxuICAgICAgYjJDb250YWN0TGlzdGVuZXIgPSBCb3gyRC5EeW5hbWljcy5iMkNvbnRhY3RMaXN0ZW5lcixcbiAgICAgIGIyQ29udGFjdE1hbmFnZXIgPSBCb3gyRC5EeW5hbWljcy5iMkNvbnRhY3RNYW5hZ2VyLFxuICAgICAgYjJEZWJ1Z0RyYXcgPSBCb3gyRC5EeW5hbWljcy5iMkRlYnVnRHJhdyxcbiAgICAgIGIyRGVzdHJ1Y3Rpb25MaXN0ZW5lciA9IEJveDJELkR5bmFtaWNzLmIyRGVzdHJ1Y3Rpb25MaXN0ZW5lcixcbiAgICAgIGIyRmlsdGVyRGF0YSA9IEJveDJELkR5bmFtaWNzLmIyRmlsdGVyRGF0YSxcbiAgICAgIGIyRml4dHVyZSA9IEJveDJELkR5bmFtaWNzLmIyRml4dHVyZSxcbiAgICAgIGIyRml4dHVyZURlZiA9IEJveDJELkR5bmFtaWNzLmIyRml4dHVyZURlZixcbiAgICAgIGIySXNsYW5kID0gQm94MkQuRHluYW1pY3MuYjJJc2xhbmQsXG4gICAgICBiMlRpbWVTdGVwID0gQm94MkQuRHluYW1pY3MuYjJUaW1lU3RlcCxcbiAgICAgIGIyV29ybGQgPSBCb3gyRC5EeW5hbWljcy5iMldvcmxkLFxuICAgICAgYjJNYXQyMiA9IEJveDJELkNvbW1vbi5NYXRoLmIyTWF0MjIsXG4gICAgICBiMk1hdDMzID0gQm94MkQuQ29tbW9uLk1hdGguYjJNYXQzMyxcbiAgICAgIGIyTWF0aCA9IEJveDJELkNvbW1vbi5NYXRoLmIyTWF0aCxcbiAgICAgIGIyU3dlZXAgPSBCb3gyRC5Db21tb24uTWF0aC5iMlN3ZWVwLFxuICAgICAgYjJUcmFuc2Zvcm0gPSBCb3gyRC5Db21tb24uTWF0aC5iMlRyYW5zZm9ybSxcbiAgICAgIGIyVmVjMiA9IEJveDJELkNvbW1vbi5NYXRoLmIyVmVjMixcbiAgICAgIGIyVmVjMyA9IEJveDJELkNvbW1vbi5NYXRoLmIyVmVjMyxcbiAgICAgIGIyQ29sb3IgPSBCb3gyRC5Db21tb24uYjJDb2xvcixcbiAgICAgIGIyaW50ZXJuYWwgPSBCb3gyRC5Db21tb24uYjJpbnRlcm5hbCxcbiAgICAgIGIyU2V0dGluZ3MgPSBCb3gyRC5Db21tb24uYjJTZXR0aW5ncyxcbiAgICAgIGIyQ2lyY2xlU2hhcGUgPSBCb3gyRC5Db2xsaXNpb24uU2hhcGVzLmIyQ2lyY2xlU2hhcGUsXG4gICAgICBiMkVkZ2VDaGFpbkRlZiA9IEJveDJELkNvbGxpc2lvbi5TaGFwZXMuYjJFZGdlQ2hhaW5EZWYsXG4gICAgICBiMkVkZ2VTaGFwZSA9IEJveDJELkNvbGxpc2lvbi5TaGFwZXMuYjJFZGdlU2hhcGUsXG4gICAgICBiMk1hc3NEYXRhID0gQm94MkQuQ29sbGlzaW9uLlNoYXBlcy5iMk1hc3NEYXRhLFxuICAgICAgYjJQb2x5Z29uU2hhcGUgPSBCb3gyRC5Db2xsaXNpb24uU2hhcGVzLmIyUG9seWdvblNoYXBlLFxuICAgICAgYjJTaGFwZSA9IEJveDJELkNvbGxpc2lvbi5TaGFwZXMuYjJTaGFwZSxcbiAgICAgIGIyQnVveWFuY3lDb250cm9sbGVyID0gQm94MkQuRHluYW1pY3MuQ29udHJvbGxlcnMuYjJCdW95YW5jeUNvbnRyb2xsZXIsXG4gICAgICBiMkNvbnN0YW50QWNjZWxDb250cm9sbGVyID0gQm94MkQuRHluYW1pY3MuQ29udHJvbGxlcnMuYjJDb25zdGFudEFjY2VsQ29udHJvbGxlcixcbiAgICAgIGIyQ29uc3RhbnRGb3JjZUNvbnRyb2xsZXIgPSBCb3gyRC5EeW5hbWljcy5Db250cm9sbGVycy5iMkNvbnN0YW50Rm9yY2VDb250cm9sbGVyLFxuICAgICAgYjJDb250cm9sbGVyID0gQm94MkQuRHluYW1pY3MuQ29udHJvbGxlcnMuYjJDb250cm9sbGVyLFxuICAgICAgYjJDb250cm9sbGVyRWRnZSA9IEJveDJELkR5bmFtaWNzLkNvbnRyb2xsZXJzLmIyQ29udHJvbGxlckVkZ2UsXG4gICAgICBiMkdyYXZpdHlDb250cm9sbGVyID0gQm94MkQuRHluYW1pY3MuQ29udHJvbGxlcnMuYjJHcmF2aXR5Q29udHJvbGxlcixcbiAgICAgIGIyVGVuc29yRGFtcGluZ0NvbnRyb2xsZXIgPSBCb3gyRC5EeW5hbWljcy5Db250cm9sbGVycy5iMlRlbnNvckRhbXBpbmdDb250cm9sbGVyO1xuXG4gICBCb3gyRC5pbmhlcml0KGIyQnVveWFuY3lDb250cm9sbGVyLCBCb3gyRC5EeW5hbWljcy5Db250cm9sbGVycy5iMkNvbnRyb2xsZXIpO1xuICAgYjJCdW95YW5jeUNvbnRyb2xsZXIucHJvdG90eXBlLl9fc3VwZXIgPSBCb3gyRC5EeW5hbWljcy5Db250cm9sbGVycy5iMkNvbnRyb2xsZXIucHJvdG90eXBlO1xuICAgYjJCdW95YW5jeUNvbnRyb2xsZXIuYjJCdW95YW5jeUNvbnRyb2xsZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBCb3gyRC5EeW5hbWljcy5Db250cm9sbGVycy5iMkNvbnRyb2xsZXIuYjJDb250cm9sbGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB0aGlzLm5vcm1hbCA9IG5ldyBiMlZlYzIoMCwgKC0xKSk7XG4gICAgICB0aGlzLm9mZnNldCA9IDA7XG4gICAgICB0aGlzLmRlbnNpdHkgPSAwO1xuICAgICAgdGhpcy52ZWxvY2l0eSA9IG5ldyBiMlZlYzIoMCwgMCk7XG4gICAgICB0aGlzLmxpbmVhckRyYWcgPSAyO1xuICAgICAgdGhpcy5hbmd1bGFyRHJhZyA9IDE7XG4gICAgICB0aGlzLnVzZURlbnNpdHkgPSBmYWxzZTtcbiAgICAgIHRoaXMudXNlV29ybGRHcmF2aXR5ID0gdHJ1ZTtcbiAgICAgIHRoaXMuZ3Jhdml0eSA9IG51bGw7XG4gICB9O1xuICAgYjJCdW95YW5jeUNvbnRyb2xsZXIucHJvdG90eXBlLlN0ZXAgPSBmdW5jdGlvbiAoc3RlcCkge1xuICAgICAgaWYgKCF0aGlzLm1fYm9keUxpc3QpIHJldHVybjtcbiAgICAgIGlmICh0aGlzLnVzZVdvcmxkR3Jhdml0eSkge1xuICAgICAgICAgdGhpcy5ncmF2aXR5ID0gdGhpcy5HZXRXb3JsZCgpLkdldEdyYXZpdHkoKS5Db3B5KCk7XG4gICAgICB9XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy5tX2JvZHlMaXN0OyBpOyBpID0gaS5uZXh0Qm9keSkge1xuICAgICAgICAgdmFyIGJvZHkgPSBpLmJvZHk7XG4gICAgICAgICBpZiAoYm9keS5Jc0F3YWtlKCkgPT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgfVxuICAgICAgICAgdmFyIGFyZWFjID0gbmV3IGIyVmVjMigpO1xuICAgICAgICAgdmFyIG1hc3NjID0gbmV3IGIyVmVjMigpO1xuICAgICAgICAgdmFyIGFyZWEgPSAwLjA7XG4gICAgICAgICB2YXIgbWFzcyA9IDAuMDtcbiAgICAgICAgIGZvciAodmFyIGZpeHR1cmUgPSBib2R5LkdldEZpeHR1cmVMaXN0KCk7IGZpeHR1cmU7IGZpeHR1cmUgPSBmaXh0dXJlLkdldE5leHQoKSkge1xuICAgICAgICAgICAgdmFyIHNjID0gbmV3IGIyVmVjMigpO1xuICAgICAgICAgICAgdmFyIHNhcmVhID0gZml4dHVyZS5HZXRTaGFwZSgpLkNvbXB1dGVTdWJtZXJnZWRBcmVhKHRoaXMubm9ybWFsLCB0aGlzLm9mZnNldCwgYm9keS5HZXRUcmFuc2Zvcm0oKSwgc2MpO1xuICAgICAgICAgICAgYXJlYSArPSBzYXJlYTtcbiAgICAgICAgICAgIGFyZWFjLnggKz0gc2FyZWEgKiBzYy54O1xuICAgICAgICAgICAgYXJlYWMueSArPSBzYXJlYSAqIHNjLnk7XG4gICAgICAgICAgICB2YXIgc2hhcGVEZW5zaXR5ID0gMDtcbiAgICAgICAgICAgIGlmICh0aGlzLnVzZURlbnNpdHkpIHtcbiAgICAgICAgICAgICAgIHNoYXBlRGVuc2l0eSA9IDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgIHNoYXBlRGVuc2l0eSA9IDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBtYXNzICs9IHNhcmVhICogc2hhcGVEZW5zaXR5O1xuICAgICAgICAgICAgbWFzc2MueCArPSBzYXJlYSAqIHNjLnggKiBzaGFwZURlbnNpdHk7XG4gICAgICAgICAgICBtYXNzYy55ICs9IHNhcmVhICogc2MueSAqIHNoYXBlRGVuc2l0eTtcbiAgICAgICAgIH1cbiAgICAgICAgIGFyZWFjLnggLz0gYXJlYTtcbiAgICAgICAgIGFyZWFjLnkgLz0gYXJlYTtcbiAgICAgICAgIG1hc3NjLnggLz0gbWFzcztcbiAgICAgICAgIG1hc3NjLnkgLz0gbWFzcztcbiAgICAgICAgIGlmIChhcmVhIDwgTnVtYmVyLk1JTl9WQUxVRSkgY29udGludWU7XG4gICAgICAgICB2YXIgYnVveWFuY3lGb3JjZSA9IHRoaXMuZ3Jhdml0eS5HZXROZWdhdGl2ZSgpO1xuICAgICAgICAgYnVveWFuY3lGb3JjZS5NdWx0aXBseSh0aGlzLmRlbnNpdHkgKiBhcmVhKTtcbiAgICAgICAgIGJvZHkuQXBwbHlGb3JjZShidW95YW5jeUZvcmNlLCBtYXNzYyk7XG4gICAgICAgICB2YXIgZHJhZ0ZvcmNlID0gYm9keS5HZXRMaW5lYXJWZWxvY2l0eUZyb21Xb3JsZFBvaW50KGFyZWFjKTtcbiAgICAgICAgIGRyYWdGb3JjZS5TdWJ0cmFjdCh0aGlzLnZlbG9jaXR5KTtcbiAgICAgICAgIGRyYWdGb3JjZS5NdWx0aXBseSgoLXRoaXMubGluZWFyRHJhZyAqIGFyZWEpKTtcbiAgICAgICAgIGJvZHkuQXBwbHlGb3JjZShkcmFnRm9yY2UsIGFyZWFjKTtcbiAgICAgICAgIGJvZHkuQXBwbHlUb3JxdWUoKC1ib2R5LkdldEluZXJ0aWEoKSAvIGJvZHkuR2V0TWFzcygpICogYXJlYSAqIGJvZHkuR2V0QW5ndWxhclZlbG9jaXR5KCkgKiB0aGlzLmFuZ3VsYXJEcmFnKSk7XG4gICAgICB9XG4gICB9XG4gICBiMkJ1b3lhbmN5Q29udHJvbGxlci5wcm90b3R5cGUuRHJhdyA9IGZ1bmN0aW9uIChkZWJ1Z0RyYXcpIHtcbiAgICAgIHZhciByID0gMTAwMDtcbiAgICAgIHZhciBwMSA9IG5ldyBiMlZlYzIoKTtcbiAgICAgIHZhciBwMiA9IG5ldyBiMlZlYzIoKTtcbiAgICAgIHAxLnggPSB0aGlzLm5vcm1hbC54ICogdGhpcy5vZmZzZXQgKyB0aGlzLm5vcm1hbC55ICogcjtcbiAgICAgIHAxLnkgPSB0aGlzLm5vcm1hbC55ICogdGhpcy5vZmZzZXQgLSB0aGlzLm5vcm1hbC54ICogcjtcbiAgICAgIHAyLnggPSB0aGlzLm5vcm1hbC54ICogdGhpcy5vZmZzZXQgLSB0aGlzLm5vcm1hbC55ICogcjtcbiAgICAgIHAyLnkgPSB0aGlzLm5vcm1hbC55ICogdGhpcy5vZmZzZXQgKyB0aGlzLm5vcm1hbC54ICogcjtcbiAgICAgIHZhciBjb2xvciA9IG5ldyBiMkNvbG9yKDAsIDAsIDEpO1xuICAgICAgZGVidWdEcmF3LkRyYXdTZWdtZW50KHAxLCBwMiwgY29sb3IpO1xuICAgfVxuICAgQm94MkQuaW5oZXJpdChiMkNvbnN0YW50QWNjZWxDb250cm9sbGVyLCBCb3gyRC5EeW5hbWljcy5Db250cm9sbGVycy5iMkNvbnRyb2xsZXIpO1xuICAgYjJDb25zdGFudEFjY2VsQ29udHJvbGxlci5wcm90b3R5cGUuX19zdXBlciA9IEJveDJELkR5bmFtaWNzLkNvbnRyb2xsZXJzLmIyQ29udHJvbGxlci5wcm90b3R5cGU7XG4gICBiMkNvbnN0YW50QWNjZWxDb250cm9sbGVyLmIyQ29uc3RhbnRBY2NlbENvbnRyb2xsZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBCb3gyRC5EeW5hbWljcy5Db250cm9sbGVycy5iMkNvbnRyb2xsZXIuYjJDb250cm9sbGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB0aGlzLkEgPSBuZXcgYjJWZWMyKDAsIDApO1xuICAgfTtcbiAgIGIyQ29uc3RhbnRBY2NlbENvbnRyb2xsZXIucHJvdG90eXBlLlN0ZXAgPSBmdW5jdGlvbiAoc3RlcCkge1xuICAgICAgdmFyIHNtYWxsQSA9IG5ldyBiMlZlYzIodGhpcy5BLnggKiBzdGVwLmR0LCB0aGlzLkEueSAqIHN0ZXAuZHQpO1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMubV9ib2R5TGlzdDsgaTsgaSA9IGkubmV4dEJvZHkpIHtcbiAgICAgICAgIHZhciBib2R5ID0gaS5ib2R5O1xuICAgICAgICAgaWYgKCFib2R5LklzQXdha2UoKSkgY29udGludWU7XG4gICAgICAgICBib2R5LlNldExpbmVhclZlbG9jaXR5KG5ldyBiMlZlYzIoYm9keS5HZXRMaW5lYXJWZWxvY2l0eSgpLnggKyBzbWFsbEEueCwgYm9keS5HZXRMaW5lYXJWZWxvY2l0eSgpLnkgKyBzbWFsbEEueSkpO1xuICAgICAgfVxuICAgfVxuICAgQm94MkQuaW5oZXJpdChiMkNvbnN0YW50Rm9yY2VDb250cm9sbGVyLCBCb3gyRC5EeW5hbWljcy5Db250cm9sbGVycy5iMkNvbnRyb2xsZXIpO1xuICAgYjJDb25zdGFudEZvcmNlQ29udHJvbGxlci5wcm90b3R5cGUuX19zdXBlciA9IEJveDJELkR5bmFtaWNzLkNvbnRyb2xsZXJzLmIyQ29udHJvbGxlci5wcm90b3R5cGU7XG4gICBiMkNvbnN0YW50Rm9yY2VDb250cm9sbGVyLmIyQ29uc3RhbnRGb3JjZUNvbnRyb2xsZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBCb3gyRC5EeW5hbWljcy5Db250cm9sbGVycy5iMkNvbnRyb2xsZXIuYjJDb250cm9sbGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB0aGlzLkYgPSBuZXcgYjJWZWMyKDAsIDApO1xuICAgfTtcbiAgIGIyQ29uc3RhbnRGb3JjZUNvbnRyb2xsZXIucHJvdG90eXBlLlN0ZXAgPSBmdW5jdGlvbiAoc3RlcCkge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMubV9ib2R5TGlzdDsgaTsgaSA9IGkubmV4dEJvZHkpIHtcbiAgICAgICAgIHZhciBib2R5ID0gaS5ib2R5O1xuICAgICAgICAgaWYgKCFib2R5LklzQXdha2UoKSkgY29udGludWU7XG4gICAgICAgICBib2R5LkFwcGx5Rm9yY2UodGhpcy5GLCBib2R5LkdldFdvcmxkQ2VudGVyKCkpO1xuICAgICAgfVxuICAgfVxuICAgYjJDb250cm9sbGVyLmIyQ29udHJvbGxlciA9IGZ1bmN0aW9uICgpIHt9O1xuICAgYjJDb250cm9sbGVyLnByb3RvdHlwZS5TdGVwID0gZnVuY3Rpb24gKHN0ZXApIHt9XG4gICBiMkNvbnRyb2xsZXIucHJvdG90eXBlLkRyYXcgPSBmdW5jdGlvbiAoZGVidWdEcmF3KSB7fVxuICAgYjJDb250cm9sbGVyLnByb3RvdHlwZS5BZGRCb2R5ID0gZnVuY3Rpb24gKGJvZHkpIHtcbiAgICAgIHZhciBlZGdlID0gbmV3IGIyQ29udHJvbGxlckVkZ2UoKTtcbiAgICAgIGVkZ2UuY29udHJvbGxlciA9IHRoaXM7XG4gICAgICBlZGdlLmJvZHkgPSBib2R5O1xuICAgICAgZWRnZS5uZXh0Qm9keSA9IHRoaXMubV9ib2R5TGlzdDtcbiAgICAgIGVkZ2UucHJldkJvZHkgPSBudWxsO1xuICAgICAgdGhpcy5tX2JvZHlMaXN0ID0gZWRnZTtcbiAgICAgIGlmIChlZGdlLm5leHRCb2R5KSBlZGdlLm5leHRCb2R5LnByZXZCb2R5ID0gZWRnZTtcbiAgICAgIHRoaXMubV9ib2R5Q291bnQrKztcbiAgICAgIGVkZ2UubmV4dENvbnRyb2xsZXIgPSBib2R5Lm1fY29udHJvbGxlckxpc3Q7XG4gICAgICBlZGdlLnByZXZDb250cm9sbGVyID0gbnVsbDtcbiAgICAgIGJvZHkubV9jb250cm9sbGVyTGlzdCA9IGVkZ2U7XG4gICAgICBpZiAoZWRnZS5uZXh0Q29udHJvbGxlcikgZWRnZS5uZXh0Q29udHJvbGxlci5wcmV2Q29udHJvbGxlciA9IGVkZ2U7XG4gICAgICBib2R5Lm1fY29udHJvbGxlckNvdW50Kys7XG4gICB9XG4gICBiMkNvbnRyb2xsZXIucHJvdG90eXBlLlJlbW92ZUJvZHkgPSBmdW5jdGlvbiAoYm9keSkge1xuICAgICAgdmFyIGVkZ2UgPSBib2R5Lm1fY29udHJvbGxlckxpc3Q7XG4gICAgICB3aGlsZSAoZWRnZSAmJiBlZGdlLmNvbnRyb2xsZXIgIT0gdGhpcylcbiAgICAgIGVkZ2UgPSBlZGdlLm5leHRDb250cm9sbGVyO1xuICAgICAgaWYgKGVkZ2UucHJldkJvZHkpIGVkZ2UucHJldkJvZHkubmV4dEJvZHkgPSBlZGdlLm5leHRCb2R5O1xuICAgICAgaWYgKGVkZ2UubmV4dEJvZHkpIGVkZ2UubmV4dEJvZHkucHJldkJvZHkgPSBlZGdlLnByZXZCb2R5O1xuICAgICAgaWYgKGVkZ2UubmV4dENvbnRyb2xsZXIpIGVkZ2UubmV4dENvbnRyb2xsZXIucHJldkNvbnRyb2xsZXIgPSBlZGdlLnByZXZDb250cm9sbGVyO1xuICAgICAgaWYgKGVkZ2UucHJldkNvbnRyb2xsZXIpIGVkZ2UucHJldkNvbnRyb2xsZXIubmV4dENvbnRyb2xsZXIgPSBlZGdlLm5leHRDb250cm9sbGVyO1xuICAgICAgaWYgKHRoaXMubV9ib2R5TGlzdCA9PSBlZGdlKSB0aGlzLm1fYm9keUxpc3QgPSBlZGdlLm5leHRCb2R5O1xuICAgICAgaWYgKGJvZHkubV9jb250cm9sbGVyTGlzdCA9PSBlZGdlKSBib2R5Lm1fY29udHJvbGxlckxpc3QgPSBlZGdlLm5leHRDb250cm9sbGVyO1xuICAgICAgYm9keS5tX2NvbnRyb2xsZXJDb3VudC0tO1xuICAgICAgdGhpcy5tX2JvZHlDb3VudC0tO1xuICAgfVxuICAgYjJDb250cm9sbGVyLnByb3RvdHlwZS5DbGVhciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHdoaWxlICh0aGlzLm1fYm9keUxpc3QpXG4gICAgICB0aGlzLlJlbW92ZUJvZHkodGhpcy5tX2JvZHlMaXN0LmJvZHkpO1xuICAgfVxuICAgYjJDb250cm9sbGVyLnByb3RvdHlwZS5HZXROZXh0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMubV9uZXh0O1xuICAgfVxuICAgYjJDb250cm9sbGVyLnByb3RvdHlwZS5HZXRXb3JsZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzLm1fd29ybGQ7XG4gICB9XG4gICBiMkNvbnRyb2xsZXIucHJvdG90eXBlLkdldEJvZHlMaXN0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMubV9ib2R5TGlzdDtcbiAgIH1cbiAgIGIyQ29udHJvbGxlckVkZ2UuYjJDb250cm9sbGVyRWRnZSA9IGZ1bmN0aW9uICgpIHt9O1xuICAgQm94MkQuaW5oZXJpdChiMkdyYXZpdHlDb250cm9sbGVyLCBCb3gyRC5EeW5hbWljcy5Db250cm9sbGVycy5iMkNvbnRyb2xsZXIpO1xuICAgYjJHcmF2aXR5Q29udHJvbGxlci5wcm90b3R5cGUuX19zdXBlciA9IEJveDJELkR5bmFtaWNzLkNvbnRyb2xsZXJzLmIyQ29udHJvbGxlci5wcm90b3R5cGU7XG4gICBiMkdyYXZpdHlDb250cm9sbGVyLmIyR3Jhdml0eUNvbnRyb2xsZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBCb3gyRC5EeW5hbWljcy5Db250cm9sbGVycy5iMkNvbnRyb2xsZXIuYjJDb250cm9sbGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB0aGlzLkcgPSAxO1xuICAgICAgdGhpcy5pbnZTcXIgPSB0cnVlO1xuICAgfTtcbiAgIGIyR3Jhdml0eUNvbnRyb2xsZXIucHJvdG90eXBlLlN0ZXAgPSBmdW5jdGlvbiAoc3RlcCkge1xuICAgICAgdmFyIGkgPSBudWxsO1xuICAgICAgdmFyIGJvZHkxID0gbnVsbDtcbiAgICAgIHZhciBwMSA9IG51bGw7XG4gICAgICB2YXIgbWFzczEgPSAwO1xuICAgICAgdmFyIGogPSBudWxsO1xuICAgICAgdmFyIGJvZHkyID0gbnVsbDtcbiAgICAgIHZhciBwMiA9IG51bGw7XG4gICAgICB2YXIgZHggPSAwO1xuICAgICAgdmFyIGR5ID0gMDtcbiAgICAgIHZhciByMiA9IDA7XG4gICAgICB2YXIgZiA9IG51bGw7XG4gICAgICBpZiAodGhpcy5pbnZTcXIpIHtcbiAgICAgICAgIGZvciAoaSA9IHRoaXMubV9ib2R5TGlzdDtcbiAgICAgICAgIGk7IGkgPSBpLm5leHRCb2R5KSB7XG4gICAgICAgICAgICBib2R5MSA9IGkuYm9keTtcbiAgICAgICAgICAgIHAxID0gYm9keTEuR2V0V29ybGRDZW50ZXIoKTtcbiAgICAgICAgICAgIG1hc3MxID0gYm9keTEuR2V0TWFzcygpO1xuICAgICAgICAgICAgZm9yIChqID0gdGhpcy5tX2JvZHlMaXN0O1xuICAgICAgICAgICAgaiAhPSBpOyBqID0gai5uZXh0Qm9keSkge1xuICAgICAgICAgICAgICAgYm9keTIgPSBqLmJvZHk7XG4gICAgICAgICAgICAgICBwMiA9IGJvZHkyLkdldFdvcmxkQ2VudGVyKCk7XG4gICAgICAgICAgICAgICBkeCA9IHAyLnggLSBwMS54O1xuICAgICAgICAgICAgICAgZHkgPSBwMi55IC0gcDEueTtcbiAgICAgICAgICAgICAgIHIyID0gZHggKiBkeCArIGR5ICogZHk7XG4gICAgICAgICAgICAgICBpZiAocjIgPCBOdW1iZXIuTUlOX1ZBTFVFKSBjb250aW51ZTtcbiAgICAgICAgICAgICAgIGYgPSBuZXcgYjJWZWMyKGR4LCBkeSk7XG4gICAgICAgICAgICAgICBmLk11bHRpcGx5KHRoaXMuRyAvIHIyIC8gTWF0aC5zcXJ0KHIyKSAqIG1hc3MxICogYm9keTIuR2V0TWFzcygpKTtcbiAgICAgICAgICAgICAgIGlmIChib2R5MS5Jc0F3YWtlKCkpIGJvZHkxLkFwcGx5Rm9yY2UoZiwgcDEpO1xuICAgICAgICAgICAgICAgZi5NdWx0aXBseSgoLTEpKTtcbiAgICAgICAgICAgICAgIGlmIChib2R5Mi5Jc0F3YWtlKCkpIGJvZHkyLkFwcGx5Rm9yY2UoZiwgcDIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgfVxuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgICBmb3IgKGkgPSB0aGlzLm1fYm9keUxpc3Q7XG4gICAgICAgICBpOyBpID0gaS5uZXh0Qm9keSkge1xuICAgICAgICAgICAgYm9keTEgPSBpLmJvZHk7XG4gICAgICAgICAgICBwMSA9IGJvZHkxLkdldFdvcmxkQ2VudGVyKCk7XG4gICAgICAgICAgICBtYXNzMSA9IGJvZHkxLkdldE1hc3MoKTtcbiAgICAgICAgICAgIGZvciAoaiA9IHRoaXMubV9ib2R5TGlzdDtcbiAgICAgICAgICAgIGogIT0gaTsgaiA9IGoubmV4dEJvZHkpIHtcbiAgICAgICAgICAgICAgIGJvZHkyID0gai5ib2R5O1xuICAgICAgICAgICAgICAgcDIgPSBib2R5Mi5HZXRXb3JsZENlbnRlcigpO1xuICAgICAgICAgICAgICAgZHggPSBwMi54IC0gcDEueDtcbiAgICAgICAgICAgICAgIGR5ID0gcDIueSAtIHAxLnk7XG4gICAgICAgICAgICAgICByMiA9IGR4ICogZHggKyBkeSAqIGR5O1xuICAgICAgICAgICAgICAgaWYgKHIyIDwgTnVtYmVyLk1JTl9WQUxVRSkgY29udGludWU7XG4gICAgICAgICAgICAgICBmID0gbmV3IGIyVmVjMihkeCwgZHkpO1xuICAgICAgICAgICAgICAgZi5NdWx0aXBseSh0aGlzLkcgLyByMiAqIG1hc3MxICogYm9keTIuR2V0TWFzcygpKTtcbiAgICAgICAgICAgICAgIGlmIChib2R5MS5Jc0F3YWtlKCkpIGJvZHkxLkFwcGx5Rm9yY2UoZiwgcDEpO1xuICAgICAgICAgICAgICAgZi5NdWx0aXBseSgoLTEpKTtcbiAgICAgICAgICAgICAgIGlmIChib2R5Mi5Jc0F3YWtlKCkpIGJvZHkyLkFwcGx5Rm9yY2UoZiwgcDIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgfVxuICAgICAgfVxuICAgfVxuICAgQm94MkQuaW5oZXJpdChiMlRlbnNvckRhbXBpbmdDb250cm9sbGVyLCBCb3gyRC5EeW5hbWljcy5Db250cm9sbGVycy5iMkNvbnRyb2xsZXIpO1xuICAgYjJUZW5zb3JEYW1waW5nQ29udHJvbGxlci5wcm90b3R5cGUuX19zdXBlciA9IEJveDJELkR5bmFtaWNzLkNvbnRyb2xsZXJzLmIyQ29udHJvbGxlci5wcm90b3R5cGU7XG4gICBiMlRlbnNvckRhbXBpbmdDb250cm9sbGVyLmIyVGVuc29yRGFtcGluZ0NvbnRyb2xsZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBCb3gyRC5EeW5hbWljcy5Db250cm9sbGVycy5iMkNvbnRyb2xsZXIuYjJDb250cm9sbGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB0aGlzLlQgPSBuZXcgYjJNYXQyMigpO1xuICAgICAgdGhpcy5tYXhUaW1lc3RlcCA9IDA7XG4gICB9O1xuICAgYjJUZW5zb3JEYW1waW5nQ29udHJvbGxlci5wcm90b3R5cGUuU2V0QXhpc0FsaWduZWQgPSBmdW5jdGlvbiAoeERhbXBpbmcsIHlEYW1waW5nKSB7XG4gICAgICBpZiAoeERhbXBpbmcgPT09IHVuZGVmaW5lZCkgeERhbXBpbmcgPSAwO1xuICAgICAgaWYgKHlEYW1waW5nID09PSB1bmRlZmluZWQpIHlEYW1waW5nID0gMDtcbiAgICAgIHRoaXMuVC5jb2wxLnggPSAoLXhEYW1waW5nKTtcbiAgICAgIHRoaXMuVC5jb2wxLnkgPSAwO1xuICAgICAgdGhpcy5ULmNvbDIueCA9IDA7XG4gICAgICB0aGlzLlQuY29sMi55ID0gKC15RGFtcGluZyk7XG4gICAgICBpZiAoeERhbXBpbmcgPiAwIHx8IHlEYW1waW5nID4gMCkge1xuICAgICAgICAgdGhpcy5tYXhUaW1lc3RlcCA9IDEgLyBNYXRoLm1heCh4RGFtcGluZywgeURhbXBpbmcpO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgICB0aGlzLm1heFRpbWVzdGVwID0gMDtcbiAgICAgIH1cbiAgIH1cbiAgIGIyVGVuc29yRGFtcGluZ0NvbnRyb2xsZXIucHJvdG90eXBlLlN0ZXAgPSBmdW5jdGlvbiAoc3RlcCkge1xuICAgICAgdmFyIHRpbWVzdGVwID0gc3RlcC5kdDtcbiAgICAgIGlmICh0aW1lc3RlcCA8PSBOdW1iZXIuTUlOX1ZBTFVFKSByZXR1cm47XG4gICAgICBpZiAodGltZXN0ZXAgPiB0aGlzLm1heFRpbWVzdGVwICYmIHRoaXMubWF4VGltZXN0ZXAgPiAwKSB0aW1lc3RlcCA9IHRoaXMubWF4VGltZXN0ZXA7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy5tX2JvZHlMaXN0OyBpOyBpID0gaS5uZXh0Qm9keSkge1xuICAgICAgICAgdmFyIGJvZHkgPSBpLmJvZHk7XG4gICAgICAgICBpZiAoIWJvZHkuSXNBd2FrZSgpKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgIH1cbiAgICAgICAgIHZhciBkYW1waW5nID0gYm9keS5HZXRXb3JsZFZlY3RvcihiMk1hdGguTXVsTVYodGhpcy5ULCBib2R5LkdldExvY2FsVmVjdG9yKGJvZHkuR2V0TGluZWFyVmVsb2NpdHkoKSkpKTtcbiAgICAgICAgIGJvZHkuU2V0TGluZWFyVmVsb2NpdHkobmV3IGIyVmVjMihib2R5LkdldExpbmVhclZlbG9jaXR5KCkueCArIGRhbXBpbmcueCAqIHRpbWVzdGVwLCBib2R5LkdldExpbmVhclZlbG9jaXR5KCkueSArIGRhbXBpbmcueSAqIHRpbWVzdGVwKSk7XG4gICAgICB9XG4gICB9XG59KSgpO1xuKGZ1bmN0aW9uICgpIHtcbiAgIHZhciBiMkNvbG9yID0gQm94MkQuQ29tbW9uLmIyQ29sb3IsXG4gICAgICBiMmludGVybmFsID0gQm94MkQuQ29tbW9uLmIyaW50ZXJuYWwsXG4gICAgICBiMlNldHRpbmdzID0gQm94MkQuQ29tbW9uLmIyU2V0dGluZ3MsXG4gICAgICBiMk1hdDIyID0gQm94MkQuQ29tbW9uLk1hdGguYjJNYXQyMixcbiAgICAgIGIyTWF0MzMgPSBCb3gyRC5Db21tb24uTWF0aC5iMk1hdDMzLFxuICAgICAgYjJNYXRoID0gQm94MkQuQ29tbW9uLk1hdGguYjJNYXRoLFxuICAgICAgYjJTd2VlcCA9IEJveDJELkNvbW1vbi5NYXRoLmIyU3dlZXAsXG4gICAgICBiMlRyYW5zZm9ybSA9IEJveDJELkNvbW1vbi5NYXRoLmIyVHJhbnNmb3JtLFxuICAgICAgYjJWZWMyID0gQm94MkQuQ29tbW9uLk1hdGguYjJWZWMyLFxuICAgICAgYjJWZWMzID0gQm94MkQuQ29tbW9uLk1hdGguYjJWZWMzLFxuICAgICAgYjJEaXN0YW5jZUpvaW50ID0gQm94MkQuRHluYW1pY3MuSm9pbnRzLmIyRGlzdGFuY2VKb2ludCxcbiAgICAgIGIyRGlzdGFuY2VKb2ludERlZiA9IEJveDJELkR5bmFtaWNzLkpvaW50cy5iMkRpc3RhbmNlSm9pbnREZWYsXG4gICAgICBiMkZyaWN0aW9uSm9pbnQgPSBCb3gyRC5EeW5hbWljcy5Kb2ludHMuYjJGcmljdGlvbkpvaW50LFxuICAgICAgYjJGcmljdGlvbkpvaW50RGVmID0gQm94MkQuRHluYW1pY3MuSm9pbnRzLmIyRnJpY3Rpb25Kb2ludERlZixcbiAgICAgIGIyR2VhckpvaW50ID0gQm94MkQuRHluYW1pY3MuSm9pbnRzLmIyR2VhckpvaW50LFxuICAgICAgYjJHZWFySm9pbnREZWYgPSBCb3gyRC5EeW5hbWljcy5Kb2ludHMuYjJHZWFySm9pbnREZWYsXG4gICAgICBiMkphY29iaWFuID0gQm94MkQuRHluYW1pY3MuSm9pbnRzLmIySmFjb2JpYW4sXG4gICAgICBiMkpvaW50ID0gQm94MkQuRHluYW1pY3MuSm9pbnRzLmIySm9pbnQsXG4gICAgICBiMkpvaW50RGVmID0gQm94MkQuRHluYW1pY3MuSm9pbnRzLmIySm9pbnREZWYsXG4gICAgICBiMkpvaW50RWRnZSA9IEJveDJELkR5bmFtaWNzLkpvaW50cy5iMkpvaW50RWRnZSxcbiAgICAgIGIyTGluZUpvaW50ID0gQm94MkQuRHluYW1pY3MuSm9pbnRzLmIyTGluZUpvaW50LFxuICAgICAgYjJMaW5lSm9pbnREZWYgPSBCb3gyRC5EeW5hbWljcy5Kb2ludHMuYjJMaW5lSm9pbnREZWYsXG4gICAgICBiMk1vdXNlSm9pbnQgPSBCb3gyRC5EeW5hbWljcy5Kb2ludHMuYjJNb3VzZUpvaW50LFxuICAgICAgYjJNb3VzZUpvaW50RGVmID0gQm94MkQuRHluYW1pY3MuSm9pbnRzLmIyTW91c2VKb2ludERlZixcbiAgICAgIGIyUHJpc21hdGljSm9pbnQgPSBCb3gyRC5EeW5hbWljcy5Kb2ludHMuYjJQcmlzbWF0aWNKb2ludCxcbiAgICAgIGIyUHJpc21hdGljSm9pbnREZWYgPSBCb3gyRC5EeW5hbWljcy5Kb2ludHMuYjJQcmlzbWF0aWNKb2ludERlZixcbiAgICAgIGIyUHVsbGV5Sm9pbnQgPSBCb3gyRC5EeW5hbWljcy5Kb2ludHMuYjJQdWxsZXlKb2ludCxcbiAgICAgIGIyUHVsbGV5Sm9pbnREZWYgPSBCb3gyRC5EeW5hbWljcy5Kb2ludHMuYjJQdWxsZXlKb2ludERlZixcbiAgICAgIGIyUmV2b2x1dGVKb2ludCA9IEJveDJELkR5bmFtaWNzLkpvaW50cy5iMlJldm9sdXRlSm9pbnQsXG4gICAgICBiMlJldm9sdXRlSm9pbnREZWYgPSBCb3gyRC5EeW5hbWljcy5Kb2ludHMuYjJSZXZvbHV0ZUpvaW50RGVmLFxuICAgICAgYjJXZWxkSm9pbnQgPSBCb3gyRC5EeW5hbWljcy5Kb2ludHMuYjJXZWxkSm9pbnQsXG4gICAgICBiMldlbGRKb2ludERlZiA9IEJveDJELkR5bmFtaWNzLkpvaW50cy5iMldlbGRKb2ludERlZixcbiAgICAgIGIyQm9keSA9IEJveDJELkR5bmFtaWNzLmIyQm9keSxcbiAgICAgIGIyQm9keURlZiA9IEJveDJELkR5bmFtaWNzLmIyQm9keURlZixcbiAgICAgIGIyQ29udGFjdEZpbHRlciA9IEJveDJELkR5bmFtaWNzLmIyQ29udGFjdEZpbHRlcixcbiAgICAgIGIyQ29udGFjdEltcHVsc2UgPSBCb3gyRC5EeW5hbWljcy5iMkNvbnRhY3RJbXB1bHNlLFxuICAgICAgYjJDb250YWN0TGlzdGVuZXIgPSBCb3gyRC5EeW5hbWljcy5iMkNvbnRhY3RMaXN0ZW5lcixcbiAgICAgIGIyQ29udGFjdE1hbmFnZXIgPSBCb3gyRC5EeW5hbWljcy5iMkNvbnRhY3RNYW5hZ2VyLFxuICAgICAgYjJEZWJ1Z0RyYXcgPSBCb3gyRC5EeW5hbWljcy5iMkRlYnVnRHJhdyxcbiAgICAgIGIyRGVzdHJ1Y3Rpb25MaXN0ZW5lciA9IEJveDJELkR5bmFtaWNzLmIyRGVzdHJ1Y3Rpb25MaXN0ZW5lcixcbiAgICAgIGIyRmlsdGVyRGF0YSA9IEJveDJELkR5bmFtaWNzLmIyRmlsdGVyRGF0YSxcbiAgICAgIGIyRml4dHVyZSA9IEJveDJELkR5bmFtaWNzLmIyRml4dHVyZSxcbiAgICAgIGIyRml4dHVyZURlZiA9IEJveDJELkR5bmFtaWNzLmIyRml4dHVyZURlZixcbiAgICAgIGIySXNsYW5kID0gQm94MkQuRHluYW1pY3MuYjJJc2xhbmQsXG4gICAgICBiMlRpbWVTdGVwID0gQm94MkQuRHluYW1pY3MuYjJUaW1lU3RlcCxcbiAgICAgIGIyV29ybGQgPSBCb3gyRC5EeW5hbWljcy5iMldvcmxkO1xuXG4gICBCb3gyRC5pbmhlcml0KGIyRGlzdGFuY2VKb2ludCwgQm94MkQuRHluYW1pY3MuSm9pbnRzLmIySm9pbnQpO1xuICAgYjJEaXN0YW5jZUpvaW50LnByb3RvdHlwZS5fX3N1cGVyID0gQm94MkQuRHluYW1pY3MuSm9pbnRzLmIySm9pbnQucHJvdG90eXBlO1xuICAgYjJEaXN0YW5jZUpvaW50LmIyRGlzdGFuY2VKb2ludCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIEJveDJELkR5bmFtaWNzLkpvaW50cy5iMkpvaW50LmIySm9pbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIHRoaXMubV9sb2NhbEFuY2hvcjEgPSBuZXcgYjJWZWMyKCk7XG4gICAgICB0aGlzLm1fbG9jYWxBbmNob3IyID0gbmV3IGIyVmVjMigpO1xuICAgICAgdGhpcy5tX3UgPSBuZXcgYjJWZWMyKCk7XG4gICB9O1xuICAgYjJEaXN0YW5jZUpvaW50LnByb3RvdHlwZS5HZXRBbmNob3JBID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMubV9ib2R5QS5HZXRXb3JsZFBvaW50KHRoaXMubV9sb2NhbEFuY2hvcjEpO1xuICAgfVxuICAgYjJEaXN0YW5jZUpvaW50LnByb3RvdHlwZS5HZXRBbmNob3JCID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMubV9ib2R5Qi5HZXRXb3JsZFBvaW50KHRoaXMubV9sb2NhbEFuY2hvcjIpO1xuICAgfVxuICAgYjJEaXN0YW5jZUpvaW50LnByb3RvdHlwZS5HZXRSZWFjdGlvbkZvcmNlID0gZnVuY3Rpb24gKGludl9kdCkge1xuICAgICAgaWYgKGludl9kdCA9PT0gdW5kZWZpbmVkKSBpbnZfZHQgPSAwO1xuICAgICAgcmV0dXJuIG5ldyBiMlZlYzIoaW52X2R0ICogdGhpcy5tX2ltcHVsc2UgKiB0aGlzLm1fdS54LCBpbnZfZHQgKiB0aGlzLm1faW1wdWxzZSAqIHRoaXMubV91LnkpO1xuICAgfVxuICAgYjJEaXN0YW5jZUpvaW50LnByb3RvdHlwZS5HZXRSZWFjdGlvblRvcnF1ZSA9IGZ1bmN0aW9uIChpbnZfZHQpIHtcbiAgICAgIGlmIChpbnZfZHQgPT09IHVuZGVmaW5lZCkgaW52X2R0ID0gMDtcbiAgICAgIHJldHVybiAwLjA7XG4gICB9XG4gICBiMkRpc3RhbmNlSm9pbnQucHJvdG90eXBlLkdldExlbmd0aCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzLm1fbGVuZ3RoO1xuICAgfVxuICAgYjJEaXN0YW5jZUpvaW50LnByb3RvdHlwZS5TZXRMZW5ndGggPSBmdW5jdGlvbiAobGVuZ3RoKSB7XG4gICAgICBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQpIGxlbmd0aCA9IDA7XG4gICAgICB0aGlzLm1fbGVuZ3RoID0gbGVuZ3RoO1xuICAgfVxuICAgYjJEaXN0YW5jZUpvaW50LnByb3RvdHlwZS5HZXRGcmVxdWVuY3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5tX2ZyZXF1ZW5jeUh6O1xuICAgfVxuICAgYjJEaXN0YW5jZUpvaW50LnByb3RvdHlwZS5TZXRGcmVxdWVuY3kgPSBmdW5jdGlvbiAoaHopIHtcbiAgICAgIGlmIChoeiA9PT0gdW5kZWZpbmVkKSBoeiA9IDA7XG4gICAgICB0aGlzLm1fZnJlcXVlbmN5SHogPSBoejtcbiAgIH1cbiAgIGIyRGlzdGFuY2VKb2ludC5wcm90b3R5cGUuR2V0RGFtcGluZ1JhdGlvID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMubV9kYW1waW5nUmF0aW87XG4gICB9XG4gICBiMkRpc3RhbmNlSm9pbnQucHJvdG90eXBlLlNldERhbXBpbmdSYXRpbyA9IGZ1bmN0aW9uIChyYXRpbykge1xuICAgICAgaWYgKHJhdGlvID09PSB1bmRlZmluZWQpIHJhdGlvID0gMDtcbiAgICAgIHRoaXMubV9kYW1waW5nUmF0aW8gPSByYXRpbztcbiAgIH1cbiAgIGIyRGlzdGFuY2VKb2ludC5wcm90b3R5cGUuYjJEaXN0YW5jZUpvaW50ID0gZnVuY3Rpb24gKGRlZikge1xuICAgICAgdGhpcy5fX3N1cGVyLmIySm9pbnQuY2FsbCh0aGlzLCBkZWYpO1xuICAgICAgdmFyIHRNYXQ7XG4gICAgICB2YXIgdFggPSAwO1xuICAgICAgdmFyIHRZID0gMDtcbiAgICAgIHRoaXMubV9sb2NhbEFuY2hvcjEuU2V0VihkZWYubG9jYWxBbmNob3JBKTtcbiAgICAgIHRoaXMubV9sb2NhbEFuY2hvcjIuU2V0VihkZWYubG9jYWxBbmNob3JCKTtcbiAgICAgIHRoaXMubV9sZW5ndGggPSBkZWYubGVuZ3RoO1xuICAgICAgdGhpcy5tX2ZyZXF1ZW5jeUh6ID0gZGVmLmZyZXF1ZW5jeUh6O1xuICAgICAgdGhpcy5tX2RhbXBpbmdSYXRpbyA9IGRlZi5kYW1waW5nUmF0aW87XG4gICAgICB0aGlzLm1faW1wdWxzZSA9IDAuMDtcbiAgICAgIHRoaXMubV9nYW1tYSA9IDAuMDtcbiAgICAgIHRoaXMubV9iaWFzID0gMC4wO1xuICAgfVxuICAgYjJEaXN0YW5jZUpvaW50LnByb3RvdHlwZS5Jbml0VmVsb2NpdHlDb25zdHJhaW50cyA9IGZ1bmN0aW9uIChzdGVwKSB7XG4gICAgICB2YXIgdE1hdDtcbiAgICAgIHZhciB0WCA9IDA7XG4gICAgICB2YXIgYkEgPSB0aGlzLm1fYm9keUE7XG4gICAgICB2YXIgYkIgPSB0aGlzLm1fYm9keUI7XG4gICAgICB0TWF0ID0gYkEubV94Zi5SO1xuICAgICAgdmFyIHIxWCA9IHRoaXMubV9sb2NhbEFuY2hvcjEueCAtIGJBLm1fc3dlZXAubG9jYWxDZW50ZXIueDtcbiAgICAgIHZhciByMVkgPSB0aGlzLm1fbG9jYWxBbmNob3IxLnkgLSBiQS5tX3N3ZWVwLmxvY2FsQ2VudGVyLnk7XG4gICAgICB0WCA9ICh0TWF0LmNvbDEueCAqIHIxWCArIHRNYXQuY29sMi54ICogcjFZKTtcbiAgICAgIHIxWSA9ICh0TWF0LmNvbDEueSAqIHIxWCArIHRNYXQuY29sMi55ICogcjFZKTtcbiAgICAgIHIxWCA9IHRYO1xuICAgICAgdE1hdCA9IGJCLm1feGYuUjtcbiAgICAgIHZhciByMlggPSB0aGlzLm1fbG9jYWxBbmNob3IyLnggLSBiQi5tX3N3ZWVwLmxvY2FsQ2VudGVyLng7XG4gICAgICB2YXIgcjJZID0gdGhpcy5tX2xvY2FsQW5jaG9yMi55IC0gYkIubV9zd2VlcC5sb2NhbENlbnRlci55O1xuICAgICAgdFggPSAodE1hdC5jb2wxLnggKiByMlggKyB0TWF0LmNvbDIueCAqIHIyWSk7XG4gICAgICByMlkgPSAodE1hdC5jb2wxLnkgKiByMlggKyB0TWF0LmNvbDIueSAqIHIyWSk7XG4gICAgICByMlggPSB0WDtcbiAgICAgIHRoaXMubV91LnggPSBiQi5tX3N3ZWVwLmMueCArIHIyWCAtIGJBLm1fc3dlZXAuYy54IC0gcjFYO1xuICAgICAgdGhpcy5tX3UueSA9IGJCLm1fc3dlZXAuYy55ICsgcjJZIC0gYkEubV9zd2VlcC5jLnkgLSByMVk7XG4gICAgICB2YXIgbGVuZ3RoID0gTWF0aC5zcXJ0KHRoaXMubV91LnggKiB0aGlzLm1fdS54ICsgdGhpcy5tX3UueSAqIHRoaXMubV91LnkpO1xuICAgICAgaWYgKGxlbmd0aCA+IGIyU2V0dGluZ3MuYjJfbGluZWFyU2xvcCkge1xuICAgICAgICAgdGhpcy5tX3UuTXVsdGlwbHkoMS4wIC8gbGVuZ3RoKTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICAgdGhpcy5tX3UuU2V0WmVybygpO1xuICAgICAgfVxuICAgICAgdmFyIGNyMXUgPSAocjFYICogdGhpcy5tX3UueSAtIHIxWSAqIHRoaXMubV91LngpO1xuICAgICAgdmFyIGNyMnUgPSAocjJYICogdGhpcy5tX3UueSAtIHIyWSAqIHRoaXMubV91LngpO1xuICAgICAgdmFyIGludk1hc3MgPSBiQS5tX2ludk1hc3MgKyBiQS5tX2ludkkgKiBjcjF1ICogY3IxdSArIGJCLm1faW52TWFzcyArIGJCLm1faW52SSAqIGNyMnUgKiBjcjJ1O1xuICAgICAgdGhpcy5tX21hc3MgPSBpbnZNYXNzICE9IDAuMCA/IDEuMCAvIGludk1hc3MgOiAwLjA7XG4gICAgICBpZiAodGhpcy5tX2ZyZXF1ZW5jeUh6ID4gMC4wKSB7XG4gICAgICAgICB2YXIgQyA9IGxlbmd0aCAtIHRoaXMubV9sZW5ndGg7XG4gICAgICAgICB2YXIgb21lZ2EgPSAyLjAgKiBNYXRoLlBJICogdGhpcy5tX2ZyZXF1ZW5jeUh6O1xuICAgICAgICAgdmFyIGQgPSAyLjAgKiB0aGlzLm1fbWFzcyAqIHRoaXMubV9kYW1waW5nUmF0aW8gKiBvbWVnYTtcbiAgICAgICAgIHZhciBrID0gdGhpcy5tX21hc3MgKiBvbWVnYSAqIG9tZWdhO1xuICAgICAgICAgdGhpcy5tX2dhbW1hID0gc3RlcC5kdCAqIChkICsgc3RlcC5kdCAqIGspO1xuICAgICAgICAgdGhpcy5tX2dhbW1hID0gdGhpcy5tX2dhbW1hICE9IDAuMCA/IDEgLyB0aGlzLm1fZ2FtbWEgOiAwLjA7XG4gICAgICAgICB0aGlzLm1fYmlhcyA9IEMgKiBzdGVwLmR0ICogayAqIHRoaXMubV9nYW1tYTtcbiAgICAgICAgIHRoaXMubV9tYXNzID0gaW52TWFzcyArIHRoaXMubV9nYW1tYTtcbiAgICAgICAgIHRoaXMubV9tYXNzID0gdGhpcy5tX21hc3MgIT0gMC4wID8gMS4wIC8gdGhpcy5tX21hc3MgOiAwLjA7XG4gICAgICB9XG4gICAgICBpZiAoc3RlcC53YXJtU3RhcnRpbmcpIHtcbiAgICAgICAgIHRoaXMubV9pbXB1bHNlICo9IHN0ZXAuZHRSYXRpbztcbiAgICAgICAgIHZhciBQWCA9IHRoaXMubV9pbXB1bHNlICogdGhpcy5tX3UueDtcbiAgICAgICAgIHZhciBQWSA9IHRoaXMubV9pbXB1bHNlICogdGhpcy5tX3UueTtcbiAgICAgICAgIGJBLm1fbGluZWFyVmVsb2NpdHkueCAtPSBiQS5tX2ludk1hc3MgKiBQWDtcbiAgICAgICAgIGJBLm1fbGluZWFyVmVsb2NpdHkueSAtPSBiQS5tX2ludk1hc3MgKiBQWTtcbiAgICAgICAgIGJBLm1fYW5ndWxhclZlbG9jaXR5IC09IGJBLm1faW52SSAqIChyMVggKiBQWSAtIHIxWSAqIFBYKTtcbiAgICAgICAgIGJCLm1fbGluZWFyVmVsb2NpdHkueCArPSBiQi5tX2ludk1hc3MgKiBQWDtcbiAgICAgICAgIGJCLm1fbGluZWFyVmVsb2NpdHkueSArPSBiQi5tX2ludk1hc3MgKiBQWTtcbiAgICAgICAgIGJCLm1fYW5ndWxhclZlbG9jaXR5ICs9IGJCLm1faW52SSAqIChyMlggKiBQWSAtIHIyWSAqIFBYKTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICAgdGhpcy5tX2ltcHVsc2UgPSAwLjA7XG4gICAgICB9XG4gICB9XG4gICBiMkRpc3RhbmNlSm9pbnQucHJvdG90eXBlLlNvbHZlVmVsb2NpdHlDb25zdHJhaW50cyA9IGZ1bmN0aW9uIChzdGVwKSB7XG4gICAgICB2YXIgdE1hdDtcbiAgICAgIHZhciBiQSA9IHRoaXMubV9ib2R5QTtcbiAgICAgIHZhciBiQiA9IHRoaXMubV9ib2R5QjtcbiAgICAgIHRNYXQgPSBiQS5tX3hmLlI7XG4gICAgICB2YXIgcjFYID0gdGhpcy5tX2xvY2FsQW5jaG9yMS54IC0gYkEubV9zd2VlcC5sb2NhbENlbnRlci54O1xuICAgICAgdmFyIHIxWSA9IHRoaXMubV9sb2NhbEFuY2hvcjEueSAtIGJBLm1fc3dlZXAubG9jYWxDZW50ZXIueTtcbiAgICAgIHZhciB0WCA9ICh0TWF0LmNvbDEueCAqIHIxWCArIHRNYXQuY29sMi54ICogcjFZKTtcbiAgICAgIHIxWSA9ICh0TWF0LmNvbDEueSAqIHIxWCArIHRNYXQuY29sMi55ICogcjFZKTtcbiAgICAgIHIxWCA9IHRYO1xuICAgICAgdE1hdCA9IGJCLm1feGYuUjtcbiAgICAgIHZhciByMlggPSB0aGlzLm1fbG9jYWxBbmNob3IyLnggLSBiQi5tX3N3ZWVwLmxvY2FsQ2VudGVyLng7XG4gICAgICB2YXIgcjJZID0gdGhpcy5tX2xvY2FsQW5jaG9yMi55IC0gYkIubV9zd2VlcC5sb2NhbENlbnRlci55O1xuICAgICAgdFggPSAodE1hdC5jb2wxLnggKiByMlggKyB0TWF0LmNvbDIueCAqIHIyWSk7XG4gICAgICByMlkgPSAodE1hdC5jb2wxLnkgKiByMlggKyB0TWF0LmNvbDIueSAqIHIyWSk7XG4gICAgICByMlggPSB0WDtcbiAgICAgIHZhciB2MVggPSBiQS5tX2xpbmVhclZlbG9jaXR5LnggKyAoKC1iQS5tX2FuZ3VsYXJWZWxvY2l0eSAqIHIxWSkpO1xuICAgICAgdmFyIHYxWSA9IGJBLm1fbGluZWFyVmVsb2NpdHkueSArIChiQS5tX2FuZ3VsYXJWZWxvY2l0eSAqIHIxWCk7XG4gICAgICB2YXIgdjJYID0gYkIubV9saW5lYXJWZWxvY2l0eS54ICsgKCgtYkIubV9hbmd1bGFyVmVsb2NpdHkgKiByMlkpKTtcbiAgICAgIHZhciB2MlkgPSBiQi5tX2xpbmVhclZlbG9jaXR5LnkgKyAoYkIubV9hbmd1bGFyVmVsb2NpdHkgKiByMlgpO1xuICAgICAgdmFyIENkb3QgPSAodGhpcy5tX3UueCAqICh2MlggLSB2MVgpICsgdGhpcy5tX3UueSAqICh2MlkgLSB2MVkpKTtcbiAgICAgIHZhciBpbXB1bHNlID0gKC10aGlzLm1fbWFzcyAqIChDZG90ICsgdGhpcy5tX2JpYXMgKyB0aGlzLm1fZ2FtbWEgKiB0aGlzLm1faW1wdWxzZSkpO1xuICAgICAgdGhpcy5tX2ltcHVsc2UgKz0gaW1wdWxzZTtcbiAgICAgIHZhciBQWCA9IGltcHVsc2UgKiB0aGlzLm1fdS54O1xuICAgICAgdmFyIFBZID0gaW1wdWxzZSAqIHRoaXMubV91Lnk7XG4gICAgICBiQS5tX2xpbmVhclZlbG9jaXR5LnggLT0gYkEubV9pbnZNYXNzICogUFg7XG4gICAgICBiQS5tX2xpbmVhclZlbG9jaXR5LnkgLT0gYkEubV9pbnZNYXNzICogUFk7XG4gICAgICBiQS5tX2FuZ3VsYXJWZWxvY2l0eSAtPSBiQS5tX2ludkkgKiAocjFYICogUFkgLSByMVkgKiBQWCk7XG4gICAgICBiQi5tX2xpbmVhclZlbG9jaXR5LnggKz0gYkIubV9pbnZNYXNzICogUFg7XG4gICAgICBiQi5tX2xpbmVhclZlbG9jaXR5LnkgKz0gYkIubV9pbnZNYXNzICogUFk7XG4gICAgICBiQi5tX2FuZ3VsYXJWZWxvY2l0eSArPSBiQi5tX2ludkkgKiAocjJYICogUFkgLSByMlkgKiBQWCk7XG4gICB9XG4gICBiMkRpc3RhbmNlSm9pbnQucHJvdG90eXBlLlNvbHZlUG9zaXRpb25Db25zdHJhaW50cyA9IGZ1bmN0aW9uIChiYXVtZ2FydGUpIHtcbiAgICAgIGlmIChiYXVtZ2FydGUgPT09IHVuZGVmaW5lZCkgYmF1bWdhcnRlID0gMDtcbiAgICAgIHZhciB0TWF0O1xuICAgICAgaWYgKHRoaXMubV9mcmVxdWVuY3lIeiA+IDAuMCkge1xuICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICB2YXIgYkEgPSB0aGlzLm1fYm9keUE7XG4gICAgICB2YXIgYkIgPSB0aGlzLm1fYm9keUI7XG4gICAgICB0TWF0ID0gYkEubV94Zi5SO1xuICAgICAgdmFyIHIxWCA9IHRoaXMubV9sb2NhbEFuY2hvcjEueCAtIGJBLm1fc3dlZXAubG9jYWxDZW50ZXIueDtcbiAgICAgIHZhciByMVkgPSB0aGlzLm1fbG9jYWxBbmNob3IxLnkgLSBiQS5tX3N3ZWVwLmxvY2FsQ2VudGVyLnk7XG4gICAgICB2YXIgdFggPSAodE1hdC5jb2wxLnggKiByMVggKyB0TWF0LmNvbDIueCAqIHIxWSk7XG4gICAgICByMVkgPSAodE1hdC5jb2wxLnkgKiByMVggKyB0TWF0LmNvbDIueSAqIHIxWSk7XG4gICAgICByMVggPSB0WDtcbiAgICAgIHRNYXQgPSBiQi5tX3hmLlI7XG4gICAgICB2YXIgcjJYID0gdGhpcy5tX2xvY2FsQW5jaG9yMi54IC0gYkIubV9zd2VlcC5sb2NhbENlbnRlci54O1xuICAgICAgdmFyIHIyWSA9IHRoaXMubV9sb2NhbEFuY2hvcjIueSAtIGJCLm1fc3dlZXAubG9jYWxDZW50ZXIueTtcbiAgICAgIHRYID0gKHRNYXQuY29sMS54ICogcjJYICsgdE1hdC5jb2wyLnggKiByMlkpO1xuICAgICAgcjJZID0gKHRNYXQuY29sMS55ICogcjJYICsgdE1hdC5jb2wyLnkgKiByMlkpO1xuICAgICAgcjJYID0gdFg7XG4gICAgICB2YXIgZFggPSBiQi5tX3N3ZWVwLmMueCArIHIyWCAtIGJBLm1fc3dlZXAuYy54IC0gcjFYO1xuICAgICAgdmFyIGRZID0gYkIubV9zd2VlcC5jLnkgKyByMlkgLSBiQS5tX3N3ZWVwLmMueSAtIHIxWTtcbiAgICAgIHZhciBsZW5ndGggPSBNYXRoLnNxcnQoZFggKiBkWCArIGRZICogZFkpO1xuICAgICAgZFggLz0gbGVuZ3RoO1xuICAgICAgZFkgLz0gbGVuZ3RoO1xuICAgICAgdmFyIEMgPSBsZW5ndGggLSB0aGlzLm1fbGVuZ3RoO1xuICAgICAgQyA9IGIyTWF0aC5DbGFtcChDLCAoLWIyU2V0dGluZ3MuYjJfbWF4TGluZWFyQ29ycmVjdGlvbiksIGIyU2V0dGluZ3MuYjJfbWF4TGluZWFyQ29ycmVjdGlvbik7XG4gICAgICB2YXIgaW1wdWxzZSA9ICgtdGhpcy5tX21hc3MgKiBDKTtcbiAgICAgIHRoaXMubV91LlNldChkWCwgZFkpO1xuICAgICAgdmFyIFBYID0gaW1wdWxzZSAqIHRoaXMubV91Lng7XG4gICAgICB2YXIgUFkgPSBpbXB1bHNlICogdGhpcy5tX3UueTtcbiAgICAgIGJBLm1fc3dlZXAuYy54IC09IGJBLm1faW52TWFzcyAqIFBYO1xuICAgICAgYkEubV9zd2VlcC5jLnkgLT0gYkEubV9pbnZNYXNzICogUFk7XG4gICAgICBiQS5tX3N3ZWVwLmEgLT0gYkEubV9pbnZJICogKHIxWCAqIFBZIC0gcjFZICogUFgpO1xuICAgICAgYkIubV9zd2VlcC5jLnggKz0gYkIubV9pbnZNYXNzICogUFg7XG4gICAgICBiQi5tX3N3ZWVwLmMueSArPSBiQi5tX2ludk1hc3MgKiBQWTtcbiAgICAgIGJCLm1fc3dlZXAuYSArPSBiQi5tX2ludkkgKiAocjJYICogUFkgLSByMlkgKiBQWCk7XG4gICAgICBiQS5TeW5jaHJvbml6ZVRyYW5zZm9ybSgpO1xuICAgICAgYkIuU3luY2hyb25pemVUcmFuc2Zvcm0oKTtcbiAgICAgIHJldHVybiBiMk1hdGguQWJzKEMpIDwgYjJTZXR0aW5ncy5iMl9saW5lYXJTbG9wO1xuICAgfVxuICAgQm94MkQuaW5oZXJpdChiMkRpc3RhbmNlSm9pbnREZWYsIEJveDJELkR5bmFtaWNzLkpvaW50cy5iMkpvaW50RGVmKTtcbiAgIGIyRGlzdGFuY2VKb2ludERlZi5wcm90b3R5cGUuX19zdXBlciA9IEJveDJELkR5bmFtaWNzLkpvaW50cy5iMkpvaW50RGVmLnByb3RvdHlwZTtcbiAgIGIyRGlzdGFuY2VKb2ludERlZi5iMkRpc3RhbmNlSm9pbnREZWYgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBCb3gyRC5EeW5hbWljcy5Kb2ludHMuYjJKb2ludERlZi5iMkpvaW50RGVmLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB0aGlzLmxvY2FsQW5jaG9yQSA9IG5ldyBiMlZlYzIoKTtcbiAgICAgIHRoaXMubG9jYWxBbmNob3JCID0gbmV3IGIyVmVjMigpO1xuICAgfTtcbiAgIGIyRGlzdGFuY2VKb2ludERlZi5wcm90b3R5cGUuYjJEaXN0YW5jZUpvaW50RGVmID0gZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcy5fX3N1cGVyLmIySm9pbnREZWYuY2FsbCh0aGlzKTtcbiAgICAgIHRoaXMudHlwZSA9IGIySm9pbnQuZV9kaXN0YW5jZUpvaW50O1xuICAgICAgdGhpcy5sZW5ndGggPSAxLjA7XG4gICAgICB0aGlzLmZyZXF1ZW5jeUh6ID0gMC4wO1xuICAgICAgdGhpcy5kYW1waW5nUmF0aW8gPSAwLjA7XG4gICB9XG4gICBiMkRpc3RhbmNlSm9pbnREZWYucHJvdG90eXBlLkluaXRpYWxpemUgPSBmdW5jdGlvbiAoYkEsIGJCLCBhbmNob3JBLCBhbmNob3JCKSB7XG4gICAgICB0aGlzLmJvZHlBID0gYkE7XG4gICAgICB0aGlzLmJvZHlCID0gYkI7XG4gICAgICB0aGlzLmxvY2FsQW5jaG9yQS5TZXRWKHRoaXMuYm9keUEuR2V0TG9jYWxQb2ludChhbmNob3JBKSk7XG4gICAgICB0aGlzLmxvY2FsQW5jaG9yQi5TZXRWKHRoaXMuYm9keUIuR2V0TG9jYWxQb2ludChhbmNob3JCKSk7XG4gICAgICB2YXIgZFggPSBhbmNob3JCLnggLSBhbmNob3JBLng7XG4gICAgICB2YXIgZFkgPSBhbmNob3JCLnkgLSBhbmNob3JBLnk7XG4gICAgICB0aGlzLmxlbmd0aCA9IE1hdGguc3FydChkWCAqIGRYICsgZFkgKiBkWSk7XG4gICAgICB0aGlzLmZyZXF1ZW5jeUh6ID0gMC4wO1xuICAgICAgdGhpcy5kYW1waW5nUmF0aW8gPSAwLjA7XG4gICB9XG4gICBCb3gyRC5pbmhlcml0KGIyRnJpY3Rpb25Kb2ludCwgQm94MkQuRHluYW1pY3MuSm9pbnRzLmIySm9pbnQpO1xuICAgYjJGcmljdGlvbkpvaW50LnByb3RvdHlwZS5fX3N1cGVyID0gQm94MkQuRHluYW1pY3MuSm9pbnRzLmIySm9pbnQucHJvdG90eXBlO1xuICAgYjJGcmljdGlvbkpvaW50LmIyRnJpY3Rpb25Kb2ludCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIEJveDJELkR5bmFtaWNzLkpvaW50cy5iMkpvaW50LmIySm9pbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIHRoaXMubV9sb2NhbEFuY2hvckEgPSBuZXcgYjJWZWMyKCk7XG4gICAgICB0aGlzLm1fbG9jYWxBbmNob3JCID0gbmV3IGIyVmVjMigpO1xuICAgICAgdGhpcy5tX2xpbmVhck1hc3MgPSBuZXcgYjJNYXQyMigpO1xuICAgICAgdGhpcy5tX2xpbmVhckltcHVsc2UgPSBuZXcgYjJWZWMyKCk7XG4gICB9O1xuICAgYjJGcmljdGlvbkpvaW50LnByb3RvdHlwZS5HZXRBbmNob3JBID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMubV9ib2R5QS5HZXRXb3JsZFBvaW50KHRoaXMubV9sb2NhbEFuY2hvckEpO1xuICAgfVxuICAgYjJGcmljdGlvbkpvaW50LnByb3RvdHlwZS5HZXRBbmNob3JCID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMubV9ib2R5Qi5HZXRXb3JsZFBvaW50KHRoaXMubV9sb2NhbEFuY2hvckIpO1xuICAgfVxuICAgYjJGcmljdGlvbkpvaW50LnByb3RvdHlwZS5HZXRSZWFjdGlvbkZvcmNlID0gZnVuY3Rpb24gKGludl9kdCkge1xuICAgICAgaWYgKGludl9kdCA9PT0gdW5kZWZpbmVkKSBpbnZfZHQgPSAwO1xuICAgICAgcmV0dXJuIG5ldyBiMlZlYzIoaW52X2R0ICogdGhpcy5tX2xpbmVhckltcHVsc2UueCwgaW52X2R0ICogdGhpcy5tX2xpbmVhckltcHVsc2UueSk7XG4gICB9XG4gICBiMkZyaWN0aW9uSm9pbnQucHJvdG90eXBlLkdldFJlYWN0aW9uVG9ycXVlID0gZnVuY3Rpb24gKGludl9kdCkge1xuICAgICAgaWYgKGludl9kdCA9PT0gdW5kZWZpbmVkKSBpbnZfZHQgPSAwO1xuICAgICAgcmV0dXJuIGludl9kdCAqIHRoaXMubV9hbmd1bGFySW1wdWxzZTtcbiAgIH1cbiAgIGIyRnJpY3Rpb25Kb2ludC5wcm90b3R5cGUuU2V0TWF4Rm9yY2UgPSBmdW5jdGlvbiAoZm9yY2UpIHtcbiAgICAgIGlmIChmb3JjZSA9PT0gdW5kZWZpbmVkKSBmb3JjZSA9IDA7XG4gICAgICB0aGlzLm1fbWF4Rm9yY2UgPSBmb3JjZTtcbiAgIH1cbiAgIGIyRnJpY3Rpb25Kb2ludC5wcm90b3R5cGUuR2V0TWF4Rm9yY2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5tX21heEZvcmNlO1xuICAgfVxuICAgYjJGcmljdGlvbkpvaW50LnByb3RvdHlwZS5TZXRNYXhUb3JxdWUgPSBmdW5jdGlvbiAodG9ycXVlKSB7XG4gICAgICBpZiAodG9ycXVlID09PSB1bmRlZmluZWQpIHRvcnF1ZSA9IDA7XG4gICAgICB0aGlzLm1fbWF4VG9ycXVlID0gdG9ycXVlO1xuICAgfVxuICAgYjJGcmljdGlvbkpvaW50LnByb3RvdHlwZS5HZXRNYXhUb3JxdWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5tX21heFRvcnF1ZTtcbiAgIH1cbiAgIGIyRnJpY3Rpb25Kb2ludC5wcm90b3R5cGUuYjJGcmljdGlvbkpvaW50ID0gZnVuY3Rpb24gKGRlZikge1xuICAgICAgdGhpcy5fX3N1cGVyLmIySm9pbnQuY2FsbCh0aGlzLCBkZWYpO1xuICAgICAgdGhpcy5tX2xvY2FsQW5jaG9yQS5TZXRWKGRlZi5sb2NhbEFuY2hvckEpO1xuICAgICAgdGhpcy5tX2xvY2FsQW5jaG9yQi5TZXRWKGRlZi5sb2NhbEFuY2hvckIpO1xuICAgICAgdGhpcy5tX2xpbmVhck1hc3MuU2V0WmVybygpO1xuICAgICAgdGhpcy5tX2FuZ3VsYXJNYXNzID0gMC4wO1xuICAgICAgdGhpcy5tX2xpbmVhckltcHVsc2UuU2V0WmVybygpO1xuICAgICAgdGhpcy5tX2FuZ3VsYXJJbXB1bHNlID0gMC4wO1xuICAgICAgdGhpcy5tX21heEZvcmNlID0gZGVmLm1heEZvcmNlO1xuICAgICAgdGhpcy5tX21heFRvcnF1ZSA9IGRlZi5tYXhUb3JxdWU7XG4gICB9XG4gICBiMkZyaWN0aW9uSm9pbnQucHJvdG90eXBlLkluaXRWZWxvY2l0eUNvbnN0cmFpbnRzID0gZnVuY3Rpb24gKHN0ZXApIHtcbiAgICAgIHZhciB0TWF0O1xuICAgICAgdmFyIHRYID0gMDtcbiAgICAgIHZhciBiQSA9IHRoaXMubV9ib2R5QTtcbiAgICAgIHZhciBiQiA9IHRoaXMubV9ib2R5QjtcbiAgICAgIHRNYXQgPSBiQS5tX3hmLlI7XG4gICAgICB2YXIgckFYID0gdGhpcy5tX2xvY2FsQW5jaG9yQS54IC0gYkEubV9zd2VlcC5sb2NhbENlbnRlci54O1xuICAgICAgdmFyIHJBWSA9IHRoaXMubV9sb2NhbEFuY2hvckEueSAtIGJBLm1fc3dlZXAubG9jYWxDZW50ZXIueTtcbiAgICAgIHRYID0gKHRNYXQuY29sMS54ICogckFYICsgdE1hdC5jb2wyLnggKiByQVkpO1xuICAgICAgckFZID0gKHRNYXQuY29sMS55ICogckFYICsgdE1hdC5jb2wyLnkgKiByQVkpO1xuICAgICAgckFYID0gdFg7XG4gICAgICB0TWF0ID0gYkIubV94Zi5SO1xuICAgICAgdmFyIHJCWCA9IHRoaXMubV9sb2NhbEFuY2hvckIueCAtIGJCLm1fc3dlZXAubG9jYWxDZW50ZXIueDtcbiAgICAgIHZhciByQlkgPSB0aGlzLm1fbG9jYWxBbmNob3JCLnkgLSBiQi5tX3N3ZWVwLmxvY2FsQ2VudGVyLnk7XG4gICAgICB0WCA9ICh0TWF0LmNvbDEueCAqIHJCWCArIHRNYXQuY29sMi54ICogckJZKTtcbiAgICAgIHJCWSA9ICh0TWF0LmNvbDEueSAqIHJCWCArIHRNYXQuY29sMi55ICogckJZKTtcbiAgICAgIHJCWCA9IHRYO1xuICAgICAgdmFyIG1BID0gYkEubV9pbnZNYXNzO1xuICAgICAgdmFyIG1CID0gYkIubV9pbnZNYXNzO1xuICAgICAgdmFyIGlBID0gYkEubV9pbnZJO1xuICAgICAgdmFyIGlCID0gYkIubV9pbnZJO1xuICAgICAgdmFyIEsgPSBuZXcgYjJNYXQyMigpO1xuICAgICAgSy5jb2wxLnggPSBtQSArIG1CO1xuICAgICAgSy5jb2wyLnggPSAwLjA7XG4gICAgICBLLmNvbDEueSA9IDAuMDtcbiAgICAgIEsuY29sMi55ID0gbUEgKyBtQjtcbiAgICAgIEsuY29sMS54ICs9IGlBICogckFZICogckFZO1xuICAgICAgSy5jb2wyLnggKz0gKC1pQSAqIHJBWCAqIHJBWSk7XG4gICAgICBLLmNvbDEueSArPSAoLWlBICogckFYICogckFZKTtcbiAgICAgIEsuY29sMi55ICs9IGlBICogckFYICogckFYO1xuICAgICAgSy5jb2wxLnggKz0gaUIgKiByQlkgKiByQlk7XG4gICAgICBLLmNvbDIueCArPSAoLWlCICogckJYICogckJZKTtcbiAgICAgIEsuY29sMS55ICs9ICgtaUIgKiByQlggKiByQlkpO1xuICAgICAgSy5jb2wyLnkgKz0gaUIgKiByQlggKiByQlg7XG4gICAgICBLLkdldEludmVyc2UodGhpcy5tX2xpbmVhck1hc3MpO1xuICAgICAgdGhpcy5tX2FuZ3VsYXJNYXNzID0gaUEgKyBpQjtcbiAgICAgIGlmICh0aGlzLm1fYW5ndWxhck1hc3MgPiAwLjApIHtcbiAgICAgICAgIHRoaXMubV9hbmd1bGFyTWFzcyA9IDEuMCAvIHRoaXMubV9hbmd1bGFyTWFzcztcbiAgICAgIH1cbiAgICAgIGlmIChzdGVwLndhcm1TdGFydGluZykge1xuICAgICAgICAgdGhpcy5tX2xpbmVhckltcHVsc2UueCAqPSBzdGVwLmR0UmF0aW87XG4gICAgICAgICB0aGlzLm1fbGluZWFySW1wdWxzZS55ICo9IHN0ZXAuZHRSYXRpbztcbiAgICAgICAgIHRoaXMubV9hbmd1bGFySW1wdWxzZSAqPSBzdGVwLmR0UmF0aW87XG4gICAgICAgICB2YXIgUCA9IHRoaXMubV9saW5lYXJJbXB1bHNlO1xuICAgICAgICAgYkEubV9saW5lYXJWZWxvY2l0eS54IC09IG1BICogUC54O1xuICAgICAgICAgYkEubV9saW5lYXJWZWxvY2l0eS55IC09IG1BICogUC55O1xuICAgICAgICAgYkEubV9hbmd1bGFyVmVsb2NpdHkgLT0gaUEgKiAockFYICogUC55IC0gckFZICogUC54ICsgdGhpcy5tX2FuZ3VsYXJJbXB1bHNlKTtcbiAgICAgICAgIGJCLm1fbGluZWFyVmVsb2NpdHkueCArPSBtQiAqIFAueDtcbiAgICAgICAgIGJCLm1fbGluZWFyVmVsb2NpdHkueSArPSBtQiAqIFAueTtcbiAgICAgICAgIGJCLm1fYW5ndWxhclZlbG9jaXR5ICs9IGlCICogKHJCWCAqIFAueSAtIHJCWSAqIFAueCArIHRoaXMubV9hbmd1bGFySW1wdWxzZSk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgIHRoaXMubV9saW5lYXJJbXB1bHNlLlNldFplcm8oKTtcbiAgICAgICAgIHRoaXMubV9hbmd1bGFySW1wdWxzZSA9IDAuMDtcbiAgICAgIH1cbiAgIH1cbiAgIGIyRnJpY3Rpb25Kb2ludC5wcm90b3R5cGUuU29sdmVWZWxvY2l0eUNvbnN0cmFpbnRzID0gZnVuY3Rpb24gKHN0ZXApIHtcbiAgICAgIHZhciB0TWF0O1xuICAgICAgdmFyIHRYID0gMDtcbiAgICAgIHZhciBiQSA9IHRoaXMubV9ib2R5QTtcbiAgICAgIHZhciBiQiA9IHRoaXMubV9ib2R5QjtcbiAgICAgIHZhciB2QSA9IGJBLm1fbGluZWFyVmVsb2NpdHk7XG4gICAgICB2YXIgd0EgPSBiQS5tX2FuZ3VsYXJWZWxvY2l0eTtcbiAgICAgIHZhciB2QiA9IGJCLm1fbGluZWFyVmVsb2NpdHk7XG4gICAgICB2YXIgd0IgPSBiQi5tX2FuZ3VsYXJWZWxvY2l0eTtcbiAgICAgIHZhciBtQSA9IGJBLm1faW52TWFzcztcbiAgICAgIHZhciBtQiA9IGJCLm1faW52TWFzcztcbiAgICAgIHZhciBpQSA9IGJBLm1faW52STtcbiAgICAgIHZhciBpQiA9IGJCLm1faW52STtcbiAgICAgIHRNYXQgPSBiQS5tX3hmLlI7XG4gICAgICB2YXIgckFYID0gdGhpcy5tX2xvY2FsQW5jaG9yQS54IC0gYkEubV9zd2VlcC5sb2NhbENlbnRlci54O1xuICAgICAgdmFyIHJBWSA9IHRoaXMubV9sb2NhbEFuY2hvckEueSAtIGJBLm1fc3dlZXAubG9jYWxDZW50ZXIueTtcbiAgICAgIHRYID0gKHRNYXQuY29sMS54ICogckFYICsgdE1hdC5jb2wyLnggKiByQVkpO1xuICAgICAgckFZID0gKHRNYXQuY29sMS55ICogckFYICsgdE1hdC5jb2wyLnkgKiByQVkpO1xuICAgICAgckFYID0gdFg7XG4gICAgICB0TWF0ID0gYkIubV94Zi5SO1xuICAgICAgdmFyIHJCWCA9IHRoaXMubV9sb2NhbEFuY2hvckIueCAtIGJCLm1fc3dlZXAubG9jYWxDZW50ZXIueDtcbiAgICAgIHZhciByQlkgPSB0aGlzLm1fbG9jYWxBbmNob3JCLnkgLSBiQi5tX3N3ZWVwLmxvY2FsQ2VudGVyLnk7XG4gICAgICB0WCA9ICh0TWF0LmNvbDEueCAqIHJCWCArIHRNYXQuY29sMi54ICogckJZKTtcbiAgICAgIHJCWSA9ICh0TWF0LmNvbDEueSAqIHJCWCArIHRNYXQuY29sMi55ICogckJZKTtcbiAgICAgIHJCWCA9IHRYO1xuICAgICAgdmFyIG1heEltcHVsc2UgPSAwOyB7XG4gICAgICAgICB2YXIgQ2RvdCA9IHdCIC0gd0E7XG4gICAgICAgICB2YXIgaW1wdWxzZSA9ICgtdGhpcy5tX2FuZ3VsYXJNYXNzICogQ2RvdCk7XG4gICAgICAgICB2YXIgb2xkSW1wdWxzZSA9IHRoaXMubV9hbmd1bGFySW1wdWxzZTtcbiAgICAgICAgIG1heEltcHVsc2UgPSBzdGVwLmR0ICogdGhpcy5tX21heFRvcnF1ZTtcbiAgICAgICAgIHRoaXMubV9hbmd1bGFySW1wdWxzZSA9IGIyTWF0aC5DbGFtcCh0aGlzLm1fYW5ndWxhckltcHVsc2UgKyBpbXB1bHNlLCAoLW1heEltcHVsc2UpLCBtYXhJbXB1bHNlKTtcbiAgICAgICAgIGltcHVsc2UgPSB0aGlzLm1fYW5ndWxhckltcHVsc2UgLSBvbGRJbXB1bHNlO1xuICAgICAgICAgd0EgLT0gaUEgKiBpbXB1bHNlO1xuICAgICAgICAgd0IgKz0gaUIgKiBpbXB1bHNlO1xuICAgICAgfSB7XG4gICAgICAgICB2YXIgQ2RvdFggPSB2Qi54IC0gd0IgKiByQlkgLSB2QS54ICsgd0EgKiByQVk7XG4gICAgICAgICB2YXIgQ2RvdFkgPSB2Qi55ICsgd0IgKiByQlggLSB2QS55IC0gd0EgKiByQVg7XG4gICAgICAgICB2YXIgaW1wdWxzZVYgPSBiMk1hdGguTXVsTVYodGhpcy5tX2xpbmVhck1hc3MsIG5ldyBiMlZlYzIoKC1DZG90WCksICgtQ2RvdFkpKSk7XG4gICAgICAgICB2YXIgb2xkSW1wdWxzZVYgPSB0aGlzLm1fbGluZWFySW1wdWxzZS5Db3B5KCk7XG4gICAgICAgICB0aGlzLm1fbGluZWFySW1wdWxzZS5BZGQoaW1wdWxzZVYpO1xuICAgICAgICAgbWF4SW1wdWxzZSA9IHN0ZXAuZHQgKiB0aGlzLm1fbWF4Rm9yY2U7XG4gICAgICAgICBpZiAodGhpcy5tX2xpbmVhckltcHVsc2UuTGVuZ3RoU3F1YXJlZCgpID4gbWF4SW1wdWxzZSAqIG1heEltcHVsc2UpIHtcbiAgICAgICAgICAgIHRoaXMubV9saW5lYXJJbXB1bHNlLk5vcm1hbGl6ZSgpO1xuICAgICAgICAgICAgdGhpcy5tX2xpbmVhckltcHVsc2UuTXVsdGlwbHkobWF4SW1wdWxzZSk7XG4gICAgICAgICB9XG4gICAgICAgICBpbXB1bHNlViA9IGIyTWF0aC5TdWJ0cmFjdFZWKHRoaXMubV9saW5lYXJJbXB1bHNlLCBvbGRJbXB1bHNlVik7XG4gICAgICAgICB2QS54IC09IG1BICogaW1wdWxzZVYueDtcbiAgICAgICAgIHZBLnkgLT0gbUEgKiBpbXB1bHNlVi55O1xuICAgICAgICAgd0EgLT0gaUEgKiAockFYICogaW1wdWxzZVYueSAtIHJBWSAqIGltcHVsc2VWLngpO1xuICAgICAgICAgdkIueCArPSBtQiAqIGltcHVsc2VWLng7XG4gICAgICAgICB2Qi55ICs9IG1CICogaW1wdWxzZVYueTtcbiAgICAgICAgIHdCICs9IGlCICogKHJCWCAqIGltcHVsc2VWLnkgLSByQlkgKiBpbXB1bHNlVi54KTtcbiAgICAgIH1cbiAgICAgIGJBLm1fYW5ndWxhclZlbG9jaXR5ID0gd0E7XG4gICAgICBiQi5tX2FuZ3VsYXJWZWxvY2l0eSA9IHdCO1xuICAgfVxuICAgYjJGcmljdGlvbkpvaW50LnByb3RvdHlwZS5Tb2x2ZVBvc2l0aW9uQ29uc3RyYWludHMgPSBmdW5jdGlvbiAoYmF1bWdhcnRlKSB7XG4gICAgICBpZiAoYmF1bWdhcnRlID09PSB1bmRlZmluZWQpIGJhdW1nYXJ0ZSA9IDA7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgIH1cbiAgIEJveDJELmluaGVyaXQoYjJGcmljdGlvbkpvaW50RGVmLCBCb3gyRC5EeW5hbWljcy5Kb2ludHMuYjJKb2ludERlZik7XG4gICBiMkZyaWN0aW9uSm9pbnREZWYucHJvdG90eXBlLl9fc3VwZXIgPSBCb3gyRC5EeW5hbWljcy5Kb2ludHMuYjJKb2ludERlZi5wcm90b3R5cGU7XG4gICBiMkZyaWN0aW9uSm9pbnREZWYuYjJGcmljdGlvbkpvaW50RGVmID0gZnVuY3Rpb24gKCkge1xuICAgICAgQm94MkQuRHluYW1pY3MuSm9pbnRzLmIySm9pbnREZWYuYjJKb2ludERlZi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgdGhpcy5sb2NhbEFuY2hvckEgPSBuZXcgYjJWZWMyKCk7XG4gICAgICB0aGlzLmxvY2FsQW5jaG9yQiA9IG5ldyBiMlZlYzIoKTtcbiAgIH07XG4gICBiMkZyaWN0aW9uSm9pbnREZWYucHJvdG90eXBlLmIyRnJpY3Rpb25Kb2ludERlZiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMuX19zdXBlci5iMkpvaW50RGVmLmNhbGwodGhpcyk7XG4gICAgICB0aGlzLnR5cGUgPSBiMkpvaW50LmVfZnJpY3Rpb25Kb2ludDtcbiAgICAgIHRoaXMubWF4Rm9yY2UgPSAwLjA7XG4gICAgICB0aGlzLm1heFRvcnF1ZSA9IDAuMDtcbiAgIH1cbiAgIGIyRnJpY3Rpb25Kb2ludERlZi5wcm90b3R5cGUuSW5pdGlhbGl6ZSA9IGZ1bmN0aW9uIChiQSwgYkIsIGFuY2hvcikge1xuICAgICAgdGhpcy5ib2R5QSA9IGJBO1xuICAgICAgdGhpcy5ib2R5QiA9IGJCO1xuICAgICAgdGhpcy5sb2NhbEFuY2hvckEuU2V0Vih0aGlzLmJvZHlBLkdldExvY2FsUG9pbnQoYW5jaG9yKSk7XG4gICAgICB0aGlzLmxvY2FsQW5jaG9yQi5TZXRWKHRoaXMuYm9keUIuR2V0TG9jYWxQb2ludChhbmNob3IpKTtcbiAgIH1cbiAgIEJveDJELmluaGVyaXQoYjJHZWFySm9pbnQsIEJveDJELkR5bmFtaWNzLkpvaW50cy5iMkpvaW50KTtcbiAgIGIyR2VhckpvaW50LnByb3RvdHlwZS5fX3N1cGVyID0gQm94MkQuRHluYW1pY3MuSm9pbnRzLmIySm9pbnQucHJvdG90eXBlO1xuICAgYjJHZWFySm9pbnQuYjJHZWFySm9pbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBCb3gyRC5EeW5hbWljcy5Kb2ludHMuYjJKb2ludC5iMkpvaW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB0aGlzLm1fZ3JvdW5kQW5jaG9yMSA9IG5ldyBiMlZlYzIoKTtcbiAgICAgIHRoaXMubV9ncm91bmRBbmNob3IyID0gbmV3IGIyVmVjMigpO1xuICAgICAgdGhpcy5tX2xvY2FsQW5jaG9yMSA9IG5ldyBiMlZlYzIoKTtcbiAgICAgIHRoaXMubV9sb2NhbEFuY2hvcjIgPSBuZXcgYjJWZWMyKCk7XG4gICAgICB0aGlzLm1fSiA9IG5ldyBiMkphY29iaWFuKCk7XG4gICB9O1xuICAgYjJHZWFySm9pbnQucHJvdG90eXBlLkdldEFuY2hvckEgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5tX2JvZHlBLkdldFdvcmxkUG9pbnQodGhpcy5tX2xvY2FsQW5jaG9yMSk7XG4gICB9XG4gICBiMkdlYXJKb2ludC5wcm90b3R5cGUuR2V0QW5jaG9yQiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzLm1fYm9keUIuR2V0V29ybGRQb2ludCh0aGlzLm1fbG9jYWxBbmNob3IyKTtcbiAgIH1cbiAgIGIyR2VhckpvaW50LnByb3RvdHlwZS5HZXRSZWFjdGlvbkZvcmNlID0gZnVuY3Rpb24gKGludl9kdCkge1xuICAgICAgaWYgKGludl9kdCA9PT0gdW5kZWZpbmVkKSBpbnZfZHQgPSAwO1xuICAgICAgcmV0dXJuIG5ldyBiMlZlYzIoaW52X2R0ICogdGhpcy5tX2ltcHVsc2UgKiB0aGlzLm1fSi5saW5lYXJCLngsIGludl9kdCAqIHRoaXMubV9pbXB1bHNlICogdGhpcy5tX0oubGluZWFyQi55KTtcbiAgIH1cbiAgIGIyR2VhckpvaW50LnByb3RvdHlwZS5HZXRSZWFjdGlvblRvcnF1ZSA9IGZ1bmN0aW9uIChpbnZfZHQpIHtcbiAgICAgIGlmIChpbnZfZHQgPT09IHVuZGVmaW5lZCkgaW52X2R0ID0gMDtcbiAgICAgIHZhciB0TWF0ID0gdGhpcy5tX2JvZHlCLm1feGYuUjtcbiAgICAgIHZhciByWCA9IHRoaXMubV9sb2NhbEFuY2hvcjEueCAtIHRoaXMubV9ib2R5Qi5tX3N3ZWVwLmxvY2FsQ2VudGVyLng7XG4gICAgICB2YXIgclkgPSB0aGlzLm1fbG9jYWxBbmNob3IxLnkgLSB0aGlzLm1fYm9keUIubV9zd2VlcC5sb2NhbENlbnRlci55O1xuICAgICAgdmFyIHRYID0gdE1hdC5jb2wxLnggKiByWCArIHRNYXQuY29sMi54ICogclk7XG4gICAgICByWSA9IHRNYXQuY29sMS55ICogclggKyB0TWF0LmNvbDIueSAqIHJZO1xuICAgICAgclggPSB0WDtcbiAgICAgIHZhciBQWCA9IHRoaXMubV9pbXB1bHNlICogdGhpcy5tX0oubGluZWFyQi54O1xuICAgICAgdmFyIFBZID0gdGhpcy5tX2ltcHVsc2UgKiB0aGlzLm1fSi5saW5lYXJCLnk7XG4gICAgICByZXR1cm4gaW52X2R0ICogKHRoaXMubV9pbXB1bHNlICogdGhpcy5tX0ouYW5ndWxhckIgLSByWCAqIFBZICsgclkgKiBQWCk7XG4gICB9XG4gICBiMkdlYXJKb2ludC5wcm90b3R5cGUuR2V0UmF0aW8gPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5tX3JhdGlvO1xuICAgfVxuICAgYjJHZWFySm9pbnQucHJvdG90eXBlLlNldFJhdGlvID0gZnVuY3Rpb24gKHJhdGlvKSB7XG4gICAgICBpZiAocmF0aW8gPT09IHVuZGVmaW5lZCkgcmF0aW8gPSAwO1xuICAgICAgdGhpcy5tX3JhdGlvID0gcmF0aW87XG4gICB9XG4gICBiMkdlYXJKb2ludC5wcm90b3R5cGUuYjJHZWFySm9pbnQgPSBmdW5jdGlvbiAoZGVmKSB7XG4gICAgICB0aGlzLl9fc3VwZXIuYjJKb2ludC5jYWxsKHRoaXMsIGRlZik7XG4gICAgICB2YXIgdHlwZTEgPSBwYXJzZUludChkZWYuam9pbnQxLm1fdHlwZSk7XG4gICAgICB2YXIgdHlwZTIgPSBwYXJzZUludChkZWYuam9pbnQyLm1fdHlwZSk7XG4gICAgICB0aGlzLm1fcmV2b2x1dGUxID0gbnVsbDtcbiAgICAgIHRoaXMubV9wcmlzbWF0aWMxID0gbnVsbDtcbiAgICAgIHRoaXMubV9yZXZvbHV0ZTIgPSBudWxsO1xuICAgICAgdGhpcy5tX3ByaXNtYXRpYzIgPSBudWxsO1xuICAgICAgdmFyIGNvb3JkaW5hdGUxID0gMDtcbiAgICAgIHZhciBjb29yZGluYXRlMiA9IDA7XG4gICAgICB0aGlzLm1fZ3JvdW5kMSA9IGRlZi5qb2ludDEuR2V0Qm9keUEoKTtcbiAgICAgIHRoaXMubV9ib2R5QSA9IGRlZi5qb2ludDEuR2V0Qm9keUIoKTtcbiAgICAgIGlmICh0eXBlMSA9PSBiMkpvaW50LmVfcmV2b2x1dGVKb2ludCkge1xuICAgICAgICAgdGhpcy5tX3Jldm9sdXRlMSA9IChkZWYuam9pbnQxIGluc3RhbmNlb2YgYjJSZXZvbHV0ZUpvaW50ID8gZGVmLmpvaW50MSA6IG51bGwpO1xuICAgICAgICAgdGhpcy5tX2dyb3VuZEFuY2hvcjEuU2V0Vih0aGlzLm1fcmV2b2x1dGUxLm1fbG9jYWxBbmNob3IxKTtcbiAgICAgICAgIHRoaXMubV9sb2NhbEFuY2hvcjEuU2V0Vih0aGlzLm1fcmV2b2x1dGUxLm1fbG9jYWxBbmNob3IyKTtcbiAgICAgICAgIGNvb3JkaW5hdGUxID0gdGhpcy5tX3Jldm9sdXRlMS5HZXRKb2ludEFuZ2xlKCk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgIHRoaXMubV9wcmlzbWF0aWMxID0gKGRlZi5qb2ludDEgaW5zdGFuY2VvZiBiMlByaXNtYXRpY0pvaW50ID8gZGVmLmpvaW50MSA6IG51bGwpO1xuICAgICAgICAgdGhpcy5tX2dyb3VuZEFuY2hvcjEuU2V0Vih0aGlzLm1fcHJpc21hdGljMS5tX2xvY2FsQW5jaG9yMSk7XG4gICAgICAgICB0aGlzLm1fbG9jYWxBbmNob3IxLlNldFYodGhpcy5tX3ByaXNtYXRpYzEubV9sb2NhbEFuY2hvcjIpO1xuICAgICAgICAgY29vcmRpbmF0ZTEgPSB0aGlzLm1fcHJpc21hdGljMS5HZXRKb2ludFRyYW5zbGF0aW9uKCk7XG4gICAgICB9XG4gICAgICB0aGlzLm1fZ3JvdW5kMiA9IGRlZi5qb2ludDIuR2V0Qm9keUEoKTtcbiAgICAgIHRoaXMubV9ib2R5QiA9IGRlZi5qb2ludDIuR2V0Qm9keUIoKTtcbiAgICAgIGlmICh0eXBlMiA9PSBiMkpvaW50LmVfcmV2b2x1dGVKb2ludCkge1xuICAgICAgICAgdGhpcy5tX3Jldm9sdXRlMiA9IChkZWYuam9pbnQyIGluc3RhbmNlb2YgYjJSZXZvbHV0ZUpvaW50ID8gZGVmLmpvaW50MiA6IG51bGwpO1xuICAgICAgICAgdGhpcy5tX2dyb3VuZEFuY2hvcjIuU2V0Vih0aGlzLm1fcmV2b2x1dGUyLm1fbG9jYWxBbmNob3IxKTtcbiAgICAgICAgIHRoaXMubV9sb2NhbEFuY2hvcjIuU2V0Vih0aGlzLm1fcmV2b2x1dGUyLm1fbG9jYWxBbmNob3IyKTtcbiAgICAgICAgIGNvb3JkaW5hdGUyID0gdGhpcy5tX3Jldm9sdXRlMi5HZXRKb2ludEFuZ2xlKCk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgIHRoaXMubV9wcmlzbWF0aWMyID0gKGRlZi5qb2ludDIgaW5zdGFuY2VvZiBiMlByaXNtYXRpY0pvaW50ID8gZGVmLmpvaW50MiA6IG51bGwpO1xuICAgICAgICAgdGhpcy5tX2dyb3VuZEFuY2hvcjIuU2V0Vih0aGlzLm1fcHJpc21hdGljMi5tX2xvY2FsQW5jaG9yMSk7XG4gICAgICAgICB0aGlzLm1fbG9jYWxBbmNob3IyLlNldFYodGhpcy5tX3ByaXNtYXRpYzIubV9sb2NhbEFuY2hvcjIpO1xuICAgICAgICAgY29vcmRpbmF0ZTIgPSB0aGlzLm1fcHJpc21hdGljMi5HZXRKb2ludFRyYW5zbGF0aW9uKCk7XG4gICAgICB9XG4gICAgICB0aGlzLm1fcmF0aW8gPSBkZWYucmF0aW87XG4gICAgICB0aGlzLm1fY29uc3RhbnQgPSBjb29yZGluYXRlMSArIHRoaXMubV9yYXRpbyAqIGNvb3JkaW5hdGUyO1xuICAgICAgdGhpcy5tX2ltcHVsc2UgPSAwLjA7XG4gICB9XG4gICBiMkdlYXJKb2ludC5wcm90b3R5cGUuSW5pdFZlbG9jaXR5Q29uc3RyYWludHMgPSBmdW5jdGlvbiAoc3RlcCkge1xuICAgICAgdmFyIGcxID0gdGhpcy5tX2dyb3VuZDE7XG4gICAgICB2YXIgZzIgPSB0aGlzLm1fZ3JvdW5kMjtcbiAgICAgIHZhciBiQSA9IHRoaXMubV9ib2R5QTtcbiAgICAgIHZhciBiQiA9IHRoaXMubV9ib2R5QjtcbiAgICAgIHZhciB1Z1ggPSAwO1xuICAgICAgdmFyIHVnWSA9IDA7XG4gICAgICB2YXIgclggPSAwO1xuICAgICAgdmFyIHJZID0gMDtcbiAgICAgIHZhciB0TWF0O1xuICAgICAgdmFyIHRWZWM7XG4gICAgICB2YXIgY3J1ZyA9IDA7XG4gICAgICB2YXIgdFggPSAwO1xuICAgICAgdmFyIEsgPSAwLjA7XG4gICAgICB0aGlzLm1fSi5TZXRaZXJvKCk7XG4gICAgICBpZiAodGhpcy5tX3Jldm9sdXRlMSkge1xuICAgICAgICAgdGhpcy5tX0ouYW5ndWxhckEgPSAoLTEuMCk7XG4gICAgICAgICBLICs9IGJBLm1faW52STtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICAgdE1hdCA9IGcxLm1feGYuUjtcbiAgICAgICAgIHRWZWMgPSB0aGlzLm1fcHJpc21hdGljMS5tX2xvY2FsWEF4aXMxO1xuICAgICAgICAgdWdYID0gdE1hdC5jb2wxLnggKiB0VmVjLnggKyB0TWF0LmNvbDIueCAqIHRWZWMueTtcbiAgICAgICAgIHVnWSA9IHRNYXQuY29sMS55ICogdFZlYy54ICsgdE1hdC5jb2wyLnkgKiB0VmVjLnk7XG4gICAgICAgICB0TWF0ID0gYkEubV94Zi5SO1xuICAgICAgICAgclggPSB0aGlzLm1fbG9jYWxBbmNob3IxLnggLSBiQS5tX3N3ZWVwLmxvY2FsQ2VudGVyLng7XG4gICAgICAgICByWSA9IHRoaXMubV9sb2NhbEFuY2hvcjEueSAtIGJBLm1fc3dlZXAubG9jYWxDZW50ZXIueTtcbiAgICAgICAgIHRYID0gdE1hdC5jb2wxLnggKiByWCArIHRNYXQuY29sMi54ICogclk7XG4gICAgICAgICByWSA9IHRNYXQuY29sMS55ICogclggKyB0TWF0LmNvbDIueSAqIHJZO1xuICAgICAgICAgclggPSB0WDtcbiAgICAgICAgIGNydWcgPSByWCAqIHVnWSAtIHJZICogdWdYO1xuICAgICAgICAgdGhpcy5tX0oubGluZWFyQS5TZXQoKC11Z1gpLCAoLXVnWSkpO1xuICAgICAgICAgdGhpcy5tX0ouYW5ndWxhckEgPSAoLWNydWcpO1xuICAgICAgICAgSyArPSBiQS5tX2ludk1hc3MgKyBiQS5tX2ludkkgKiBjcnVnICogY3J1ZztcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLm1fcmV2b2x1dGUyKSB7XG4gICAgICAgICB0aGlzLm1fSi5hbmd1bGFyQiA9ICgtdGhpcy5tX3JhdGlvKTtcbiAgICAgICAgIEsgKz0gdGhpcy5tX3JhdGlvICogdGhpcy5tX3JhdGlvICogYkIubV9pbnZJO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgICB0TWF0ID0gZzIubV94Zi5SO1xuICAgICAgICAgdFZlYyA9IHRoaXMubV9wcmlzbWF0aWMyLm1fbG9jYWxYQXhpczE7XG4gICAgICAgICB1Z1ggPSB0TWF0LmNvbDEueCAqIHRWZWMueCArIHRNYXQuY29sMi54ICogdFZlYy55O1xuICAgICAgICAgdWdZID0gdE1hdC5jb2wxLnkgKiB0VmVjLnggKyB0TWF0LmNvbDIueSAqIHRWZWMueTtcbiAgICAgICAgIHRNYXQgPSBiQi5tX3hmLlI7XG4gICAgICAgICByWCA9IHRoaXMubV9sb2NhbEFuY2hvcjIueCAtIGJCLm1fc3dlZXAubG9jYWxDZW50ZXIueDtcbiAgICAgICAgIHJZID0gdGhpcy5tX2xvY2FsQW5jaG9yMi55IC0gYkIubV9zd2VlcC5sb2NhbENlbnRlci55O1xuICAgICAgICAgdFggPSB0TWF0LmNvbDEueCAqIHJYICsgdE1hdC5jb2wyLnggKiByWTtcbiAgICAgICAgIHJZID0gdE1hdC5jb2wxLnkgKiByWCArIHRNYXQuY29sMi55ICogclk7XG4gICAgICAgICByWCA9IHRYO1xuICAgICAgICAgY3J1ZyA9IHJYICogdWdZIC0gclkgKiB1Z1g7XG4gICAgICAgICB0aGlzLm1fSi5saW5lYXJCLlNldCgoLXRoaXMubV9yYXRpbyAqIHVnWCksICgtdGhpcy5tX3JhdGlvICogdWdZKSk7XG4gICAgICAgICB0aGlzLm1fSi5hbmd1bGFyQiA9ICgtdGhpcy5tX3JhdGlvICogY3J1Zyk7XG4gICAgICAgICBLICs9IHRoaXMubV9yYXRpbyAqIHRoaXMubV9yYXRpbyAqIChiQi5tX2ludk1hc3MgKyBiQi5tX2ludkkgKiBjcnVnICogY3J1Zyk7XG4gICAgICB9XG4gICAgICB0aGlzLm1fbWFzcyA9IEsgPiAwLjAgPyAxLjAgLyBLIDogMC4wO1xuICAgICAgaWYgKHN0ZXAud2FybVN0YXJ0aW5nKSB7XG4gICAgICAgICBiQS5tX2xpbmVhclZlbG9jaXR5LnggKz0gYkEubV9pbnZNYXNzICogdGhpcy5tX2ltcHVsc2UgKiB0aGlzLm1fSi5saW5lYXJBLng7XG4gICAgICAgICBiQS5tX2xpbmVhclZlbG9jaXR5LnkgKz0gYkEubV9pbnZNYXNzICogdGhpcy5tX2ltcHVsc2UgKiB0aGlzLm1fSi5saW5lYXJBLnk7XG4gICAgICAgICBiQS5tX2FuZ3VsYXJWZWxvY2l0eSArPSBiQS5tX2ludkkgKiB0aGlzLm1faW1wdWxzZSAqIHRoaXMubV9KLmFuZ3VsYXJBO1xuICAgICAgICAgYkIubV9saW5lYXJWZWxvY2l0eS54ICs9IGJCLm1faW52TWFzcyAqIHRoaXMubV9pbXB1bHNlICogdGhpcy5tX0oubGluZWFyQi54O1xuICAgICAgICAgYkIubV9saW5lYXJWZWxvY2l0eS55ICs9IGJCLm1faW52TWFzcyAqIHRoaXMubV9pbXB1bHNlICogdGhpcy5tX0oubGluZWFyQi55O1xuICAgICAgICAgYkIubV9hbmd1bGFyVmVsb2NpdHkgKz0gYkIubV9pbnZJICogdGhpcy5tX2ltcHVsc2UgKiB0aGlzLm1fSi5hbmd1bGFyQjtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICAgdGhpcy5tX2ltcHVsc2UgPSAwLjA7XG4gICAgICB9XG4gICB9XG4gICBiMkdlYXJKb2ludC5wcm90b3R5cGUuU29sdmVWZWxvY2l0eUNvbnN0cmFpbnRzID0gZnVuY3Rpb24gKHN0ZXApIHtcbiAgICAgIHZhciBiQSA9IHRoaXMubV9ib2R5QTtcbiAgICAgIHZhciBiQiA9IHRoaXMubV9ib2R5QjtcbiAgICAgIHZhciBDZG90ID0gdGhpcy5tX0ouQ29tcHV0ZShiQS5tX2xpbmVhclZlbG9jaXR5LCBiQS5tX2FuZ3VsYXJWZWxvY2l0eSwgYkIubV9saW5lYXJWZWxvY2l0eSwgYkIubV9hbmd1bGFyVmVsb2NpdHkpO1xuICAgICAgdmFyIGltcHVsc2UgPSAoLXRoaXMubV9tYXNzICogQ2RvdCk7XG4gICAgICB0aGlzLm1faW1wdWxzZSArPSBpbXB1bHNlO1xuICAgICAgYkEubV9saW5lYXJWZWxvY2l0eS54ICs9IGJBLm1faW52TWFzcyAqIGltcHVsc2UgKiB0aGlzLm1fSi5saW5lYXJBLng7XG4gICAgICBiQS5tX2xpbmVhclZlbG9jaXR5LnkgKz0gYkEubV9pbnZNYXNzICogaW1wdWxzZSAqIHRoaXMubV9KLmxpbmVhckEueTtcbiAgICAgIGJBLm1fYW5ndWxhclZlbG9jaXR5ICs9IGJBLm1faW52SSAqIGltcHVsc2UgKiB0aGlzLm1fSi5hbmd1bGFyQTtcbiAgICAgIGJCLm1fbGluZWFyVmVsb2NpdHkueCArPSBiQi5tX2ludk1hc3MgKiBpbXB1bHNlICogdGhpcy5tX0oubGluZWFyQi54O1xuICAgICAgYkIubV9saW5lYXJWZWxvY2l0eS55ICs9IGJCLm1faW52TWFzcyAqIGltcHVsc2UgKiB0aGlzLm1fSi5saW5lYXJCLnk7XG4gICAgICBiQi5tX2FuZ3VsYXJWZWxvY2l0eSArPSBiQi5tX2ludkkgKiBpbXB1bHNlICogdGhpcy5tX0ouYW5ndWxhckI7XG4gICB9XG4gICBiMkdlYXJKb2ludC5wcm90b3R5cGUuU29sdmVQb3NpdGlvbkNvbnN0cmFpbnRzID0gZnVuY3Rpb24gKGJhdW1nYXJ0ZSkge1xuICAgICAgaWYgKGJhdW1nYXJ0ZSA9PT0gdW5kZWZpbmVkKSBiYXVtZ2FydGUgPSAwO1xuICAgICAgdmFyIGxpbmVhckVycm9yID0gMC4wO1xuICAgICAgdmFyIGJBID0gdGhpcy5tX2JvZHlBO1xuICAgICAgdmFyIGJCID0gdGhpcy5tX2JvZHlCO1xuICAgICAgdmFyIGNvb3JkaW5hdGUxID0gMDtcbiAgICAgIHZhciBjb29yZGluYXRlMiA9IDA7XG4gICAgICBpZiAodGhpcy5tX3Jldm9sdXRlMSkge1xuICAgICAgICAgY29vcmRpbmF0ZTEgPSB0aGlzLm1fcmV2b2x1dGUxLkdldEpvaW50QW5nbGUoKTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICAgY29vcmRpbmF0ZTEgPSB0aGlzLm1fcHJpc21hdGljMS5HZXRKb2ludFRyYW5zbGF0aW9uKCk7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5tX3Jldm9sdXRlMikge1xuICAgICAgICAgY29vcmRpbmF0ZTIgPSB0aGlzLm1fcmV2b2x1dGUyLkdldEpvaW50QW5nbGUoKTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICAgY29vcmRpbmF0ZTIgPSB0aGlzLm1fcHJpc21hdGljMi5HZXRKb2ludFRyYW5zbGF0aW9uKCk7XG4gICAgICB9XG4gICAgICB2YXIgQyA9IHRoaXMubV9jb25zdGFudCAtIChjb29yZGluYXRlMSArIHRoaXMubV9yYXRpbyAqIGNvb3JkaW5hdGUyKTtcbiAgICAgIHZhciBpbXB1bHNlID0gKC10aGlzLm1fbWFzcyAqIEMpO1xuICAgICAgYkEubV9zd2VlcC5jLnggKz0gYkEubV9pbnZNYXNzICogaW1wdWxzZSAqIHRoaXMubV9KLmxpbmVhckEueDtcbiAgICAgIGJBLm1fc3dlZXAuYy55ICs9IGJBLm1faW52TWFzcyAqIGltcHVsc2UgKiB0aGlzLm1fSi5saW5lYXJBLnk7XG4gICAgICBiQS5tX3N3ZWVwLmEgKz0gYkEubV9pbnZJICogaW1wdWxzZSAqIHRoaXMubV9KLmFuZ3VsYXJBO1xuICAgICAgYkIubV9zd2VlcC5jLnggKz0gYkIubV9pbnZNYXNzICogaW1wdWxzZSAqIHRoaXMubV9KLmxpbmVhckIueDtcbiAgICAgIGJCLm1fc3dlZXAuYy55ICs9IGJCLm1faW52TWFzcyAqIGltcHVsc2UgKiB0aGlzLm1fSi5saW5lYXJCLnk7XG4gICAgICBiQi5tX3N3ZWVwLmEgKz0gYkIubV9pbnZJICogaW1wdWxzZSAqIHRoaXMubV9KLmFuZ3VsYXJCO1xuICAgICAgYkEuU3luY2hyb25pemVUcmFuc2Zvcm0oKTtcbiAgICAgIGJCLlN5bmNocm9uaXplVHJhbnNmb3JtKCk7XG4gICAgICByZXR1cm4gbGluZWFyRXJyb3IgPCBiMlNldHRpbmdzLmIyX2xpbmVhclNsb3A7XG4gICB9XG4gICBCb3gyRC5pbmhlcml0KGIyR2VhckpvaW50RGVmLCBCb3gyRC5EeW5hbWljcy5Kb2ludHMuYjJKb2ludERlZik7XG4gICBiMkdlYXJKb2ludERlZi5wcm90b3R5cGUuX19zdXBlciA9IEJveDJELkR5bmFtaWNzLkpvaW50cy5iMkpvaW50RGVmLnByb3RvdHlwZTtcbiAgIGIyR2VhckpvaW50RGVmLmIyR2VhckpvaW50RGVmID0gZnVuY3Rpb24gKCkge1xuICAgICAgQm94MkQuRHluYW1pY3MuSm9pbnRzLmIySm9pbnREZWYuYjJKb2ludERlZi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgfTtcbiAgIGIyR2VhckpvaW50RGVmLnByb3RvdHlwZS5iMkdlYXJKb2ludERlZiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMuX19zdXBlci5iMkpvaW50RGVmLmNhbGwodGhpcyk7XG4gICAgICB0aGlzLnR5cGUgPSBiMkpvaW50LmVfZ2VhckpvaW50O1xuICAgICAgdGhpcy5qb2ludDEgPSBudWxsO1xuICAgICAgdGhpcy5qb2ludDIgPSBudWxsO1xuICAgICAgdGhpcy5yYXRpbyA9IDEuMDtcbiAgIH1cbiAgIGIySmFjb2JpYW4uYjJKYWNvYmlhbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMubGluZWFyQSA9IG5ldyBiMlZlYzIoKTtcbiAgICAgIHRoaXMubGluZWFyQiA9IG5ldyBiMlZlYzIoKTtcbiAgIH07XG4gICBiMkphY29iaWFuLnByb3RvdHlwZS5TZXRaZXJvID0gZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcy5saW5lYXJBLlNldFplcm8oKTtcbiAgICAgIHRoaXMuYW5ndWxhckEgPSAwLjA7XG4gICAgICB0aGlzLmxpbmVhckIuU2V0WmVybygpO1xuICAgICAgdGhpcy5hbmd1bGFyQiA9IDAuMDtcbiAgIH1cbiAgIGIySmFjb2JpYW4ucHJvdG90eXBlLlNldCA9IGZ1bmN0aW9uICh4MSwgYTEsIHgyLCBhMikge1xuICAgICAgaWYgKGExID09PSB1bmRlZmluZWQpIGExID0gMDtcbiAgICAgIGlmIChhMiA9PT0gdW5kZWZpbmVkKSBhMiA9IDA7XG4gICAgICB0aGlzLmxpbmVhckEuU2V0Vih4MSk7XG4gICAgICB0aGlzLmFuZ3VsYXJBID0gYTE7XG4gICAgICB0aGlzLmxpbmVhckIuU2V0Vih4Mik7XG4gICAgICB0aGlzLmFuZ3VsYXJCID0gYTI7XG4gICB9XG4gICBiMkphY29iaWFuLnByb3RvdHlwZS5Db21wdXRlID0gZnVuY3Rpb24gKHgxLCBhMSwgeDIsIGEyKSB7XG4gICAgICBpZiAoYTEgPT09IHVuZGVmaW5lZCkgYTEgPSAwO1xuICAgICAgaWYgKGEyID09PSB1bmRlZmluZWQpIGEyID0gMDtcbiAgICAgIHJldHVybiAodGhpcy5saW5lYXJBLnggKiB4MS54ICsgdGhpcy5saW5lYXJBLnkgKiB4MS55KSArIHRoaXMuYW5ndWxhckEgKiBhMSArICh0aGlzLmxpbmVhckIueCAqIHgyLnggKyB0aGlzLmxpbmVhckIueSAqIHgyLnkpICsgdGhpcy5hbmd1bGFyQiAqIGEyO1xuICAgfVxuICAgYjJKb2ludC5iMkpvaW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcy5tX2VkZ2VBID0gbmV3IGIySm9pbnRFZGdlKCk7XG4gICAgICB0aGlzLm1fZWRnZUIgPSBuZXcgYjJKb2ludEVkZ2UoKTtcbiAgICAgIHRoaXMubV9sb2NhbENlbnRlckEgPSBuZXcgYjJWZWMyKCk7XG4gICAgICB0aGlzLm1fbG9jYWxDZW50ZXJCID0gbmV3IGIyVmVjMigpO1xuICAgfTtcbiAgIGIySm9pbnQucHJvdG90eXBlLkdldFR5cGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5tX3R5cGU7XG4gICB9XG4gICBiMkpvaW50LnByb3RvdHlwZS5HZXRBbmNob3JBID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICB9XG4gICBiMkpvaW50LnByb3RvdHlwZS5HZXRBbmNob3JCID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICB9XG4gICBiMkpvaW50LnByb3RvdHlwZS5HZXRSZWFjdGlvbkZvcmNlID0gZnVuY3Rpb24gKGludl9kdCkge1xuICAgICAgaWYgKGludl9kdCA9PT0gdW5kZWZpbmVkKSBpbnZfZHQgPSAwO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICB9XG4gICBiMkpvaW50LnByb3RvdHlwZS5HZXRSZWFjdGlvblRvcnF1ZSA9IGZ1bmN0aW9uIChpbnZfZHQpIHtcbiAgICAgIGlmIChpbnZfZHQgPT09IHVuZGVmaW5lZCkgaW52X2R0ID0gMDtcbiAgICAgIHJldHVybiAwLjA7XG4gICB9XG4gICBiMkpvaW50LnByb3RvdHlwZS5HZXRCb2R5QSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzLm1fYm9keUE7XG4gICB9XG4gICBiMkpvaW50LnByb3RvdHlwZS5HZXRCb2R5QiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzLm1fYm9keUI7XG4gICB9XG4gICBiMkpvaW50LnByb3RvdHlwZS5HZXROZXh0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMubV9uZXh0O1xuICAgfVxuICAgYjJKb2ludC5wcm90b3R5cGUuR2V0VXNlckRhdGEgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5tX3VzZXJEYXRhO1xuICAgfVxuICAgYjJKb2ludC5wcm90b3R5cGUuU2V0VXNlckRhdGEgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgdGhpcy5tX3VzZXJEYXRhID0gZGF0YTtcbiAgIH1cbiAgIGIySm9pbnQucHJvdG90eXBlLklzQWN0aXZlID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMubV9ib2R5QS5Jc0FjdGl2ZSgpICYmIHRoaXMubV9ib2R5Qi5Jc0FjdGl2ZSgpO1xuICAgfVxuICAgYjJKb2ludC5DcmVhdGUgPSBmdW5jdGlvbiAoZGVmLCBhbGxvY2F0b3IpIHtcbiAgICAgIHZhciBqb2ludCA9IG51bGw7XG4gICAgICBzd2l0Y2ggKGRlZi50eXBlKSB7XG4gICAgICBjYXNlIGIySm9pbnQuZV9kaXN0YW5jZUpvaW50OlxuICAgICAgICAge1xuICAgICAgICAgICAgam9pbnQgPSBuZXcgYjJEaXN0YW5jZUpvaW50KChkZWYgaW5zdGFuY2VvZiBiMkRpc3RhbmNlSm9pbnREZWYgPyBkZWYgOiBudWxsKSk7XG4gICAgICAgICB9XG4gICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgYjJKb2ludC5lX21vdXNlSm9pbnQ6XG4gICAgICAgICB7XG4gICAgICAgICAgICBqb2ludCA9IG5ldyBiMk1vdXNlSm9pbnQoKGRlZiBpbnN0YW5jZW9mIGIyTW91c2VKb2ludERlZiA/IGRlZiA6IG51bGwpKTtcbiAgICAgICAgIH1cbiAgICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBiMkpvaW50LmVfcHJpc21hdGljSm9pbnQ6XG4gICAgICAgICB7XG4gICAgICAgICAgICBqb2ludCA9IG5ldyBiMlByaXNtYXRpY0pvaW50KChkZWYgaW5zdGFuY2VvZiBiMlByaXNtYXRpY0pvaW50RGVmID8gZGVmIDogbnVsbCkpO1xuICAgICAgICAgfVxuICAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIGIySm9pbnQuZV9yZXZvbHV0ZUpvaW50OlxuICAgICAgICAge1xuICAgICAgICAgICAgam9pbnQgPSBuZXcgYjJSZXZvbHV0ZUpvaW50KChkZWYgaW5zdGFuY2VvZiBiMlJldm9sdXRlSm9pbnREZWYgPyBkZWYgOiBudWxsKSk7XG4gICAgICAgICB9XG4gICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgYjJKb2ludC5lX3B1bGxleUpvaW50OlxuICAgICAgICAge1xuICAgICAgICAgICAgam9pbnQgPSBuZXcgYjJQdWxsZXlKb2ludCgoZGVmIGluc3RhbmNlb2YgYjJQdWxsZXlKb2ludERlZiA/IGRlZiA6IG51bGwpKTtcbiAgICAgICAgIH1cbiAgICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBiMkpvaW50LmVfZ2VhckpvaW50OlxuICAgICAgICAge1xuICAgICAgICAgICAgam9pbnQgPSBuZXcgYjJHZWFySm9pbnQoKGRlZiBpbnN0YW5jZW9mIGIyR2VhckpvaW50RGVmID8gZGVmIDogbnVsbCkpO1xuICAgICAgICAgfVxuICAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIGIySm9pbnQuZV9saW5lSm9pbnQ6XG4gICAgICAgICB7XG4gICAgICAgICAgICBqb2ludCA9IG5ldyBiMkxpbmVKb2ludCgoZGVmIGluc3RhbmNlb2YgYjJMaW5lSm9pbnREZWYgPyBkZWYgOiBudWxsKSk7XG4gICAgICAgICB9XG4gICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgYjJKb2ludC5lX3dlbGRKb2ludDpcbiAgICAgICAgIHtcbiAgICAgICAgICAgIGpvaW50ID0gbmV3IGIyV2VsZEpvaW50KChkZWYgaW5zdGFuY2VvZiBiMldlbGRKb2ludERlZiA/IGRlZiA6IG51bGwpKTtcbiAgICAgICAgIH1cbiAgICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBiMkpvaW50LmVfZnJpY3Rpb25Kb2ludDpcbiAgICAgICAgIHtcbiAgICAgICAgICAgIGpvaW50ID0gbmV3IGIyRnJpY3Rpb25Kb2ludCgoZGVmIGluc3RhbmNlb2YgYjJGcmljdGlvbkpvaW50RGVmID8gZGVmIDogbnVsbCkpO1xuICAgICAgICAgfVxuICAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICByZXR1cm4gam9pbnQ7XG4gICB9XG4gICBiMkpvaW50LkRlc3Ryb3kgPSBmdW5jdGlvbiAoam9pbnQsIGFsbG9jYXRvcikge31cbiAgIGIySm9pbnQucHJvdG90eXBlLmIySm9pbnQgPSBmdW5jdGlvbiAoZGVmKSB7XG4gICAgICBiMlNldHRpbmdzLmIyQXNzZXJ0KGRlZi5ib2R5QSAhPSBkZWYuYm9keUIpO1xuICAgICAgdGhpcy5tX3R5cGUgPSBkZWYudHlwZTtcbiAgICAgIHRoaXMubV9wcmV2ID0gbnVsbDtcbiAgICAgIHRoaXMubV9uZXh0ID0gbnVsbDtcbiAgICAgIHRoaXMubV9ib2R5QSA9IGRlZi5ib2R5QTtcbiAgICAgIHRoaXMubV9ib2R5QiA9IGRlZi5ib2R5QjtcbiAgICAgIHRoaXMubV9jb2xsaWRlQ29ubmVjdGVkID0gZGVmLmNvbGxpZGVDb25uZWN0ZWQ7XG4gICAgICB0aGlzLm1faXNsYW5kRmxhZyA9IGZhbHNlO1xuICAgICAgdGhpcy5tX3VzZXJEYXRhID0gZGVmLnVzZXJEYXRhO1xuICAgfVxuICAgYjJKb2ludC5wcm90b3R5cGUuSW5pdFZlbG9jaXR5Q29uc3RyYWludHMgPSBmdW5jdGlvbiAoc3RlcCkge31cbiAgIGIySm9pbnQucHJvdG90eXBlLlNvbHZlVmVsb2NpdHlDb25zdHJhaW50cyA9IGZ1bmN0aW9uIChzdGVwKSB7fVxuICAgYjJKb2ludC5wcm90b3R5cGUuRmluYWxpemVWZWxvY2l0eUNvbnN0cmFpbnRzID0gZnVuY3Rpb24gKCkge31cbiAgIGIySm9pbnQucHJvdG90eXBlLlNvbHZlUG9zaXRpb25Db25zdHJhaW50cyA9IGZ1bmN0aW9uIChiYXVtZ2FydGUpIHtcbiAgICAgIGlmIChiYXVtZ2FydGUgPT09IHVuZGVmaW5lZCkgYmF1bWdhcnRlID0gMDtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgIH1cbiAgIEJveDJELnBvc3REZWZzLnB1c2goZnVuY3Rpb24gKCkge1xuICAgICAgQm94MkQuRHluYW1pY3MuSm9pbnRzLmIySm9pbnQuZV91bmtub3duSm9pbnQgPSAwO1xuICAgICAgQm94MkQuRHluYW1pY3MuSm9pbnRzLmIySm9pbnQuZV9yZXZvbHV0ZUpvaW50ID0gMTtcbiAgICAgIEJveDJELkR5bmFtaWNzLkpvaW50cy5iMkpvaW50LmVfcHJpc21hdGljSm9pbnQgPSAyO1xuICAgICAgQm94MkQuRHluYW1pY3MuSm9pbnRzLmIySm9pbnQuZV9kaXN0YW5jZUpvaW50ID0gMztcbiAgICAgIEJveDJELkR5bmFtaWNzLkpvaW50cy5iMkpvaW50LmVfcHVsbGV5Sm9pbnQgPSA0O1xuICAgICAgQm94MkQuRHluYW1pY3MuSm9pbnRzLmIySm9pbnQuZV9tb3VzZUpvaW50ID0gNTtcbiAgICAgIEJveDJELkR5bmFtaWNzLkpvaW50cy5iMkpvaW50LmVfZ2VhckpvaW50ID0gNjtcbiAgICAgIEJveDJELkR5bmFtaWNzLkpvaW50cy5iMkpvaW50LmVfbGluZUpvaW50ID0gNztcbiAgICAgIEJveDJELkR5bmFtaWNzLkpvaW50cy5iMkpvaW50LmVfd2VsZEpvaW50ID0gODtcbiAgICAgIEJveDJELkR5bmFtaWNzLkpvaW50cy5iMkpvaW50LmVfZnJpY3Rpb25Kb2ludCA9IDk7XG4gICAgICBCb3gyRC5EeW5hbWljcy5Kb2ludHMuYjJKb2ludC5lX2luYWN0aXZlTGltaXQgPSAwO1xuICAgICAgQm94MkQuRHluYW1pY3MuSm9pbnRzLmIySm9pbnQuZV9hdExvd2VyTGltaXQgPSAxO1xuICAgICAgQm94MkQuRHluYW1pY3MuSm9pbnRzLmIySm9pbnQuZV9hdFVwcGVyTGltaXQgPSAyO1xuICAgICAgQm94MkQuRHluYW1pY3MuSm9pbnRzLmIySm9pbnQuZV9lcXVhbExpbWl0cyA9IDM7XG4gICB9KTtcbiAgIGIySm9pbnREZWYuYjJKb2ludERlZiA9IGZ1bmN0aW9uICgpIHt9O1xuICAgYjJKb2ludERlZi5wcm90b3R5cGUuYjJKb2ludERlZiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMudHlwZSA9IGIySm9pbnQuZV91bmtub3duSm9pbnQ7XG4gICAgICB0aGlzLnVzZXJEYXRhID0gbnVsbDtcbiAgICAgIHRoaXMuYm9keUEgPSBudWxsO1xuICAgICAgdGhpcy5ib2R5QiA9IG51bGw7XG4gICAgICB0aGlzLmNvbGxpZGVDb25uZWN0ZWQgPSBmYWxzZTtcbiAgIH1cbiAgIGIySm9pbnRFZGdlLmIySm9pbnRFZGdlID0gZnVuY3Rpb24gKCkge307XG4gICBCb3gyRC5pbmhlcml0KGIyTGluZUpvaW50LCBCb3gyRC5EeW5hbWljcy5Kb2ludHMuYjJKb2ludCk7XG4gICBiMkxpbmVKb2ludC5wcm90b3R5cGUuX19zdXBlciA9IEJveDJELkR5bmFtaWNzLkpvaW50cy5iMkpvaW50LnByb3RvdHlwZTtcbiAgIGIyTGluZUpvaW50LmIyTGluZUpvaW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgQm94MkQuRHluYW1pY3MuSm9pbnRzLmIySm9pbnQuYjJKb2ludC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgdGhpcy5tX2xvY2FsQW5jaG9yMSA9IG5ldyBiMlZlYzIoKTtcbiAgICAgIHRoaXMubV9sb2NhbEFuY2hvcjIgPSBuZXcgYjJWZWMyKCk7XG4gICAgICB0aGlzLm1fbG9jYWxYQXhpczEgPSBuZXcgYjJWZWMyKCk7XG4gICAgICB0aGlzLm1fbG9jYWxZQXhpczEgPSBuZXcgYjJWZWMyKCk7XG4gICAgICB0aGlzLm1fYXhpcyA9IG5ldyBiMlZlYzIoKTtcbiAgICAgIHRoaXMubV9wZXJwID0gbmV3IGIyVmVjMigpO1xuICAgICAgdGhpcy5tX0sgPSBuZXcgYjJNYXQyMigpO1xuICAgICAgdGhpcy5tX2ltcHVsc2UgPSBuZXcgYjJWZWMyKCk7XG4gICB9O1xuICAgYjJMaW5lSm9pbnQucHJvdG90eXBlLkdldEFuY2hvckEgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5tX2JvZHlBLkdldFdvcmxkUG9pbnQodGhpcy5tX2xvY2FsQW5jaG9yMSk7XG4gICB9XG4gICBiMkxpbmVKb2ludC5wcm90b3R5cGUuR2V0QW5jaG9yQiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzLm1fYm9keUIuR2V0V29ybGRQb2ludCh0aGlzLm1fbG9jYWxBbmNob3IyKTtcbiAgIH1cbiAgIGIyTGluZUpvaW50LnByb3RvdHlwZS5HZXRSZWFjdGlvbkZvcmNlID0gZnVuY3Rpb24gKGludl9kdCkge1xuICAgICAgaWYgKGludl9kdCA9PT0gdW5kZWZpbmVkKSBpbnZfZHQgPSAwO1xuICAgICAgcmV0dXJuIG5ldyBiMlZlYzIoaW52X2R0ICogKHRoaXMubV9pbXB1bHNlLnggKiB0aGlzLm1fcGVycC54ICsgKHRoaXMubV9tb3RvckltcHVsc2UgKyB0aGlzLm1faW1wdWxzZS55KSAqIHRoaXMubV9heGlzLngpLCBpbnZfZHQgKiAodGhpcy5tX2ltcHVsc2UueCAqIHRoaXMubV9wZXJwLnkgKyAodGhpcy5tX21vdG9ySW1wdWxzZSArIHRoaXMubV9pbXB1bHNlLnkpICogdGhpcy5tX2F4aXMueSkpO1xuICAgfVxuICAgYjJMaW5lSm9pbnQucHJvdG90eXBlLkdldFJlYWN0aW9uVG9ycXVlID0gZnVuY3Rpb24gKGludl9kdCkge1xuICAgICAgaWYgKGludl9kdCA9PT0gdW5kZWZpbmVkKSBpbnZfZHQgPSAwO1xuICAgICAgcmV0dXJuIGludl9kdCAqIHRoaXMubV9pbXB1bHNlLnk7XG4gICB9XG4gICBiMkxpbmVKb2ludC5wcm90b3R5cGUuR2V0Sm9pbnRUcmFuc2xhdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBiQSA9IHRoaXMubV9ib2R5QTtcbiAgICAgIHZhciBiQiA9IHRoaXMubV9ib2R5QjtcbiAgICAgIHZhciB0TWF0O1xuICAgICAgdmFyIHAxID0gYkEuR2V0V29ybGRQb2ludCh0aGlzLm1fbG9jYWxBbmNob3IxKTtcbiAgICAgIHZhciBwMiA9IGJCLkdldFdvcmxkUG9pbnQodGhpcy5tX2xvY2FsQW5jaG9yMik7XG4gICAgICB2YXIgZFggPSBwMi54IC0gcDEueDtcbiAgICAgIHZhciBkWSA9IHAyLnkgLSBwMS55O1xuICAgICAgdmFyIGF4aXMgPSBiQS5HZXRXb3JsZFZlY3Rvcih0aGlzLm1fbG9jYWxYQXhpczEpO1xuICAgICAgdmFyIHRyYW5zbGF0aW9uID0gYXhpcy54ICogZFggKyBheGlzLnkgKiBkWTtcbiAgICAgIHJldHVybiB0cmFuc2xhdGlvbjtcbiAgIH1cbiAgIGIyTGluZUpvaW50LnByb3RvdHlwZS5HZXRKb2ludFNwZWVkID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGJBID0gdGhpcy5tX2JvZHlBO1xuICAgICAgdmFyIGJCID0gdGhpcy5tX2JvZHlCO1xuICAgICAgdmFyIHRNYXQ7XG4gICAgICB0TWF0ID0gYkEubV94Zi5SO1xuICAgICAgdmFyIHIxWCA9IHRoaXMubV9sb2NhbEFuY2hvcjEueCAtIGJBLm1fc3dlZXAubG9jYWxDZW50ZXIueDtcbiAgICAgIHZhciByMVkgPSB0aGlzLm1fbG9jYWxBbmNob3IxLnkgLSBiQS5tX3N3ZWVwLmxvY2FsQ2VudGVyLnk7XG4gICAgICB2YXIgdFggPSAodE1hdC5jb2wxLnggKiByMVggKyB0TWF0LmNvbDIueCAqIHIxWSk7XG4gICAgICByMVkgPSAodE1hdC5jb2wxLnkgKiByMVggKyB0TWF0LmNvbDIueSAqIHIxWSk7XG4gICAgICByMVggPSB0WDtcbiAgICAgIHRNYXQgPSBiQi5tX3hmLlI7XG4gICAgICB2YXIgcjJYID0gdGhpcy5tX2xvY2FsQW5jaG9yMi54IC0gYkIubV9zd2VlcC5sb2NhbENlbnRlci54O1xuICAgICAgdmFyIHIyWSA9IHRoaXMubV9sb2NhbEFuY2hvcjIueSAtIGJCLm1fc3dlZXAubG9jYWxDZW50ZXIueTtcbiAgICAgIHRYID0gKHRNYXQuY29sMS54ICogcjJYICsgdE1hdC5jb2wyLnggKiByMlkpO1xuICAgICAgcjJZID0gKHRNYXQuY29sMS55ICogcjJYICsgdE1hdC5jb2wyLnkgKiByMlkpO1xuICAgICAgcjJYID0gdFg7XG4gICAgICB2YXIgcDFYID0gYkEubV9zd2VlcC5jLnggKyByMVg7XG4gICAgICB2YXIgcDFZID0gYkEubV9zd2VlcC5jLnkgKyByMVk7XG4gICAgICB2YXIgcDJYID0gYkIubV9zd2VlcC5jLnggKyByMlg7XG4gICAgICB2YXIgcDJZID0gYkIubV9zd2VlcC5jLnkgKyByMlk7XG4gICAgICB2YXIgZFggPSBwMlggLSBwMVg7XG4gICAgICB2YXIgZFkgPSBwMlkgLSBwMVk7XG4gICAgICB2YXIgYXhpcyA9IGJBLkdldFdvcmxkVmVjdG9yKHRoaXMubV9sb2NhbFhBeGlzMSk7XG4gICAgICB2YXIgdjEgPSBiQS5tX2xpbmVhclZlbG9jaXR5O1xuICAgICAgdmFyIHYyID0gYkIubV9saW5lYXJWZWxvY2l0eTtcbiAgICAgIHZhciB3MSA9IGJBLm1fYW5ndWxhclZlbG9jaXR5O1xuICAgICAgdmFyIHcyID0gYkIubV9hbmd1bGFyVmVsb2NpdHk7XG4gICAgICB2YXIgc3BlZWQgPSAoZFggKiAoKC13MSAqIGF4aXMueSkpICsgZFkgKiAodzEgKiBheGlzLngpKSArIChheGlzLnggKiAoKCh2Mi54ICsgKCgtdzIgKiByMlkpKSkgLSB2MS54KSAtICgoLXcxICogcjFZKSkpICsgYXhpcy55ICogKCgodjIueSArICh3MiAqIHIyWCkpIC0gdjEueSkgLSAodzEgKiByMVgpKSk7XG4gICAgICByZXR1cm4gc3BlZWQ7XG4gICB9XG4gICBiMkxpbmVKb2ludC5wcm90b3R5cGUuSXNMaW1pdEVuYWJsZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5tX2VuYWJsZUxpbWl0O1xuICAgfVxuICAgYjJMaW5lSm9pbnQucHJvdG90eXBlLkVuYWJsZUxpbWl0ID0gZnVuY3Rpb24gKGZsYWcpIHtcbiAgICAgIHRoaXMubV9ib2R5QS5TZXRBd2FrZSh0cnVlKTtcbiAgICAgIHRoaXMubV9ib2R5Qi5TZXRBd2FrZSh0cnVlKTtcbiAgICAgIHRoaXMubV9lbmFibGVMaW1pdCA9IGZsYWc7XG4gICB9XG4gICBiMkxpbmVKb2ludC5wcm90b3R5cGUuR2V0TG93ZXJMaW1pdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzLm1fbG93ZXJUcmFuc2xhdGlvbjtcbiAgIH1cbiAgIGIyTGluZUpvaW50LnByb3RvdHlwZS5HZXRVcHBlckxpbWl0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMubV91cHBlclRyYW5zbGF0aW9uO1xuICAgfVxuICAgYjJMaW5lSm9pbnQucHJvdG90eXBlLlNldExpbWl0cyA9IGZ1bmN0aW9uIChsb3dlciwgdXBwZXIpIHtcbiAgICAgIGlmIChsb3dlciA9PT0gdW5kZWZpbmVkKSBsb3dlciA9IDA7XG4gICAgICBpZiAodXBwZXIgPT09IHVuZGVmaW5lZCkgdXBwZXIgPSAwO1xuICAgICAgdGhpcy5tX2JvZHlBLlNldEF3YWtlKHRydWUpO1xuICAgICAgdGhpcy5tX2JvZHlCLlNldEF3YWtlKHRydWUpO1xuICAgICAgdGhpcy5tX2xvd2VyVHJhbnNsYXRpb24gPSBsb3dlcjtcbiAgICAgIHRoaXMubV91cHBlclRyYW5zbGF0aW9uID0gdXBwZXI7XG4gICB9XG4gICBiMkxpbmVKb2ludC5wcm90b3R5cGUuSXNNb3RvckVuYWJsZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5tX2VuYWJsZU1vdG9yO1xuICAgfVxuICAgYjJMaW5lSm9pbnQucHJvdG90eXBlLkVuYWJsZU1vdG9yID0gZnVuY3Rpb24gKGZsYWcpIHtcbiAgICAgIHRoaXMubV9ib2R5QS5TZXRBd2FrZSh0cnVlKTtcbiAgICAgIHRoaXMubV9ib2R5Qi5TZXRBd2FrZSh0cnVlKTtcbiAgICAgIHRoaXMubV9lbmFibGVNb3RvciA9IGZsYWc7XG4gICB9XG4gICBiMkxpbmVKb2ludC5wcm90b3R5cGUuU2V0TW90b3JTcGVlZCA9IGZ1bmN0aW9uIChzcGVlZCkge1xuICAgICAgaWYgKHNwZWVkID09PSB1bmRlZmluZWQpIHNwZWVkID0gMDtcbiAgICAgIHRoaXMubV9ib2R5QS5TZXRBd2FrZSh0cnVlKTtcbiAgICAgIHRoaXMubV9ib2R5Qi5TZXRBd2FrZSh0cnVlKTtcbiAgICAgIHRoaXMubV9tb3RvclNwZWVkID0gc3BlZWQ7XG4gICB9XG4gICBiMkxpbmVKb2ludC5wcm90b3R5cGUuR2V0TW90b3JTcGVlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzLm1fbW90b3JTcGVlZDtcbiAgIH1cbiAgIGIyTGluZUpvaW50LnByb3RvdHlwZS5TZXRNYXhNb3RvckZvcmNlID0gZnVuY3Rpb24gKGZvcmNlKSB7XG4gICAgICBpZiAoZm9yY2UgPT09IHVuZGVmaW5lZCkgZm9yY2UgPSAwO1xuICAgICAgdGhpcy5tX2JvZHlBLlNldEF3YWtlKHRydWUpO1xuICAgICAgdGhpcy5tX2JvZHlCLlNldEF3YWtlKHRydWUpO1xuICAgICAgdGhpcy5tX21heE1vdG9yRm9yY2UgPSBmb3JjZTtcbiAgIH1cbiAgIGIyTGluZUpvaW50LnByb3RvdHlwZS5HZXRNYXhNb3RvckZvcmNlID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMubV9tYXhNb3RvckZvcmNlO1xuICAgfVxuICAgYjJMaW5lSm9pbnQucHJvdG90eXBlLkdldE1vdG9yRm9yY2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5tX21vdG9ySW1wdWxzZTtcbiAgIH1cbiAgIGIyTGluZUpvaW50LnByb3RvdHlwZS5iMkxpbmVKb2ludCA9IGZ1bmN0aW9uIChkZWYpIHtcbiAgICAgIHRoaXMuX19zdXBlci5iMkpvaW50LmNhbGwodGhpcywgZGVmKTtcbiAgICAgIHZhciB0TWF0O1xuICAgICAgdmFyIHRYID0gMDtcbiAgICAgIHZhciB0WSA9IDA7XG4gICAgICB0aGlzLm1fbG9jYWxBbmNob3IxLlNldFYoZGVmLmxvY2FsQW5jaG9yQSk7XG4gICAgICB0aGlzLm1fbG9jYWxBbmNob3IyLlNldFYoZGVmLmxvY2FsQW5jaG9yQik7XG4gICAgICB0aGlzLm1fbG9jYWxYQXhpczEuU2V0VihkZWYubG9jYWxBeGlzQSk7XG4gICAgICB0aGlzLm1fbG9jYWxZQXhpczEueCA9ICgtdGhpcy5tX2xvY2FsWEF4aXMxLnkpO1xuICAgICAgdGhpcy5tX2xvY2FsWUF4aXMxLnkgPSB0aGlzLm1fbG9jYWxYQXhpczEueDtcbiAgICAgIHRoaXMubV9pbXB1bHNlLlNldFplcm8oKTtcbiAgICAgIHRoaXMubV9tb3Rvck1hc3MgPSAwLjA7XG4gICAgICB0aGlzLm1fbW90b3JJbXB1bHNlID0gMC4wO1xuICAgICAgdGhpcy5tX2xvd2VyVHJhbnNsYXRpb24gPSBkZWYubG93ZXJUcmFuc2xhdGlvbjtcbiAgICAgIHRoaXMubV91cHBlclRyYW5zbGF0aW9uID0gZGVmLnVwcGVyVHJhbnNsYXRpb247XG4gICAgICB0aGlzLm1fbWF4TW90b3JGb3JjZSA9IGRlZi5tYXhNb3RvckZvcmNlO1xuICAgICAgdGhpcy5tX21vdG9yU3BlZWQgPSBkZWYubW90b3JTcGVlZDtcbiAgICAgIHRoaXMubV9lbmFibGVMaW1pdCA9IGRlZi5lbmFibGVMaW1pdDtcbiAgICAgIHRoaXMubV9lbmFibGVNb3RvciA9IGRlZi5lbmFibGVNb3RvcjtcbiAgICAgIHRoaXMubV9saW1pdFN0YXRlID0gYjJKb2ludC5lX2luYWN0aXZlTGltaXQ7XG4gICAgICB0aGlzLm1fYXhpcy5TZXRaZXJvKCk7XG4gICAgICB0aGlzLm1fcGVycC5TZXRaZXJvKCk7XG4gICB9XG4gICBiMkxpbmVKb2ludC5wcm90b3R5cGUuSW5pdFZlbG9jaXR5Q29uc3RyYWludHMgPSBmdW5jdGlvbiAoc3RlcCkge1xuICAgICAgdmFyIGJBID0gdGhpcy5tX2JvZHlBO1xuICAgICAgdmFyIGJCID0gdGhpcy5tX2JvZHlCO1xuICAgICAgdmFyIHRNYXQ7XG4gICAgICB2YXIgdFggPSAwO1xuICAgICAgdGhpcy5tX2xvY2FsQ2VudGVyQS5TZXRWKGJBLkdldExvY2FsQ2VudGVyKCkpO1xuICAgICAgdGhpcy5tX2xvY2FsQ2VudGVyQi5TZXRWKGJCLkdldExvY2FsQ2VudGVyKCkpO1xuICAgICAgdmFyIHhmMSA9IGJBLkdldFRyYW5zZm9ybSgpO1xuICAgICAgdmFyIHhmMiA9IGJCLkdldFRyYW5zZm9ybSgpO1xuICAgICAgdE1hdCA9IGJBLm1feGYuUjtcbiAgICAgIHZhciByMVggPSB0aGlzLm1fbG9jYWxBbmNob3IxLnggLSB0aGlzLm1fbG9jYWxDZW50ZXJBLng7XG4gICAgICB2YXIgcjFZID0gdGhpcy5tX2xvY2FsQW5jaG9yMS55IC0gdGhpcy5tX2xvY2FsQ2VudGVyQS55O1xuICAgICAgdFggPSAodE1hdC5jb2wxLnggKiByMVggKyB0TWF0LmNvbDIueCAqIHIxWSk7XG4gICAgICByMVkgPSAodE1hdC5jb2wxLnkgKiByMVggKyB0TWF0LmNvbDIueSAqIHIxWSk7XG4gICAgICByMVggPSB0WDtcbiAgICAgIHRNYXQgPSBiQi5tX3hmLlI7XG4gICAgICB2YXIgcjJYID0gdGhpcy5tX2xvY2FsQW5jaG9yMi54IC0gdGhpcy5tX2xvY2FsQ2VudGVyQi54O1xuICAgICAgdmFyIHIyWSA9IHRoaXMubV9sb2NhbEFuY2hvcjIueSAtIHRoaXMubV9sb2NhbENlbnRlckIueTtcbiAgICAgIHRYID0gKHRNYXQuY29sMS54ICogcjJYICsgdE1hdC5jb2wyLnggKiByMlkpO1xuICAgICAgcjJZID0gKHRNYXQuY29sMS55ICogcjJYICsgdE1hdC5jb2wyLnkgKiByMlkpO1xuICAgICAgcjJYID0gdFg7XG4gICAgICB2YXIgZFggPSBiQi5tX3N3ZWVwLmMueCArIHIyWCAtIGJBLm1fc3dlZXAuYy54IC0gcjFYO1xuICAgICAgdmFyIGRZID0gYkIubV9zd2VlcC5jLnkgKyByMlkgLSBiQS5tX3N3ZWVwLmMueSAtIHIxWTtcbiAgICAgIHRoaXMubV9pbnZNYXNzQSA9IGJBLm1faW52TWFzcztcbiAgICAgIHRoaXMubV9pbnZNYXNzQiA9IGJCLm1faW52TWFzcztcbiAgICAgIHRoaXMubV9pbnZJQSA9IGJBLm1faW52STtcbiAgICAgIHRoaXMubV9pbnZJQiA9IGJCLm1faW52STsge1xuICAgICAgICAgdGhpcy5tX2F4aXMuU2V0VihiMk1hdGguTXVsTVYoeGYxLlIsIHRoaXMubV9sb2NhbFhBeGlzMSkpO1xuICAgICAgICAgdGhpcy5tX2ExID0gKGRYICsgcjFYKSAqIHRoaXMubV9heGlzLnkgLSAoZFkgKyByMVkpICogdGhpcy5tX2F4aXMueDtcbiAgICAgICAgIHRoaXMubV9hMiA9IHIyWCAqIHRoaXMubV9heGlzLnkgLSByMlkgKiB0aGlzLm1fYXhpcy54O1xuICAgICAgICAgdGhpcy5tX21vdG9yTWFzcyA9IHRoaXMubV9pbnZNYXNzQSArIHRoaXMubV9pbnZNYXNzQiArIHRoaXMubV9pbnZJQSAqIHRoaXMubV9hMSAqIHRoaXMubV9hMSArIHRoaXMubV9pbnZJQiAqIHRoaXMubV9hMiAqIHRoaXMubV9hMjtcbiAgICAgICAgIHRoaXMubV9tb3Rvck1hc3MgPSB0aGlzLm1fbW90b3JNYXNzID4gTnVtYmVyLk1JTl9WQUxVRSA/IDEuMCAvIHRoaXMubV9tb3Rvck1hc3MgOiAwLjA7XG4gICAgICB9IHtcbiAgICAgICAgIHRoaXMubV9wZXJwLlNldFYoYjJNYXRoLk11bE1WKHhmMS5SLCB0aGlzLm1fbG9jYWxZQXhpczEpKTtcbiAgICAgICAgIHRoaXMubV9zMSA9IChkWCArIHIxWCkgKiB0aGlzLm1fcGVycC55IC0gKGRZICsgcjFZKSAqIHRoaXMubV9wZXJwLng7XG4gICAgICAgICB0aGlzLm1fczIgPSByMlggKiB0aGlzLm1fcGVycC55IC0gcjJZICogdGhpcy5tX3BlcnAueDtcbiAgICAgICAgIHZhciBtMSA9IHRoaXMubV9pbnZNYXNzQTtcbiAgICAgICAgIHZhciBtMiA9IHRoaXMubV9pbnZNYXNzQjtcbiAgICAgICAgIHZhciBpMSA9IHRoaXMubV9pbnZJQTtcbiAgICAgICAgIHZhciBpMiA9IHRoaXMubV9pbnZJQjtcbiAgICAgICAgIHRoaXMubV9LLmNvbDEueCA9IG0xICsgbTIgKyBpMSAqIHRoaXMubV9zMSAqIHRoaXMubV9zMSArIGkyICogdGhpcy5tX3MyICogdGhpcy5tX3MyO1xuICAgICAgICAgdGhpcy5tX0suY29sMS55ID0gaTEgKiB0aGlzLm1fczEgKiB0aGlzLm1fYTEgKyBpMiAqIHRoaXMubV9zMiAqIHRoaXMubV9hMjtcbiAgICAgICAgIHRoaXMubV9LLmNvbDIueCA9IHRoaXMubV9LLmNvbDEueTtcbiAgICAgICAgIHRoaXMubV9LLmNvbDIueSA9IG0xICsgbTIgKyBpMSAqIHRoaXMubV9hMSAqIHRoaXMubV9hMSArIGkyICogdGhpcy5tX2EyICogdGhpcy5tX2EyO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMubV9lbmFibGVMaW1pdCkge1xuICAgICAgICAgdmFyIGpvaW50VHJhbnNpdGlvbiA9IHRoaXMubV9heGlzLnggKiBkWCArIHRoaXMubV9heGlzLnkgKiBkWTtcbiAgICAgICAgIGlmIChiMk1hdGguQWJzKHRoaXMubV91cHBlclRyYW5zbGF0aW9uIC0gdGhpcy5tX2xvd2VyVHJhbnNsYXRpb24pIDwgMi4wICogYjJTZXR0aW5ncy5iMl9saW5lYXJTbG9wKSB7XG4gICAgICAgICAgICB0aGlzLm1fbGltaXRTdGF0ZSA9IGIySm9pbnQuZV9lcXVhbExpbWl0cztcbiAgICAgICAgIH1cbiAgICAgICAgIGVsc2UgaWYgKGpvaW50VHJhbnNpdGlvbiA8PSB0aGlzLm1fbG93ZXJUcmFuc2xhdGlvbikge1xuICAgICAgICAgICAgaWYgKHRoaXMubV9saW1pdFN0YXRlICE9IGIySm9pbnQuZV9hdExvd2VyTGltaXQpIHtcbiAgICAgICAgICAgICAgIHRoaXMubV9saW1pdFN0YXRlID0gYjJKb2ludC5lX2F0TG93ZXJMaW1pdDtcbiAgICAgICAgICAgICAgIHRoaXMubV9pbXB1bHNlLnkgPSAwLjA7XG4gICAgICAgICAgICB9XG4gICAgICAgICB9XG4gICAgICAgICBlbHNlIGlmIChqb2ludFRyYW5zaXRpb24gPj0gdGhpcy5tX3VwcGVyVHJhbnNsYXRpb24pIHtcbiAgICAgICAgICAgIGlmICh0aGlzLm1fbGltaXRTdGF0ZSAhPSBiMkpvaW50LmVfYXRVcHBlckxpbWl0KSB7XG4gICAgICAgICAgICAgICB0aGlzLm1fbGltaXRTdGF0ZSA9IGIySm9pbnQuZV9hdFVwcGVyTGltaXQ7XG4gICAgICAgICAgICAgICB0aGlzLm1faW1wdWxzZS55ID0gMC4wO1xuICAgICAgICAgICAgfVxuICAgICAgICAgfVxuICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLm1fbGltaXRTdGF0ZSA9IGIySm9pbnQuZV9pbmFjdGl2ZUxpbWl0O1xuICAgICAgICAgICAgdGhpcy5tX2ltcHVsc2UueSA9IDAuMDtcbiAgICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICAgdGhpcy5tX2xpbWl0U3RhdGUgPSBiMkpvaW50LmVfaW5hY3RpdmVMaW1pdDtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLm1fZW5hYmxlTW90b3IgPT0gZmFsc2UpIHtcbiAgICAgICAgIHRoaXMubV9tb3RvckltcHVsc2UgPSAwLjA7XG4gICAgICB9XG4gICAgICBpZiAoc3RlcC53YXJtU3RhcnRpbmcpIHtcbiAgICAgICAgIHRoaXMubV9pbXB1bHNlLnggKj0gc3RlcC5kdFJhdGlvO1xuICAgICAgICAgdGhpcy5tX2ltcHVsc2UueSAqPSBzdGVwLmR0UmF0aW87XG4gICAgICAgICB0aGlzLm1fbW90b3JJbXB1bHNlICo9IHN0ZXAuZHRSYXRpbztcbiAgICAgICAgIHZhciBQWCA9IHRoaXMubV9pbXB1bHNlLnggKiB0aGlzLm1fcGVycC54ICsgKHRoaXMubV9tb3RvckltcHVsc2UgKyB0aGlzLm1faW1wdWxzZS55KSAqIHRoaXMubV9heGlzLng7XG4gICAgICAgICB2YXIgUFkgPSB0aGlzLm1faW1wdWxzZS54ICogdGhpcy5tX3BlcnAueSArICh0aGlzLm1fbW90b3JJbXB1bHNlICsgdGhpcy5tX2ltcHVsc2UueSkgKiB0aGlzLm1fYXhpcy55O1xuICAgICAgICAgdmFyIEwxID0gdGhpcy5tX2ltcHVsc2UueCAqIHRoaXMubV9zMSArICh0aGlzLm1fbW90b3JJbXB1bHNlICsgdGhpcy5tX2ltcHVsc2UueSkgKiB0aGlzLm1fYTE7XG4gICAgICAgICB2YXIgTDIgPSB0aGlzLm1faW1wdWxzZS54ICogdGhpcy5tX3MyICsgKHRoaXMubV9tb3RvckltcHVsc2UgKyB0aGlzLm1faW1wdWxzZS55KSAqIHRoaXMubV9hMjtcbiAgICAgICAgIGJBLm1fbGluZWFyVmVsb2NpdHkueCAtPSB0aGlzLm1faW52TWFzc0EgKiBQWDtcbiAgICAgICAgIGJBLm1fbGluZWFyVmVsb2NpdHkueSAtPSB0aGlzLm1faW52TWFzc0EgKiBQWTtcbiAgICAgICAgIGJBLm1fYW5ndWxhclZlbG9jaXR5IC09IHRoaXMubV9pbnZJQSAqIEwxO1xuICAgICAgICAgYkIubV9saW5lYXJWZWxvY2l0eS54ICs9IHRoaXMubV9pbnZNYXNzQiAqIFBYO1xuICAgICAgICAgYkIubV9saW5lYXJWZWxvY2l0eS55ICs9IHRoaXMubV9pbnZNYXNzQiAqIFBZO1xuICAgICAgICAgYkIubV9hbmd1bGFyVmVsb2NpdHkgKz0gdGhpcy5tX2ludklCICogTDI7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgIHRoaXMubV9pbXB1bHNlLlNldFplcm8oKTtcbiAgICAgICAgIHRoaXMubV9tb3RvckltcHVsc2UgPSAwLjA7XG4gICAgICB9XG4gICB9XG4gICBiMkxpbmVKb2ludC5wcm90b3R5cGUuU29sdmVWZWxvY2l0eUNvbnN0cmFpbnRzID0gZnVuY3Rpb24gKHN0ZXApIHtcbiAgICAgIHZhciBiQSA9IHRoaXMubV9ib2R5QTtcbiAgICAgIHZhciBiQiA9IHRoaXMubV9ib2R5QjtcbiAgICAgIHZhciB2MSA9IGJBLm1fbGluZWFyVmVsb2NpdHk7XG4gICAgICB2YXIgdzEgPSBiQS5tX2FuZ3VsYXJWZWxvY2l0eTtcbiAgICAgIHZhciB2MiA9IGJCLm1fbGluZWFyVmVsb2NpdHk7XG4gICAgICB2YXIgdzIgPSBiQi5tX2FuZ3VsYXJWZWxvY2l0eTtcbiAgICAgIHZhciBQWCA9IDA7XG4gICAgICB2YXIgUFkgPSAwO1xuICAgICAgdmFyIEwxID0gMDtcbiAgICAgIHZhciBMMiA9IDA7XG4gICAgICBpZiAodGhpcy5tX2VuYWJsZU1vdG9yICYmIHRoaXMubV9saW1pdFN0YXRlICE9IGIySm9pbnQuZV9lcXVhbExpbWl0cykge1xuICAgICAgICAgdmFyIENkb3QgPSB0aGlzLm1fYXhpcy54ICogKHYyLnggLSB2MS54KSArIHRoaXMubV9heGlzLnkgKiAodjIueSAtIHYxLnkpICsgdGhpcy5tX2EyICogdzIgLSB0aGlzLm1fYTEgKiB3MTtcbiAgICAgICAgIHZhciBpbXB1bHNlID0gdGhpcy5tX21vdG9yTWFzcyAqICh0aGlzLm1fbW90b3JTcGVlZCAtIENkb3QpO1xuICAgICAgICAgdmFyIG9sZEltcHVsc2UgPSB0aGlzLm1fbW90b3JJbXB1bHNlO1xuICAgICAgICAgdmFyIG1heEltcHVsc2UgPSBzdGVwLmR0ICogdGhpcy5tX21heE1vdG9yRm9yY2U7XG4gICAgICAgICB0aGlzLm1fbW90b3JJbXB1bHNlID0gYjJNYXRoLkNsYW1wKHRoaXMubV9tb3RvckltcHVsc2UgKyBpbXB1bHNlLCAoLW1heEltcHVsc2UpLCBtYXhJbXB1bHNlKTtcbiAgICAgICAgIGltcHVsc2UgPSB0aGlzLm1fbW90b3JJbXB1bHNlIC0gb2xkSW1wdWxzZTtcbiAgICAgICAgIFBYID0gaW1wdWxzZSAqIHRoaXMubV9heGlzLng7XG4gICAgICAgICBQWSA9IGltcHVsc2UgKiB0aGlzLm1fYXhpcy55O1xuICAgICAgICAgTDEgPSBpbXB1bHNlICogdGhpcy5tX2ExO1xuICAgICAgICAgTDIgPSBpbXB1bHNlICogdGhpcy5tX2EyO1xuICAgICAgICAgdjEueCAtPSB0aGlzLm1faW52TWFzc0EgKiBQWDtcbiAgICAgICAgIHYxLnkgLT0gdGhpcy5tX2ludk1hc3NBICogUFk7XG4gICAgICAgICB3MSAtPSB0aGlzLm1faW52SUEgKiBMMTtcbiAgICAgICAgIHYyLnggKz0gdGhpcy5tX2ludk1hc3NCICogUFg7XG4gICAgICAgICB2Mi55ICs9IHRoaXMubV9pbnZNYXNzQiAqIFBZO1xuICAgICAgICAgdzIgKz0gdGhpcy5tX2ludklCICogTDI7XG4gICAgICB9XG4gICAgICB2YXIgQ2RvdDEgPSB0aGlzLm1fcGVycC54ICogKHYyLnggLSB2MS54KSArIHRoaXMubV9wZXJwLnkgKiAodjIueSAtIHYxLnkpICsgdGhpcy5tX3MyICogdzIgLSB0aGlzLm1fczEgKiB3MTtcbiAgICAgIGlmICh0aGlzLm1fZW5hYmxlTGltaXQgJiYgdGhpcy5tX2xpbWl0U3RhdGUgIT0gYjJKb2ludC5lX2luYWN0aXZlTGltaXQpIHtcbiAgICAgICAgIHZhciBDZG90MiA9IHRoaXMubV9heGlzLnggKiAodjIueCAtIHYxLngpICsgdGhpcy5tX2F4aXMueSAqICh2Mi55IC0gdjEueSkgKyB0aGlzLm1fYTIgKiB3MiAtIHRoaXMubV9hMSAqIHcxO1xuICAgICAgICAgdmFyIGYxID0gdGhpcy5tX2ltcHVsc2UuQ29weSgpO1xuICAgICAgICAgdmFyIGRmID0gdGhpcy5tX0suU29sdmUobmV3IGIyVmVjMigpLCAoLUNkb3QxKSwgKC1DZG90MikpO1xuICAgICAgICAgdGhpcy5tX2ltcHVsc2UuQWRkKGRmKTtcbiAgICAgICAgIGlmICh0aGlzLm1fbGltaXRTdGF0ZSA9PSBiMkpvaW50LmVfYXRMb3dlckxpbWl0KSB7XG4gICAgICAgICAgICB0aGlzLm1faW1wdWxzZS55ID0gYjJNYXRoLk1heCh0aGlzLm1faW1wdWxzZS55LCAwLjApO1xuICAgICAgICAgfVxuICAgICAgICAgZWxzZSBpZiAodGhpcy5tX2xpbWl0U3RhdGUgPT0gYjJKb2ludC5lX2F0VXBwZXJMaW1pdCkge1xuICAgICAgICAgICAgdGhpcy5tX2ltcHVsc2UueSA9IGIyTWF0aC5NaW4odGhpcy5tX2ltcHVsc2UueSwgMC4wKTtcbiAgICAgICAgIH1cbiAgICAgICAgIHZhciBiID0gKC1DZG90MSkgLSAodGhpcy5tX2ltcHVsc2UueSAtIGYxLnkpICogdGhpcy5tX0suY29sMi54O1xuICAgICAgICAgdmFyIGYyciA9IDA7XG4gICAgICAgICBpZiAodGhpcy5tX0suY29sMS54ICE9IDAuMCkge1xuICAgICAgICAgICAgZjJyID0gYiAvIHRoaXMubV9LLmNvbDEueCArIGYxLng7XG4gICAgICAgICB9XG4gICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGYyciA9IGYxLng7XG4gICAgICAgICB9XG4gICAgICAgICB0aGlzLm1faW1wdWxzZS54ID0gZjJyO1xuICAgICAgICAgZGYueCA9IHRoaXMubV9pbXB1bHNlLnggLSBmMS54O1xuICAgICAgICAgZGYueSA9IHRoaXMubV9pbXB1bHNlLnkgLSBmMS55O1xuICAgICAgICAgUFggPSBkZi54ICogdGhpcy5tX3BlcnAueCArIGRmLnkgKiB0aGlzLm1fYXhpcy54O1xuICAgICAgICAgUFkgPSBkZi54ICogdGhpcy5tX3BlcnAueSArIGRmLnkgKiB0aGlzLm1fYXhpcy55O1xuICAgICAgICAgTDEgPSBkZi54ICogdGhpcy5tX3MxICsgZGYueSAqIHRoaXMubV9hMTtcbiAgICAgICAgIEwyID0gZGYueCAqIHRoaXMubV9zMiArIGRmLnkgKiB0aGlzLm1fYTI7XG4gICAgICAgICB2MS54IC09IHRoaXMubV9pbnZNYXNzQSAqIFBYO1xuICAgICAgICAgdjEueSAtPSB0aGlzLm1faW52TWFzc0EgKiBQWTtcbiAgICAgICAgIHcxIC09IHRoaXMubV9pbnZJQSAqIEwxO1xuICAgICAgICAgdjIueCArPSB0aGlzLm1faW52TWFzc0IgKiBQWDtcbiAgICAgICAgIHYyLnkgKz0gdGhpcy5tX2ludk1hc3NCICogUFk7XG4gICAgICAgICB3MiArPSB0aGlzLm1faW52SUIgKiBMMjtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICAgdmFyIGRmMiA9IDA7XG4gICAgICAgICBpZiAodGhpcy5tX0suY29sMS54ICE9IDAuMCkge1xuICAgICAgICAgICAgZGYyID0gKCgtQ2RvdDEpKSAvIHRoaXMubV9LLmNvbDEueDtcbiAgICAgICAgIH1cbiAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZGYyID0gMC4wO1xuICAgICAgICAgfVxuICAgICAgICAgdGhpcy5tX2ltcHVsc2UueCArPSBkZjI7XG4gICAgICAgICBQWCA9IGRmMiAqIHRoaXMubV9wZXJwLng7XG4gICAgICAgICBQWSA9IGRmMiAqIHRoaXMubV9wZXJwLnk7XG4gICAgICAgICBMMSA9IGRmMiAqIHRoaXMubV9zMTtcbiAgICAgICAgIEwyID0gZGYyICogdGhpcy5tX3MyO1xuICAgICAgICAgdjEueCAtPSB0aGlzLm1faW52TWFzc0EgKiBQWDtcbiAgICAgICAgIHYxLnkgLT0gdGhpcy5tX2ludk1hc3NBICogUFk7XG4gICAgICAgICB3MSAtPSB0aGlzLm1faW52SUEgKiBMMTtcbiAgICAgICAgIHYyLnggKz0gdGhpcy5tX2ludk1hc3NCICogUFg7XG4gICAgICAgICB2Mi55ICs9IHRoaXMubV9pbnZNYXNzQiAqIFBZO1xuICAgICAgICAgdzIgKz0gdGhpcy5tX2ludklCICogTDI7XG4gICAgICB9XG4gICAgICBiQS5tX2xpbmVhclZlbG9jaXR5LlNldFYodjEpO1xuICAgICAgYkEubV9hbmd1bGFyVmVsb2NpdHkgPSB3MTtcbiAgICAgIGJCLm1fbGluZWFyVmVsb2NpdHkuU2V0Vih2Mik7XG4gICAgICBiQi5tX2FuZ3VsYXJWZWxvY2l0eSA9IHcyO1xuICAgfVxuICAgYjJMaW5lSm9pbnQucHJvdG90eXBlLlNvbHZlUG9zaXRpb25Db25zdHJhaW50cyA9IGZ1bmN0aW9uIChiYXVtZ2FydGUpIHtcbiAgICAgIGlmIChiYXVtZ2FydGUgPT09IHVuZGVmaW5lZCkgYmF1bWdhcnRlID0gMDtcbiAgICAgIHZhciBsaW1pdEMgPSAwO1xuICAgICAgdmFyIG9sZExpbWl0SW1wdWxzZSA9IDA7XG4gICAgICB2YXIgYkEgPSB0aGlzLm1fYm9keUE7XG4gICAgICB2YXIgYkIgPSB0aGlzLm1fYm9keUI7XG4gICAgICB2YXIgYzEgPSBiQS5tX3N3ZWVwLmM7XG4gICAgICB2YXIgYTEgPSBiQS5tX3N3ZWVwLmE7XG4gICAgICB2YXIgYzIgPSBiQi5tX3N3ZWVwLmM7XG4gICAgICB2YXIgYTIgPSBiQi5tX3N3ZWVwLmE7XG4gICAgICB2YXIgdE1hdDtcbiAgICAgIHZhciB0WCA9IDA7XG4gICAgICB2YXIgbTEgPSAwO1xuICAgICAgdmFyIG0yID0gMDtcbiAgICAgIHZhciBpMSA9IDA7XG4gICAgICB2YXIgaTIgPSAwO1xuICAgICAgdmFyIGxpbmVhckVycm9yID0gMC4wO1xuICAgICAgdmFyIGFuZ3VsYXJFcnJvciA9IDAuMDtcbiAgICAgIHZhciBhY3RpdmUgPSBmYWxzZTtcbiAgICAgIHZhciBDMiA9IDAuMDtcbiAgICAgIHZhciBSMSA9IGIyTWF0MjIuRnJvbUFuZ2xlKGExKTtcbiAgICAgIHZhciBSMiA9IGIyTWF0MjIuRnJvbUFuZ2xlKGEyKTtcbiAgICAgIHRNYXQgPSBSMTtcbiAgICAgIHZhciByMVggPSB0aGlzLm1fbG9jYWxBbmNob3IxLnggLSB0aGlzLm1fbG9jYWxDZW50ZXJBLng7XG4gICAgICB2YXIgcjFZID0gdGhpcy5tX2xvY2FsQW5jaG9yMS55IC0gdGhpcy5tX2xvY2FsQ2VudGVyQS55O1xuICAgICAgdFggPSAodE1hdC5jb2wxLnggKiByMVggKyB0TWF0LmNvbDIueCAqIHIxWSk7XG4gICAgICByMVkgPSAodE1hdC5jb2wxLnkgKiByMVggKyB0TWF0LmNvbDIueSAqIHIxWSk7XG4gICAgICByMVggPSB0WDtcbiAgICAgIHRNYXQgPSBSMjtcbiAgICAgIHZhciByMlggPSB0aGlzLm1fbG9jYWxBbmNob3IyLnggLSB0aGlzLm1fbG9jYWxDZW50ZXJCLng7XG4gICAgICB2YXIgcjJZID0gdGhpcy5tX2xvY2FsQW5jaG9yMi55IC0gdGhpcy5tX2xvY2FsQ2VudGVyQi55O1xuICAgICAgdFggPSAodE1hdC5jb2wxLnggKiByMlggKyB0TWF0LmNvbDIueCAqIHIyWSk7XG4gICAgICByMlkgPSAodE1hdC5jb2wxLnkgKiByMlggKyB0TWF0LmNvbDIueSAqIHIyWSk7XG4gICAgICByMlggPSB0WDtcbiAgICAgIHZhciBkWCA9IGMyLnggKyByMlggLSBjMS54IC0gcjFYO1xuICAgICAgdmFyIGRZID0gYzIueSArIHIyWSAtIGMxLnkgLSByMVk7XG4gICAgICBpZiAodGhpcy5tX2VuYWJsZUxpbWl0KSB7XG4gICAgICAgICB0aGlzLm1fYXhpcyA9IGIyTWF0aC5NdWxNVihSMSwgdGhpcy5tX2xvY2FsWEF4aXMxKTtcbiAgICAgICAgIHRoaXMubV9hMSA9IChkWCArIHIxWCkgKiB0aGlzLm1fYXhpcy55IC0gKGRZICsgcjFZKSAqIHRoaXMubV9heGlzLng7XG4gICAgICAgICB0aGlzLm1fYTIgPSByMlggKiB0aGlzLm1fYXhpcy55IC0gcjJZICogdGhpcy5tX2F4aXMueDtcbiAgICAgICAgIHZhciB0cmFuc2xhdGlvbiA9IHRoaXMubV9heGlzLnggKiBkWCArIHRoaXMubV9heGlzLnkgKiBkWTtcbiAgICAgICAgIGlmIChiMk1hdGguQWJzKHRoaXMubV91cHBlclRyYW5zbGF0aW9uIC0gdGhpcy5tX2xvd2VyVHJhbnNsYXRpb24pIDwgMi4wICogYjJTZXR0aW5ncy5iMl9saW5lYXJTbG9wKSB7XG4gICAgICAgICAgICBDMiA9IGIyTWF0aC5DbGFtcCh0cmFuc2xhdGlvbiwgKC1iMlNldHRpbmdzLmIyX21heExpbmVhckNvcnJlY3Rpb24pLCBiMlNldHRpbmdzLmIyX21heExpbmVhckNvcnJlY3Rpb24pO1xuICAgICAgICAgICAgbGluZWFyRXJyb3IgPSBiMk1hdGguQWJzKHRyYW5zbGF0aW9uKTtcbiAgICAgICAgICAgIGFjdGl2ZSA9IHRydWU7XG4gICAgICAgICB9XG4gICAgICAgICBlbHNlIGlmICh0cmFuc2xhdGlvbiA8PSB0aGlzLm1fbG93ZXJUcmFuc2xhdGlvbikge1xuICAgICAgICAgICAgQzIgPSBiMk1hdGguQ2xhbXAodHJhbnNsYXRpb24gLSB0aGlzLm1fbG93ZXJUcmFuc2xhdGlvbiArIGIyU2V0dGluZ3MuYjJfbGluZWFyU2xvcCwgKC1iMlNldHRpbmdzLmIyX21heExpbmVhckNvcnJlY3Rpb24pLCAwLjApO1xuICAgICAgICAgICAgbGluZWFyRXJyb3IgPSB0aGlzLm1fbG93ZXJUcmFuc2xhdGlvbiAtIHRyYW5zbGF0aW9uO1xuICAgICAgICAgICAgYWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgIH1cbiAgICAgICAgIGVsc2UgaWYgKHRyYW5zbGF0aW9uID49IHRoaXMubV91cHBlclRyYW5zbGF0aW9uKSB7XG4gICAgICAgICAgICBDMiA9IGIyTWF0aC5DbGFtcCh0cmFuc2xhdGlvbiAtIHRoaXMubV91cHBlclRyYW5zbGF0aW9uICsgYjJTZXR0aW5ncy5iMl9saW5lYXJTbG9wLCAwLjAsIGIyU2V0dGluZ3MuYjJfbWF4TGluZWFyQ29ycmVjdGlvbik7XG4gICAgICAgICAgICBsaW5lYXJFcnJvciA9IHRyYW5zbGF0aW9uIC0gdGhpcy5tX3VwcGVyVHJhbnNsYXRpb247XG4gICAgICAgICAgICBhY3RpdmUgPSB0cnVlO1xuICAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhpcy5tX3BlcnAgPSBiMk1hdGguTXVsTVYoUjEsIHRoaXMubV9sb2NhbFlBeGlzMSk7XG4gICAgICB0aGlzLm1fczEgPSAoZFggKyByMVgpICogdGhpcy5tX3BlcnAueSAtIChkWSArIHIxWSkgKiB0aGlzLm1fcGVycC54O1xuICAgICAgdGhpcy5tX3MyID0gcjJYICogdGhpcy5tX3BlcnAueSAtIHIyWSAqIHRoaXMubV9wZXJwLng7XG4gICAgICB2YXIgaW1wdWxzZSA9IG5ldyBiMlZlYzIoKTtcbiAgICAgIHZhciBDMSA9IHRoaXMubV9wZXJwLnggKiBkWCArIHRoaXMubV9wZXJwLnkgKiBkWTtcbiAgICAgIGxpbmVhckVycm9yID0gYjJNYXRoLk1heChsaW5lYXJFcnJvciwgYjJNYXRoLkFicyhDMSkpO1xuICAgICAgYW5ndWxhckVycm9yID0gMC4wO1xuICAgICAgaWYgKGFjdGl2ZSkge1xuICAgICAgICAgbTEgPSB0aGlzLm1faW52TWFzc0E7XG4gICAgICAgICBtMiA9IHRoaXMubV9pbnZNYXNzQjtcbiAgICAgICAgIGkxID0gdGhpcy5tX2ludklBO1xuICAgICAgICAgaTIgPSB0aGlzLm1faW52SUI7XG4gICAgICAgICB0aGlzLm1fSy5jb2wxLnggPSBtMSArIG0yICsgaTEgKiB0aGlzLm1fczEgKiB0aGlzLm1fczEgKyBpMiAqIHRoaXMubV9zMiAqIHRoaXMubV9zMjtcbiAgICAgICAgIHRoaXMubV9LLmNvbDEueSA9IGkxICogdGhpcy5tX3MxICogdGhpcy5tX2ExICsgaTIgKiB0aGlzLm1fczIgKiB0aGlzLm1fYTI7XG4gICAgICAgICB0aGlzLm1fSy5jb2wyLnggPSB0aGlzLm1fSy5jb2wxLnk7XG4gICAgICAgICB0aGlzLm1fSy5jb2wyLnkgPSBtMSArIG0yICsgaTEgKiB0aGlzLm1fYTEgKiB0aGlzLm1fYTEgKyBpMiAqIHRoaXMubV9hMiAqIHRoaXMubV9hMjtcbiAgICAgICAgIHRoaXMubV9LLlNvbHZlKGltcHVsc2UsICgtQzEpLCAoLUMyKSk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgIG0xID0gdGhpcy5tX2ludk1hc3NBO1xuICAgICAgICAgbTIgPSB0aGlzLm1faW52TWFzc0I7XG4gICAgICAgICBpMSA9IHRoaXMubV9pbnZJQTtcbiAgICAgICAgIGkyID0gdGhpcy5tX2ludklCO1xuICAgICAgICAgdmFyIGsxMSA9IG0xICsgbTIgKyBpMSAqIHRoaXMubV9zMSAqIHRoaXMubV9zMSArIGkyICogdGhpcy5tX3MyICogdGhpcy5tX3MyO1xuICAgICAgICAgdmFyIGltcHVsc2UxID0gMDtcbiAgICAgICAgIGlmIChrMTEgIT0gMC4wKSB7XG4gICAgICAgICAgICBpbXB1bHNlMSA9ICgoLUMxKSkgLyBrMTE7XG4gICAgICAgICB9XG4gICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGltcHVsc2UxID0gMC4wO1xuICAgICAgICAgfVxuICAgICAgICAgaW1wdWxzZS54ID0gaW1wdWxzZTE7XG4gICAgICAgICBpbXB1bHNlLnkgPSAwLjA7XG4gICAgICB9XG4gICAgICB2YXIgUFggPSBpbXB1bHNlLnggKiB0aGlzLm1fcGVycC54ICsgaW1wdWxzZS55ICogdGhpcy5tX2F4aXMueDtcbiAgICAgIHZhciBQWSA9IGltcHVsc2UueCAqIHRoaXMubV9wZXJwLnkgKyBpbXB1bHNlLnkgKiB0aGlzLm1fYXhpcy55O1xuICAgICAgdmFyIEwxID0gaW1wdWxzZS54ICogdGhpcy5tX3MxICsgaW1wdWxzZS55ICogdGhpcy5tX2ExO1xuICAgICAgdmFyIEwyID0gaW1wdWxzZS54ICogdGhpcy5tX3MyICsgaW1wdWxzZS55ICogdGhpcy5tX2EyO1xuICAgICAgYzEueCAtPSB0aGlzLm1faW52TWFzc0EgKiBQWDtcbiAgICAgIGMxLnkgLT0gdGhpcy5tX2ludk1hc3NBICogUFk7XG4gICAgICBhMSAtPSB0aGlzLm1faW52SUEgKiBMMTtcbiAgICAgIGMyLnggKz0gdGhpcy5tX2ludk1hc3NCICogUFg7XG4gICAgICBjMi55ICs9IHRoaXMubV9pbnZNYXNzQiAqIFBZO1xuICAgICAgYTIgKz0gdGhpcy5tX2ludklCICogTDI7XG4gICAgICBiQS5tX3N3ZWVwLmEgPSBhMTtcbiAgICAgIGJCLm1fc3dlZXAuYSA9IGEyO1xuICAgICAgYkEuU3luY2hyb25pemVUcmFuc2Zvcm0oKTtcbiAgICAgIGJCLlN5bmNocm9uaXplVHJhbnNmb3JtKCk7XG4gICAgICByZXR1cm4gbGluZWFyRXJyb3IgPD0gYjJTZXR0aW5ncy5iMl9saW5lYXJTbG9wICYmIGFuZ3VsYXJFcnJvciA8PSBiMlNldHRpbmdzLmIyX2FuZ3VsYXJTbG9wO1xuICAgfVxuICAgQm94MkQuaW5oZXJpdChiMkxpbmVKb2ludERlZiwgQm94MkQuRHluYW1pY3MuSm9pbnRzLmIySm9pbnREZWYpO1xuICAgYjJMaW5lSm9pbnREZWYucHJvdG90eXBlLl9fc3VwZXIgPSBCb3gyRC5EeW5hbWljcy5Kb2ludHMuYjJKb2ludERlZi5wcm90b3R5cGU7XG4gICBiMkxpbmVKb2ludERlZi5iMkxpbmVKb2ludERlZiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIEJveDJELkR5bmFtaWNzLkpvaW50cy5iMkpvaW50RGVmLmIySm9pbnREZWYuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIHRoaXMubG9jYWxBbmNob3JBID0gbmV3IGIyVmVjMigpO1xuICAgICAgdGhpcy5sb2NhbEFuY2hvckIgPSBuZXcgYjJWZWMyKCk7XG4gICAgICB0aGlzLmxvY2FsQXhpc0EgPSBuZXcgYjJWZWMyKCk7XG4gICB9O1xuICAgYjJMaW5lSm9pbnREZWYucHJvdG90eXBlLmIyTGluZUpvaW50RGVmID0gZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcy5fX3N1cGVyLmIySm9pbnREZWYuY2FsbCh0aGlzKTtcbiAgICAgIHRoaXMudHlwZSA9IGIySm9pbnQuZV9saW5lSm9pbnQ7XG4gICAgICB0aGlzLmxvY2FsQXhpc0EuU2V0KDEuMCwgMC4wKTtcbiAgICAgIHRoaXMuZW5hYmxlTGltaXQgPSBmYWxzZTtcbiAgICAgIHRoaXMubG93ZXJUcmFuc2xhdGlvbiA9IDAuMDtcbiAgICAgIHRoaXMudXBwZXJUcmFuc2xhdGlvbiA9IDAuMDtcbiAgICAgIHRoaXMuZW5hYmxlTW90b3IgPSBmYWxzZTtcbiAgICAgIHRoaXMubWF4TW90b3JGb3JjZSA9IDAuMDtcbiAgICAgIHRoaXMubW90b3JTcGVlZCA9IDAuMDtcbiAgIH1cbiAgIGIyTGluZUpvaW50RGVmLnByb3RvdHlwZS5Jbml0aWFsaXplID0gZnVuY3Rpb24gKGJBLCBiQiwgYW5jaG9yLCBheGlzKSB7XG4gICAgICB0aGlzLmJvZHlBID0gYkE7XG4gICAgICB0aGlzLmJvZHlCID0gYkI7XG4gICAgICB0aGlzLmxvY2FsQW5jaG9yQSA9IHRoaXMuYm9keUEuR2V0TG9jYWxQb2ludChhbmNob3IpO1xuICAgICAgdGhpcy5sb2NhbEFuY2hvckIgPSB0aGlzLmJvZHlCLkdldExvY2FsUG9pbnQoYW5jaG9yKTtcbiAgICAgIHRoaXMubG9jYWxBeGlzQSA9IHRoaXMuYm9keUEuR2V0TG9jYWxWZWN0b3IoYXhpcyk7XG4gICB9XG4gICBCb3gyRC5pbmhlcml0KGIyTW91c2VKb2ludCwgQm94MkQuRHluYW1pY3MuSm9pbnRzLmIySm9pbnQpO1xuICAgYjJNb3VzZUpvaW50LnByb3RvdHlwZS5fX3N1cGVyID0gQm94MkQuRHluYW1pY3MuSm9pbnRzLmIySm9pbnQucHJvdG90eXBlO1xuICAgYjJNb3VzZUpvaW50LmIyTW91c2VKb2ludCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIEJveDJELkR5bmFtaWNzLkpvaW50cy5iMkpvaW50LmIySm9pbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIHRoaXMuSyA9IG5ldyBiMk1hdDIyKCk7XG4gICAgICB0aGlzLksxID0gbmV3IGIyTWF0MjIoKTtcbiAgICAgIHRoaXMuSzIgPSBuZXcgYjJNYXQyMigpO1xuICAgICAgdGhpcy5tX2xvY2FsQW5jaG9yID0gbmV3IGIyVmVjMigpO1xuICAgICAgdGhpcy5tX3RhcmdldCA9IG5ldyBiMlZlYzIoKTtcbiAgICAgIHRoaXMubV9pbXB1bHNlID0gbmV3IGIyVmVjMigpO1xuICAgICAgdGhpcy5tX21hc3MgPSBuZXcgYjJNYXQyMigpO1xuICAgICAgdGhpcy5tX0MgPSBuZXcgYjJWZWMyKCk7XG4gICB9O1xuICAgYjJNb3VzZUpvaW50LnByb3RvdHlwZS5HZXRBbmNob3JBID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMubV90YXJnZXQ7XG4gICB9XG4gICBiMk1vdXNlSm9pbnQucHJvdG90eXBlLkdldEFuY2hvckIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5tX2JvZHlCLkdldFdvcmxkUG9pbnQodGhpcy5tX2xvY2FsQW5jaG9yKTtcbiAgIH1cbiAgIGIyTW91c2VKb2ludC5wcm90b3R5cGUuR2V0UmVhY3Rpb25Gb3JjZSA9IGZ1bmN0aW9uIChpbnZfZHQpIHtcbiAgICAgIGlmIChpbnZfZHQgPT09IHVuZGVmaW5lZCkgaW52X2R0ID0gMDtcbiAgICAgIHJldHVybiBuZXcgYjJWZWMyKGludl9kdCAqIHRoaXMubV9pbXB1bHNlLngsIGludl9kdCAqIHRoaXMubV9pbXB1bHNlLnkpO1xuICAgfVxuICAgYjJNb3VzZUpvaW50LnByb3RvdHlwZS5HZXRSZWFjdGlvblRvcnF1ZSA9IGZ1bmN0aW9uIChpbnZfZHQpIHtcbiAgICAgIGlmIChpbnZfZHQgPT09IHVuZGVmaW5lZCkgaW52X2R0ID0gMDtcbiAgICAgIHJldHVybiAwLjA7XG4gICB9XG4gICBiMk1vdXNlSm9pbnQucHJvdG90eXBlLkdldFRhcmdldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzLm1fdGFyZ2V0O1xuICAgfVxuICAgYjJNb3VzZUpvaW50LnByb3RvdHlwZS5TZXRUYXJnZXQgPSBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgICBpZiAodGhpcy5tX2JvZHlCLklzQXdha2UoKSA9PSBmYWxzZSkge1xuICAgICAgICAgdGhpcy5tX2JvZHlCLlNldEF3YWtlKHRydWUpO1xuICAgICAgfVxuICAgICAgdGhpcy5tX3RhcmdldCA9IHRhcmdldDtcbiAgIH1cbiAgIGIyTW91c2VKb2ludC5wcm90b3R5cGUuR2V0TWF4Rm9yY2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5tX21heEZvcmNlO1xuICAgfVxuICAgYjJNb3VzZUpvaW50LnByb3RvdHlwZS5TZXRNYXhGb3JjZSA9IGZ1bmN0aW9uIChtYXhGb3JjZSkge1xuICAgICAgaWYgKG1heEZvcmNlID09PSB1bmRlZmluZWQpIG1heEZvcmNlID0gMDtcbiAgICAgIHRoaXMubV9tYXhGb3JjZSA9IG1heEZvcmNlO1xuICAgfVxuICAgYjJNb3VzZUpvaW50LnByb3RvdHlwZS5HZXRGcmVxdWVuY3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5tX2ZyZXF1ZW5jeUh6O1xuICAgfVxuICAgYjJNb3VzZUpvaW50LnByb3RvdHlwZS5TZXRGcmVxdWVuY3kgPSBmdW5jdGlvbiAoaHopIHtcbiAgICAgIGlmIChoeiA9PT0gdW5kZWZpbmVkKSBoeiA9IDA7XG4gICAgICB0aGlzLm1fZnJlcXVlbmN5SHogPSBoejtcbiAgIH1cbiAgIGIyTW91c2VKb2ludC5wcm90b3R5cGUuR2V0RGFtcGluZ1JhdGlvID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMubV9kYW1waW5nUmF0aW87XG4gICB9XG4gICBiMk1vdXNlSm9pbnQucHJvdG90eXBlLlNldERhbXBpbmdSYXRpbyA9IGZ1bmN0aW9uIChyYXRpbykge1xuICAgICAgaWYgKHJhdGlvID09PSB1bmRlZmluZWQpIHJhdGlvID0gMDtcbiAgICAgIHRoaXMubV9kYW1waW5nUmF0aW8gPSByYXRpbztcbiAgIH1cbiAgIGIyTW91c2VKb2ludC5wcm90b3R5cGUuYjJNb3VzZUpvaW50ID0gZnVuY3Rpb24gKGRlZikge1xuICAgICAgdGhpcy5fX3N1cGVyLmIySm9pbnQuY2FsbCh0aGlzLCBkZWYpO1xuICAgICAgdGhpcy5tX3RhcmdldC5TZXRWKGRlZi50YXJnZXQpO1xuICAgICAgdmFyIHRYID0gdGhpcy5tX3RhcmdldC54IC0gdGhpcy5tX2JvZHlCLm1feGYucG9zaXRpb24ueDtcbiAgICAgIHZhciB0WSA9IHRoaXMubV90YXJnZXQueSAtIHRoaXMubV9ib2R5Qi5tX3hmLnBvc2l0aW9uLnk7XG4gICAgICB2YXIgdE1hdCA9IHRoaXMubV9ib2R5Qi5tX3hmLlI7XG4gICAgICB0aGlzLm1fbG9jYWxBbmNob3IueCA9ICh0WCAqIHRNYXQuY29sMS54ICsgdFkgKiB0TWF0LmNvbDEueSk7XG4gICAgICB0aGlzLm1fbG9jYWxBbmNob3IueSA9ICh0WCAqIHRNYXQuY29sMi54ICsgdFkgKiB0TWF0LmNvbDIueSk7XG4gICAgICB0aGlzLm1fbWF4Rm9yY2UgPSBkZWYubWF4Rm9yY2U7XG4gICAgICB0aGlzLm1faW1wdWxzZS5TZXRaZXJvKCk7XG4gICAgICB0aGlzLm1fZnJlcXVlbmN5SHogPSBkZWYuZnJlcXVlbmN5SHo7XG4gICAgICB0aGlzLm1fZGFtcGluZ1JhdGlvID0gZGVmLmRhbXBpbmdSYXRpbztcbiAgICAgIHRoaXMubV9iZXRhID0gMC4wO1xuICAgICAgdGhpcy5tX2dhbW1hID0gMC4wO1xuICAgfVxuICAgYjJNb3VzZUpvaW50LnByb3RvdHlwZS5Jbml0VmVsb2NpdHlDb25zdHJhaW50cyA9IGZ1bmN0aW9uIChzdGVwKSB7XG4gICAgICB2YXIgYiA9IHRoaXMubV9ib2R5QjtcbiAgICAgIHZhciBtYXNzID0gYi5HZXRNYXNzKCk7XG4gICAgICB2YXIgb21lZ2EgPSAyLjAgKiBNYXRoLlBJICogdGhpcy5tX2ZyZXF1ZW5jeUh6O1xuICAgICAgdmFyIGQgPSAyLjAgKiBtYXNzICogdGhpcy5tX2RhbXBpbmdSYXRpbyAqIG9tZWdhO1xuICAgICAgdmFyIGsgPSBtYXNzICogb21lZ2EgKiBvbWVnYTtcbiAgICAgIHRoaXMubV9nYW1tYSA9IHN0ZXAuZHQgKiAoZCArIHN0ZXAuZHQgKiBrKTtcbiAgICAgIHRoaXMubV9nYW1tYSA9IHRoaXMubV9nYW1tYSAhPSAwID8gMSAvIHRoaXMubV9nYW1tYSA6IDAuMDtcbiAgICAgIHRoaXMubV9iZXRhID0gc3RlcC5kdCAqIGsgKiB0aGlzLm1fZ2FtbWE7XG4gICAgICB2YXIgdE1hdDt0TWF0ID0gYi5tX3hmLlI7XG4gICAgICB2YXIgclggPSB0aGlzLm1fbG9jYWxBbmNob3IueCAtIGIubV9zd2VlcC5sb2NhbENlbnRlci54O1xuICAgICAgdmFyIHJZID0gdGhpcy5tX2xvY2FsQW5jaG9yLnkgLSBiLm1fc3dlZXAubG9jYWxDZW50ZXIueTtcbiAgICAgIHZhciB0WCA9ICh0TWF0LmNvbDEueCAqIHJYICsgdE1hdC5jb2wyLnggKiByWSk7clkgPSAodE1hdC5jb2wxLnkgKiByWCArIHRNYXQuY29sMi55ICogclkpO1xuICAgICAgclggPSB0WDtcbiAgICAgIHZhciBpbnZNYXNzID0gYi5tX2ludk1hc3M7XG4gICAgICB2YXIgaW52SSA9IGIubV9pbnZJO3RoaXMuSzEuY29sMS54ID0gaW52TWFzcztcbiAgICAgIHRoaXMuSzEuY29sMi54ID0gMC4wO1xuICAgICAgdGhpcy5LMS5jb2wxLnkgPSAwLjA7XG4gICAgICB0aGlzLksxLmNvbDIueSA9IGludk1hc3M7XG4gICAgICB0aGlzLksyLmNvbDEueCA9IGludkkgKiByWSAqIHJZO1xuICAgICAgdGhpcy5LMi5jb2wyLnggPSAoLWludkkgKiByWCAqIHJZKTtcbiAgICAgIHRoaXMuSzIuY29sMS55ID0gKC1pbnZJICogclggKiByWSk7XG4gICAgICB0aGlzLksyLmNvbDIueSA9IGludkkgKiByWCAqIHJYO1xuICAgICAgdGhpcy5LLlNldE0odGhpcy5LMSk7XG4gICAgICB0aGlzLksuQWRkTSh0aGlzLksyKTtcbiAgICAgIHRoaXMuSy5jb2wxLnggKz0gdGhpcy5tX2dhbW1hO1xuICAgICAgdGhpcy5LLmNvbDIueSArPSB0aGlzLm1fZ2FtbWE7XG4gICAgICB0aGlzLksuR2V0SW52ZXJzZSh0aGlzLm1fbWFzcyk7XG4gICAgICB0aGlzLm1fQy54ID0gYi5tX3N3ZWVwLmMueCArIHJYIC0gdGhpcy5tX3RhcmdldC54O1xuICAgICAgdGhpcy5tX0MueSA9IGIubV9zd2VlcC5jLnkgKyByWSAtIHRoaXMubV90YXJnZXQueTtcbiAgICAgIGIubV9hbmd1bGFyVmVsb2NpdHkgKj0gMC45ODtcbiAgICAgIHRoaXMubV9pbXB1bHNlLnggKj0gc3RlcC5kdFJhdGlvO1xuICAgICAgdGhpcy5tX2ltcHVsc2UueSAqPSBzdGVwLmR0UmF0aW87XG4gICAgICBiLm1fbGluZWFyVmVsb2NpdHkueCArPSBpbnZNYXNzICogdGhpcy5tX2ltcHVsc2UueDtcbiAgICAgIGIubV9saW5lYXJWZWxvY2l0eS55ICs9IGludk1hc3MgKiB0aGlzLm1faW1wdWxzZS55O1xuICAgICAgYi5tX2FuZ3VsYXJWZWxvY2l0eSArPSBpbnZJICogKHJYICogdGhpcy5tX2ltcHVsc2UueSAtIHJZICogdGhpcy5tX2ltcHVsc2UueCk7XG4gICB9XG4gICBiMk1vdXNlSm9pbnQucHJvdG90eXBlLlNvbHZlVmVsb2NpdHlDb25zdHJhaW50cyA9IGZ1bmN0aW9uIChzdGVwKSB7XG4gICAgICB2YXIgYiA9IHRoaXMubV9ib2R5QjtcbiAgICAgIHZhciB0TWF0O1xuICAgICAgdmFyIHRYID0gMDtcbiAgICAgIHZhciB0WSA9IDA7XG4gICAgICB0TWF0ID0gYi5tX3hmLlI7XG4gICAgICB2YXIgclggPSB0aGlzLm1fbG9jYWxBbmNob3IueCAtIGIubV9zd2VlcC5sb2NhbENlbnRlci54O1xuICAgICAgdmFyIHJZID0gdGhpcy5tX2xvY2FsQW5jaG9yLnkgLSBiLm1fc3dlZXAubG9jYWxDZW50ZXIueTtcbiAgICAgIHRYID0gKHRNYXQuY29sMS54ICogclggKyB0TWF0LmNvbDIueCAqIHJZKTtcbiAgICAgIHJZID0gKHRNYXQuY29sMS55ICogclggKyB0TWF0LmNvbDIueSAqIHJZKTtcbiAgICAgIHJYID0gdFg7XG4gICAgICB2YXIgQ2RvdFggPSBiLm1fbGluZWFyVmVsb2NpdHkueCArICgoLWIubV9hbmd1bGFyVmVsb2NpdHkgKiByWSkpO1xuICAgICAgdmFyIENkb3RZID0gYi5tX2xpbmVhclZlbG9jaXR5LnkgKyAoYi5tX2FuZ3VsYXJWZWxvY2l0eSAqIHJYKTtcbiAgICAgIHRNYXQgPSB0aGlzLm1fbWFzcztcbiAgICAgIHRYID0gQ2RvdFggKyB0aGlzLm1fYmV0YSAqIHRoaXMubV9DLnggKyB0aGlzLm1fZ2FtbWEgKiB0aGlzLm1faW1wdWxzZS54O1xuICAgICAgdFkgPSBDZG90WSArIHRoaXMubV9iZXRhICogdGhpcy5tX0MueSArIHRoaXMubV9nYW1tYSAqIHRoaXMubV9pbXB1bHNlLnk7XG4gICAgICB2YXIgaW1wdWxzZVggPSAoLSh0TWF0LmNvbDEueCAqIHRYICsgdE1hdC5jb2wyLnggKiB0WSkpO1xuICAgICAgdmFyIGltcHVsc2VZID0gKC0odE1hdC5jb2wxLnkgKiB0WCArIHRNYXQuY29sMi55ICogdFkpKTtcbiAgICAgIHZhciBvbGRJbXB1bHNlWCA9IHRoaXMubV9pbXB1bHNlLng7XG4gICAgICB2YXIgb2xkSW1wdWxzZVkgPSB0aGlzLm1faW1wdWxzZS55O1xuICAgICAgdGhpcy5tX2ltcHVsc2UueCArPSBpbXB1bHNlWDtcbiAgICAgIHRoaXMubV9pbXB1bHNlLnkgKz0gaW1wdWxzZVk7XG4gICAgICB2YXIgbWF4SW1wdWxzZSA9IHN0ZXAuZHQgKiB0aGlzLm1fbWF4Rm9yY2U7XG4gICAgICBpZiAodGhpcy5tX2ltcHVsc2UuTGVuZ3RoU3F1YXJlZCgpID4gbWF4SW1wdWxzZSAqIG1heEltcHVsc2UpIHtcbiAgICAgICAgIHRoaXMubV9pbXB1bHNlLk11bHRpcGx5KG1heEltcHVsc2UgLyB0aGlzLm1faW1wdWxzZS5MZW5ndGgoKSk7XG4gICAgICB9XG4gICAgICBpbXB1bHNlWCA9IHRoaXMubV9pbXB1bHNlLnggLSBvbGRJbXB1bHNlWDtcbiAgICAgIGltcHVsc2VZID0gdGhpcy5tX2ltcHVsc2UueSAtIG9sZEltcHVsc2VZO1xuICAgICAgYi5tX2xpbmVhclZlbG9jaXR5LnggKz0gYi5tX2ludk1hc3MgKiBpbXB1bHNlWDtcbiAgICAgIGIubV9saW5lYXJWZWxvY2l0eS55ICs9IGIubV9pbnZNYXNzICogaW1wdWxzZVk7XG4gICAgICBiLm1fYW5ndWxhclZlbG9jaXR5ICs9IGIubV9pbnZJICogKHJYICogaW1wdWxzZVkgLSByWSAqIGltcHVsc2VYKTtcbiAgIH1cbiAgIGIyTW91c2VKb2ludC5wcm90b3R5cGUuU29sdmVQb3NpdGlvbkNvbnN0cmFpbnRzID0gZnVuY3Rpb24gKGJhdW1nYXJ0ZSkge1xuICAgICAgaWYgKGJhdW1nYXJ0ZSA9PT0gdW5kZWZpbmVkKSBiYXVtZ2FydGUgPSAwO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICB9XG4gICBCb3gyRC5pbmhlcml0KGIyTW91c2VKb2ludERlZiwgQm94MkQuRHluYW1pY3MuSm9pbnRzLmIySm9pbnREZWYpO1xuICAgYjJNb3VzZUpvaW50RGVmLnByb3RvdHlwZS5fX3N1cGVyID0gQm94MkQuRHluYW1pY3MuSm9pbnRzLmIySm9pbnREZWYucHJvdG90eXBlO1xuICAgYjJNb3VzZUpvaW50RGVmLmIyTW91c2VKb2ludERlZiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIEJveDJELkR5bmFtaWNzLkpvaW50cy5iMkpvaW50RGVmLmIySm9pbnREZWYuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIHRoaXMudGFyZ2V0ID0gbmV3IGIyVmVjMigpO1xuICAgfTtcbiAgIGIyTW91c2VKb2ludERlZi5wcm90b3R5cGUuYjJNb3VzZUpvaW50RGVmID0gZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcy5fX3N1cGVyLmIySm9pbnREZWYuY2FsbCh0aGlzKTtcbiAgICAgIHRoaXMudHlwZSA9IGIySm9pbnQuZV9tb3VzZUpvaW50O1xuICAgICAgdGhpcy5tYXhGb3JjZSA9IDAuMDtcbiAgICAgIHRoaXMuZnJlcXVlbmN5SHogPSA1LjA7XG4gICAgICB0aGlzLmRhbXBpbmdSYXRpbyA9IDAuNztcbiAgIH1cbiAgIEJveDJELmluaGVyaXQoYjJQcmlzbWF0aWNKb2ludCwgQm94MkQuRHluYW1pY3MuSm9pbnRzLmIySm9pbnQpO1xuICAgYjJQcmlzbWF0aWNKb2ludC5wcm90b3R5cGUuX19zdXBlciA9IEJveDJELkR5bmFtaWNzLkpvaW50cy5iMkpvaW50LnByb3RvdHlwZTtcbiAgIGIyUHJpc21hdGljSm9pbnQuYjJQcmlzbWF0aWNKb2ludCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIEJveDJELkR5bmFtaWNzLkpvaW50cy5iMkpvaW50LmIySm9pbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIHRoaXMubV9sb2NhbEFuY2hvcjEgPSBuZXcgYjJWZWMyKCk7XG4gICAgICB0aGlzLm1fbG9jYWxBbmNob3IyID0gbmV3IGIyVmVjMigpO1xuICAgICAgdGhpcy5tX2xvY2FsWEF4aXMxID0gbmV3IGIyVmVjMigpO1xuICAgICAgdGhpcy5tX2xvY2FsWUF4aXMxID0gbmV3IGIyVmVjMigpO1xuICAgICAgdGhpcy5tX2F4aXMgPSBuZXcgYjJWZWMyKCk7XG4gICAgICB0aGlzLm1fcGVycCA9IG5ldyBiMlZlYzIoKTtcbiAgICAgIHRoaXMubV9LID0gbmV3IGIyTWF0MzMoKTtcbiAgICAgIHRoaXMubV9pbXB1bHNlID0gbmV3IGIyVmVjMygpO1xuICAgfTtcbiAgIGIyUHJpc21hdGljSm9pbnQucHJvdG90eXBlLkdldEFuY2hvckEgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5tX2JvZHlBLkdldFdvcmxkUG9pbnQodGhpcy5tX2xvY2FsQW5jaG9yMSk7XG4gICB9XG4gICBiMlByaXNtYXRpY0pvaW50LnByb3RvdHlwZS5HZXRBbmNob3JCID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMubV9ib2R5Qi5HZXRXb3JsZFBvaW50KHRoaXMubV9sb2NhbEFuY2hvcjIpO1xuICAgfVxuICAgYjJQcmlzbWF0aWNKb2ludC5wcm90b3R5cGUuR2V0UmVhY3Rpb25Gb3JjZSA9IGZ1bmN0aW9uIChpbnZfZHQpIHtcbiAgICAgIGlmIChpbnZfZHQgPT09IHVuZGVmaW5lZCkgaW52X2R0ID0gMDtcbiAgICAgIHJldHVybiBuZXcgYjJWZWMyKGludl9kdCAqICh0aGlzLm1faW1wdWxzZS54ICogdGhpcy5tX3BlcnAueCArICh0aGlzLm1fbW90b3JJbXB1bHNlICsgdGhpcy5tX2ltcHVsc2UueikgKiB0aGlzLm1fYXhpcy54KSwgaW52X2R0ICogKHRoaXMubV9pbXB1bHNlLnggKiB0aGlzLm1fcGVycC55ICsgKHRoaXMubV9tb3RvckltcHVsc2UgKyB0aGlzLm1faW1wdWxzZS56KSAqIHRoaXMubV9heGlzLnkpKTtcbiAgIH1cbiAgIGIyUHJpc21hdGljSm9pbnQucHJvdG90eXBlLkdldFJlYWN0aW9uVG9ycXVlID0gZnVuY3Rpb24gKGludl9kdCkge1xuICAgICAgaWYgKGludl9kdCA9PT0gdW5kZWZpbmVkKSBpbnZfZHQgPSAwO1xuICAgICAgcmV0dXJuIGludl9kdCAqIHRoaXMubV9pbXB1bHNlLnk7XG4gICB9XG4gICBiMlByaXNtYXRpY0pvaW50LnByb3RvdHlwZS5HZXRKb2ludFRyYW5zbGF0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGJBID0gdGhpcy5tX2JvZHlBO1xuICAgICAgdmFyIGJCID0gdGhpcy5tX2JvZHlCO1xuICAgICAgdmFyIHRNYXQ7XG4gICAgICB2YXIgcDEgPSBiQS5HZXRXb3JsZFBvaW50KHRoaXMubV9sb2NhbEFuY2hvcjEpO1xuICAgICAgdmFyIHAyID0gYkIuR2V0V29ybGRQb2ludCh0aGlzLm1fbG9jYWxBbmNob3IyKTtcbiAgICAgIHZhciBkWCA9IHAyLnggLSBwMS54O1xuICAgICAgdmFyIGRZID0gcDIueSAtIHAxLnk7XG4gICAgICB2YXIgYXhpcyA9IGJBLkdldFdvcmxkVmVjdG9yKHRoaXMubV9sb2NhbFhBeGlzMSk7XG4gICAgICB2YXIgdHJhbnNsYXRpb24gPSBheGlzLnggKiBkWCArIGF4aXMueSAqIGRZO1xuICAgICAgcmV0dXJuIHRyYW5zbGF0aW9uO1xuICAgfVxuICAgYjJQcmlzbWF0aWNKb2ludC5wcm90b3R5cGUuR2V0Sm9pbnRTcGVlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBiQSA9IHRoaXMubV9ib2R5QTtcbiAgICAgIHZhciBiQiA9IHRoaXMubV9ib2R5QjtcbiAgICAgIHZhciB0TWF0O1xuICAgICAgdE1hdCA9IGJBLm1feGYuUjtcbiAgICAgIHZhciByMVggPSB0aGlzLm1fbG9jYWxBbmNob3IxLnggLSBiQS5tX3N3ZWVwLmxvY2FsQ2VudGVyLng7XG4gICAgICB2YXIgcjFZID0gdGhpcy5tX2xvY2FsQW5jaG9yMS55IC0gYkEubV9zd2VlcC5sb2NhbENlbnRlci55O1xuICAgICAgdmFyIHRYID0gKHRNYXQuY29sMS54ICogcjFYICsgdE1hdC5jb2wyLnggKiByMVkpO1xuICAgICAgcjFZID0gKHRNYXQuY29sMS55ICogcjFYICsgdE1hdC5jb2wyLnkgKiByMVkpO1xuICAgICAgcjFYID0gdFg7XG4gICAgICB0TWF0ID0gYkIubV94Zi5SO1xuICAgICAgdmFyIHIyWCA9IHRoaXMubV9sb2NhbEFuY2hvcjIueCAtIGJCLm1fc3dlZXAubG9jYWxDZW50ZXIueDtcbiAgICAgIHZhciByMlkgPSB0aGlzLm1fbG9jYWxBbmNob3IyLnkgLSBiQi5tX3N3ZWVwLmxvY2FsQ2VudGVyLnk7XG4gICAgICB0WCA9ICh0TWF0LmNvbDEueCAqIHIyWCArIHRNYXQuY29sMi54ICogcjJZKTtcbiAgICAgIHIyWSA9ICh0TWF0LmNvbDEueSAqIHIyWCArIHRNYXQuY29sMi55ICogcjJZKTtcbiAgICAgIHIyWCA9IHRYO1xuICAgICAgdmFyIHAxWCA9IGJBLm1fc3dlZXAuYy54ICsgcjFYO1xuICAgICAgdmFyIHAxWSA9IGJBLm1fc3dlZXAuYy55ICsgcjFZO1xuICAgICAgdmFyIHAyWCA9IGJCLm1fc3dlZXAuYy54ICsgcjJYO1xuICAgICAgdmFyIHAyWSA9IGJCLm1fc3dlZXAuYy55ICsgcjJZO1xuICAgICAgdmFyIGRYID0gcDJYIC0gcDFYO1xuICAgICAgdmFyIGRZID0gcDJZIC0gcDFZO1xuICAgICAgdmFyIGF4aXMgPSBiQS5HZXRXb3JsZFZlY3Rvcih0aGlzLm1fbG9jYWxYQXhpczEpO1xuICAgICAgdmFyIHYxID0gYkEubV9saW5lYXJWZWxvY2l0eTtcbiAgICAgIHZhciB2MiA9IGJCLm1fbGluZWFyVmVsb2NpdHk7XG4gICAgICB2YXIgdzEgPSBiQS5tX2FuZ3VsYXJWZWxvY2l0eTtcbiAgICAgIHZhciB3MiA9IGJCLm1fYW5ndWxhclZlbG9jaXR5O1xuICAgICAgdmFyIHNwZWVkID0gKGRYICogKCgtdzEgKiBheGlzLnkpKSArIGRZICogKHcxICogYXhpcy54KSkgKyAoYXhpcy54ICogKCgodjIueCArICgoLXcyICogcjJZKSkpIC0gdjEueCkgLSAoKC13MSAqIHIxWSkpKSArIGF4aXMueSAqICgoKHYyLnkgKyAodzIgKiByMlgpKSAtIHYxLnkpIC0gKHcxICogcjFYKSkpO1xuICAgICAgcmV0dXJuIHNwZWVkO1xuICAgfVxuICAgYjJQcmlzbWF0aWNKb2ludC5wcm90b3R5cGUuSXNMaW1pdEVuYWJsZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5tX2VuYWJsZUxpbWl0O1xuICAgfVxuICAgYjJQcmlzbWF0aWNKb2ludC5wcm90b3R5cGUuRW5hYmxlTGltaXQgPSBmdW5jdGlvbiAoZmxhZykge1xuICAgICAgdGhpcy5tX2JvZHlBLlNldEF3YWtlKHRydWUpO1xuICAgICAgdGhpcy5tX2JvZHlCLlNldEF3YWtlKHRydWUpO1xuICAgICAgdGhpcy5tX2VuYWJsZUxpbWl0ID0gZmxhZztcbiAgIH1cbiAgIGIyUHJpc21hdGljSm9pbnQucHJvdG90eXBlLkdldExvd2VyTGltaXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5tX2xvd2VyVHJhbnNsYXRpb247XG4gICB9XG4gICBiMlByaXNtYXRpY0pvaW50LnByb3RvdHlwZS5HZXRVcHBlckxpbWl0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMubV91cHBlclRyYW5zbGF0aW9uO1xuICAgfVxuICAgYjJQcmlzbWF0aWNKb2ludC5wcm90b3R5cGUuU2V0TGltaXRzID0gZnVuY3Rpb24gKGxvd2VyLCB1cHBlcikge1xuICAgICAgaWYgKGxvd2VyID09PSB1bmRlZmluZWQpIGxvd2VyID0gMDtcbiAgICAgIGlmICh1cHBlciA9PT0gdW5kZWZpbmVkKSB1cHBlciA9IDA7XG4gICAgICB0aGlzLm1fYm9keUEuU2V0QXdha2UodHJ1ZSk7XG4gICAgICB0aGlzLm1fYm9keUIuU2V0QXdha2UodHJ1ZSk7XG4gICAgICB0aGlzLm1fbG93ZXJUcmFuc2xhdGlvbiA9IGxvd2VyO1xuICAgICAgdGhpcy5tX3VwcGVyVHJhbnNsYXRpb24gPSB1cHBlcjtcbiAgIH1cbiAgIGIyUHJpc21hdGljSm9pbnQucHJvdG90eXBlLklzTW90b3JFbmFibGVkID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMubV9lbmFibGVNb3RvcjtcbiAgIH1cbiAgIGIyUHJpc21hdGljSm9pbnQucHJvdG90eXBlLkVuYWJsZU1vdG9yID0gZnVuY3Rpb24gKGZsYWcpIHtcbiAgICAgIHRoaXMubV9ib2R5QS5TZXRBd2FrZSh0cnVlKTtcbiAgICAgIHRoaXMubV9ib2R5Qi5TZXRBd2FrZSh0cnVlKTtcbiAgICAgIHRoaXMubV9lbmFibGVNb3RvciA9IGZsYWc7XG4gICB9XG4gICBiMlByaXNtYXRpY0pvaW50LnByb3RvdHlwZS5TZXRNb3RvclNwZWVkID0gZnVuY3Rpb24gKHNwZWVkKSB7XG4gICAgICBpZiAoc3BlZWQgPT09IHVuZGVmaW5lZCkgc3BlZWQgPSAwO1xuICAgICAgdGhpcy5tX2JvZHlBLlNldEF3YWtlKHRydWUpO1xuICAgICAgdGhpcy5tX2JvZHlCLlNldEF3YWtlKHRydWUpO1xuICAgICAgdGhpcy5tX21vdG9yU3BlZWQgPSBzcGVlZDtcbiAgIH1cbiAgIGIyUHJpc21hdGljSm9pbnQucHJvdG90eXBlLkdldE1vdG9yU3BlZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5tX21vdG9yU3BlZWQ7XG4gICB9XG4gICBiMlByaXNtYXRpY0pvaW50LnByb3RvdHlwZS5TZXRNYXhNb3RvckZvcmNlID0gZnVuY3Rpb24gKGZvcmNlKSB7XG4gICAgICBpZiAoZm9yY2UgPT09IHVuZGVmaW5lZCkgZm9yY2UgPSAwO1xuICAgICAgdGhpcy5tX2JvZHlBLlNldEF3YWtlKHRydWUpO1xuICAgICAgdGhpcy5tX2JvZHlCLlNldEF3YWtlKHRydWUpO1xuICAgICAgdGhpcy5tX21heE1vdG9yRm9yY2UgPSBmb3JjZTtcbiAgIH1cbiAgIGIyUHJpc21hdGljSm9pbnQucHJvdG90eXBlLkdldE1vdG9yRm9yY2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5tX21vdG9ySW1wdWxzZTtcbiAgIH1cbiAgIGIyUHJpc21hdGljSm9pbnQucHJvdG90eXBlLmIyUHJpc21hdGljSm9pbnQgPSBmdW5jdGlvbiAoZGVmKSB7XG4gICAgICB0aGlzLl9fc3VwZXIuYjJKb2ludC5jYWxsKHRoaXMsIGRlZik7XG4gICAgICB2YXIgdE1hdDtcbiAgICAgIHZhciB0WCA9IDA7XG4gICAgICB2YXIgdFkgPSAwO1xuICAgICAgdGhpcy5tX2xvY2FsQW5jaG9yMS5TZXRWKGRlZi5sb2NhbEFuY2hvckEpO1xuICAgICAgdGhpcy5tX2xvY2FsQW5jaG9yMi5TZXRWKGRlZi5sb2NhbEFuY2hvckIpO1xuICAgICAgdGhpcy5tX2xvY2FsWEF4aXMxLlNldFYoZGVmLmxvY2FsQXhpc0EpO1xuICAgICAgdGhpcy5tX2xvY2FsWUF4aXMxLnggPSAoLXRoaXMubV9sb2NhbFhBeGlzMS55KTtcbiAgICAgIHRoaXMubV9sb2NhbFlBeGlzMS55ID0gdGhpcy5tX2xvY2FsWEF4aXMxLng7XG4gICAgICB0aGlzLm1fcmVmQW5nbGUgPSBkZWYucmVmZXJlbmNlQW5nbGU7XG4gICAgICB0aGlzLm1faW1wdWxzZS5TZXRaZXJvKCk7XG4gICAgICB0aGlzLm1fbW90b3JNYXNzID0gMC4wO1xuICAgICAgdGhpcy5tX21vdG9ySW1wdWxzZSA9IDAuMDtcbiAgICAgIHRoaXMubV9sb3dlclRyYW5zbGF0aW9uID0gZGVmLmxvd2VyVHJhbnNsYXRpb247XG4gICAgICB0aGlzLm1fdXBwZXJUcmFuc2xhdGlvbiA9IGRlZi51cHBlclRyYW5zbGF0aW9uO1xuICAgICAgdGhpcy5tX21heE1vdG9yRm9yY2UgPSBkZWYubWF4TW90b3JGb3JjZTtcbiAgICAgIHRoaXMubV9tb3RvclNwZWVkID0gZGVmLm1vdG9yU3BlZWQ7XG4gICAgICB0aGlzLm1fZW5hYmxlTGltaXQgPSBkZWYuZW5hYmxlTGltaXQ7XG4gICAgICB0aGlzLm1fZW5hYmxlTW90b3IgPSBkZWYuZW5hYmxlTW90b3I7XG4gICAgICB0aGlzLm1fbGltaXRTdGF0ZSA9IGIySm9pbnQuZV9pbmFjdGl2ZUxpbWl0O1xuICAgICAgdGhpcy5tX2F4aXMuU2V0WmVybygpO1xuICAgICAgdGhpcy5tX3BlcnAuU2V0WmVybygpO1xuICAgfVxuICAgYjJQcmlzbWF0aWNKb2ludC5wcm90b3R5cGUuSW5pdFZlbG9jaXR5Q29uc3RyYWludHMgPSBmdW5jdGlvbiAoc3RlcCkge1xuICAgICAgdmFyIGJBID0gdGhpcy5tX2JvZHlBO1xuICAgICAgdmFyIGJCID0gdGhpcy5tX2JvZHlCO1xuICAgICAgdmFyIHRNYXQ7XG4gICAgICB2YXIgdFggPSAwO1xuICAgICAgdGhpcy5tX2xvY2FsQ2VudGVyQS5TZXRWKGJBLkdldExvY2FsQ2VudGVyKCkpO1xuICAgICAgdGhpcy5tX2xvY2FsQ2VudGVyQi5TZXRWKGJCLkdldExvY2FsQ2VudGVyKCkpO1xuICAgICAgdmFyIHhmMSA9IGJBLkdldFRyYW5zZm9ybSgpO1xuICAgICAgdmFyIHhmMiA9IGJCLkdldFRyYW5zZm9ybSgpO1xuICAgICAgdE1hdCA9IGJBLm1feGYuUjtcbiAgICAgIHZhciByMVggPSB0aGlzLm1fbG9jYWxBbmNob3IxLnggLSB0aGlzLm1fbG9jYWxDZW50ZXJBLng7XG4gICAgICB2YXIgcjFZID0gdGhpcy5tX2xvY2FsQW5jaG9yMS55IC0gdGhpcy5tX2xvY2FsQ2VudGVyQS55O1xuICAgICAgdFggPSAodE1hdC5jb2wxLnggKiByMVggKyB0TWF0LmNvbDIueCAqIHIxWSk7XG4gICAgICByMVkgPSAodE1hdC5jb2wxLnkgKiByMVggKyB0TWF0LmNvbDIueSAqIHIxWSk7XG4gICAgICByMVggPSB0WDtcbiAgICAgIHRNYXQgPSBiQi5tX3hmLlI7XG4gICAgICB2YXIgcjJYID0gdGhpcy5tX2xvY2FsQW5jaG9yMi54IC0gdGhpcy5tX2xvY2FsQ2VudGVyQi54O1xuICAgICAgdmFyIHIyWSA9IHRoaXMubV9sb2NhbEFuY2hvcjIueSAtIHRoaXMubV9sb2NhbENlbnRlckIueTtcbiAgICAgIHRYID0gKHRNYXQuY29sMS54ICogcjJYICsgdE1hdC5jb2wyLnggKiByMlkpO1xuICAgICAgcjJZID0gKHRNYXQuY29sMS55ICogcjJYICsgdE1hdC5jb2wyLnkgKiByMlkpO1xuICAgICAgcjJYID0gdFg7XG4gICAgICB2YXIgZFggPSBiQi5tX3N3ZWVwLmMueCArIHIyWCAtIGJBLm1fc3dlZXAuYy54IC0gcjFYO1xuICAgICAgdmFyIGRZID0gYkIubV9zd2VlcC5jLnkgKyByMlkgLSBiQS5tX3N3ZWVwLmMueSAtIHIxWTtcbiAgICAgIHRoaXMubV9pbnZNYXNzQSA9IGJBLm1faW52TWFzcztcbiAgICAgIHRoaXMubV9pbnZNYXNzQiA9IGJCLm1faW52TWFzcztcbiAgICAgIHRoaXMubV9pbnZJQSA9IGJBLm1faW52STtcbiAgICAgIHRoaXMubV9pbnZJQiA9IGJCLm1faW52STsge1xuICAgICAgICAgdGhpcy5tX2F4aXMuU2V0VihiMk1hdGguTXVsTVYoeGYxLlIsIHRoaXMubV9sb2NhbFhBeGlzMSkpO1xuICAgICAgICAgdGhpcy5tX2ExID0gKGRYICsgcjFYKSAqIHRoaXMubV9heGlzLnkgLSAoZFkgKyByMVkpICogdGhpcy5tX2F4aXMueDtcbiAgICAgICAgIHRoaXMubV9hMiA9IHIyWCAqIHRoaXMubV9heGlzLnkgLSByMlkgKiB0aGlzLm1fYXhpcy54O1xuICAgICAgICAgdGhpcy5tX21vdG9yTWFzcyA9IHRoaXMubV9pbnZNYXNzQSArIHRoaXMubV9pbnZNYXNzQiArIHRoaXMubV9pbnZJQSAqIHRoaXMubV9hMSAqIHRoaXMubV9hMSArIHRoaXMubV9pbnZJQiAqIHRoaXMubV9hMiAqIHRoaXMubV9hMjtcbiAgICAgICAgIGlmICh0aGlzLm1fbW90b3JNYXNzID4gTnVtYmVyLk1JTl9WQUxVRSkgdGhpcy5tX21vdG9yTWFzcyA9IDEuMCAvIHRoaXMubV9tb3Rvck1hc3M7XG4gICAgICB9IHtcbiAgICAgICAgIHRoaXMubV9wZXJwLlNldFYoYjJNYXRoLk11bE1WKHhmMS5SLCB0aGlzLm1fbG9jYWxZQXhpczEpKTtcbiAgICAgICAgIHRoaXMubV9zMSA9IChkWCArIHIxWCkgKiB0aGlzLm1fcGVycC55IC0gKGRZICsgcjFZKSAqIHRoaXMubV9wZXJwLng7XG4gICAgICAgICB0aGlzLm1fczIgPSByMlggKiB0aGlzLm1fcGVycC55IC0gcjJZICogdGhpcy5tX3BlcnAueDtcbiAgICAgICAgIHZhciBtMSA9IHRoaXMubV9pbnZNYXNzQTtcbiAgICAgICAgIHZhciBtMiA9IHRoaXMubV9pbnZNYXNzQjtcbiAgICAgICAgIHZhciBpMSA9IHRoaXMubV9pbnZJQTtcbiAgICAgICAgIHZhciBpMiA9IHRoaXMubV9pbnZJQjtcbiAgICAgICAgIHRoaXMubV9LLmNvbDEueCA9IG0xICsgbTIgKyBpMSAqIHRoaXMubV9zMSAqIHRoaXMubV9zMSArIGkyICogdGhpcy5tX3MyICogdGhpcy5tX3MyO1xuICAgICAgICAgdGhpcy5tX0suY29sMS55ID0gaTEgKiB0aGlzLm1fczEgKyBpMiAqIHRoaXMubV9zMjtcbiAgICAgICAgIHRoaXMubV9LLmNvbDEueiA9IGkxICogdGhpcy5tX3MxICogdGhpcy5tX2ExICsgaTIgKiB0aGlzLm1fczIgKiB0aGlzLm1fYTI7XG4gICAgICAgICB0aGlzLm1fSy5jb2wyLnggPSB0aGlzLm1fSy5jb2wxLnk7XG4gICAgICAgICB0aGlzLm1fSy5jb2wyLnkgPSBpMSArIGkyO1xuICAgICAgICAgdGhpcy5tX0suY29sMi56ID0gaTEgKiB0aGlzLm1fYTEgKyBpMiAqIHRoaXMubV9hMjtcbiAgICAgICAgIHRoaXMubV9LLmNvbDMueCA9IHRoaXMubV9LLmNvbDEuejtcbiAgICAgICAgIHRoaXMubV9LLmNvbDMueSA9IHRoaXMubV9LLmNvbDIuejtcbiAgICAgICAgIHRoaXMubV9LLmNvbDMueiA9IG0xICsgbTIgKyBpMSAqIHRoaXMubV9hMSAqIHRoaXMubV9hMSArIGkyICogdGhpcy5tX2EyICogdGhpcy5tX2EyO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMubV9lbmFibGVMaW1pdCkge1xuICAgICAgICAgdmFyIGpvaW50VHJhbnNpdGlvbiA9IHRoaXMubV9heGlzLnggKiBkWCArIHRoaXMubV9heGlzLnkgKiBkWTtcbiAgICAgICAgIGlmIChiMk1hdGguQWJzKHRoaXMubV91cHBlclRyYW5zbGF0aW9uIC0gdGhpcy5tX2xvd2VyVHJhbnNsYXRpb24pIDwgMi4wICogYjJTZXR0aW5ncy5iMl9saW5lYXJTbG9wKSB7XG4gICAgICAgICAgICB0aGlzLm1fbGltaXRTdGF0ZSA9IGIySm9pbnQuZV9lcXVhbExpbWl0cztcbiAgICAgICAgIH1cbiAgICAgICAgIGVsc2UgaWYgKGpvaW50VHJhbnNpdGlvbiA8PSB0aGlzLm1fbG93ZXJUcmFuc2xhdGlvbikge1xuICAgICAgICAgICAgaWYgKHRoaXMubV9saW1pdFN0YXRlICE9IGIySm9pbnQuZV9hdExvd2VyTGltaXQpIHtcbiAgICAgICAgICAgICAgIHRoaXMubV9saW1pdFN0YXRlID0gYjJKb2ludC5lX2F0TG93ZXJMaW1pdDtcbiAgICAgICAgICAgICAgIHRoaXMubV9pbXB1bHNlLnogPSAwLjA7XG4gICAgICAgICAgICB9XG4gICAgICAgICB9XG4gICAgICAgICBlbHNlIGlmIChqb2ludFRyYW5zaXRpb24gPj0gdGhpcy5tX3VwcGVyVHJhbnNsYXRpb24pIHtcbiAgICAgICAgICAgIGlmICh0aGlzLm1fbGltaXRTdGF0ZSAhPSBiMkpvaW50LmVfYXRVcHBlckxpbWl0KSB7XG4gICAgICAgICAgICAgICB0aGlzLm1fbGltaXRTdGF0ZSA9IGIySm9pbnQuZV9hdFVwcGVyTGltaXQ7XG4gICAgICAgICAgICAgICB0aGlzLm1faW1wdWxzZS56ID0gMC4wO1xuICAgICAgICAgICAgfVxuICAgICAgICAgfVxuICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLm1fbGltaXRTdGF0ZSA9IGIySm9pbnQuZV9pbmFjdGl2ZUxpbWl0O1xuICAgICAgICAgICAgdGhpcy5tX2ltcHVsc2UueiA9IDAuMDtcbiAgICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICAgdGhpcy5tX2xpbWl0U3RhdGUgPSBiMkpvaW50LmVfaW5hY3RpdmVMaW1pdDtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLm1fZW5hYmxlTW90b3IgPT0gZmFsc2UpIHtcbiAgICAgICAgIHRoaXMubV9tb3RvckltcHVsc2UgPSAwLjA7XG4gICAgICB9XG4gICAgICBpZiAoc3RlcC53YXJtU3RhcnRpbmcpIHtcbiAgICAgICAgIHRoaXMubV9pbXB1bHNlLnggKj0gc3RlcC5kdFJhdGlvO1xuICAgICAgICAgdGhpcy5tX2ltcHVsc2UueSAqPSBzdGVwLmR0UmF0aW87XG4gICAgICAgICB0aGlzLm1fbW90b3JJbXB1bHNlICo9IHN0ZXAuZHRSYXRpbztcbiAgICAgICAgIHZhciBQWCA9IHRoaXMubV9pbXB1bHNlLnggKiB0aGlzLm1fcGVycC54ICsgKHRoaXMubV9tb3RvckltcHVsc2UgKyB0aGlzLm1faW1wdWxzZS56KSAqIHRoaXMubV9heGlzLng7XG4gICAgICAgICB2YXIgUFkgPSB0aGlzLm1faW1wdWxzZS54ICogdGhpcy5tX3BlcnAueSArICh0aGlzLm1fbW90b3JJbXB1bHNlICsgdGhpcy5tX2ltcHVsc2UueikgKiB0aGlzLm1fYXhpcy55O1xuICAgICAgICAgdmFyIEwxID0gdGhpcy5tX2ltcHVsc2UueCAqIHRoaXMubV9zMSArIHRoaXMubV9pbXB1bHNlLnkgKyAodGhpcy5tX21vdG9ySW1wdWxzZSArIHRoaXMubV9pbXB1bHNlLnopICogdGhpcy5tX2ExO1xuICAgICAgICAgdmFyIEwyID0gdGhpcy5tX2ltcHVsc2UueCAqIHRoaXMubV9zMiArIHRoaXMubV9pbXB1bHNlLnkgKyAodGhpcy5tX21vdG9ySW1wdWxzZSArIHRoaXMubV9pbXB1bHNlLnopICogdGhpcy5tX2EyO1xuICAgICAgICAgYkEubV9saW5lYXJWZWxvY2l0eS54IC09IHRoaXMubV9pbnZNYXNzQSAqIFBYO1xuICAgICAgICAgYkEubV9saW5lYXJWZWxvY2l0eS55IC09IHRoaXMubV9pbnZNYXNzQSAqIFBZO1xuICAgICAgICAgYkEubV9hbmd1bGFyVmVsb2NpdHkgLT0gdGhpcy5tX2ludklBICogTDE7XG4gICAgICAgICBiQi5tX2xpbmVhclZlbG9jaXR5LnggKz0gdGhpcy5tX2ludk1hc3NCICogUFg7XG4gICAgICAgICBiQi5tX2xpbmVhclZlbG9jaXR5LnkgKz0gdGhpcy5tX2ludk1hc3NCICogUFk7XG4gICAgICAgICBiQi5tX2FuZ3VsYXJWZWxvY2l0eSArPSB0aGlzLm1faW52SUIgKiBMMjtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICAgdGhpcy5tX2ltcHVsc2UuU2V0WmVybygpO1xuICAgICAgICAgdGhpcy5tX21vdG9ySW1wdWxzZSA9IDAuMDtcbiAgICAgIH1cbiAgIH1cbiAgIGIyUHJpc21hdGljSm9pbnQucHJvdG90eXBlLlNvbHZlVmVsb2NpdHlDb25zdHJhaW50cyA9IGZ1bmN0aW9uIChzdGVwKSB7XG4gICAgICB2YXIgYkEgPSB0aGlzLm1fYm9keUE7XG4gICAgICB2YXIgYkIgPSB0aGlzLm1fYm9keUI7XG4gICAgICB2YXIgdjEgPSBiQS5tX2xpbmVhclZlbG9jaXR5O1xuICAgICAgdmFyIHcxID0gYkEubV9hbmd1bGFyVmVsb2NpdHk7XG4gICAgICB2YXIgdjIgPSBiQi5tX2xpbmVhclZlbG9jaXR5O1xuICAgICAgdmFyIHcyID0gYkIubV9hbmd1bGFyVmVsb2NpdHk7XG4gICAgICB2YXIgUFggPSAwO1xuICAgICAgdmFyIFBZID0gMDtcbiAgICAgIHZhciBMMSA9IDA7XG4gICAgICB2YXIgTDIgPSAwO1xuICAgICAgaWYgKHRoaXMubV9lbmFibGVNb3RvciAmJiB0aGlzLm1fbGltaXRTdGF0ZSAhPSBiMkpvaW50LmVfZXF1YWxMaW1pdHMpIHtcbiAgICAgICAgIHZhciBDZG90ID0gdGhpcy5tX2F4aXMueCAqICh2Mi54IC0gdjEueCkgKyB0aGlzLm1fYXhpcy55ICogKHYyLnkgLSB2MS55KSArIHRoaXMubV9hMiAqIHcyIC0gdGhpcy5tX2ExICogdzE7XG4gICAgICAgICB2YXIgaW1wdWxzZSA9IHRoaXMubV9tb3Rvck1hc3MgKiAodGhpcy5tX21vdG9yU3BlZWQgLSBDZG90KTtcbiAgICAgICAgIHZhciBvbGRJbXB1bHNlID0gdGhpcy5tX21vdG9ySW1wdWxzZTtcbiAgICAgICAgIHZhciBtYXhJbXB1bHNlID0gc3RlcC5kdCAqIHRoaXMubV9tYXhNb3RvckZvcmNlO1xuICAgICAgICAgdGhpcy5tX21vdG9ySW1wdWxzZSA9IGIyTWF0aC5DbGFtcCh0aGlzLm1fbW90b3JJbXB1bHNlICsgaW1wdWxzZSwgKC1tYXhJbXB1bHNlKSwgbWF4SW1wdWxzZSk7XG4gICAgICAgICBpbXB1bHNlID0gdGhpcy5tX21vdG9ySW1wdWxzZSAtIG9sZEltcHVsc2U7XG4gICAgICAgICBQWCA9IGltcHVsc2UgKiB0aGlzLm1fYXhpcy54O1xuICAgICAgICAgUFkgPSBpbXB1bHNlICogdGhpcy5tX2F4aXMueTtcbiAgICAgICAgIEwxID0gaW1wdWxzZSAqIHRoaXMubV9hMTtcbiAgICAgICAgIEwyID0gaW1wdWxzZSAqIHRoaXMubV9hMjtcbiAgICAgICAgIHYxLnggLT0gdGhpcy5tX2ludk1hc3NBICogUFg7XG4gICAgICAgICB2MS55IC09IHRoaXMubV9pbnZNYXNzQSAqIFBZO1xuICAgICAgICAgdzEgLT0gdGhpcy5tX2ludklBICogTDE7XG4gICAgICAgICB2Mi54ICs9IHRoaXMubV9pbnZNYXNzQiAqIFBYO1xuICAgICAgICAgdjIueSArPSB0aGlzLm1faW52TWFzc0IgKiBQWTtcbiAgICAgICAgIHcyICs9IHRoaXMubV9pbnZJQiAqIEwyO1xuICAgICAgfVxuICAgICAgdmFyIENkb3QxWCA9IHRoaXMubV9wZXJwLnggKiAodjIueCAtIHYxLngpICsgdGhpcy5tX3BlcnAueSAqICh2Mi55IC0gdjEueSkgKyB0aGlzLm1fczIgKiB3MiAtIHRoaXMubV9zMSAqIHcxO1xuICAgICAgdmFyIENkb3QxWSA9IHcyIC0gdzE7XG4gICAgICBpZiAodGhpcy5tX2VuYWJsZUxpbWl0ICYmIHRoaXMubV9saW1pdFN0YXRlICE9IGIySm9pbnQuZV9pbmFjdGl2ZUxpbWl0KSB7XG4gICAgICAgICB2YXIgQ2RvdDIgPSB0aGlzLm1fYXhpcy54ICogKHYyLnggLSB2MS54KSArIHRoaXMubV9heGlzLnkgKiAodjIueSAtIHYxLnkpICsgdGhpcy5tX2EyICogdzIgLSB0aGlzLm1fYTEgKiB3MTtcbiAgICAgICAgIHZhciBmMSA9IHRoaXMubV9pbXB1bHNlLkNvcHkoKTtcbiAgICAgICAgIHZhciBkZiA9IHRoaXMubV9LLlNvbHZlMzMobmV3IGIyVmVjMygpLCAoLUNkb3QxWCksICgtQ2RvdDFZKSwgKC1DZG90MikpO1xuICAgICAgICAgdGhpcy5tX2ltcHVsc2UuQWRkKGRmKTtcbiAgICAgICAgIGlmICh0aGlzLm1fbGltaXRTdGF0ZSA9PSBiMkpvaW50LmVfYXRMb3dlckxpbWl0KSB7XG4gICAgICAgICAgICB0aGlzLm1faW1wdWxzZS56ID0gYjJNYXRoLk1heCh0aGlzLm1faW1wdWxzZS56LCAwLjApO1xuICAgICAgICAgfVxuICAgICAgICAgZWxzZSBpZiAodGhpcy5tX2xpbWl0U3RhdGUgPT0gYjJKb2ludC5lX2F0VXBwZXJMaW1pdCkge1xuICAgICAgICAgICAgdGhpcy5tX2ltcHVsc2UueiA9IGIyTWF0aC5NaW4odGhpcy5tX2ltcHVsc2UueiwgMC4wKTtcbiAgICAgICAgIH1cbiAgICAgICAgIHZhciBiWCA9ICgtQ2RvdDFYKSAtICh0aGlzLm1faW1wdWxzZS56IC0gZjEueikgKiB0aGlzLm1fSy5jb2wzLng7XG4gICAgICAgICB2YXIgYlkgPSAoLUNkb3QxWSkgLSAodGhpcy5tX2ltcHVsc2UueiAtIGYxLnopICogdGhpcy5tX0suY29sMy55O1xuICAgICAgICAgdmFyIGYyciA9IHRoaXMubV9LLlNvbHZlMjIobmV3IGIyVmVjMigpLCBiWCwgYlkpO1xuICAgICAgICAgZjJyLnggKz0gZjEueDtcbiAgICAgICAgIGYyci55ICs9IGYxLnk7XG4gICAgICAgICB0aGlzLm1faW1wdWxzZS54ID0gZjJyLng7XG4gICAgICAgICB0aGlzLm1faW1wdWxzZS55ID0gZjJyLnk7XG4gICAgICAgICBkZi54ID0gdGhpcy5tX2ltcHVsc2UueCAtIGYxLng7XG4gICAgICAgICBkZi55ID0gdGhpcy5tX2ltcHVsc2UueSAtIGYxLnk7XG4gICAgICAgICBkZi56ID0gdGhpcy5tX2ltcHVsc2UueiAtIGYxLno7XG4gICAgICAgICBQWCA9IGRmLnggKiB0aGlzLm1fcGVycC54ICsgZGYueiAqIHRoaXMubV9heGlzLng7XG4gICAgICAgICBQWSA9IGRmLnggKiB0aGlzLm1fcGVycC55ICsgZGYueiAqIHRoaXMubV9heGlzLnk7XG4gICAgICAgICBMMSA9IGRmLnggKiB0aGlzLm1fczEgKyBkZi55ICsgZGYueiAqIHRoaXMubV9hMTtcbiAgICAgICAgIEwyID0gZGYueCAqIHRoaXMubV9zMiArIGRmLnkgKyBkZi56ICogdGhpcy5tX2EyO1xuICAgICAgICAgdjEueCAtPSB0aGlzLm1faW52TWFzc0EgKiBQWDtcbiAgICAgICAgIHYxLnkgLT0gdGhpcy5tX2ludk1hc3NBICogUFk7XG4gICAgICAgICB3MSAtPSB0aGlzLm1faW52SUEgKiBMMTtcbiAgICAgICAgIHYyLnggKz0gdGhpcy5tX2ludk1hc3NCICogUFg7XG4gICAgICAgICB2Mi55ICs9IHRoaXMubV9pbnZNYXNzQiAqIFBZO1xuICAgICAgICAgdzIgKz0gdGhpcy5tX2ludklCICogTDI7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgIHZhciBkZjIgPSB0aGlzLm1fSy5Tb2x2ZTIyKG5ldyBiMlZlYzIoKSwgKC1DZG90MVgpLCAoLUNkb3QxWSkpO1xuICAgICAgICAgdGhpcy5tX2ltcHVsc2UueCArPSBkZjIueDtcbiAgICAgICAgIHRoaXMubV9pbXB1bHNlLnkgKz0gZGYyLnk7XG4gICAgICAgICBQWCA9IGRmMi54ICogdGhpcy5tX3BlcnAueDtcbiAgICAgICAgIFBZID0gZGYyLnggKiB0aGlzLm1fcGVycC55O1xuICAgICAgICAgTDEgPSBkZjIueCAqIHRoaXMubV9zMSArIGRmMi55O1xuICAgICAgICAgTDIgPSBkZjIueCAqIHRoaXMubV9zMiArIGRmMi55O1xuICAgICAgICAgdjEueCAtPSB0aGlzLm1faW52TWFzc0EgKiBQWDtcbiAgICAgICAgIHYxLnkgLT0gdGhpcy5tX2ludk1hc3NBICogUFk7XG4gICAgICAgICB3MSAtPSB0aGlzLm1faW52SUEgKiBMMTtcbiAgICAgICAgIHYyLnggKz0gdGhpcy5tX2ludk1hc3NCICogUFg7XG4gICAgICAgICB2Mi55ICs9IHRoaXMubV9pbnZNYXNzQiAqIFBZO1xuICAgICAgICAgdzIgKz0gdGhpcy5tX2ludklCICogTDI7XG4gICAgICB9XG4gICAgICBiQS5tX2xpbmVhclZlbG9jaXR5LlNldFYodjEpO1xuICAgICAgYkEubV9hbmd1bGFyVmVsb2NpdHkgPSB3MTtcbiAgICAgIGJCLm1fbGluZWFyVmVsb2NpdHkuU2V0Vih2Mik7XG4gICAgICBiQi5tX2FuZ3VsYXJWZWxvY2l0eSA9IHcyO1xuICAgfVxuICAgYjJQcmlzbWF0aWNKb2ludC5wcm90b3R5cGUuU29sdmVQb3NpdGlvbkNvbnN0cmFpbnRzID0gZnVuY3Rpb24gKGJhdW1nYXJ0ZSkge1xuICAgICAgaWYgKGJhdW1nYXJ0ZSA9PT0gdW5kZWZpbmVkKSBiYXVtZ2FydGUgPSAwO1xuICAgICAgdmFyIGxpbWl0QyA9IDA7XG4gICAgICB2YXIgb2xkTGltaXRJbXB1bHNlID0gMDtcbiAgICAgIHZhciBiQSA9IHRoaXMubV9ib2R5QTtcbiAgICAgIHZhciBiQiA9IHRoaXMubV9ib2R5QjtcbiAgICAgIHZhciBjMSA9IGJBLm1fc3dlZXAuYztcbiAgICAgIHZhciBhMSA9IGJBLm1fc3dlZXAuYTtcbiAgICAgIHZhciBjMiA9IGJCLm1fc3dlZXAuYztcbiAgICAgIHZhciBhMiA9IGJCLm1fc3dlZXAuYTtcbiAgICAgIHZhciB0TWF0O1xuICAgICAgdmFyIHRYID0gMDtcbiAgICAgIHZhciBtMSA9IDA7XG4gICAgICB2YXIgbTIgPSAwO1xuICAgICAgdmFyIGkxID0gMDtcbiAgICAgIHZhciBpMiA9IDA7XG4gICAgICB2YXIgbGluZWFyRXJyb3IgPSAwLjA7XG4gICAgICB2YXIgYW5ndWxhckVycm9yID0gMC4wO1xuICAgICAgdmFyIGFjdGl2ZSA9IGZhbHNlO1xuICAgICAgdmFyIEMyID0gMC4wO1xuICAgICAgdmFyIFIxID0gYjJNYXQyMi5Gcm9tQW5nbGUoYTEpO1xuICAgICAgdmFyIFIyID0gYjJNYXQyMi5Gcm9tQW5nbGUoYTIpO1xuICAgICAgdE1hdCA9IFIxO1xuICAgICAgdmFyIHIxWCA9IHRoaXMubV9sb2NhbEFuY2hvcjEueCAtIHRoaXMubV9sb2NhbENlbnRlckEueDtcbiAgICAgIHZhciByMVkgPSB0aGlzLm1fbG9jYWxBbmNob3IxLnkgLSB0aGlzLm1fbG9jYWxDZW50ZXJBLnk7XG4gICAgICB0WCA9ICh0TWF0LmNvbDEueCAqIHIxWCArIHRNYXQuY29sMi54ICogcjFZKTtcbiAgICAgIHIxWSA9ICh0TWF0LmNvbDEueSAqIHIxWCArIHRNYXQuY29sMi55ICogcjFZKTtcbiAgICAgIHIxWCA9IHRYO1xuICAgICAgdE1hdCA9IFIyO1xuICAgICAgdmFyIHIyWCA9IHRoaXMubV9sb2NhbEFuY2hvcjIueCAtIHRoaXMubV9sb2NhbENlbnRlckIueDtcbiAgICAgIHZhciByMlkgPSB0aGlzLm1fbG9jYWxBbmNob3IyLnkgLSB0aGlzLm1fbG9jYWxDZW50ZXJCLnk7XG4gICAgICB0WCA9ICh0TWF0LmNvbDEueCAqIHIyWCArIHRNYXQuY29sMi54ICogcjJZKTtcbiAgICAgIHIyWSA9ICh0TWF0LmNvbDEueSAqIHIyWCArIHRNYXQuY29sMi55ICogcjJZKTtcbiAgICAgIHIyWCA9IHRYO1xuICAgICAgdmFyIGRYID0gYzIueCArIHIyWCAtIGMxLnggLSByMVg7XG4gICAgICB2YXIgZFkgPSBjMi55ICsgcjJZIC0gYzEueSAtIHIxWTtcbiAgICAgIGlmICh0aGlzLm1fZW5hYmxlTGltaXQpIHtcbiAgICAgICAgIHRoaXMubV9heGlzID0gYjJNYXRoLk11bE1WKFIxLCB0aGlzLm1fbG9jYWxYQXhpczEpO1xuICAgICAgICAgdGhpcy5tX2ExID0gKGRYICsgcjFYKSAqIHRoaXMubV9heGlzLnkgLSAoZFkgKyByMVkpICogdGhpcy5tX2F4aXMueDtcbiAgICAgICAgIHRoaXMubV9hMiA9IHIyWCAqIHRoaXMubV9heGlzLnkgLSByMlkgKiB0aGlzLm1fYXhpcy54O1xuICAgICAgICAgdmFyIHRyYW5zbGF0aW9uID0gdGhpcy5tX2F4aXMueCAqIGRYICsgdGhpcy5tX2F4aXMueSAqIGRZO1xuICAgICAgICAgaWYgKGIyTWF0aC5BYnModGhpcy5tX3VwcGVyVHJhbnNsYXRpb24gLSB0aGlzLm1fbG93ZXJUcmFuc2xhdGlvbikgPCAyLjAgKiBiMlNldHRpbmdzLmIyX2xpbmVhclNsb3ApIHtcbiAgICAgICAgICAgIEMyID0gYjJNYXRoLkNsYW1wKHRyYW5zbGF0aW9uLCAoLWIyU2V0dGluZ3MuYjJfbWF4TGluZWFyQ29ycmVjdGlvbiksIGIyU2V0dGluZ3MuYjJfbWF4TGluZWFyQ29ycmVjdGlvbik7XG4gICAgICAgICAgICBsaW5lYXJFcnJvciA9IGIyTWF0aC5BYnModHJhbnNsYXRpb24pO1xuICAgICAgICAgICAgYWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgIH1cbiAgICAgICAgIGVsc2UgaWYgKHRyYW5zbGF0aW9uIDw9IHRoaXMubV9sb3dlclRyYW5zbGF0aW9uKSB7XG4gICAgICAgICAgICBDMiA9IGIyTWF0aC5DbGFtcCh0cmFuc2xhdGlvbiAtIHRoaXMubV9sb3dlclRyYW5zbGF0aW9uICsgYjJTZXR0aW5ncy5iMl9saW5lYXJTbG9wLCAoLWIyU2V0dGluZ3MuYjJfbWF4TGluZWFyQ29ycmVjdGlvbiksIDAuMCk7XG4gICAgICAgICAgICBsaW5lYXJFcnJvciA9IHRoaXMubV9sb3dlclRyYW5zbGF0aW9uIC0gdHJhbnNsYXRpb247XG4gICAgICAgICAgICBhY3RpdmUgPSB0cnVlO1xuICAgICAgICAgfVxuICAgICAgICAgZWxzZSBpZiAodHJhbnNsYXRpb24gPj0gdGhpcy5tX3VwcGVyVHJhbnNsYXRpb24pIHtcbiAgICAgICAgICAgIEMyID0gYjJNYXRoLkNsYW1wKHRyYW5zbGF0aW9uIC0gdGhpcy5tX3VwcGVyVHJhbnNsYXRpb24gKyBiMlNldHRpbmdzLmIyX2xpbmVhclNsb3AsIDAuMCwgYjJTZXR0aW5ncy5iMl9tYXhMaW5lYXJDb3JyZWN0aW9uKTtcbiAgICAgICAgICAgIGxpbmVhckVycm9yID0gdHJhbnNsYXRpb24gLSB0aGlzLm1fdXBwZXJUcmFuc2xhdGlvbjtcbiAgICAgICAgICAgIGFjdGl2ZSA9IHRydWU7XG4gICAgICAgICB9XG4gICAgICB9XG4gICAgICB0aGlzLm1fcGVycCA9IGIyTWF0aC5NdWxNVihSMSwgdGhpcy5tX2xvY2FsWUF4aXMxKTtcbiAgICAgIHRoaXMubV9zMSA9IChkWCArIHIxWCkgKiB0aGlzLm1fcGVycC55IC0gKGRZICsgcjFZKSAqIHRoaXMubV9wZXJwLng7XG4gICAgICB0aGlzLm1fczIgPSByMlggKiB0aGlzLm1fcGVycC55IC0gcjJZICogdGhpcy5tX3BlcnAueDtcbiAgICAgIHZhciBpbXB1bHNlID0gbmV3IGIyVmVjMygpO1xuICAgICAgdmFyIEMxWCA9IHRoaXMubV9wZXJwLnggKiBkWCArIHRoaXMubV9wZXJwLnkgKiBkWTtcbiAgICAgIHZhciBDMVkgPSBhMiAtIGExIC0gdGhpcy5tX3JlZkFuZ2xlO1xuICAgICAgbGluZWFyRXJyb3IgPSBiMk1hdGguTWF4KGxpbmVhckVycm9yLCBiMk1hdGguQWJzKEMxWCkpO1xuICAgICAgYW5ndWxhckVycm9yID0gYjJNYXRoLkFicyhDMVkpO1xuICAgICAgaWYgKGFjdGl2ZSkge1xuICAgICAgICAgbTEgPSB0aGlzLm1faW52TWFzc0E7XG4gICAgICAgICBtMiA9IHRoaXMubV9pbnZNYXNzQjtcbiAgICAgICAgIGkxID0gdGhpcy5tX2ludklBO1xuICAgICAgICAgaTIgPSB0aGlzLm1faW52SUI7XG4gICAgICAgICB0aGlzLm1fSy5jb2wxLnggPSBtMSArIG0yICsgaTEgKiB0aGlzLm1fczEgKiB0aGlzLm1fczEgKyBpMiAqIHRoaXMubV9zMiAqIHRoaXMubV9zMjtcbiAgICAgICAgIHRoaXMubV9LLmNvbDEueSA9IGkxICogdGhpcy5tX3MxICsgaTIgKiB0aGlzLm1fczI7XG4gICAgICAgICB0aGlzLm1fSy5jb2wxLnogPSBpMSAqIHRoaXMubV9zMSAqIHRoaXMubV9hMSArIGkyICogdGhpcy5tX3MyICogdGhpcy5tX2EyO1xuICAgICAgICAgdGhpcy5tX0suY29sMi54ID0gdGhpcy5tX0suY29sMS55O1xuICAgICAgICAgdGhpcy5tX0suY29sMi55ID0gaTEgKyBpMjtcbiAgICAgICAgIHRoaXMubV9LLmNvbDIueiA9IGkxICogdGhpcy5tX2ExICsgaTIgKiB0aGlzLm1fYTI7XG4gICAgICAgICB0aGlzLm1fSy5jb2wzLnggPSB0aGlzLm1fSy5jb2wxLno7XG4gICAgICAgICB0aGlzLm1fSy5jb2wzLnkgPSB0aGlzLm1fSy5jb2wyLno7XG4gICAgICAgICB0aGlzLm1fSy5jb2wzLnogPSBtMSArIG0yICsgaTEgKiB0aGlzLm1fYTEgKiB0aGlzLm1fYTEgKyBpMiAqIHRoaXMubV9hMiAqIHRoaXMubV9hMjtcbiAgICAgICAgIHRoaXMubV9LLlNvbHZlMzMoaW1wdWxzZSwgKC1DMVgpLCAoLUMxWSksICgtQzIpKTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICAgbTEgPSB0aGlzLm1faW52TWFzc0E7XG4gICAgICAgICBtMiA9IHRoaXMubV9pbnZNYXNzQjtcbiAgICAgICAgIGkxID0gdGhpcy5tX2ludklBO1xuICAgICAgICAgaTIgPSB0aGlzLm1faW52SUI7XG4gICAgICAgICB2YXIgazExID0gbTEgKyBtMiArIGkxICogdGhpcy5tX3MxICogdGhpcy5tX3MxICsgaTIgKiB0aGlzLm1fczIgKiB0aGlzLm1fczI7XG4gICAgICAgICB2YXIgazEyID0gaTEgKiB0aGlzLm1fczEgKyBpMiAqIHRoaXMubV9zMjtcbiAgICAgICAgIHZhciBrMjIgPSBpMSArIGkyO1xuICAgICAgICAgdGhpcy5tX0suY29sMS5TZXQoazExLCBrMTIsIDAuMCk7XG4gICAgICAgICB0aGlzLm1fSy5jb2wyLlNldChrMTIsIGsyMiwgMC4wKTtcbiAgICAgICAgIHZhciBpbXB1bHNlMSA9IHRoaXMubV9LLlNvbHZlMjIobmV3IGIyVmVjMigpLCAoLUMxWCksICgtQzFZKSk7XG4gICAgICAgICBpbXB1bHNlLnggPSBpbXB1bHNlMS54O1xuICAgICAgICAgaW1wdWxzZS55ID0gaW1wdWxzZTEueTtcbiAgICAgICAgIGltcHVsc2UueiA9IDAuMDtcbiAgICAgIH1cbiAgICAgIHZhciBQWCA9IGltcHVsc2UueCAqIHRoaXMubV9wZXJwLnggKyBpbXB1bHNlLnogKiB0aGlzLm1fYXhpcy54O1xuICAgICAgdmFyIFBZID0gaW1wdWxzZS54ICogdGhpcy5tX3BlcnAueSArIGltcHVsc2UueiAqIHRoaXMubV9heGlzLnk7XG4gICAgICB2YXIgTDEgPSBpbXB1bHNlLnggKiB0aGlzLm1fczEgKyBpbXB1bHNlLnkgKyBpbXB1bHNlLnogKiB0aGlzLm1fYTE7XG4gICAgICB2YXIgTDIgPSBpbXB1bHNlLnggKiB0aGlzLm1fczIgKyBpbXB1bHNlLnkgKyBpbXB1bHNlLnogKiB0aGlzLm1fYTI7XG4gICAgICBjMS54IC09IHRoaXMubV9pbnZNYXNzQSAqIFBYO1xuICAgICAgYzEueSAtPSB0aGlzLm1faW52TWFzc0EgKiBQWTtcbiAgICAgIGExIC09IHRoaXMubV9pbnZJQSAqIEwxO1xuICAgICAgYzIueCArPSB0aGlzLm1faW52TWFzc0IgKiBQWDtcbiAgICAgIGMyLnkgKz0gdGhpcy5tX2ludk1hc3NCICogUFk7XG4gICAgICBhMiArPSB0aGlzLm1faW52SUIgKiBMMjtcbiAgICAgIGJBLm1fc3dlZXAuYSA9IGExO1xuICAgICAgYkIubV9zd2VlcC5hID0gYTI7XG4gICAgICBiQS5TeW5jaHJvbml6ZVRyYW5zZm9ybSgpO1xuICAgICAgYkIuU3luY2hyb25pemVUcmFuc2Zvcm0oKTtcbiAgICAgIHJldHVybiBsaW5lYXJFcnJvciA8PSBiMlNldHRpbmdzLmIyX2xpbmVhclNsb3AgJiYgYW5ndWxhckVycm9yIDw9IGIyU2V0dGluZ3MuYjJfYW5ndWxhclNsb3A7XG4gICB9XG4gICBCb3gyRC5pbmhlcml0KGIyUHJpc21hdGljSm9pbnREZWYsIEJveDJELkR5bmFtaWNzLkpvaW50cy5iMkpvaW50RGVmKTtcbiAgIGIyUHJpc21hdGljSm9pbnREZWYucHJvdG90eXBlLl9fc3VwZXIgPSBCb3gyRC5EeW5hbWljcy5Kb2ludHMuYjJKb2ludERlZi5wcm90b3R5cGU7XG4gICBiMlByaXNtYXRpY0pvaW50RGVmLmIyUHJpc21hdGljSm9pbnREZWYgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBCb3gyRC5EeW5hbWljcy5Kb2ludHMuYjJKb2ludERlZi5iMkpvaW50RGVmLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB0aGlzLmxvY2FsQW5jaG9yQSA9IG5ldyBiMlZlYzIoKTtcbiAgICAgIHRoaXMubG9jYWxBbmNob3JCID0gbmV3IGIyVmVjMigpO1xuICAgICAgdGhpcy5sb2NhbEF4aXNBID0gbmV3IGIyVmVjMigpO1xuICAgfTtcbiAgIGIyUHJpc21hdGljSm9pbnREZWYucHJvdG90eXBlLmIyUHJpc21hdGljSm9pbnREZWYgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLl9fc3VwZXIuYjJKb2ludERlZi5jYWxsKHRoaXMpO1xuICAgICAgdGhpcy50eXBlID0gYjJKb2ludC5lX3ByaXNtYXRpY0pvaW50O1xuICAgICAgdGhpcy5sb2NhbEF4aXNBLlNldCgxLjAsIDAuMCk7XG4gICAgICB0aGlzLnJlZmVyZW5jZUFuZ2xlID0gMC4wO1xuICAgICAgdGhpcy5lbmFibGVMaW1pdCA9IGZhbHNlO1xuICAgICAgdGhpcy5sb3dlclRyYW5zbGF0aW9uID0gMC4wO1xuICAgICAgdGhpcy51cHBlclRyYW5zbGF0aW9uID0gMC4wO1xuICAgICAgdGhpcy5lbmFibGVNb3RvciA9IGZhbHNlO1xuICAgICAgdGhpcy5tYXhNb3RvckZvcmNlID0gMC4wO1xuICAgICAgdGhpcy5tb3RvclNwZWVkID0gMC4wO1xuICAgfVxuICAgYjJQcmlzbWF0aWNKb2ludERlZi5wcm90b3R5cGUuSW5pdGlhbGl6ZSA9IGZ1bmN0aW9uIChiQSwgYkIsIGFuY2hvciwgYXhpcykge1xuICAgICAgdGhpcy5ib2R5QSA9IGJBO1xuICAgICAgdGhpcy5ib2R5QiA9IGJCO1xuICAgICAgdGhpcy5sb2NhbEFuY2hvckEgPSB0aGlzLmJvZHlBLkdldExvY2FsUG9pbnQoYW5jaG9yKTtcbiAgICAgIHRoaXMubG9jYWxBbmNob3JCID0gdGhpcy5ib2R5Qi5HZXRMb2NhbFBvaW50KGFuY2hvcik7XG4gICAgICB0aGlzLmxvY2FsQXhpc0EgPSB0aGlzLmJvZHlBLkdldExvY2FsVmVjdG9yKGF4aXMpO1xuICAgICAgdGhpcy5yZWZlcmVuY2VBbmdsZSA9IHRoaXMuYm9keUIuR2V0QW5nbGUoKSAtIHRoaXMuYm9keUEuR2V0QW5nbGUoKTtcbiAgIH1cbiAgIEJveDJELmluaGVyaXQoYjJQdWxsZXlKb2ludCwgQm94MkQuRHluYW1pY3MuSm9pbnRzLmIySm9pbnQpO1xuICAgYjJQdWxsZXlKb2ludC5wcm90b3R5cGUuX19zdXBlciA9IEJveDJELkR5bmFtaWNzLkpvaW50cy5iMkpvaW50LnByb3RvdHlwZTtcbiAgIGIyUHVsbGV5Sm9pbnQuYjJQdWxsZXlKb2ludCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIEJveDJELkR5bmFtaWNzLkpvaW50cy5iMkpvaW50LmIySm9pbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIHRoaXMubV9ncm91bmRBbmNob3IxID0gbmV3IGIyVmVjMigpO1xuICAgICAgdGhpcy5tX2dyb3VuZEFuY2hvcjIgPSBuZXcgYjJWZWMyKCk7XG4gICAgICB0aGlzLm1fbG9jYWxBbmNob3IxID0gbmV3IGIyVmVjMigpO1xuICAgICAgdGhpcy5tX2xvY2FsQW5jaG9yMiA9IG5ldyBiMlZlYzIoKTtcbiAgICAgIHRoaXMubV91MSA9IG5ldyBiMlZlYzIoKTtcbiAgICAgIHRoaXMubV91MiA9IG5ldyBiMlZlYzIoKTtcbiAgIH07XG4gICBiMlB1bGxleUpvaW50LnByb3RvdHlwZS5HZXRBbmNob3JBID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMubV9ib2R5QS5HZXRXb3JsZFBvaW50KHRoaXMubV9sb2NhbEFuY2hvcjEpO1xuICAgfVxuICAgYjJQdWxsZXlKb2ludC5wcm90b3R5cGUuR2V0QW5jaG9yQiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzLm1fYm9keUIuR2V0V29ybGRQb2ludCh0aGlzLm1fbG9jYWxBbmNob3IyKTtcbiAgIH1cbiAgIGIyUHVsbGV5Sm9pbnQucHJvdG90eXBlLkdldFJlYWN0aW9uRm9yY2UgPSBmdW5jdGlvbiAoaW52X2R0KSB7XG4gICAgICBpZiAoaW52X2R0ID09PSB1bmRlZmluZWQpIGludl9kdCA9IDA7XG4gICAgICByZXR1cm4gbmV3IGIyVmVjMihpbnZfZHQgKiB0aGlzLm1faW1wdWxzZSAqIHRoaXMubV91Mi54LCBpbnZfZHQgKiB0aGlzLm1faW1wdWxzZSAqIHRoaXMubV91Mi55KTtcbiAgIH1cbiAgIGIyUHVsbGV5Sm9pbnQucHJvdG90eXBlLkdldFJlYWN0aW9uVG9ycXVlID0gZnVuY3Rpb24gKGludl9kdCkge1xuICAgICAgaWYgKGludl9kdCA9PT0gdW5kZWZpbmVkKSBpbnZfZHQgPSAwO1xuICAgICAgcmV0dXJuIDAuMDtcbiAgIH1cbiAgIGIyUHVsbGV5Sm9pbnQucHJvdG90eXBlLkdldEdyb3VuZEFuY2hvckEgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgYSA9IHRoaXMubV9ncm91bmQubV94Zi5wb3NpdGlvbi5Db3B5KCk7XG4gICAgICBhLkFkZCh0aGlzLm1fZ3JvdW5kQW5jaG9yMSk7XG4gICAgICByZXR1cm4gYTtcbiAgIH1cbiAgIGIyUHVsbGV5Sm9pbnQucHJvdG90eXBlLkdldEdyb3VuZEFuY2hvckIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgYSA9IHRoaXMubV9ncm91bmQubV94Zi5wb3NpdGlvbi5Db3B5KCk7XG4gICAgICBhLkFkZCh0aGlzLm1fZ3JvdW5kQW5jaG9yMik7XG4gICAgICByZXR1cm4gYTtcbiAgIH1cbiAgIGIyUHVsbGV5Sm9pbnQucHJvdG90eXBlLkdldExlbmd0aDEgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgcCA9IHRoaXMubV9ib2R5QS5HZXRXb3JsZFBvaW50KHRoaXMubV9sb2NhbEFuY2hvcjEpO1xuICAgICAgdmFyIHNYID0gdGhpcy5tX2dyb3VuZC5tX3hmLnBvc2l0aW9uLnggKyB0aGlzLm1fZ3JvdW5kQW5jaG9yMS54O1xuICAgICAgdmFyIHNZID0gdGhpcy5tX2dyb3VuZC5tX3hmLnBvc2l0aW9uLnkgKyB0aGlzLm1fZ3JvdW5kQW5jaG9yMS55O1xuICAgICAgdmFyIGRYID0gcC54IC0gc1g7XG4gICAgICB2YXIgZFkgPSBwLnkgLSBzWTtcbiAgICAgIHJldHVybiBNYXRoLnNxcnQoZFggKiBkWCArIGRZICogZFkpO1xuICAgfVxuICAgYjJQdWxsZXlKb2ludC5wcm90b3R5cGUuR2V0TGVuZ3RoMiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBwID0gdGhpcy5tX2JvZHlCLkdldFdvcmxkUG9pbnQodGhpcy5tX2xvY2FsQW5jaG9yMik7XG4gICAgICB2YXIgc1ggPSB0aGlzLm1fZ3JvdW5kLm1feGYucG9zaXRpb24ueCArIHRoaXMubV9ncm91bmRBbmNob3IyLng7XG4gICAgICB2YXIgc1kgPSB0aGlzLm1fZ3JvdW5kLm1feGYucG9zaXRpb24ueSArIHRoaXMubV9ncm91bmRBbmNob3IyLnk7XG4gICAgICB2YXIgZFggPSBwLnggLSBzWDtcbiAgICAgIHZhciBkWSA9IHAueSAtIHNZO1xuICAgICAgcmV0dXJuIE1hdGguc3FydChkWCAqIGRYICsgZFkgKiBkWSk7XG4gICB9XG4gICBiMlB1bGxleUpvaW50LnByb3RvdHlwZS5HZXRSYXRpbyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzLm1fcmF0aW87XG4gICB9XG4gICBiMlB1bGxleUpvaW50LnByb3RvdHlwZS5iMlB1bGxleUpvaW50ID0gZnVuY3Rpb24gKGRlZikge1xuICAgICAgdGhpcy5fX3N1cGVyLmIySm9pbnQuY2FsbCh0aGlzLCBkZWYpO1xuICAgICAgdmFyIHRNYXQ7XG4gICAgICB2YXIgdFggPSAwO1xuICAgICAgdmFyIHRZID0gMDtcbiAgICAgIHRoaXMubV9ncm91bmQgPSB0aGlzLm1fYm9keUEubV93b3JsZC5tX2dyb3VuZEJvZHk7XG4gICAgICB0aGlzLm1fZ3JvdW5kQW5jaG9yMS54ID0gZGVmLmdyb3VuZEFuY2hvckEueCAtIHRoaXMubV9ncm91bmQubV94Zi5wb3NpdGlvbi54O1xuICAgICAgdGhpcy5tX2dyb3VuZEFuY2hvcjEueSA9IGRlZi5ncm91bmRBbmNob3JBLnkgLSB0aGlzLm1fZ3JvdW5kLm1feGYucG9zaXRpb24ueTtcbiAgICAgIHRoaXMubV9ncm91bmRBbmNob3IyLnggPSBkZWYuZ3JvdW5kQW5jaG9yQi54IC0gdGhpcy5tX2dyb3VuZC5tX3hmLnBvc2l0aW9uLng7XG4gICAgICB0aGlzLm1fZ3JvdW5kQW5jaG9yMi55ID0gZGVmLmdyb3VuZEFuY2hvckIueSAtIHRoaXMubV9ncm91bmQubV94Zi5wb3NpdGlvbi55O1xuICAgICAgdGhpcy5tX2xvY2FsQW5jaG9yMS5TZXRWKGRlZi5sb2NhbEFuY2hvckEpO1xuICAgICAgdGhpcy5tX2xvY2FsQW5jaG9yMi5TZXRWKGRlZi5sb2NhbEFuY2hvckIpO1xuICAgICAgdGhpcy5tX3JhdGlvID0gZGVmLnJhdGlvO1xuICAgICAgdGhpcy5tX2NvbnN0YW50ID0gZGVmLmxlbmd0aEEgKyB0aGlzLm1fcmF0aW8gKiBkZWYubGVuZ3RoQjtcbiAgICAgIHRoaXMubV9tYXhMZW5ndGgxID0gYjJNYXRoLk1pbihkZWYubWF4TGVuZ3RoQSwgdGhpcy5tX2NvbnN0YW50IC0gdGhpcy5tX3JhdGlvICogYjJQdWxsZXlKb2ludC5iMl9taW5QdWxsZXlMZW5ndGgpO1xuICAgICAgdGhpcy5tX21heExlbmd0aDIgPSBiMk1hdGguTWluKGRlZi5tYXhMZW5ndGhCLCAodGhpcy5tX2NvbnN0YW50IC0gYjJQdWxsZXlKb2ludC5iMl9taW5QdWxsZXlMZW5ndGgpIC8gdGhpcy5tX3JhdGlvKTtcbiAgICAgIHRoaXMubV9pbXB1bHNlID0gMC4wO1xuICAgICAgdGhpcy5tX2xpbWl0SW1wdWxzZTEgPSAwLjA7XG4gICAgICB0aGlzLm1fbGltaXRJbXB1bHNlMiA9IDAuMDtcbiAgIH1cbiAgIGIyUHVsbGV5Sm9pbnQucHJvdG90eXBlLkluaXRWZWxvY2l0eUNvbnN0cmFpbnRzID0gZnVuY3Rpb24gKHN0ZXApIHtcbiAgICAgIHZhciBiQSA9IHRoaXMubV9ib2R5QTtcbiAgICAgIHZhciBiQiA9IHRoaXMubV9ib2R5QjtcbiAgICAgIHZhciB0TWF0O1xuICAgICAgdE1hdCA9IGJBLm1feGYuUjtcbiAgICAgIHZhciByMVggPSB0aGlzLm1fbG9jYWxBbmNob3IxLnggLSBiQS5tX3N3ZWVwLmxvY2FsQ2VudGVyLng7XG4gICAgICB2YXIgcjFZID0gdGhpcy5tX2xvY2FsQW5jaG9yMS55IC0gYkEubV9zd2VlcC5sb2NhbENlbnRlci55O1xuICAgICAgdmFyIHRYID0gKHRNYXQuY29sMS54ICogcjFYICsgdE1hdC5jb2wyLnggKiByMVkpO1xuICAgICAgcjFZID0gKHRNYXQuY29sMS55ICogcjFYICsgdE1hdC5jb2wyLnkgKiByMVkpO1xuICAgICAgcjFYID0gdFg7XG4gICAgICB0TWF0ID0gYkIubV94Zi5SO1xuICAgICAgdmFyIHIyWCA9IHRoaXMubV9sb2NhbEFuY2hvcjIueCAtIGJCLm1fc3dlZXAubG9jYWxDZW50ZXIueDtcbiAgICAgIHZhciByMlkgPSB0aGlzLm1fbG9jYWxBbmNob3IyLnkgLSBiQi5tX3N3ZWVwLmxvY2FsQ2VudGVyLnk7XG4gICAgICB0WCA9ICh0TWF0LmNvbDEueCAqIHIyWCArIHRNYXQuY29sMi54ICogcjJZKTtcbiAgICAgIHIyWSA9ICh0TWF0LmNvbDEueSAqIHIyWCArIHRNYXQuY29sMi55ICogcjJZKTtcbiAgICAgIHIyWCA9IHRYO1xuICAgICAgdmFyIHAxWCA9IGJBLm1fc3dlZXAuYy54ICsgcjFYO1xuICAgICAgdmFyIHAxWSA9IGJBLm1fc3dlZXAuYy55ICsgcjFZO1xuICAgICAgdmFyIHAyWCA9IGJCLm1fc3dlZXAuYy54ICsgcjJYO1xuICAgICAgdmFyIHAyWSA9IGJCLm1fc3dlZXAuYy55ICsgcjJZO1xuICAgICAgdmFyIHMxWCA9IHRoaXMubV9ncm91bmQubV94Zi5wb3NpdGlvbi54ICsgdGhpcy5tX2dyb3VuZEFuY2hvcjEueDtcbiAgICAgIHZhciBzMVkgPSB0aGlzLm1fZ3JvdW5kLm1feGYucG9zaXRpb24ueSArIHRoaXMubV9ncm91bmRBbmNob3IxLnk7XG4gICAgICB2YXIgczJYID0gdGhpcy5tX2dyb3VuZC5tX3hmLnBvc2l0aW9uLnggKyB0aGlzLm1fZ3JvdW5kQW5jaG9yMi54O1xuICAgICAgdmFyIHMyWSA9IHRoaXMubV9ncm91bmQubV94Zi5wb3NpdGlvbi55ICsgdGhpcy5tX2dyb3VuZEFuY2hvcjIueTtcbiAgICAgIHRoaXMubV91MS5TZXQocDFYIC0gczFYLCBwMVkgLSBzMVkpO1xuICAgICAgdGhpcy5tX3UyLlNldChwMlggLSBzMlgsIHAyWSAtIHMyWSk7XG4gICAgICB2YXIgbGVuZ3RoMSA9IHRoaXMubV91MS5MZW5ndGgoKTtcbiAgICAgIHZhciBsZW5ndGgyID0gdGhpcy5tX3UyLkxlbmd0aCgpO1xuICAgICAgaWYgKGxlbmd0aDEgPiBiMlNldHRpbmdzLmIyX2xpbmVhclNsb3ApIHtcbiAgICAgICAgIHRoaXMubV91MS5NdWx0aXBseSgxLjAgLyBsZW5ndGgxKTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICAgdGhpcy5tX3UxLlNldFplcm8oKTtcbiAgICAgIH1cbiAgICAgIGlmIChsZW5ndGgyID4gYjJTZXR0aW5ncy5iMl9saW5lYXJTbG9wKSB7XG4gICAgICAgICB0aGlzLm1fdTIuTXVsdGlwbHkoMS4wIC8gbGVuZ3RoMik7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgIHRoaXMubV91Mi5TZXRaZXJvKCk7XG4gICAgICB9XG4gICAgICB2YXIgQyA9IHRoaXMubV9jb25zdGFudCAtIGxlbmd0aDEgLSB0aGlzLm1fcmF0aW8gKiBsZW5ndGgyO1xuICAgICAgaWYgKEMgPiAwLjApIHtcbiAgICAgICAgIHRoaXMubV9zdGF0ZSA9IGIySm9pbnQuZV9pbmFjdGl2ZUxpbWl0O1xuICAgICAgICAgdGhpcy5tX2ltcHVsc2UgPSAwLjA7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgIHRoaXMubV9zdGF0ZSA9IGIySm9pbnQuZV9hdFVwcGVyTGltaXQ7XG4gICAgICB9XG4gICAgICBpZiAobGVuZ3RoMSA8IHRoaXMubV9tYXhMZW5ndGgxKSB7XG4gICAgICAgICB0aGlzLm1fbGltaXRTdGF0ZTEgPSBiMkpvaW50LmVfaW5hY3RpdmVMaW1pdDtcbiAgICAgICAgIHRoaXMubV9saW1pdEltcHVsc2UxID0gMC4wO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgICB0aGlzLm1fbGltaXRTdGF0ZTEgPSBiMkpvaW50LmVfYXRVcHBlckxpbWl0O1xuICAgICAgfVxuICAgICAgaWYgKGxlbmd0aDIgPCB0aGlzLm1fbWF4TGVuZ3RoMikge1xuICAgICAgICAgdGhpcy5tX2xpbWl0U3RhdGUyID0gYjJKb2ludC5lX2luYWN0aXZlTGltaXQ7XG4gICAgICAgICB0aGlzLm1fbGltaXRJbXB1bHNlMiA9IDAuMDtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICAgdGhpcy5tX2xpbWl0U3RhdGUyID0gYjJKb2ludC5lX2F0VXBwZXJMaW1pdDtcbiAgICAgIH1cbiAgICAgIHZhciBjcjF1MSA9IHIxWCAqIHRoaXMubV91MS55IC0gcjFZICogdGhpcy5tX3UxLng7XG4gICAgICB2YXIgY3IydTIgPSByMlggKiB0aGlzLm1fdTIueSAtIHIyWSAqIHRoaXMubV91Mi54O1xuICAgICAgdGhpcy5tX2xpbWl0TWFzczEgPSBiQS5tX2ludk1hc3MgKyBiQS5tX2ludkkgKiBjcjF1MSAqIGNyMXUxO1xuICAgICAgdGhpcy5tX2xpbWl0TWFzczIgPSBiQi5tX2ludk1hc3MgKyBiQi5tX2ludkkgKiBjcjJ1MiAqIGNyMnUyO1xuICAgICAgdGhpcy5tX3B1bGxleU1hc3MgPSB0aGlzLm1fbGltaXRNYXNzMSArIHRoaXMubV9yYXRpbyAqIHRoaXMubV9yYXRpbyAqIHRoaXMubV9saW1pdE1hc3MyO1xuICAgICAgdGhpcy5tX2xpbWl0TWFzczEgPSAxLjAgLyB0aGlzLm1fbGltaXRNYXNzMTtcbiAgICAgIHRoaXMubV9saW1pdE1hc3MyID0gMS4wIC8gdGhpcy5tX2xpbWl0TWFzczI7XG4gICAgICB0aGlzLm1fcHVsbGV5TWFzcyA9IDEuMCAvIHRoaXMubV9wdWxsZXlNYXNzO1xuICAgICAgaWYgKHN0ZXAud2FybVN0YXJ0aW5nKSB7XG4gICAgICAgICB0aGlzLm1faW1wdWxzZSAqPSBzdGVwLmR0UmF0aW87XG4gICAgICAgICB0aGlzLm1fbGltaXRJbXB1bHNlMSAqPSBzdGVwLmR0UmF0aW87XG4gICAgICAgICB0aGlzLm1fbGltaXRJbXB1bHNlMiAqPSBzdGVwLmR0UmF0aW87XG4gICAgICAgICB2YXIgUDFYID0gKCgtdGhpcy5tX2ltcHVsc2UpIC0gdGhpcy5tX2xpbWl0SW1wdWxzZTEpICogdGhpcy5tX3UxLng7XG4gICAgICAgICB2YXIgUDFZID0gKCgtdGhpcy5tX2ltcHVsc2UpIC0gdGhpcy5tX2xpbWl0SW1wdWxzZTEpICogdGhpcy5tX3UxLnk7XG4gICAgICAgICB2YXIgUDJYID0gKCgtdGhpcy5tX3JhdGlvICogdGhpcy5tX2ltcHVsc2UpIC0gdGhpcy5tX2xpbWl0SW1wdWxzZTIpICogdGhpcy5tX3UyLng7XG4gICAgICAgICB2YXIgUDJZID0gKCgtdGhpcy5tX3JhdGlvICogdGhpcy5tX2ltcHVsc2UpIC0gdGhpcy5tX2xpbWl0SW1wdWxzZTIpICogdGhpcy5tX3UyLnk7XG4gICAgICAgICBiQS5tX2xpbmVhclZlbG9jaXR5LnggKz0gYkEubV9pbnZNYXNzICogUDFYO1xuICAgICAgICAgYkEubV9saW5lYXJWZWxvY2l0eS55ICs9IGJBLm1faW52TWFzcyAqIFAxWTtcbiAgICAgICAgIGJBLm1fYW5ndWxhclZlbG9jaXR5ICs9IGJBLm1faW52SSAqIChyMVggKiBQMVkgLSByMVkgKiBQMVgpO1xuICAgICAgICAgYkIubV9saW5lYXJWZWxvY2l0eS54ICs9IGJCLm1faW52TWFzcyAqIFAyWDtcbiAgICAgICAgIGJCLm1fbGluZWFyVmVsb2NpdHkueSArPSBiQi5tX2ludk1hc3MgKiBQMlk7XG4gICAgICAgICBiQi5tX2FuZ3VsYXJWZWxvY2l0eSArPSBiQi5tX2ludkkgKiAocjJYICogUDJZIC0gcjJZICogUDJYKTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICAgdGhpcy5tX2ltcHVsc2UgPSAwLjA7XG4gICAgICAgICB0aGlzLm1fbGltaXRJbXB1bHNlMSA9IDAuMDtcbiAgICAgICAgIHRoaXMubV9saW1pdEltcHVsc2UyID0gMC4wO1xuICAgICAgfVxuICAgfVxuICAgYjJQdWxsZXlKb2ludC5wcm90b3R5cGUuU29sdmVWZWxvY2l0eUNvbnN0cmFpbnRzID0gZnVuY3Rpb24gKHN0ZXApIHtcbiAgICAgIHZhciBiQSA9IHRoaXMubV9ib2R5QTtcbiAgICAgIHZhciBiQiA9IHRoaXMubV9ib2R5QjtcbiAgICAgIHZhciB0TWF0O1xuICAgICAgdE1hdCA9IGJBLm1feGYuUjtcbiAgICAgIHZhciByMVggPSB0aGlzLm1fbG9jYWxBbmNob3IxLnggLSBiQS5tX3N3ZWVwLmxvY2FsQ2VudGVyLng7XG4gICAgICB2YXIgcjFZID0gdGhpcy5tX2xvY2FsQW5jaG9yMS55IC0gYkEubV9zd2VlcC5sb2NhbENlbnRlci55O1xuICAgICAgdmFyIHRYID0gKHRNYXQuY29sMS54ICogcjFYICsgdE1hdC5jb2wyLnggKiByMVkpO1xuICAgICAgcjFZID0gKHRNYXQuY29sMS55ICogcjFYICsgdE1hdC5jb2wyLnkgKiByMVkpO1xuICAgICAgcjFYID0gdFg7XG4gICAgICB0TWF0ID0gYkIubV94Zi5SO1xuICAgICAgdmFyIHIyWCA9IHRoaXMubV9sb2NhbEFuY2hvcjIueCAtIGJCLm1fc3dlZXAubG9jYWxDZW50ZXIueDtcbiAgICAgIHZhciByMlkgPSB0aGlzLm1fbG9jYWxBbmNob3IyLnkgLSBiQi5tX3N3ZWVwLmxvY2FsQ2VudGVyLnk7XG4gICAgICB0WCA9ICh0TWF0LmNvbDEueCAqIHIyWCArIHRNYXQuY29sMi54ICogcjJZKTtcbiAgICAgIHIyWSA9ICh0TWF0LmNvbDEueSAqIHIyWCArIHRNYXQuY29sMi55ICogcjJZKTtcbiAgICAgIHIyWCA9IHRYO1xuICAgICAgdmFyIHYxWCA9IDA7XG4gICAgICB2YXIgdjFZID0gMDtcbiAgICAgIHZhciB2MlggPSAwO1xuICAgICAgdmFyIHYyWSA9IDA7XG4gICAgICB2YXIgUDFYID0gMDtcbiAgICAgIHZhciBQMVkgPSAwO1xuICAgICAgdmFyIFAyWCA9IDA7XG4gICAgICB2YXIgUDJZID0gMDtcbiAgICAgIHZhciBDZG90ID0gMDtcbiAgICAgIHZhciBpbXB1bHNlID0gMDtcbiAgICAgIHZhciBvbGRJbXB1bHNlID0gMDtcbiAgICAgIGlmICh0aGlzLm1fc3RhdGUgPT0gYjJKb2ludC5lX2F0VXBwZXJMaW1pdCkge1xuICAgICAgICAgdjFYID0gYkEubV9saW5lYXJWZWxvY2l0eS54ICsgKCgtYkEubV9hbmd1bGFyVmVsb2NpdHkgKiByMVkpKTtcbiAgICAgICAgIHYxWSA9IGJBLm1fbGluZWFyVmVsb2NpdHkueSArIChiQS5tX2FuZ3VsYXJWZWxvY2l0eSAqIHIxWCk7XG4gICAgICAgICB2MlggPSBiQi5tX2xpbmVhclZlbG9jaXR5LnggKyAoKC1iQi5tX2FuZ3VsYXJWZWxvY2l0eSAqIHIyWSkpO1xuICAgICAgICAgdjJZID0gYkIubV9saW5lYXJWZWxvY2l0eS55ICsgKGJCLm1fYW5ndWxhclZlbG9jaXR5ICogcjJYKTtcbiAgICAgICAgIENkb3QgPSAoLSh0aGlzLm1fdTEueCAqIHYxWCArIHRoaXMubV91MS55ICogdjFZKSkgLSB0aGlzLm1fcmF0aW8gKiAodGhpcy5tX3UyLnggKiB2MlggKyB0aGlzLm1fdTIueSAqIHYyWSk7XG4gICAgICAgICBpbXB1bHNlID0gdGhpcy5tX3B1bGxleU1hc3MgKiAoKC1DZG90KSk7XG4gICAgICAgICBvbGRJbXB1bHNlID0gdGhpcy5tX2ltcHVsc2U7XG4gICAgICAgICB0aGlzLm1faW1wdWxzZSA9IGIyTWF0aC5NYXgoMC4wLCB0aGlzLm1faW1wdWxzZSArIGltcHVsc2UpO1xuICAgICAgICAgaW1wdWxzZSA9IHRoaXMubV9pbXB1bHNlIC0gb2xkSW1wdWxzZTtcbiAgICAgICAgIFAxWCA9ICgtaW1wdWxzZSAqIHRoaXMubV91MS54KTtcbiAgICAgICAgIFAxWSA9ICgtaW1wdWxzZSAqIHRoaXMubV91MS55KTtcbiAgICAgICAgIFAyWCA9ICgtdGhpcy5tX3JhdGlvICogaW1wdWxzZSAqIHRoaXMubV91Mi54KTtcbiAgICAgICAgIFAyWSA9ICgtdGhpcy5tX3JhdGlvICogaW1wdWxzZSAqIHRoaXMubV91Mi55KTtcbiAgICAgICAgIGJBLm1fbGluZWFyVmVsb2NpdHkueCArPSBiQS5tX2ludk1hc3MgKiBQMVg7XG4gICAgICAgICBiQS5tX2xpbmVhclZlbG9jaXR5LnkgKz0gYkEubV9pbnZNYXNzICogUDFZO1xuICAgICAgICAgYkEubV9hbmd1bGFyVmVsb2NpdHkgKz0gYkEubV9pbnZJICogKHIxWCAqIFAxWSAtIHIxWSAqIFAxWCk7XG4gICAgICAgICBiQi5tX2xpbmVhclZlbG9jaXR5LnggKz0gYkIubV9pbnZNYXNzICogUDJYO1xuICAgICAgICAgYkIubV9saW5lYXJWZWxvY2l0eS55ICs9IGJCLm1faW52TWFzcyAqIFAyWTtcbiAgICAgICAgIGJCLm1fYW5ndWxhclZlbG9jaXR5ICs9IGJCLm1faW52SSAqIChyMlggKiBQMlkgLSByMlkgKiBQMlgpO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMubV9saW1pdFN0YXRlMSA9PSBiMkpvaW50LmVfYXRVcHBlckxpbWl0KSB7XG4gICAgICAgICB2MVggPSBiQS5tX2xpbmVhclZlbG9jaXR5LnggKyAoKC1iQS5tX2FuZ3VsYXJWZWxvY2l0eSAqIHIxWSkpO1xuICAgICAgICAgdjFZID0gYkEubV9saW5lYXJWZWxvY2l0eS55ICsgKGJBLm1fYW5ndWxhclZlbG9jaXR5ICogcjFYKTtcbiAgICAgICAgIENkb3QgPSAoLSh0aGlzLm1fdTEueCAqIHYxWCArIHRoaXMubV91MS55ICogdjFZKSk7XG4gICAgICAgICBpbXB1bHNlID0gKC10aGlzLm1fbGltaXRNYXNzMSAqIENkb3QpO1xuICAgICAgICAgb2xkSW1wdWxzZSA9IHRoaXMubV9saW1pdEltcHVsc2UxO1xuICAgICAgICAgdGhpcy5tX2xpbWl0SW1wdWxzZTEgPSBiMk1hdGguTWF4KDAuMCwgdGhpcy5tX2xpbWl0SW1wdWxzZTEgKyBpbXB1bHNlKTtcbiAgICAgICAgIGltcHVsc2UgPSB0aGlzLm1fbGltaXRJbXB1bHNlMSAtIG9sZEltcHVsc2U7XG4gICAgICAgICBQMVggPSAoLWltcHVsc2UgKiB0aGlzLm1fdTEueCk7XG4gICAgICAgICBQMVkgPSAoLWltcHVsc2UgKiB0aGlzLm1fdTEueSk7XG4gICAgICAgICBiQS5tX2xpbmVhclZlbG9jaXR5LnggKz0gYkEubV9pbnZNYXNzICogUDFYO1xuICAgICAgICAgYkEubV9saW5lYXJWZWxvY2l0eS55ICs9IGJBLm1faW52TWFzcyAqIFAxWTtcbiAgICAgICAgIGJBLm1fYW5ndWxhclZlbG9jaXR5ICs9IGJBLm1faW52SSAqIChyMVggKiBQMVkgLSByMVkgKiBQMVgpO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMubV9saW1pdFN0YXRlMiA9PSBiMkpvaW50LmVfYXRVcHBlckxpbWl0KSB7XG4gICAgICAgICB2MlggPSBiQi5tX2xpbmVhclZlbG9jaXR5LnggKyAoKC1iQi5tX2FuZ3VsYXJWZWxvY2l0eSAqIHIyWSkpO1xuICAgICAgICAgdjJZID0gYkIubV9saW5lYXJWZWxvY2l0eS55ICsgKGJCLm1fYW5ndWxhclZlbG9jaXR5ICogcjJYKTtcbiAgICAgICAgIENkb3QgPSAoLSh0aGlzLm1fdTIueCAqIHYyWCArIHRoaXMubV91Mi55ICogdjJZKSk7XG4gICAgICAgICBpbXB1bHNlID0gKC10aGlzLm1fbGltaXRNYXNzMiAqIENkb3QpO1xuICAgICAgICAgb2xkSW1wdWxzZSA9IHRoaXMubV9saW1pdEltcHVsc2UyO1xuICAgICAgICAgdGhpcy5tX2xpbWl0SW1wdWxzZTIgPSBiMk1hdGguTWF4KDAuMCwgdGhpcy5tX2xpbWl0SW1wdWxzZTIgKyBpbXB1bHNlKTtcbiAgICAgICAgIGltcHVsc2UgPSB0aGlzLm1fbGltaXRJbXB1bHNlMiAtIG9sZEltcHVsc2U7XG4gICAgICAgICBQMlggPSAoLWltcHVsc2UgKiB0aGlzLm1fdTIueCk7XG4gICAgICAgICBQMlkgPSAoLWltcHVsc2UgKiB0aGlzLm1fdTIueSk7XG4gICAgICAgICBiQi5tX2xpbmVhclZlbG9jaXR5LnggKz0gYkIubV9pbnZNYXNzICogUDJYO1xuICAgICAgICAgYkIubV9saW5lYXJWZWxvY2l0eS55ICs9IGJCLm1faW52TWFzcyAqIFAyWTtcbiAgICAgICAgIGJCLm1fYW5ndWxhclZlbG9jaXR5ICs9IGJCLm1faW52SSAqIChyMlggKiBQMlkgLSByMlkgKiBQMlgpO1xuICAgICAgfVxuICAgfVxuICAgYjJQdWxsZXlKb2ludC5wcm90b3R5cGUuU29sdmVQb3NpdGlvbkNvbnN0cmFpbnRzID0gZnVuY3Rpb24gKGJhdW1nYXJ0ZSkge1xuICAgICAgaWYgKGJhdW1nYXJ0ZSA9PT0gdW5kZWZpbmVkKSBiYXVtZ2FydGUgPSAwO1xuICAgICAgdmFyIGJBID0gdGhpcy5tX2JvZHlBO1xuICAgICAgdmFyIGJCID0gdGhpcy5tX2JvZHlCO1xuICAgICAgdmFyIHRNYXQ7XG4gICAgICB2YXIgczFYID0gdGhpcy5tX2dyb3VuZC5tX3hmLnBvc2l0aW9uLnggKyB0aGlzLm1fZ3JvdW5kQW5jaG9yMS54O1xuICAgICAgdmFyIHMxWSA9IHRoaXMubV9ncm91bmQubV94Zi5wb3NpdGlvbi55ICsgdGhpcy5tX2dyb3VuZEFuY2hvcjEueTtcbiAgICAgIHZhciBzMlggPSB0aGlzLm1fZ3JvdW5kLm1feGYucG9zaXRpb24ueCArIHRoaXMubV9ncm91bmRBbmNob3IyLng7XG4gICAgICB2YXIgczJZID0gdGhpcy5tX2dyb3VuZC5tX3hmLnBvc2l0aW9uLnkgKyB0aGlzLm1fZ3JvdW5kQW5jaG9yMi55O1xuICAgICAgdmFyIHIxWCA9IDA7XG4gICAgICB2YXIgcjFZID0gMDtcbiAgICAgIHZhciByMlggPSAwO1xuICAgICAgdmFyIHIyWSA9IDA7XG4gICAgICB2YXIgcDFYID0gMDtcbiAgICAgIHZhciBwMVkgPSAwO1xuICAgICAgdmFyIHAyWCA9IDA7XG4gICAgICB2YXIgcDJZID0gMDtcbiAgICAgIHZhciBsZW5ndGgxID0gMDtcbiAgICAgIHZhciBsZW5ndGgyID0gMDtcbiAgICAgIHZhciBDID0gMDtcbiAgICAgIHZhciBpbXB1bHNlID0gMDtcbiAgICAgIHZhciBvbGRJbXB1bHNlID0gMDtcbiAgICAgIHZhciBvbGRMaW1pdFBvc2l0aW9uSW1wdWxzZSA9IDA7XG4gICAgICB2YXIgdFggPSAwO1xuICAgICAgdmFyIGxpbmVhckVycm9yID0gMC4wO1xuICAgICAgaWYgKHRoaXMubV9zdGF0ZSA9PSBiMkpvaW50LmVfYXRVcHBlckxpbWl0KSB7XG4gICAgICAgICB0TWF0ID0gYkEubV94Zi5SO1xuICAgICAgICAgcjFYID0gdGhpcy5tX2xvY2FsQW5jaG9yMS54IC0gYkEubV9zd2VlcC5sb2NhbENlbnRlci54O1xuICAgICAgICAgcjFZID0gdGhpcy5tX2xvY2FsQW5jaG9yMS55IC0gYkEubV9zd2VlcC5sb2NhbENlbnRlci55O1xuICAgICAgICAgdFggPSAodE1hdC5jb2wxLnggKiByMVggKyB0TWF0LmNvbDIueCAqIHIxWSk7XG4gICAgICAgICByMVkgPSAodE1hdC5jb2wxLnkgKiByMVggKyB0TWF0LmNvbDIueSAqIHIxWSk7XG4gICAgICAgICByMVggPSB0WDtcbiAgICAgICAgIHRNYXQgPSBiQi5tX3hmLlI7XG4gICAgICAgICByMlggPSB0aGlzLm1fbG9jYWxBbmNob3IyLnggLSBiQi5tX3N3ZWVwLmxvY2FsQ2VudGVyLng7XG4gICAgICAgICByMlkgPSB0aGlzLm1fbG9jYWxBbmNob3IyLnkgLSBiQi5tX3N3ZWVwLmxvY2FsQ2VudGVyLnk7XG4gICAgICAgICB0WCA9ICh0TWF0LmNvbDEueCAqIHIyWCArIHRNYXQuY29sMi54ICogcjJZKTtcbiAgICAgICAgIHIyWSA9ICh0TWF0LmNvbDEueSAqIHIyWCArIHRNYXQuY29sMi55ICogcjJZKTtcbiAgICAgICAgIHIyWCA9IHRYO1xuICAgICAgICAgcDFYID0gYkEubV9zd2VlcC5jLnggKyByMVg7XG4gICAgICAgICBwMVkgPSBiQS5tX3N3ZWVwLmMueSArIHIxWTtcbiAgICAgICAgIHAyWCA9IGJCLm1fc3dlZXAuYy54ICsgcjJYO1xuICAgICAgICAgcDJZID0gYkIubV9zd2VlcC5jLnkgKyByMlk7XG4gICAgICAgICB0aGlzLm1fdTEuU2V0KHAxWCAtIHMxWCwgcDFZIC0gczFZKTtcbiAgICAgICAgIHRoaXMubV91Mi5TZXQocDJYIC0gczJYLCBwMlkgLSBzMlkpO1xuICAgICAgICAgbGVuZ3RoMSA9IHRoaXMubV91MS5MZW5ndGgoKTtcbiAgICAgICAgIGxlbmd0aDIgPSB0aGlzLm1fdTIuTGVuZ3RoKCk7XG4gICAgICAgICBpZiAobGVuZ3RoMSA+IGIyU2V0dGluZ3MuYjJfbGluZWFyU2xvcCkge1xuICAgICAgICAgICAgdGhpcy5tX3UxLk11bHRpcGx5KDEuMCAvIGxlbmd0aDEpO1xuICAgICAgICAgfVxuICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLm1fdTEuU2V0WmVybygpO1xuICAgICAgICAgfVxuICAgICAgICAgaWYgKGxlbmd0aDIgPiBiMlNldHRpbmdzLmIyX2xpbmVhclNsb3ApIHtcbiAgICAgICAgICAgIHRoaXMubV91Mi5NdWx0aXBseSgxLjAgLyBsZW5ndGgyKTtcbiAgICAgICAgIH1cbiAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5tX3UyLlNldFplcm8oKTtcbiAgICAgICAgIH1cbiAgICAgICAgIEMgPSB0aGlzLm1fY29uc3RhbnQgLSBsZW5ndGgxIC0gdGhpcy5tX3JhdGlvICogbGVuZ3RoMjtcbiAgICAgICAgIGxpbmVhckVycm9yID0gYjJNYXRoLk1heChsaW5lYXJFcnJvciwgKC1DKSk7XG4gICAgICAgICBDID0gYjJNYXRoLkNsYW1wKEMgKyBiMlNldHRpbmdzLmIyX2xpbmVhclNsb3AsICgtYjJTZXR0aW5ncy5iMl9tYXhMaW5lYXJDb3JyZWN0aW9uKSwgMC4wKTtcbiAgICAgICAgIGltcHVsc2UgPSAoLXRoaXMubV9wdWxsZXlNYXNzICogQyk7XG4gICAgICAgICBwMVggPSAoLWltcHVsc2UgKiB0aGlzLm1fdTEueCk7XG4gICAgICAgICBwMVkgPSAoLWltcHVsc2UgKiB0aGlzLm1fdTEueSk7XG4gICAgICAgICBwMlggPSAoLXRoaXMubV9yYXRpbyAqIGltcHVsc2UgKiB0aGlzLm1fdTIueCk7XG4gICAgICAgICBwMlkgPSAoLXRoaXMubV9yYXRpbyAqIGltcHVsc2UgKiB0aGlzLm1fdTIueSk7XG4gICAgICAgICBiQS5tX3N3ZWVwLmMueCArPSBiQS5tX2ludk1hc3MgKiBwMVg7XG4gICAgICAgICBiQS5tX3N3ZWVwLmMueSArPSBiQS5tX2ludk1hc3MgKiBwMVk7XG4gICAgICAgICBiQS5tX3N3ZWVwLmEgKz0gYkEubV9pbnZJICogKHIxWCAqIHAxWSAtIHIxWSAqIHAxWCk7XG4gICAgICAgICBiQi5tX3N3ZWVwLmMueCArPSBiQi5tX2ludk1hc3MgKiBwMlg7XG4gICAgICAgICBiQi5tX3N3ZWVwLmMueSArPSBiQi5tX2ludk1hc3MgKiBwMlk7XG4gICAgICAgICBiQi5tX3N3ZWVwLmEgKz0gYkIubV9pbnZJICogKHIyWCAqIHAyWSAtIHIyWSAqIHAyWCk7XG4gICAgICAgICBiQS5TeW5jaHJvbml6ZVRyYW5zZm9ybSgpO1xuICAgICAgICAgYkIuU3luY2hyb25pemVUcmFuc2Zvcm0oKTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLm1fbGltaXRTdGF0ZTEgPT0gYjJKb2ludC5lX2F0VXBwZXJMaW1pdCkge1xuICAgICAgICAgdE1hdCA9IGJBLm1feGYuUjtcbiAgICAgICAgIHIxWCA9IHRoaXMubV9sb2NhbEFuY2hvcjEueCAtIGJBLm1fc3dlZXAubG9jYWxDZW50ZXIueDtcbiAgICAgICAgIHIxWSA9IHRoaXMubV9sb2NhbEFuY2hvcjEueSAtIGJBLm1fc3dlZXAubG9jYWxDZW50ZXIueTtcbiAgICAgICAgIHRYID0gKHRNYXQuY29sMS54ICogcjFYICsgdE1hdC5jb2wyLnggKiByMVkpO1xuICAgICAgICAgcjFZID0gKHRNYXQuY29sMS55ICogcjFYICsgdE1hdC5jb2wyLnkgKiByMVkpO1xuICAgICAgICAgcjFYID0gdFg7XG4gICAgICAgICBwMVggPSBiQS5tX3N3ZWVwLmMueCArIHIxWDtcbiAgICAgICAgIHAxWSA9IGJBLm1fc3dlZXAuYy55ICsgcjFZO1xuICAgICAgICAgdGhpcy5tX3UxLlNldChwMVggLSBzMVgsIHAxWSAtIHMxWSk7XG4gICAgICAgICBsZW5ndGgxID0gdGhpcy5tX3UxLkxlbmd0aCgpO1xuICAgICAgICAgaWYgKGxlbmd0aDEgPiBiMlNldHRpbmdzLmIyX2xpbmVhclNsb3ApIHtcbiAgICAgICAgICAgIHRoaXMubV91MS54ICo9IDEuMCAvIGxlbmd0aDE7XG4gICAgICAgICAgICB0aGlzLm1fdTEueSAqPSAxLjAgLyBsZW5ndGgxO1xuICAgICAgICAgfVxuICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLm1fdTEuU2V0WmVybygpO1xuICAgICAgICAgfVxuICAgICAgICAgQyA9IHRoaXMubV9tYXhMZW5ndGgxIC0gbGVuZ3RoMTtcbiAgICAgICAgIGxpbmVhckVycm9yID0gYjJNYXRoLk1heChsaW5lYXJFcnJvciwgKC1DKSk7XG4gICAgICAgICBDID0gYjJNYXRoLkNsYW1wKEMgKyBiMlNldHRpbmdzLmIyX2xpbmVhclNsb3AsICgtYjJTZXR0aW5ncy5iMl9tYXhMaW5lYXJDb3JyZWN0aW9uKSwgMC4wKTtcbiAgICAgICAgIGltcHVsc2UgPSAoLXRoaXMubV9saW1pdE1hc3MxICogQyk7XG4gICAgICAgICBwMVggPSAoLWltcHVsc2UgKiB0aGlzLm1fdTEueCk7XG4gICAgICAgICBwMVkgPSAoLWltcHVsc2UgKiB0aGlzLm1fdTEueSk7XG4gICAgICAgICBiQS5tX3N3ZWVwLmMueCArPSBiQS5tX2ludk1hc3MgKiBwMVg7XG4gICAgICAgICBiQS5tX3N3ZWVwLmMueSArPSBiQS5tX2ludk1hc3MgKiBwMVk7XG4gICAgICAgICBiQS5tX3N3ZWVwLmEgKz0gYkEubV9pbnZJICogKHIxWCAqIHAxWSAtIHIxWSAqIHAxWCk7XG4gICAgICAgICBiQS5TeW5jaHJvbml6ZVRyYW5zZm9ybSgpO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMubV9saW1pdFN0YXRlMiA9PSBiMkpvaW50LmVfYXRVcHBlckxpbWl0KSB7XG4gICAgICAgICB0TWF0ID0gYkIubV94Zi5SO1xuICAgICAgICAgcjJYID0gdGhpcy5tX2xvY2FsQW5jaG9yMi54IC0gYkIubV9zd2VlcC5sb2NhbENlbnRlci54O1xuICAgICAgICAgcjJZID0gdGhpcy5tX2xvY2FsQW5jaG9yMi55IC0gYkIubV9zd2VlcC5sb2NhbENlbnRlci55O1xuICAgICAgICAgdFggPSAodE1hdC5jb2wxLnggKiByMlggKyB0TWF0LmNvbDIueCAqIHIyWSk7XG4gICAgICAgICByMlkgPSAodE1hdC5jb2wxLnkgKiByMlggKyB0TWF0LmNvbDIueSAqIHIyWSk7XG4gICAgICAgICByMlggPSB0WDtcbiAgICAgICAgIHAyWCA9IGJCLm1fc3dlZXAuYy54ICsgcjJYO1xuICAgICAgICAgcDJZID0gYkIubV9zd2VlcC5jLnkgKyByMlk7XG4gICAgICAgICB0aGlzLm1fdTIuU2V0KHAyWCAtIHMyWCwgcDJZIC0gczJZKTtcbiAgICAgICAgIGxlbmd0aDIgPSB0aGlzLm1fdTIuTGVuZ3RoKCk7XG4gICAgICAgICBpZiAobGVuZ3RoMiA+IGIyU2V0dGluZ3MuYjJfbGluZWFyU2xvcCkge1xuICAgICAgICAgICAgdGhpcy5tX3UyLnggKj0gMS4wIC8gbGVuZ3RoMjtcbiAgICAgICAgICAgIHRoaXMubV91Mi55ICo9IDEuMCAvIGxlbmd0aDI7XG4gICAgICAgICB9XG4gICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMubV91Mi5TZXRaZXJvKCk7XG4gICAgICAgICB9XG4gICAgICAgICBDID0gdGhpcy5tX21heExlbmd0aDIgLSBsZW5ndGgyO1xuICAgICAgICAgbGluZWFyRXJyb3IgPSBiMk1hdGguTWF4KGxpbmVhckVycm9yLCAoLUMpKTtcbiAgICAgICAgIEMgPSBiMk1hdGguQ2xhbXAoQyArIGIyU2V0dGluZ3MuYjJfbGluZWFyU2xvcCwgKC1iMlNldHRpbmdzLmIyX21heExpbmVhckNvcnJlY3Rpb24pLCAwLjApO1xuICAgICAgICAgaW1wdWxzZSA9ICgtdGhpcy5tX2xpbWl0TWFzczIgKiBDKTtcbiAgICAgICAgIHAyWCA9ICgtaW1wdWxzZSAqIHRoaXMubV91Mi54KTtcbiAgICAgICAgIHAyWSA9ICgtaW1wdWxzZSAqIHRoaXMubV91Mi55KTtcbiAgICAgICAgIGJCLm1fc3dlZXAuYy54ICs9IGJCLm1faW52TWFzcyAqIHAyWDtcbiAgICAgICAgIGJCLm1fc3dlZXAuYy55ICs9IGJCLm1faW52TWFzcyAqIHAyWTtcbiAgICAgICAgIGJCLm1fc3dlZXAuYSArPSBiQi5tX2ludkkgKiAocjJYICogcDJZIC0gcjJZICogcDJYKTtcbiAgICAgICAgIGJCLlN5bmNocm9uaXplVHJhbnNmb3JtKCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbGluZWFyRXJyb3IgPCBiMlNldHRpbmdzLmIyX2xpbmVhclNsb3A7XG4gICB9XG4gICBCb3gyRC5wb3N0RGVmcy5wdXNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIEJveDJELkR5bmFtaWNzLkpvaW50cy5iMlB1bGxleUpvaW50LmIyX21pblB1bGxleUxlbmd0aCA9IDIuMDtcbiAgIH0pO1xuICAgQm94MkQuaW5oZXJpdChiMlB1bGxleUpvaW50RGVmLCBCb3gyRC5EeW5hbWljcy5Kb2ludHMuYjJKb2ludERlZik7XG4gICBiMlB1bGxleUpvaW50RGVmLnByb3RvdHlwZS5fX3N1cGVyID0gQm94MkQuRHluYW1pY3MuSm9pbnRzLmIySm9pbnREZWYucHJvdG90eXBlO1xuICAgYjJQdWxsZXlKb2ludERlZi5iMlB1bGxleUpvaW50RGVmID0gZnVuY3Rpb24gKCkge1xuICAgICAgQm94MkQuRHluYW1pY3MuSm9pbnRzLmIySm9pbnREZWYuYjJKb2ludERlZi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgdGhpcy5ncm91bmRBbmNob3JBID0gbmV3IGIyVmVjMigpO1xuICAgICAgdGhpcy5ncm91bmRBbmNob3JCID0gbmV3IGIyVmVjMigpO1xuICAgICAgdGhpcy5sb2NhbEFuY2hvckEgPSBuZXcgYjJWZWMyKCk7XG4gICAgICB0aGlzLmxvY2FsQW5jaG9yQiA9IG5ldyBiMlZlYzIoKTtcbiAgIH07XG4gICBiMlB1bGxleUpvaW50RGVmLnByb3RvdHlwZS5iMlB1bGxleUpvaW50RGVmID0gZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcy5fX3N1cGVyLmIySm9pbnREZWYuY2FsbCh0aGlzKTtcbiAgICAgIHRoaXMudHlwZSA9IGIySm9pbnQuZV9wdWxsZXlKb2ludDtcbiAgICAgIHRoaXMuZ3JvdW5kQW5jaG9yQS5TZXQoKC0xLjApLCAxLjApO1xuICAgICAgdGhpcy5ncm91bmRBbmNob3JCLlNldCgxLjAsIDEuMCk7XG4gICAgICB0aGlzLmxvY2FsQW5jaG9yQS5TZXQoKC0xLjApLCAwLjApO1xuICAgICAgdGhpcy5sb2NhbEFuY2hvckIuU2V0KDEuMCwgMC4wKTtcbiAgICAgIHRoaXMubGVuZ3RoQSA9IDAuMDtcbiAgICAgIHRoaXMubWF4TGVuZ3RoQSA9IDAuMDtcbiAgICAgIHRoaXMubGVuZ3RoQiA9IDAuMDtcbiAgICAgIHRoaXMubWF4TGVuZ3RoQiA9IDAuMDtcbiAgICAgIHRoaXMucmF0aW8gPSAxLjA7XG4gICAgICB0aGlzLmNvbGxpZGVDb25uZWN0ZWQgPSB0cnVlO1xuICAgfVxuICAgYjJQdWxsZXlKb2ludERlZi5wcm90b3R5cGUuSW5pdGlhbGl6ZSA9IGZ1bmN0aW9uIChiQSwgYkIsIGdhQSwgZ2FCLCBhbmNob3JBLCBhbmNob3JCLCByKSB7XG4gICAgICBpZiAociA9PT0gdW5kZWZpbmVkKSByID0gMDtcbiAgICAgIHRoaXMuYm9keUEgPSBiQTtcbiAgICAgIHRoaXMuYm9keUIgPSBiQjtcbiAgICAgIHRoaXMuZ3JvdW5kQW5jaG9yQS5TZXRWKGdhQSk7XG4gICAgICB0aGlzLmdyb3VuZEFuY2hvckIuU2V0VihnYUIpO1xuICAgICAgdGhpcy5sb2NhbEFuY2hvckEgPSB0aGlzLmJvZHlBLkdldExvY2FsUG9pbnQoYW5jaG9yQSk7XG4gICAgICB0aGlzLmxvY2FsQW5jaG9yQiA9IHRoaXMuYm9keUIuR2V0TG9jYWxQb2ludChhbmNob3JCKTtcbiAgICAgIHZhciBkMVggPSBhbmNob3JBLnggLSBnYUEueDtcbiAgICAgIHZhciBkMVkgPSBhbmNob3JBLnkgLSBnYUEueTtcbiAgICAgIHRoaXMubGVuZ3RoQSA9IE1hdGguc3FydChkMVggKiBkMVggKyBkMVkgKiBkMVkpO1xuICAgICAgdmFyIGQyWCA9IGFuY2hvckIueCAtIGdhQi54O1xuICAgICAgdmFyIGQyWSA9IGFuY2hvckIueSAtIGdhQi55O1xuICAgICAgdGhpcy5sZW5ndGhCID0gTWF0aC5zcXJ0KGQyWCAqIGQyWCArIGQyWSAqIGQyWSk7XG4gICAgICB0aGlzLnJhdGlvID0gcjtcbiAgICAgIHZhciBDID0gdGhpcy5sZW5ndGhBICsgdGhpcy5yYXRpbyAqIHRoaXMubGVuZ3RoQjtcbiAgICAgIHRoaXMubWF4TGVuZ3RoQSA9IEMgLSB0aGlzLnJhdGlvICogYjJQdWxsZXlKb2ludC5iMl9taW5QdWxsZXlMZW5ndGg7XG4gICAgICB0aGlzLm1heExlbmd0aEIgPSAoQyAtIGIyUHVsbGV5Sm9pbnQuYjJfbWluUHVsbGV5TGVuZ3RoKSAvIHRoaXMucmF0aW87XG4gICB9XG4gICBCb3gyRC5pbmhlcml0KGIyUmV2b2x1dGVKb2ludCwgQm94MkQuRHluYW1pY3MuSm9pbnRzLmIySm9pbnQpO1xuICAgYjJSZXZvbHV0ZUpvaW50LnByb3RvdHlwZS5fX3N1cGVyID0gQm94MkQuRHluYW1pY3MuSm9pbnRzLmIySm9pbnQucHJvdG90eXBlO1xuICAgYjJSZXZvbHV0ZUpvaW50LmIyUmV2b2x1dGVKb2ludCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIEJveDJELkR5bmFtaWNzLkpvaW50cy5iMkpvaW50LmIySm9pbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIHRoaXMuSyA9IG5ldyBiMk1hdDIyKCk7XG4gICAgICB0aGlzLksxID0gbmV3IGIyTWF0MjIoKTtcbiAgICAgIHRoaXMuSzIgPSBuZXcgYjJNYXQyMigpO1xuICAgICAgdGhpcy5LMyA9IG5ldyBiMk1hdDIyKCk7XG4gICAgICB0aGlzLmltcHVsc2UzID0gbmV3IGIyVmVjMygpO1xuICAgICAgdGhpcy5pbXB1bHNlMiA9IG5ldyBiMlZlYzIoKTtcbiAgICAgIHRoaXMucmVkdWNlZCA9IG5ldyBiMlZlYzIoKTtcbiAgICAgIHRoaXMubV9sb2NhbEFuY2hvcjEgPSBuZXcgYjJWZWMyKCk7XG4gICAgICB0aGlzLm1fbG9jYWxBbmNob3IyID0gbmV3IGIyVmVjMigpO1xuICAgICAgdGhpcy5tX2ltcHVsc2UgPSBuZXcgYjJWZWMzKCk7XG4gICAgICB0aGlzLm1fbWFzcyA9IG5ldyBiMk1hdDMzKCk7XG4gICB9O1xuICAgYjJSZXZvbHV0ZUpvaW50LnByb3RvdHlwZS5HZXRBbmNob3JBID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMubV9ib2R5QS5HZXRXb3JsZFBvaW50KHRoaXMubV9sb2NhbEFuY2hvcjEpO1xuICAgfVxuICAgYjJSZXZvbHV0ZUpvaW50LnByb3RvdHlwZS5HZXRBbmNob3JCID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMubV9ib2R5Qi5HZXRXb3JsZFBvaW50KHRoaXMubV9sb2NhbEFuY2hvcjIpO1xuICAgfVxuICAgYjJSZXZvbHV0ZUpvaW50LnByb3RvdHlwZS5HZXRSZWFjdGlvbkZvcmNlID0gZnVuY3Rpb24gKGludl9kdCkge1xuICAgICAgaWYgKGludl9kdCA9PT0gdW5kZWZpbmVkKSBpbnZfZHQgPSAwO1xuICAgICAgcmV0dXJuIG5ldyBiMlZlYzIoaW52X2R0ICogdGhpcy5tX2ltcHVsc2UueCwgaW52X2R0ICogdGhpcy5tX2ltcHVsc2UueSk7XG4gICB9XG4gICBiMlJldm9sdXRlSm9pbnQucHJvdG90eXBlLkdldFJlYWN0aW9uVG9ycXVlID0gZnVuY3Rpb24gKGludl9kdCkge1xuICAgICAgaWYgKGludl9kdCA9PT0gdW5kZWZpbmVkKSBpbnZfZHQgPSAwO1xuICAgICAgcmV0dXJuIGludl9kdCAqIHRoaXMubV9pbXB1bHNlLno7XG4gICB9XG4gICBiMlJldm9sdXRlSm9pbnQucHJvdG90eXBlLkdldEpvaW50QW5nbGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5tX2JvZHlCLm1fc3dlZXAuYSAtIHRoaXMubV9ib2R5QS5tX3N3ZWVwLmEgLSB0aGlzLm1fcmVmZXJlbmNlQW5nbGU7XG4gICB9XG4gICBiMlJldm9sdXRlSm9pbnQucHJvdG90eXBlLkdldEpvaW50U3BlZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5tX2JvZHlCLm1fYW5ndWxhclZlbG9jaXR5IC0gdGhpcy5tX2JvZHlBLm1fYW5ndWxhclZlbG9jaXR5O1xuICAgfVxuICAgYjJSZXZvbHV0ZUpvaW50LnByb3RvdHlwZS5Jc0xpbWl0RW5hYmxlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzLm1fZW5hYmxlTGltaXQ7XG4gICB9XG4gICBiMlJldm9sdXRlSm9pbnQucHJvdG90eXBlLkVuYWJsZUxpbWl0ID0gZnVuY3Rpb24gKGZsYWcpIHtcbiAgICAgIHRoaXMubV9lbmFibGVMaW1pdCA9IGZsYWc7XG4gICB9XG4gICBiMlJldm9sdXRlSm9pbnQucHJvdG90eXBlLkdldExvd2VyTGltaXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5tX2xvd2VyQW5nbGU7XG4gICB9XG4gICBiMlJldm9sdXRlSm9pbnQucHJvdG90eXBlLkdldFVwcGVyTGltaXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5tX3VwcGVyQW5nbGU7XG4gICB9XG4gICBiMlJldm9sdXRlSm9pbnQucHJvdG90eXBlLlNldExpbWl0cyA9IGZ1bmN0aW9uIChsb3dlciwgdXBwZXIpIHtcbiAgICAgIGlmIChsb3dlciA9PT0gdW5kZWZpbmVkKSBsb3dlciA9IDA7XG4gICAgICBpZiAodXBwZXIgPT09IHVuZGVmaW5lZCkgdXBwZXIgPSAwO1xuICAgICAgdGhpcy5tX2xvd2VyQW5nbGUgPSBsb3dlcjtcbiAgICAgIHRoaXMubV91cHBlckFuZ2xlID0gdXBwZXI7XG4gICB9XG4gICBiMlJldm9sdXRlSm9pbnQucHJvdG90eXBlLklzTW90b3JFbmFibGVkID0gZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcy5tX2JvZHlBLlNldEF3YWtlKHRydWUpO1xuICAgICAgdGhpcy5tX2JvZHlCLlNldEF3YWtlKHRydWUpO1xuICAgICAgcmV0dXJuIHRoaXMubV9lbmFibGVNb3RvcjtcbiAgIH1cbiAgIGIyUmV2b2x1dGVKb2ludC5wcm90b3R5cGUuRW5hYmxlTW90b3IgPSBmdW5jdGlvbiAoZmxhZykge1xuICAgICAgdGhpcy5tX2VuYWJsZU1vdG9yID0gZmxhZztcbiAgIH1cbiAgIGIyUmV2b2x1dGVKb2ludC5wcm90b3R5cGUuU2V0TW90b3JTcGVlZCA9IGZ1bmN0aW9uIChzcGVlZCkge1xuICAgICAgaWYgKHNwZWVkID09PSB1bmRlZmluZWQpIHNwZWVkID0gMDtcbiAgICAgIHRoaXMubV9ib2R5QS5TZXRBd2FrZSh0cnVlKTtcbiAgICAgIHRoaXMubV9ib2R5Qi5TZXRBd2FrZSh0cnVlKTtcbiAgICAgIHRoaXMubV9tb3RvclNwZWVkID0gc3BlZWQ7XG4gICB9XG4gICBiMlJldm9sdXRlSm9pbnQucHJvdG90eXBlLkdldE1vdG9yU3BlZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5tX21vdG9yU3BlZWQ7XG4gICB9XG4gICBiMlJldm9sdXRlSm9pbnQucHJvdG90eXBlLlNldE1heE1vdG9yVG9ycXVlID0gZnVuY3Rpb24gKHRvcnF1ZSkge1xuICAgICAgaWYgKHRvcnF1ZSA9PT0gdW5kZWZpbmVkKSB0b3JxdWUgPSAwO1xuICAgICAgdGhpcy5tX21heE1vdG9yVG9ycXVlID0gdG9ycXVlO1xuICAgfVxuICAgYjJSZXZvbHV0ZUpvaW50LnByb3RvdHlwZS5HZXRNb3RvclRvcnF1ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzLm1fbWF4TW90b3JUb3JxdWU7XG4gICB9XG4gICBiMlJldm9sdXRlSm9pbnQucHJvdG90eXBlLmIyUmV2b2x1dGVKb2ludCA9IGZ1bmN0aW9uIChkZWYpIHtcbiAgICAgIHRoaXMuX19zdXBlci5iMkpvaW50LmNhbGwodGhpcywgZGVmKTtcbiAgICAgIHRoaXMubV9sb2NhbEFuY2hvcjEuU2V0VihkZWYubG9jYWxBbmNob3JBKTtcbiAgICAgIHRoaXMubV9sb2NhbEFuY2hvcjIuU2V0VihkZWYubG9jYWxBbmNob3JCKTtcbiAgICAgIHRoaXMubV9yZWZlcmVuY2VBbmdsZSA9IGRlZi5yZWZlcmVuY2VBbmdsZTtcbiAgICAgIHRoaXMubV9pbXB1bHNlLlNldFplcm8oKTtcbiAgICAgIHRoaXMubV9tb3RvckltcHVsc2UgPSAwLjA7XG4gICAgICB0aGlzLm1fbG93ZXJBbmdsZSA9IGRlZi5sb3dlckFuZ2xlO1xuICAgICAgdGhpcy5tX3VwcGVyQW5nbGUgPSBkZWYudXBwZXJBbmdsZTtcbiAgICAgIHRoaXMubV9tYXhNb3RvclRvcnF1ZSA9IGRlZi5tYXhNb3RvclRvcnF1ZTtcbiAgICAgIHRoaXMubV9tb3RvclNwZWVkID0gZGVmLm1vdG9yU3BlZWQ7XG4gICAgICB0aGlzLm1fZW5hYmxlTGltaXQgPSBkZWYuZW5hYmxlTGltaXQ7XG4gICAgICB0aGlzLm1fZW5hYmxlTW90b3IgPSBkZWYuZW5hYmxlTW90b3I7XG4gICAgICB0aGlzLm1fbGltaXRTdGF0ZSA9IGIySm9pbnQuZV9pbmFjdGl2ZUxpbWl0O1xuICAgfVxuICAgYjJSZXZvbHV0ZUpvaW50LnByb3RvdHlwZS5Jbml0VmVsb2NpdHlDb25zdHJhaW50cyA9IGZ1bmN0aW9uIChzdGVwKSB7XG4gICAgICB2YXIgYkEgPSB0aGlzLm1fYm9keUE7XG4gICAgICB2YXIgYkIgPSB0aGlzLm1fYm9keUI7XG4gICAgICB2YXIgdE1hdDtcbiAgICAgIHZhciB0WCA9IDA7XG4gICAgICBpZiAodGhpcy5tX2VuYWJsZU1vdG9yIHx8IHRoaXMubV9lbmFibGVMaW1pdCkge31cbiAgICAgIHRNYXQgPSBiQS5tX3hmLlI7XG4gICAgICB2YXIgcjFYID0gdGhpcy5tX2xvY2FsQW5jaG9yMS54IC0gYkEubV9zd2VlcC5sb2NhbENlbnRlci54O1xuICAgICAgdmFyIHIxWSA9IHRoaXMubV9sb2NhbEFuY2hvcjEueSAtIGJBLm1fc3dlZXAubG9jYWxDZW50ZXIueTtcbiAgICAgIHRYID0gKHRNYXQuY29sMS54ICogcjFYICsgdE1hdC5jb2wyLnggKiByMVkpO1xuICAgICAgcjFZID0gKHRNYXQuY29sMS55ICogcjFYICsgdE1hdC5jb2wyLnkgKiByMVkpO1xuICAgICAgcjFYID0gdFg7XG4gICAgICB0TWF0ID0gYkIubV94Zi5SO1xuICAgICAgdmFyIHIyWCA9IHRoaXMubV9sb2NhbEFuY2hvcjIueCAtIGJCLm1fc3dlZXAubG9jYWxDZW50ZXIueDtcbiAgICAgIHZhciByMlkgPSB0aGlzLm1fbG9jYWxBbmNob3IyLnkgLSBiQi5tX3N3ZWVwLmxvY2FsQ2VudGVyLnk7XG4gICAgICB0WCA9ICh0TWF0LmNvbDEueCAqIHIyWCArIHRNYXQuY29sMi54ICogcjJZKTtcbiAgICAgIHIyWSA9ICh0TWF0LmNvbDEueSAqIHIyWCArIHRNYXQuY29sMi55ICogcjJZKTtcbiAgICAgIHIyWCA9IHRYO1xuICAgICAgdmFyIG0xID0gYkEubV9pbnZNYXNzO1xuICAgICAgdmFyIG0yID0gYkIubV9pbnZNYXNzO1xuICAgICAgdmFyIGkxID0gYkEubV9pbnZJO1xuICAgICAgdmFyIGkyID0gYkIubV9pbnZJO1xuICAgICAgdGhpcy5tX21hc3MuY29sMS54ID0gbTEgKyBtMiArIHIxWSAqIHIxWSAqIGkxICsgcjJZICogcjJZICogaTI7XG4gICAgICB0aGlzLm1fbWFzcy5jb2wyLnggPSAoLXIxWSAqIHIxWCAqIGkxKSAtIHIyWSAqIHIyWCAqIGkyO1xuICAgICAgdGhpcy5tX21hc3MuY29sMy54ID0gKC1yMVkgKiBpMSkgLSByMlkgKiBpMjtcbiAgICAgIHRoaXMubV9tYXNzLmNvbDEueSA9IHRoaXMubV9tYXNzLmNvbDIueDtcbiAgICAgIHRoaXMubV9tYXNzLmNvbDIueSA9IG0xICsgbTIgKyByMVggKiByMVggKiBpMSArIHIyWCAqIHIyWCAqIGkyO1xuICAgICAgdGhpcy5tX21hc3MuY29sMy55ID0gcjFYICogaTEgKyByMlggKiBpMjtcbiAgICAgIHRoaXMubV9tYXNzLmNvbDEueiA9IHRoaXMubV9tYXNzLmNvbDMueDtcbiAgICAgIHRoaXMubV9tYXNzLmNvbDIueiA9IHRoaXMubV9tYXNzLmNvbDMueTtcbiAgICAgIHRoaXMubV9tYXNzLmNvbDMueiA9IGkxICsgaTI7XG4gICAgICB0aGlzLm1fbW90b3JNYXNzID0gMS4wIC8gKGkxICsgaTIpO1xuICAgICAgaWYgKHRoaXMubV9lbmFibGVNb3RvciA9PSBmYWxzZSkge1xuICAgICAgICAgdGhpcy5tX21vdG9ySW1wdWxzZSA9IDAuMDtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLm1fZW5hYmxlTGltaXQpIHtcbiAgICAgICAgIHZhciBqb2ludEFuZ2xlID0gYkIubV9zd2VlcC5hIC0gYkEubV9zd2VlcC5hIC0gdGhpcy5tX3JlZmVyZW5jZUFuZ2xlO1xuICAgICAgICAgaWYgKGIyTWF0aC5BYnModGhpcy5tX3VwcGVyQW5nbGUgLSB0aGlzLm1fbG93ZXJBbmdsZSkgPCAyLjAgKiBiMlNldHRpbmdzLmIyX2FuZ3VsYXJTbG9wKSB7XG4gICAgICAgICAgICB0aGlzLm1fbGltaXRTdGF0ZSA9IGIySm9pbnQuZV9lcXVhbExpbWl0cztcbiAgICAgICAgIH1cbiAgICAgICAgIGVsc2UgaWYgKGpvaW50QW5nbGUgPD0gdGhpcy5tX2xvd2VyQW5nbGUpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLm1fbGltaXRTdGF0ZSAhPSBiMkpvaW50LmVfYXRMb3dlckxpbWl0KSB7XG4gICAgICAgICAgICAgICB0aGlzLm1faW1wdWxzZS56ID0gMC4wO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5tX2xpbWl0U3RhdGUgPSBiMkpvaW50LmVfYXRMb3dlckxpbWl0O1xuICAgICAgICAgfVxuICAgICAgICAgZWxzZSBpZiAoam9pbnRBbmdsZSA+PSB0aGlzLm1fdXBwZXJBbmdsZSkge1xuICAgICAgICAgICAgaWYgKHRoaXMubV9saW1pdFN0YXRlICE9IGIySm9pbnQuZV9hdFVwcGVyTGltaXQpIHtcbiAgICAgICAgICAgICAgIHRoaXMubV9pbXB1bHNlLnogPSAwLjA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLm1fbGltaXRTdGF0ZSA9IGIySm9pbnQuZV9hdFVwcGVyTGltaXQ7XG4gICAgICAgICB9XG4gICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMubV9saW1pdFN0YXRlID0gYjJKb2ludC5lX2luYWN0aXZlTGltaXQ7XG4gICAgICAgICAgICB0aGlzLm1faW1wdWxzZS56ID0gMC4wO1xuICAgICAgICAgfVxuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgICB0aGlzLm1fbGltaXRTdGF0ZSA9IGIySm9pbnQuZV9pbmFjdGl2ZUxpbWl0O1xuICAgICAgfVxuICAgICAgaWYgKHN0ZXAud2FybVN0YXJ0aW5nKSB7XG4gICAgICAgICB0aGlzLm1faW1wdWxzZS54ICo9IHN0ZXAuZHRSYXRpbztcbiAgICAgICAgIHRoaXMubV9pbXB1bHNlLnkgKj0gc3RlcC5kdFJhdGlvO1xuICAgICAgICAgdGhpcy5tX21vdG9ySW1wdWxzZSAqPSBzdGVwLmR0UmF0aW87XG4gICAgICAgICB2YXIgUFggPSB0aGlzLm1faW1wdWxzZS54O1xuICAgICAgICAgdmFyIFBZID0gdGhpcy5tX2ltcHVsc2UueTtcbiAgICAgICAgIGJBLm1fbGluZWFyVmVsb2NpdHkueCAtPSBtMSAqIFBYO1xuICAgICAgICAgYkEubV9saW5lYXJWZWxvY2l0eS55IC09IG0xICogUFk7XG4gICAgICAgICBiQS5tX2FuZ3VsYXJWZWxvY2l0eSAtPSBpMSAqICgocjFYICogUFkgLSByMVkgKiBQWCkgKyB0aGlzLm1fbW90b3JJbXB1bHNlICsgdGhpcy5tX2ltcHVsc2Uueik7XG4gICAgICAgICBiQi5tX2xpbmVhclZlbG9jaXR5LnggKz0gbTIgKiBQWDtcbiAgICAgICAgIGJCLm1fbGluZWFyVmVsb2NpdHkueSArPSBtMiAqIFBZO1xuICAgICAgICAgYkIubV9hbmd1bGFyVmVsb2NpdHkgKz0gaTIgKiAoKHIyWCAqIFBZIC0gcjJZICogUFgpICsgdGhpcy5tX21vdG9ySW1wdWxzZSArIHRoaXMubV9pbXB1bHNlLnopO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgICB0aGlzLm1faW1wdWxzZS5TZXRaZXJvKCk7XG4gICAgICAgICB0aGlzLm1fbW90b3JJbXB1bHNlID0gMC4wO1xuICAgICAgfVxuICAgfVxuICAgYjJSZXZvbHV0ZUpvaW50LnByb3RvdHlwZS5Tb2x2ZVZlbG9jaXR5Q29uc3RyYWludHMgPSBmdW5jdGlvbiAoc3RlcCkge1xuICAgICAgdmFyIGJBID0gdGhpcy5tX2JvZHlBO1xuICAgICAgdmFyIGJCID0gdGhpcy5tX2JvZHlCO1xuICAgICAgdmFyIHRNYXQ7XG4gICAgICB2YXIgdFggPSAwO1xuICAgICAgdmFyIG5ld0ltcHVsc2UgPSAwO1xuICAgICAgdmFyIHIxWCA9IDA7XG4gICAgICB2YXIgcjFZID0gMDtcbiAgICAgIHZhciByMlggPSAwO1xuICAgICAgdmFyIHIyWSA9IDA7XG4gICAgICB2YXIgdjEgPSBiQS5tX2xpbmVhclZlbG9jaXR5O1xuICAgICAgdmFyIHcxID0gYkEubV9hbmd1bGFyVmVsb2NpdHk7XG4gICAgICB2YXIgdjIgPSBiQi5tX2xpbmVhclZlbG9jaXR5O1xuICAgICAgdmFyIHcyID0gYkIubV9hbmd1bGFyVmVsb2NpdHk7XG4gICAgICB2YXIgbTEgPSBiQS5tX2ludk1hc3M7XG4gICAgICB2YXIgbTIgPSBiQi5tX2ludk1hc3M7XG4gICAgICB2YXIgaTEgPSBiQS5tX2ludkk7XG4gICAgICB2YXIgaTIgPSBiQi5tX2ludkk7XG4gICAgICBpZiAodGhpcy5tX2VuYWJsZU1vdG9yICYmIHRoaXMubV9saW1pdFN0YXRlICE9IGIySm9pbnQuZV9lcXVhbExpbWl0cykge1xuICAgICAgICAgdmFyIENkb3QgPSB3MiAtIHcxIC0gdGhpcy5tX21vdG9yU3BlZWQ7XG4gICAgICAgICB2YXIgaW1wdWxzZSA9IHRoaXMubV9tb3Rvck1hc3MgKiAoKC1DZG90KSk7XG4gICAgICAgICB2YXIgb2xkSW1wdWxzZSA9IHRoaXMubV9tb3RvckltcHVsc2U7XG4gICAgICAgICB2YXIgbWF4SW1wdWxzZSA9IHN0ZXAuZHQgKiB0aGlzLm1fbWF4TW90b3JUb3JxdWU7XG4gICAgICAgICB0aGlzLm1fbW90b3JJbXB1bHNlID0gYjJNYXRoLkNsYW1wKHRoaXMubV9tb3RvckltcHVsc2UgKyBpbXB1bHNlLCAoLW1heEltcHVsc2UpLCBtYXhJbXB1bHNlKTtcbiAgICAgICAgIGltcHVsc2UgPSB0aGlzLm1fbW90b3JJbXB1bHNlIC0gb2xkSW1wdWxzZTtcbiAgICAgICAgIHcxIC09IGkxICogaW1wdWxzZTtcbiAgICAgICAgIHcyICs9IGkyICogaW1wdWxzZTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLm1fZW5hYmxlTGltaXQgJiYgdGhpcy5tX2xpbWl0U3RhdGUgIT0gYjJKb2ludC5lX2luYWN0aXZlTGltaXQpIHtcbiAgICAgICAgIHRNYXQgPSBiQS5tX3hmLlI7XG4gICAgICAgICByMVggPSB0aGlzLm1fbG9jYWxBbmNob3IxLnggLSBiQS5tX3N3ZWVwLmxvY2FsQ2VudGVyLng7XG4gICAgICAgICByMVkgPSB0aGlzLm1fbG9jYWxBbmNob3IxLnkgLSBiQS5tX3N3ZWVwLmxvY2FsQ2VudGVyLnk7XG4gICAgICAgICB0WCA9ICh0TWF0LmNvbDEueCAqIHIxWCArIHRNYXQuY29sMi54ICogcjFZKTtcbiAgICAgICAgIHIxWSA9ICh0TWF0LmNvbDEueSAqIHIxWCArIHRNYXQuY29sMi55ICogcjFZKTtcbiAgICAgICAgIHIxWCA9IHRYO1xuICAgICAgICAgdE1hdCA9IGJCLm1feGYuUjtcbiAgICAgICAgIHIyWCA9IHRoaXMubV9sb2NhbEFuY2hvcjIueCAtIGJCLm1fc3dlZXAubG9jYWxDZW50ZXIueDtcbiAgICAgICAgIHIyWSA9IHRoaXMubV9sb2NhbEFuY2hvcjIueSAtIGJCLm1fc3dlZXAubG9jYWxDZW50ZXIueTtcbiAgICAgICAgIHRYID0gKHRNYXQuY29sMS54ICogcjJYICsgdE1hdC5jb2wyLnggKiByMlkpO1xuICAgICAgICAgcjJZID0gKHRNYXQuY29sMS55ICogcjJYICsgdE1hdC5jb2wyLnkgKiByMlkpO1xuICAgICAgICAgcjJYID0gdFg7XG4gICAgICAgICB2YXIgQ2RvdDFYID0gdjIueCArICgoLXcyICogcjJZKSkgLSB2MS54IC0gKCgtdzEgKiByMVkpKTtcbiAgICAgICAgIHZhciBDZG90MVkgPSB2Mi55ICsgKHcyICogcjJYKSAtIHYxLnkgLSAodzEgKiByMVgpO1xuICAgICAgICAgdmFyIENkb3QyID0gdzIgLSB3MTtcbiAgICAgICAgIHRoaXMubV9tYXNzLlNvbHZlMzModGhpcy5pbXB1bHNlMywgKC1DZG90MVgpLCAoLUNkb3QxWSksICgtQ2RvdDIpKTtcbiAgICAgICAgIGlmICh0aGlzLm1fbGltaXRTdGF0ZSA9PSBiMkpvaW50LmVfZXF1YWxMaW1pdHMpIHtcbiAgICAgICAgICAgIHRoaXMubV9pbXB1bHNlLkFkZCh0aGlzLmltcHVsc2UzKTtcbiAgICAgICAgIH1cbiAgICAgICAgIGVsc2UgaWYgKHRoaXMubV9saW1pdFN0YXRlID09IGIySm9pbnQuZV9hdExvd2VyTGltaXQpIHtcbiAgICAgICAgICAgIG5ld0ltcHVsc2UgPSB0aGlzLm1faW1wdWxzZS56ICsgdGhpcy5pbXB1bHNlMy56O1xuICAgICAgICAgICAgaWYgKG5ld0ltcHVsc2UgPCAwLjApIHtcbiAgICAgICAgICAgICAgIHRoaXMubV9tYXNzLlNvbHZlMjIodGhpcy5yZWR1Y2VkLCAoLUNkb3QxWCksICgtQ2RvdDFZKSk7XG4gICAgICAgICAgICAgICB0aGlzLmltcHVsc2UzLnggPSB0aGlzLnJlZHVjZWQueDtcbiAgICAgICAgICAgICAgIHRoaXMuaW1wdWxzZTMueSA9IHRoaXMucmVkdWNlZC55O1xuICAgICAgICAgICAgICAgdGhpcy5pbXB1bHNlMy56ID0gKC10aGlzLm1faW1wdWxzZS56KTtcbiAgICAgICAgICAgICAgIHRoaXMubV9pbXB1bHNlLnggKz0gdGhpcy5yZWR1Y2VkLng7XG4gICAgICAgICAgICAgICB0aGlzLm1faW1wdWxzZS55ICs9IHRoaXMucmVkdWNlZC55O1xuICAgICAgICAgICAgICAgdGhpcy5tX2ltcHVsc2UueiA9IDAuMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgIH1cbiAgICAgICAgIGVsc2UgaWYgKHRoaXMubV9saW1pdFN0YXRlID09IGIySm9pbnQuZV9hdFVwcGVyTGltaXQpIHtcbiAgICAgICAgICAgIG5ld0ltcHVsc2UgPSB0aGlzLm1faW1wdWxzZS56ICsgdGhpcy5pbXB1bHNlMy56O1xuICAgICAgICAgICAgaWYgKG5ld0ltcHVsc2UgPiAwLjApIHtcbiAgICAgICAgICAgICAgIHRoaXMubV9tYXNzLlNvbHZlMjIodGhpcy5yZWR1Y2VkLCAoLUNkb3QxWCksICgtQ2RvdDFZKSk7XG4gICAgICAgICAgICAgICB0aGlzLmltcHVsc2UzLnggPSB0aGlzLnJlZHVjZWQueDtcbiAgICAgICAgICAgICAgIHRoaXMuaW1wdWxzZTMueSA9IHRoaXMucmVkdWNlZC55O1xuICAgICAgICAgICAgICAgdGhpcy5pbXB1bHNlMy56ID0gKC10aGlzLm1faW1wdWxzZS56KTtcbiAgICAgICAgICAgICAgIHRoaXMubV9pbXB1bHNlLnggKz0gdGhpcy5yZWR1Y2VkLng7XG4gICAgICAgICAgICAgICB0aGlzLm1faW1wdWxzZS55ICs9IHRoaXMucmVkdWNlZC55O1xuICAgICAgICAgICAgICAgdGhpcy5tX2ltcHVsc2UueiA9IDAuMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgIH1cbiAgICAgICAgIHYxLnggLT0gbTEgKiB0aGlzLmltcHVsc2UzLng7XG4gICAgICAgICB2MS55IC09IG0xICogdGhpcy5pbXB1bHNlMy55O1xuICAgICAgICAgdzEgLT0gaTEgKiAocjFYICogdGhpcy5pbXB1bHNlMy55IC0gcjFZICogdGhpcy5pbXB1bHNlMy54ICsgdGhpcy5pbXB1bHNlMy56KTtcbiAgICAgICAgIHYyLnggKz0gbTIgKiB0aGlzLmltcHVsc2UzLng7XG4gICAgICAgICB2Mi55ICs9IG0yICogdGhpcy5pbXB1bHNlMy55O1xuICAgICAgICAgdzIgKz0gaTIgKiAocjJYICogdGhpcy5pbXB1bHNlMy55IC0gcjJZICogdGhpcy5pbXB1bHNlMy54ICsgdGhpcy5pbXB1bHNlMy56KTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICAgdE1hdCA9IGJBLm1feGYuUjtcbiAgICAgICAgIHIxWCA9IHRoaXMubV9sb2NhbEFuY2hvcjEueCAtIGJBLm1fc3dlZXAubG9jYWxDZW50ZXIueDtcbiAgICAgICAgIHIxWSA9IHRoaXMubV9sb2NhbEFuY2hvcjEueSAtIGJBLm1fc3dlZXAubG9jYWxDZW50ZXIueTtcbiAgICAgICAgIHRYID0gKHRNYXQuY29sMS54ICogcjFYICsgdE1hdC5jb2wyLnggKiByMVkpO1xuICAgICAgICAgcjFZID0gKHRNYXQuY29sMS55ICogcjFYICsgdE1hdC5jb2wyLnkgKiByMVkpO1xuICAgICAgICAgcjFYID0gdFg7XG4gICAgICAgICB0TWF0ID0gYkIubV94Zi5SO1xuICAgICAgICAgcjJYID0gdGhpcy5tX2xvY2FsQW5jaG9yMi54IC0gYkIubV9zd2VlcC5sb2NhbENlbnRlci54O1xuICAgICAgICAgcjJZID0gdGhpcy5tX2xvY2FsQW5jaG9yMi55IC0gYkIubV9zd2VlcC5sb2NhbENlbnRlci55O1xuICAgICAgICAgdFggPSAodE1hdC5jb2wxLnggKiByMlggKyB0TWF0LmNvbDIueCAqIHIyWSk7XG4gICAgICAgICByMlkgPSAodE1hdC5jb2wxLnkgKiByMlggKyB0TWF0LmNvbDIueSAqIHIyWSk7XG4gICAgICAgICByMlggPSB0WDtcbiAgICAgICAgIHZhciBDZG90WCA9IHYyLnggKyAoKC13MiAqIHIyWSkpIC0gdjEueCAtICgoLXcxICogcjFZKSk7XG4gICAgICAgICB2YXIgQ2RvdFkgPSB2Mi55ICsgKHcyICogcjJYKSAtIHYxLnkgLSAodzEgKiByMVgpO1xuICAgICAgICAgdGhpcy5tX21hc3MuU29sdmUyMih0aGlzLmltcHVsc2UyLCAoLUNkb3RYKSwgKC1DZG90WSkpO1xuICAgICAgICAgdGhpcy5tX2ltcHVsc2UueCArPSB0aGlzLmltcHVsc2UyLng7XG4gICAgICAgICB0aGlzLm1faW1wdWxzZS55ICs9IHRoaXMuaW1wdWxzZTIueTtcbiAgICAgICAgIHYxLnggLT0gbTEgKiB0aGlzLmltcHVsc2UyLng7XG4gICAgICAgICB2MS55IC09IG0xICogdGhpcy5pbXB1bHNlMi55O1xuICAgICAgICAgdzEgLT0gaTEgKiAocjFYICogdGhpcy5pbXB1bHNlMi55IC0gcjFZICogdGhpcy5pbXB1bHNlMi54KTtcbiAgICAgICAgIHYyLnggKz0gbTIgKiB0aGlzLmltcHVsc2UyLng7XG4gICAgICAgICB2Mi55ICs9IG0yICogdGhpcy5pbXB1bHNlMi55O1xuICAgICAgICAgdzIgKz0gaTIgKiAocjJYICogdGhpcy5pbXB1bHNlMi55IC0gcjJZICogdGhpcy5pbXB1bHNlMi54KTtcbiAgICAgIH1cbiAgICAgIGJBLm1fbGluZWFyVmVsb2NpdHkuU2V0Vih2MSk7XG4gICAgICBiQS5tX2FuZ3VsYXJWZWxvY2l0eSA9IHcxO1xuICAgICAgYkIubV9saW5lYXJWZWxvY2l0eS5TZXRWKHYyKTtcbiAgICAgIGJCLm1fYW5ndWxhclZlbG9jaXR5ID0gdzI7XG4gICB9XG4gICBiMlJldm9sdXRlSm9pbnQucHJvdG90eXBlLlNvbHZlUG9zaXRpb25Db25zdHJhaW50cyA9IGZ1bmN0aW9uIChiYXVtZ2FydGUpIHtcbiAgICAgIGlmIChiYXVtZ2FydGUgPT09IHVuZGVmaW5lZCkgYmF1bWdhcnRlID0gMDtcbiAgICAgIHZhciBvbGRMaW1pdEltcHVsc2UgPSAwO1xuICAgICAgdmFyIEMgPSAwO1xuICAgICAgdmFyIHRNYXQ7XG4gICAgICB2YXIgYkEgPSB0aGlzLm1fYm9keUE7XG4gICAgICB2YXIgYkIgPSB0aGlzLm1fYm9keUI7XG4gICAgICB2YXIgYW5ndWxhckVycm9yID0gMC4wO1xuICAgICAgdmFyIHBvc2l0aW9uRXJyb3IgPSAwLjA7XG4gICAgICB2YXIgdFggPSAwO1xuICAgICAgdmFyIGltcHVsc2VYID0gMDtcbiAgICAgIHZhciBpbXB1bHNlWSA9IDA7XG4gICAgICBpZiAodGhpcy5tX2VuYWJsZUxpbWl0ICYmIHRoaXMubV9saW1pdFN0YXRlICE9IGIySm9pbnQuZV9pbmFjdGl2ZUxpbWl0KSB7XG4gICAgICAgICB2YXIgYW5nbGUgPSBiQi5tX3N3ZWVwLmEgLSBiQS5tX3N3ZWVwLmEgLSB0aGlzLm1fcmVmZXJlbmNlQW5nbGU7XG4gICAgICAgICB2YXIgbGltaXRJbXB1bHNlID0gMC4wO1xuICAgICAgICAgaWYgKHRoaXMubV9saW1pdFN0YXRlID09IGIySm9pbnQuZV9lcXVhbExpbWl0cykge1xuICAgICAgICAgICAgQyA9IGIyTWF0aC5DbGFtcChhbmdsZSAtIHRoaXMubV9sb3dlckFuZ2xlLCAoLWIyU2V0dGluZ3MuYjJfbWF4QW5ndWxhckNvcnJlY3Rpb24pLCBiMlNldHRpbmdzLmIyX21heEFuZ3VsYXJDb3JyZWN0aW9uKTtcbiAgICAgICAgICAgIGxpbWl0SW1wdWxzZSA9ICgtdGhpcy5tX21vdG9yTWFzcyAqIEMpO1xuICAgICAgICAgICAgYW5ndWxhckVycm9yID0gYjJNYXRoLkFicyhDKTtcbiAgICAgICAgIH1cbiAgICAgICAgIGVsc2UgaWYgKHRoaXMubV9saW1pdFN0YXRlID09IGIySm9pbnQuZV9hdExvd2VyTGltaXQpIHtcbiAgICAgICAgICAgIEMgPSBhbmdsZSAtIHRoaXMubV9sb3dlckFuZ2xlO1xuICAgICAgICAgICAgYW5ndWxhckVycm9yID0gKC1DKTtcbiAgICAgICAgICAgIEMgPSBiMk1hdGguQ2xhbXAoQyArIGIyU2V0dGluZ3MuYjJfYW5ndWxhclNsb3AsICgtYjJTZXR0aW5ncy5iMl9tYXhBbmd1bGFyQ29ycmVjdGlvbiksIDAuMCk7XG4gICAgICAgICAgICBsaW1pdEltcHVsc2UgPSAoLXRoaXMubV9tb3Rvck1hc3MgKiBDKTtcbiAgICAgICAgIH1cbiAgICAgICAgIGVsc2UgaWYgKHRoaXMubV9saW1pdFN0YXRlID09IGIySm9pbnQuZV9hdFVwcGVyTGltaXQpIHtcbiAgICAgICAgICAgIEMgPSBhbmdsZSAtIHRoaXMubV91cHBlckFuZ2xlO1xuICAgICAgICAgICAgYW5ndWxhckVycm9yID0gQztcbiAgICAgICAgICAgIEMgPSBiMk1hdGguQ2xhbXAoQyAtIGIyU2V0dGluZ3MuYjJfYW5ndWxhclNsb3AsIDAuMCwgYjJTZXR0aW5ncy5iMl9tYXhBbmd1bGFyQ29ycmVjdGlvbik7XG4gICAgICAgICAgICBsaW1pdEltcHVsc2UgPSAoLXRoaXMubV9tb3Rvck1hc3MgKiBDKTtcbiAgICAgICAgIH1cbiAgICAgICAgIGJBLm1fc3dlZXAuYSAtPSBiQS5tX2ludkkgKiBsaW1pdEltcHVsc2U7XG4gICAgICAgICBiQi5tX3N3ZWVwLmEgKz0gYkIubV9pbnZJICogbGltaXRJbXB1bHNlO1xuICAgICAgICAgYkEuU3luY2hyb25pemVUcmFuc2Zvcm0oKTtcbiAgICAgICAgIGJCLlN5bmNocm9uaXplVHJhbnNmb3JtKCk7XG4gICAgICB9IHtcbiAgICAgICAgIHRNYXQgPSBiQS5tX3hmLlI7XG4gICAgICAgICB2YXIgcjFYID0gdGhpcy5tX2xvY2FsQW5jaG9yMS54IC0gYkEubV9zd2VlcC5sb2NhbENlbnRlci54O1xuICAgICAgICAgdmFyIHIxWSA9IHRoaXMubV9sb2NhbEFuY2hvcjEueSAtIGJBLm1fc3dlZXAubG9jYWxDZW50ZXIueTtcbiAgICAgICAgIHRYID0gKHRNYXQuY29sMS54ICogcjFYICsgdE1hdC5jb2wyLnggKiByMVkpO1xuICAgICAgICAgcjFZID0gKHRNYXQuY29sMS55ICogcjFYICsgdE1hdC5jb2wyLnkgKiByMVkpO1xuICAgICAgICAgcjFYID0gdFg7XG4gICAgICAgICB0TWF0ID0gYkIubV94Zi5SO1xuICAgICAgICAgdmFyIHIyWCA9IHRoaXMubV9sb2NhbEFuY2hvcjIueCAtIGJCLm1fc3dlZXAubG9jYWxDZW50ZXIueDtcbiAgICAgICAgIHZhciByMlkgPSB0aGlzLm1fbG9jYWxBbmNob3IyLnkgLSBiQi5tX3N3ZWVwLmxvY2FsQ2VudGVyLnk7XG4gICAgICAgICB0WCA9ICh0TWF0LmNvbDEueCAqIHIyWCArIHRNYXQuY29sMi54ICogcjJZKTtcbiAgICAgICAgIHIyWSA9ICh0TWF0LmNvbDEueSAqIHIyWCArIHRNYXQuY29sMi55ICogcjJZKTtcbiAgICAgICAgIHIyWCA9IHRYO1xuICAgICAgICAgdmFyIENYID0gYkIubV9zd2VlcC5jLnggKyByMlggLSBiQS5tX3N3ZWVwLmMueCAtIHIxWDtcbiAgICAgICAgIHZhciBDWSA9IGJCLm1fc3dlZXAuYy55ICsgcjJZIC0gYkEubV9zd2VlcC5jLnkgLSByMVk7XG4gICAgICAgICB2YXIgQ0xlbmd0aFNxdWFyZWQgPSBDWCAqIENYICsgQ1kgKiBDWTtcbiAgICAgICAgIHZhciBDTGVuZ3RoID0gTWF0aC5zcXJ0KENMZW5ndGhTcXVhcmVkKTtcbiAgICAgICAgIHBvc2l0aW9uRXJyb3IgPSBDTGVuZ3RoO1xuICAgICAgICAgdmFyIGludk1hc3MxID0gYkEubV9pbnZNYXNzO1xuICAgICAgICAgdmFyIGludk1hc3MyID0gYkIubV9pbnZNYXNzO1xuICAgICAgICAgdmFyIGludkkxID0gYkEubV9pbnZJO1xuICAgICAgICAgdmFyIGludkkyID0gYkIubV9pbnZJO1xuICAgICAgICAgdmFyIGtfYWxsb3dlZFN0cmV0Y2ggPSAxMC4wICogYjJTZXR0aW5ncy5iMl9saW5lYXJTbG9wO1xuICAgICAgICAgaWYgKENMZW5ndGhTcXVhcmVkID4ga19hbGxvd2VkU3RyZXRjaCAqIGtfYWxsb3dlZFN0cmV0Y2gpIHtcbiAgICAgICAgICAgIHZhciB1WCA9IENYIC8gQ0xlbmd0aDtcbiAgICAgICAgICAgIHZhciB1WSA9IENZIC8gQ0xlbmd0aDtcbiAgICAgICAgICAgIHZhciBrID0gaW52TWFzczEgKyBpbnZNYXNzMjtcbiAgICAgICAgICAgIHZhciBtID0gMS4wIC8gaztcbiAgICAgICAgICAgIGltcHVsc2VYID0gbSAqICgoLUNYKSk7XG4gICAgICAgICAgICBpbXB1bHNlWSA9IG0gKiAoKC1DWSkpO1xuICAgICAgICAgICAgdmFyIGtfYmV0YSA9IDAuNTtcbiAgICAgICAgICAgIGJBLm1fc3dlZXAuYy54IC09IGtfYmV0YSAqIGludk1hc3MxICogaW1wdWxzZVg7XG4gICAgICAgICAgICBiQS5tX3N3ZWVwLmMueSAtPSBrX2JldGEgKiBpbnZNYXNzMSAqIGltcHVsc2VZO1xuICAgICAgICAgICAgYkIubV9zd2VlcC5jLnggKz0ga19iZXRhICogaW52TWFzczIgKiBpbXB1bHNlWDtcbiAgICAgICAgICAgIGJCLm1fc3dlZXAuYy55ICs9IGtfYmV0YSAqIGludk1hc3MyICogaW1wdWxzZVk7XG4gICAgICAgICAgICBDWCA9IGJCLm1fc3dlZXAuYy54ICsgcjJYIC0gYkEubV9zd2VlcC5jLnggLSByMVg7XG4gICAgICAgICAgICBDWSA9IGJCLm1fc3dlZXAuYy55ICsgcjJZIC0gYkEubV9zd2VlcC5jLnkgLSByMVk7XG4gICAgICAgICB9XG4gICAgICAgICB0aGlzLksxLmNvbDEueCA9IGludk1hc3MxICsgaW52TWFzczI7XG4gICAgICAgICB0aGlzLksxLmNvbDIueCA9IDAuMDtcbiAgICAgICAgIHRoaXMuSzEuY29sMS55ID0gMC4wO1xuICAgICAgICAgdGhpcy5LMS5jb2wyLnkgPSBpbnZNYXNzMSArIGludk1hc3MyO1xuICAgICAgICAgdGhpcy5LMi5jb2wxLnggPSBpbnZJMSAqIHIxWSAqIHIxWTtcbiAgICAgICAgIHRoaXMuSzIuY29sMi54ID0gKC1pbnZJMSAqIHIxWCAqIHIxWSk7XG4gICAgICAgICB0aGlzLksyLmNvbDEueSA9ICgtaW52STEgKiByMVggKiByMVkpO1xuICAgICAgICAgdGhpcy5LMi5jb2wyLnkgPSBpbnZJMSAqIHIxWCAqIHIxWDtcbiAgICAgICAgIHRoaXMuSzMuY29sMS54ID0gaW52STIgKiByMlkgKiByMlk7XG4gICAgICAgICB0aGlzLkszLmNvbDIueCA9ICgtaW52STIgKiByMlggKiByMlkpO1xuICAgICAgICAgdGhpcy5LMy5jb2wxLnkgPSAoLWludkkyICogcjJYICogcjJZKTtcbiAgICAgICAgIHRoaXMuSzMuY29sMi55ID0gaW52STIgKiByMlggKiByMlg7XG4gICAgICAgICB0aGlzLksuU2V0TSh0aGlzLksxKTtcbiAgICAgICAgIHRoaXMuSy5BZGRNKHRoaXMuSzIpO1xuICAgICAgICAgdGhpcy5LLkFkZE0odGhpcy5LMyk7XG4gICAgICAgICB0aGlzLksuU29sdmUoYjJSZXZvbHV0ZUpvaW50LnRJbXB1bHNlLCAoLUNYKSwgKC1DWSkpO1xuICAgICAgICAgaW1wdWxzZVggPSBiMlJldm9sdXRlSm9pbnQudEltcHVsc2UueDtcbiAgICAgICAgIGltcHVsc2VZID0gYjJSZXZvbHV0ZUpvaW50LnRJbXB1bHNlLnk7XG4gICAgICAgICBiQS5tX3N3ZWVwLmMueCAtPSBiQS5tX2ludk1hc3MgKiBpbXB1bHNlWDtcbiAgICAgICAgIGJBLm1fc3dlZXAuYy55IC09IGJBLm1faW52TWFzcyAqIGltcHVsc2VZO1xuICAgICAgICAgYkEubV9zd2VlcC5hIC09IGJBLm1faW52SSAqIChyMVggKiBpbXB1bHNlWSAtIHIxWSAqIGltcHVsc2VYKTtcbiAgICAgICAgIGJCLm1fc3dlZXAuYy54ICs9IGJCLm1faW52TWFzcyAqIGltcHVsc2VYO1xuICAgICAgICAgYkIubV9zd2VlcC5jLnkgKz0gYkIubV9pbnZNYXNzICogaW1wdWxzZVk7XG4gICAgICAgICBiQi5tX3N3ZWVwLmEgKz0gYkIubV9pbnZJICogKHIyWCAqIGltcHVsc2VZIC0gcjJZICogaW1wdWxzZVgpO1xuICAgICAgICAgYkEuU3luY2hyb25pemVUcmFuc2Zvcm0oKTtcbiAgICAgICAgIGJCLlN5bmNocm9uaXplVHJhbnNmb3JtKCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcG9zaXRpb25FcnJvciA8PSBiMlNldHRpbmdzLmIyX2xpbmVhclNsb3AgJiYgYW5ndWxhckVycm9yIDw9IGIyU2V0dGluZ3MuYjJfYW5ndWxhclNsb3A7XG4gICB9XG4gICBCb3gyRC5wb3N0RGVmcy5wdXNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIEJveDJELkR5bmFtaWNzLkpvaW50cy5iMlJldm9sdXRlSm9pbnQudEltcHVsc2UgPSBuZXcgYjJWZWMyKCk7XG4gICB9KTtcbiAgIEJveDJELmluaGVyaXQoYjJSZXZvbHV0ZUpvaW50RGVmLCBCb3gyRC5EeW5hbWljcy5Kb2ludHMuYjJKb2ludERlZik7XG4gICBiMlJldm9sdXRlSm9pbnREZWYucHJvdG90eXBlLl9fc3VwZXIgPSBCb3gyRC5EeW5hbWljcy5Kb2ludHMuYjJKb2ludERlZi5wcm90b3R5cGU7XG4gICBiMlJldm9sdXRlSm9pbnREZWYuYjJSZXZvbHV0ZUpvaW50RGVmID0gZnVuY3Rpb24gKCkge1xuICAgICAgQm94MkQuRHluYW1pY3MuSm9pbnRzLmIySm9pbnREZWYuYjJKb2ludERlZi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgdGhpcy5sb2NhbEFuY2hvckEgPSBuZXcgYjJWZWMyKCk7XG4gICAgICB0aGlzLmxvY2FsQW5jaG9yQiA9IG5ldyBiMlZlYzIoKTtcbiAgIH07XG4gICBiMlJldm9sdXRlSm9pbnREZWYucHJvdG90eXBlLmIyUmV2b2x1dGVKb2ludERlZiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMuX19zdXBlci5iMkpvaW50RGVmLmNhbGwodGhpcyk7XG4gICAgICB0aGlzLnR5cGUgPSBiMkpvaW50LmVfcmV2b2x1dGVKb2ludDtcbiAgICAgIHRoaXMubG9jYWxBbmNob3JBLlNldCgwLjAsIDAuMCk7XG4gICAgICB0aGlzLmxvY2FsQW5jaG9yQi5TZXQoMC4wLCAwLjApO1xuICAgICAgdGhpcy5yZWZlcmVuY2VBbmdsZSA9IDAuMDtcbiAgICAgIHRoaXMubG93ZXJBbmdsZSA9IDAuMDtcbiAgICAgIHRoaXMudXBwZXJBbmdsZSA9IDAuMDtcbiAgICAgIHRoaXMubWF4TW90b3JUb3JxdWUgPSAwLjA7XG4gICAgICB0aGlzLm1vdG9yU3BlZWQgPSAwLjA7XG4gICAgICB0aGlzLmVuYWJsZUxpbWl0ID0gZmFsc2U7XG4gICAgICB0aGlzLmVuYWJsZU1vdG9yID0gZmFsc2U7XG4gICB9XG4gICBiMlJldm9sdXRlSm9pbnREZWYucHJvdG90eXBlLkluaXRpYWxpemUgPSBmdW5jdGlvbiAoYkEsIGJCLCBhbmNob3IpIHtcbiAgICAgIHRoaXMuYm9keUEgPSBiQTtcbiAgICAgIHRoaXMuYm9keUIgPSBiQjtcbiAgICAgIHRoaXMubG9jYWxBbmNob3JBID0gdGhpcy5ib2R5QS5HZXRMb2NhbFBvaW50KGFuY2hvcik7XG4gICAgICB0aGlzLmxvY2FsQW5jaG9yQiA9IHRoaXMuYm9keUIuR2V0TG9jYWxQb2ludChhbmNob3IpO1xuICAgICAgdGhpcy5yZWZlcmVuY2VBbmdsZSA9IHRoaXMuYm9keUIuR2V0QW5nbGUoKSAtIHRoaXMuYm9keUEuR2V0QW5nbGUoKTtcbiAgIH1cbiAgIEJveDJELmluaGVyaXQoYjJXZWxkSm9pbnQsIEJveDJELkR5bmFtaWNzLkpvaW50cy5iMkpvaW50KTtcbiAgIGIyV2VsZEpvaW50LnByb3RvdHlwZS5fX3N1cGVyID0gQm94MkQuRHluYW1pY3MuSm9pbnRzLmIySm9pbnQucHJvdG90eXBlO1xuICAgYjJXZWxkSm9pbnQuYjJXZWxkSm9pbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBCb3gyRC5EeW5hbWljcy5Kb2ludHMuYjJKb2ludC5iMkpvaW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB0aGlzLm1fbG9jYWxBbmNob3JBID0gbmV3IGIyVmVjMigpO1xuICAgICAgdGhpcy5tX2xvY2FsQW5jaG9yQiA9IG5ldyBiMlZlYzIoKTtcbiAgICAgIHRoaXMubV9pbXB1bHNlID0gbmV3IGIyVmVjMygpO1xuICAgICAgdGhpcy5tX21hc3MgPSBuZXcgYjJNYXQzMygpO1xuICAgfTtcbiAgIGIyV2VsZEpvaW50LnByb3RvdHlwZS5HZXRBbmNob3JBID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMubV9ib2R5QS5HZXRXb3JsZFBvaW50KHRoaXMubV9sb2NhbEFuY2hvckEpO1xuICAgfVxuICAgYjJXZWxkSm9pbnQucHJvdG90eXBlLkdldEFuY2hvckIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5tX2JvZHlCLkdldFdvcmxkUG9pbnQodGhpcy5tX2xvY2FsQW5jaG9yQik7XG4gICB9XG4gICBiMldlbGRKb2ludC5wcm90b3R5cGUuR2V0UmVhY3Rpb25Gb3JjZSA9IGZ1bmN0aW9uIChpbnZfZHQpIHtcbiAgICAgIGlmIChpbnZfZHQgPT09IHVuZGVmaW5lZCkgaW52X2R0ID0gMDtcbiAgICAgIHJldHVybiBuZXcgYjJWZWMyKGludl9kdCAqIHRoaXMubV9pbXB1bHNlLngsIGludl9kdCAqIHRoaXMubV9pbXB1bHNlLnkpO1xuICAgfVxuICAgYjJXZWxkSm9pbnQucHJvdG90eXBlLkdldFJlYWN0aW9uVG9ycXVlID0gZnVuY3Rpb24gKGludl9kdCkge1xuICAgICAgaWYgKGludl9kdCA9PT0gdW5kZWZpbmVkKSBpbnZfZHQgPSAwO1xuICAgICAgcmV0dXJuIGludl9kdCAqIHRoaXMubV9pbXB1bHNlLno7XG4gICB9XG4gICBiMldlbGRKb2ludC5wcm90b3R5cGUuYjJXZWxkSm9pbnQgPSBmdW5jdGlvbiAoZGVmKSB7XG4gICAgICB0aGlzLl9fc3VwZXIuYjJKb2ludC5jYWxsKHRoaXMsIGRlZik7XG4gICAgICB0aGlzLm1fbG9jYWxBbmNob3JBLlNldFYoZGVmLmxvY2FsQW5jaG9yQSk7XG4gICAgICB0aGlzLm1fbG9jYWxBbmNob3JCLlNldFYoZGVmLmxvY2FsQW5jaG9yQik7XG4gICAgICB0aGlzLm1fcmVmZXJlbmNlQW5nbGUgPSBkZWYucmVmZXJlbmNlQW5nbGU7XG4gICAgICB0aGlzLm1faW1wdWxzZS5TZXRaZXJvKCk7XG4gICAgICB0aGlzLm1fbWFzcyA9IG5ldyBiMk1hdDMzKCk7XG4gICB9XG4gICBiMldlbGRKb2ludC5wcm90b3R5cGUuSW5pdFZlbG9jaXR5Q29uc3RyYWludHMgPSBmdW5jdGlvbiAoc3RlcCkge1xuICAgICAgdmFyIHRNYXQ7XG4gICAgICB2YXIgdFggPSAwO1xuICAgICAgdmFyIGJBID0gdGhpcy5tX2JvZHlBO1xuICAgICAgdmFyIGJCID0gdGhpcy5tX2JvZHlCO1xuICAgICAgdE1hdCA9IGJBLm1feGYuUjtcbiAgICAgIHZhciByQVggPSB0aGlzLm1fbG9jYWxBbmNob3JBLnggLSBiQS5tX3N3ZWVwLmxvY2FsQ2VudGVyLng7XG4gICAgICB2YXIgckFZID0gdGhpcy5tX2xvY2FsQW5jaG9yQS55IC0gYkEubV9zd2VlcC5sb2NhbENlbnRlci55O1xuICAgICAgdFggPSAodE1hdC5jb2wxLnggKiByQVggKyB0TWF0LmNvbDIueCAqIHJBWSk7XG4gICAgICByQVkgPSAodE1hdC5jb2wxLnkgKiByQVggKyB0TWF0LmNvbDIueSAqIHJBWSk7XG4gICAgICByQVggPSB0WDtcbiAgICAgIHRNYXQgPSBiQi5tX3hmLlI7XG4gICAgICB2YXIgckJYID0gdGhpcy5tX2xvY2FsQW5jaG9yQi54IC0gYkIubV9zd2VlcC5sb2NhbENlbnRlci54O1xuICAgICAgdmFyIHJCWSA9IHRoaXMubV9sb2NhbEFuY2hvckIueSAtIGJCLm1fc3dlZXAubG9jYWxDZW50ZXIueTtcbiAgICAgIHRYID0gKHRNYXQuY29sMS54ICogckJYICsgdE1hdC5jb2wyLnggKiByQlkpO1xuICAgICAgckJZID0gKHRNYXQuY29sMS55ICogckJYICsgdE1hdC5jb2wyLnkgKiByQlkpO1xuICAgICAgckJYID0gdFg7XG4gICAgICB2YXIgbUEgPSBiQS5tX2ludk1hc3M7XG4gICAgICB2YXIgbUIgPSBiQi5tX2ludk1hc3M7XG4gICAgICB2YXIgaUEgPSBiQS5tX2ludkk7XG4gICAgICB2YXIgaUIgPSBiQi5tX2ludkk7XG4gICAgICB0aGlzLm1fbWFzcy5jb2wxLnggPSBtQSArIG1CICsgckFZICogckFZICogaUEgKyByQlkgKiByQlkgKiBpQjtcbiAgICAgIHRoaXMubV9tYXNzLmNvbDIueCA9ICgtckFZICogckFYICogaUEpIC0gckJZICogckJYICogaUI7XG4gICAgICB0aGlzLm1fbWFzcy5jb2wzLnggPSAoLXJBWSAqIGlBKSAtIHJCWSAqIGlCO1xuICAgICAgdGhpcy5tX21hc3MuY29sMS55ID0gdGhpcy5tX21hc3MuY29sMi54O1xuICAgICAgdGhpcy5tX21hc3MuY29sMi55ID0gbUEgKyBtQiArIHJBWCAqIHJBWCAqIGlBICsgckJYICogckJYICogaUI7XG4gICAgICB0aGlzLm1fbWFzcy5jb2wzLnkgPSByQVggKiBpQSArIHJCWCAqIGlCO1xuICAgICAgdGhpcy5tX21hc3MuY29sMS56ID0gdGhpcy5tX21hc3MuY29sMy54O1xuICAgICAgdGhpcy5tX21hc3MuY29sMi56ID0gdGhpcy5tX21hc3MuY29sMy55O1xuICAgICAgdGhpcy5tX21hc3MuY29sMy56ID0gaUEgKyBpQjtcbiAgICAgIGlmIChzdGVwLndhcm1TdGFydGluZykge1xuICAgICAgICAgdGhpcy5tX2ltcHVsc2UueCAqPSBzdGVwLmR0UmF0aW87XG4gICAgICAgICB0aGlzLm1faW1wdWxzZS55ICo9IHN0ZXAuZHRSYXRpbztcbiAgICAgICAgIHRoaXMubV9pbXB1bHNlLnogKj0gc3RlcC5kdFJhdGlvO1xuICAgICAgICAgYkEubV9saW5lYXJWZWxvY2l0eS54IC09IG1BICogdGhpcy5tX2ltcHVsc2UueDtcbiAgICAgICAgIGJBLm1fbGluZWFyVmVsb2NpdHkueSAtPSBtQSAqIHRoaXMubV9pbXB1bHNlLnk7XG4gICAgICAgICBiQS5tX2FuZ3VsYXJWZWxvY2l0eSAtPSBpQSAqIChyQVggKiB0aGlzLm1faW1wdWxzZS55IC0gckFZICogdGhpcy5tX2ltcHVsc2UueCArIHRoaXMubV9pbXB1bHNlLnopO1xuICAgICAgICAgYkIubV9saW5lYXJWZWxvY2l0eS54ICs9IG1CICogdGhpcy5tX2ltcHVsc2UueDtcbiAgICAgICAgIGJCLm1fbGluZWFyVmVsb2NpdHkueSArPSBtQiAqIHRoaXMubV9pbXB1bHNlLnk7XG4gICAgICAgICBiQi5tX2FuZ3VsYXJWZWxvY2l0eSArPSBpQiAqIChyQlggKiB0aGlzLm1faW1wdWxzZS55IC0gckJZICogdGhpcy5tX2ltcHVsc2UueCArIHRoaXMubV9pbXB1bHNlLnopO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgICB0aGlzLm1faW1wdWxzZS5TZXRaZXJvKCk7XG4gICAgICB9XG4gICB9XG4gICBiMldlbGRKb2ludC5wcm90b3R5cGUuU29sdmVWZWxvY2l0eUNvbnN0cmFpbnRzID0gZnVuY3Rpb24gKHN0ZXApIHtcbiAgICAgIHZhciB0TWF0O1xuICAgICAgdmFyIHRYID0gMDtcbiAgICAgIHZhciBiQSA9IHRoaXMubV9ib2R5QTtcbiAgICAgIHZhciBiQiA9IHRoaXMubV9ib2R5QjtcbiAgICAgIHZhciB2QSA9IGJBLm1fbGluZWFyVmVsb2NpdHk7XG4gICAgICB2YXIgd0EgPSBiQS5tX2FuZ3VsYXJWZWxvY2l0eTtcbiAgICAgIHZhciB2QiA9IGJCLm1fbGluZWFyVmVsb2NpdHk7XG4gICAgICB2YXIgd0IgPSBiQi5tX2FuZ3VsYXJWZWxvY2l0eTtcbiAgICAgIHZhciBtQSA9IGJBLm1faW52TWFzcztcbiAgICAgIHZhciBtQiA9IGJCLm1faW52TWFzcztcbiAgICAgIHZhciBpQSA9IGJBLm1faW52STtcbiAgICAgIHZhciBpQiA9IGJCLm1faW52STtcbiAgICAgIHRNYXQgPSBiQS5tX3hmLlI7XG4gICAgICB2YXIgckFYID0gdGhpcy5tX2xvY2FsQW5jaG9yQS54IC0gYkEubV9zd2VlcC5sb2NhbENlbnRlci54O1xuICAgICAgdmFyIHJBWSA9IHRoaXMubV9sb2NhbEFuY2hvckEueSAtIGJBLm1fc3dlZXAubG9jYWxDZW50ZXIueTtcbiAgICAgIHRYID0gKHRNYXQuY29sMS54ICogckFYICsgdE1hdC5jb2wyLnggKiByQVkpO1xuICAgICAgckFZID0gKHRNYXQuY29sMS55ICogckFYICsgdE1hdC5jb2wyLnkgKiByQVkpO1xuICAgICAgckFYID0gdFg7XG4gICAgICB0TWF0ID0gYkIubV94Zi5SO1xuICAgICAgdmFyIHJCWCA9IHRoaXMubV9sb2NhbEFuY2hvckIueCAtIGJCLm1fc3dlZXAubG9jYWxDZW50ZXIueDtcbiAgICAgIHZhciByQlkgPSB0aGlzLm1fbG9jYWxBbmNob3JCLnkgLSBiQi5tX3N3ZWVwLmxvY2FsQ2VudGVyLnk7XG4gICAgICB0WCA9ICh0TWF0LmNvbDEueCAqIHJCWCArIHRNYXQuY29sMi54ICogckJZKTtcbiAgICAgIHJCWSA9ICh0TWF0LmNvbDEueSAqIHJCWCArIHRNYXQuY29sMi55ICogckJZKTtcbiAgICAgIHJCWCA9IHRYO1xuICAgICAgdmFyIENkb3QxWCA9IHZCLnggLSB3QiAqIHJCWSAtIHZBLnggKyB3QSAqIHJBWTtcbiAgICAgIHZhciBDZG90MVkgPSB2Qi55ICsgd0IgKiByQlggLSB2QS55IC0gd0EgKiByQVg7XG4gICAgICB2YXIgQ2RvdDIgPSB3QiAtIHdBO1xuICAgICAgdmFyIGltcHVsc2UgPSBuZXcgYjJWZWMzKCk7XG4gICAgICB0aGlzLm1fbWFzcy5Tb2x2ZTMzKGltcHVsc2UsICgtQ2RvdDFYKSwgKC1DZG90MVkpLCAoLUNkb3QyKSk7XG4gICAgICB0aGlzLm1faW1wdWxzZS5BZGQoaW1wdWxzZSk7XG4gICAgICB2QS54IC09IG1BICogaW1wdWxzZS54O1xuICAgICAgdkEueSAtPSBtQSAqIGltcHVsc2UueTtcbiAgICAgIHdBIC09IGlBICogKHJBWCAqIGltcHVsc2UueSAtIHJBWSAqIGltcHVsc2UueCArIGltcHVsc2Uueik7XG4gICAgICB2Qi54ICs9IG1CICogaW1wdWxzZS54O1xuICAgICAgdkIueSArPSBtQiAqIGltcHVsc2UueTtcbiAgICAgIHdCICs9IGlCICogKHJCWCAqIGltcHVsc2UueSAtIHJCWSAqIGltcHVsc2UueCArIGltcHVsc2Uueik7XG4gICAgICBiQS5tX2FuZ3VsYXJWZWxvY2l0eSA9IHdBO1xuICAgICAgYkIubV9hbmd1bGFyVmVsb2NpdHkgPSB3QjtcbiAgIH1cbiAgIGIyV2VsZEpvaW50LnByb3RvdHlwZS5Tb2x2ZVBvc2l0aW9uQ29uc3RyYWludHMgPSBmdW5jdGlvbiAoYmF1bWdhcnRlKSB7XG4gICAgICBpZiAoYmF1bWdhcnRlID09PSB1bmRlZmluZWQpIGJhdW1nYXJ0ZSA9IDA7XG4gICAgICB2YXIgdE1hdDtcbiAgICAgIHZhciB0WCA9IDA7XG4gICAgICB2YXIgYkEgPSB0aGlzLm1fYm9keUE7XG4gICAgICB2YXIgYkIgPSB0aGlzLm1fYm9keUI7XG4gICAgICB0TWF0ID0gYkEubV94Zi5SO1xuICAgICAgdmFyIHJBWCA9IHRoaXMubV9sb2NhbEFuY2hvckEueCAtIGJBLm1fc3dlZXAubG9jYWxDZW50ZXIueDtcbiAgICAgIHZhciByQVkgPSB0aGlzLm1fbG9jYWxBbmNob3JBLnkgLSBiQS5tX3N3ZWVwLmxvY2FsQ2VudGVyLnk7XG4gICAgICB0WCA9ICh0TWF0LmNvbDEueCAqIHJBWCArIHRNYXQuY29sMi54ICogckFZKTtcbiAgICAgIHJBWSA9ICh0TWF0LmNvbDEueSAqIHJBWCArIHRNYXQuY29sMi55ICogckFZKTtcbiAgICAgIHJBWCA9IHRYO1xuICAgICAgdE1hdCA9IGJCLm1feGYuUjtcbiAgICAgIHZhciByQlggPSB0aGlzLm1fbG9jYWxBbmNob3JCLnggLSBiQi5tX3N3ZWVwLmxvY2FsQ2VudGVyLng7XG4gICAgICB2YXIgckJZID0gdGhpcy5tX2xvY2FsQW5jaG9yQi55IC0gYkIubV9zd2VlcC5sb2NhbENlbnRlci55O1xuICAgICAgdFggPSAodE1hdC5jb2wxLnggKiByQlggKyB0TWF0LmNvbDIueCAqIHJCWSk7XG4gICAgICByQlkgPSAodE1hdC5jb2wxLnkgKiByQlggKyB0TWF0LmNvbDIueSAqIHJCWSk7XG4gICAgICByQlggPSB0WDtcbiAgICAgIHZhciBtQSA9IGJBLm1faW52TWFzcztcbiAgICAgIHZhciBtQiA9IGJCLm1faW52TWFzcztcbiAgICAgIHZhciBpQSA9IGJBLm1faW52STtcbiAgICAgIHZhciBpQiA9IGJCLm1faW52STtcbiAgICAgIHZhciBDMVggPSBiQi5tX3N3ZWVwLmMueCArIHJCWCAtIGJBLm1fc3dlZXAuYy54IC0gckFYO1xuICAgICAgdmFyIEMxWSA9IGJCLm1fc3dlZXAuYy55ICsgckJZIC0gYkEubV9zd2VlcC5jLnkgLSByQVk7XG4gICAgICB2YXIgQzIgPSBiQi5tX3N3ZWVwLmEgLSBiQS5tX3N3ZWVwLmEgLSB0aGlzLm1fcmVmZXJlbmNlQW5nbGU7XG4gICAgICB2YXIga19hbGxvd2VkU3RyZXRjaCA9IDEwLjAgKiBiMlNldHRpbmdzLmIyX2xpbmVhclNsb3A7XG4gICAgICB2YXIgcG9zaXRpb25FcnJvciA9IE1hdGguc3FydChDMVggKiBDMVggKyBDMVkgKiBDMVkpO1xuICAgICAgdmFyIGFuZ3VsYXJFcnJvciA9IGIyTWF0aC5BYnMoQzIpO1xuICAgICAgaWYgKHBvc2l0aW9uRXJyb3IgPiBrX2FsbG93ZWRTdHJldGNoKSB7XG4gICAgICAgICBpQSAqPSAxLjA7XG4gICAgICAgICBpQiAqPSAxLjA7XG4gICAgICB9XG4gICAgICB0aGlzLm1fbWFzcy5jb2wxLnggPSBtQSArIG1CICsgckFZICogckFZICogaUEgKyByQlkgKiByQlkgKiBpQjtcbiAgICAgIHRoaXMubV9tYXNzLmNvbDIueCA9ICgtckFZICogckFYICogaUEpIC0gckJZICogckJYICogaUI7XG4gICAgICB0aGlzLm1fbWFzcy5jb2wzLnggPSAoLXJBWSAqIGlBKSAtIHJCWSAqIGlCO1xuICAgICAgdGhpcy5tX21hc3MuY29sMS55ID0gdGhpcy5tX21hc3MuY29sMi54O1xuICAgICAgdGhpcy5tX21hc3MuY29sMi55ID0gbUEgKyBtQiArIHJBWCAqIHJBWCAqIGlBICsgckJYICogckJYICogaUI7XG4gICAgICB0aGlzLm1fbWFzcy5jb2wzLnkgPSByQVggKiBpQSArIHJCWCAqIGlCO1xuICAgICAgdGhpcy5tX21hc3MuY29sMS56ID0gdGhpcy5tX21hc3MuY29sMy54O1xuICAgICAgdGhpcy5tX21hc3MuY29sMi56ID0gdGhpcy5tX21hc3MuY29sMy55O1xuICAgICAgdGhpcy5tX21hc3MuY29sMy56ID0gaUEgKyBpQjtcbiAgICAgIHZhciBpbXB1bHNlID0gbmV3IGIyVmVjMygpO1xuICAgICAgdGhpcy5tX21hc3MuU29sdmUzMyhpbXB1bHNlLCAoLUMxWCksICgtQzFZKSwgKC1DMikpO1xuICAgICAgYkEubV9zd2VlcC5jLnggLT0gbUEgKiBpbXB1bHNlLng7XG4gICAgICBiQS5tX3N3ZWVwLmMueSAtPSBtQSAqIGltcHVsc2UueTtcbiAgICAgIGJBLm1fc3dlZXAuYSAtPSBpQSAqIChyQVggKiBpbXB1bHNlLnkgLSByQVkgKiBpbXB1bHNlLnggKyBpbXB1bHNlLnopO1xuICAgICAgYkIubV9zd2VlcC5jLnggKz0gbUIgKiBpbXB1bHNlLng7XG4gICAgICBiQi5tX3N3ZWVwLmMueSArPSBtQiAqIGltcHVsc2UueTtcbiAgICAgIGJCLm1fc3dlZXAuYSArPSBpQiAqIChyQlggKiBpbXB1bHNlLnkgLSByQlkgKiBpbXB1bHNlLnggKyBpbXB1bHNlLnopO1xuICAgICAgYkEuU3luY2hyb25pemVUcmFuc2Zvcm0oKTtcbiAgICAgIGJCLlN5bmNocm9uaXplVHJhbnNmb3JtKCk7XG4gICAgICByZXR1cm4gcG9zaXRpb25FcnJvciA8PSBiMlNldHRpbmdzLmIyX2xpbmVhclNsb3AgJiYgYW5ndWxhckVycm9yIDw9IGIyU2V0dGluZ3MuYjJfYW5ndWxhclNsb3A7XG4gICB9XG4gICBCb3gyRC5pbmhlcml0KGIyV2VsZEpvaW50RGVmLCBCb3gyRC5EeW5hbWljcy5Kb2ludHMuYjJKb2ludERlZik7XG4gICBiMldlbGRKb2ludERlZi5wcm90b3R5cGUuX19zdXBlciA9IEJveDJELkR5bmFtaWNzLkpvaW50cy5iMkpvaW50RGVmLnByb3RvdHlwZTtcbiAgIGIyV2VsZEpvaW50RGVmLmIyV2VsZEpvaW50RGVmID0gZnVuY3Rpb24gKCkge1xuICAgICAgQm94MkQuRHluYW1pY3MuSm9pbnRzLmIySm9pbnREZWYuYjJKb2ludERlZi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgdGhpcy5sb2NhbEFuY2hvckEgPSBuZXcgYjJWZWMyKCk7XG4gICAgICB0aGlzLmxvY2FsQW5jaG9yQiA9IG5ldyBiMlZlYzIoKTtcbiAgIH07XG4gICBiMldlbGRKb2ludERlZi5wcm90b3R5cGUuYjJXZWxkSm9pbnREZWYgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLl9fc3VwZXIuYjJKb2ludERlZi5jYWxsKHRoaXMpO1xuICAgICAgdGhpcy50eXBlID0gYjJKb2ludC5lX3dlbGRKb2ludDtcbiAgICAgIHRoaXMucmVmZXJlbmNlQW5nbGUgPSAwLjA7XG4gICB9XG4gICBiMldlbGRKb2ludERlZi5wcm90b3R5cGUuSW5pdGlhbGl6ZSA9IGZ1bmN0aW9uIChiQSwgYkIsIGFuY2hvcikge1xuICAgICAgdGhpcy5ib2R5QSA9IGJBO1xuICAgICAgdGhpcy5ib2R5QiA9IGJCO1xuICAgICAgdGhpcy5sb2NhbEFuY2hvckEuU2V0Vih0aGlzLmJvZHlBLkdldExvY2FsUG9pbnQoYW5jaG9yKSk7XG4gICAgICB0aGlzLmxvY2FsQW5jaG9yQi5TZXRWKHRoaXMuYm9keUIuR2V0TG9jYWxQb2ludChhbmNob3IpKTtcbiAgICAgIHRoaXMucmVmZXJlbmNlQW5nbGUgPSB0aGlzLmJvZHlCLkdldEFuZ2xlKCkgLSB0aGlzLmJvZHlBLkdldEFuZ2xlKCk7XG4gICB9XG59KSgpO1xuKGZ1bmN0aW9uICgpIHtcbiAgIHZhciBiMkRlYnVnRHJhdyA9IEJveDJELkR5bmFtaWNzLmIyRGVidWdEcmF3O1xuICAgYjJEZWJ1Z0RyYXcuYjJEZWJ1Z0RyYXcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLm1fZHJhd1NjYWxlID0gMS4wO1xuICAgICAgdGhpcy5tX2xpbmVUaGlja25lc3MgPSAxLjA7XG4gICAgICB0aGlzLm1fYWxwaGEgPSAxLjA7XG4gICAgICB0aGlzLm1fZmlsbEFscGhhID0gMS4wO1xuICAgICAgdGhpcy5tX3hmb3JtU2NhbGUgPSAxLjA7XG4gICAgICB2YXIgX190aGlzID0gdGhpcztcbiAgICAgIC8vI1dPUktBUk9VTkRcbiAgICAgIHRoaXMubV9zcHJpdGUgPSB7XG4gICAgICAgICBncmFwaGljczoge1xuICAgICAgICAgICAgY2xlYXI6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgIF9fdGhpcy5tX2N0eC5jbGVhclJlY3QoMCwgMCwgX190aGlzLm1fY3R4LmNhbnZhcy53aWR0aCwgX190aGlzLm1fY3R4LmNhbnZhcy5oZWlnaHQpXG4gICAgICAgICAgICB9XG4gICAgICAgICB9XG4gICAgICB9O1xuICAgfTtcbiAgIGIyRGVidWdEcmF3LnByb3RvdHlwZS5fY29sb3IgPSBmdW5jdGlvbiAoY29sb3IsIGFscGhhKSB7XG4gICAgICByZXR1cm4gXCJyZ2JhKFwiICsgKChjb2xvciAmIDB4RkYwMDAwKSA+PiAxNikgKyBcIixcIiArICgoY29sb3IgJiAweEZGMDApID4+IDgpICsgXCIsXCIgKyAoY29sb3IgJiAweEZGKSArIFwiLFwiICsgYWxwaGEgKyBcIilcIjtcbiAgIH07XG4gICBiMkRlYnVnRHJhdy5wcm90b3R5cGUuYjJEZWJ1Z0RyYXcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLm1fZHJhd0ZsYWdzID0gMDtcbiAgIH07XG4gICBiMkRlYnVnRHJhdy5wcm90b3R5cGUuU2V0RmxhZ3MgPSBmdW5jdGlvbiAoZmxhZ3MpIHtcbiAgICAgIGlmIChmbGFncyA9PT0gdW5kZWZpbmVkKSBmbGFncyA9IDA7XG4gICAgICB0aGlzLm1fZHJhd0ZsYWdzID0gZmxhZ3M7XG4gICB9O1xuICAgYjJEZWJ1Z0RyYXcucHJvdG90eXBlLkdldEZsYWdzID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMubV9kcmF3RmxhZ3M7XG4gICB9O1xuICAgYjJEZWJ1Z0RyYXcucHJvdG90eXBlLkFwcGVuZEZsYWdzID0gZnVuY3Rpb24gKGZsYWdzKSB7XG4gICAgICBpZiAoZmxhZ3MgPT09IHVuZGVmaW5lZCkgZmxhZ3MgPSAwO1xuICAgICAgdGhpcy5tX2RyYXdGbGFncyB8PSBmbGFncztcbiAgIH07XG4gICBiMkRlYnVnRHJhdy5wcm90b3R5cGUuQ2xlYXJGbGFncyA9IGZ1bmN0aW9uIChmbGFncykge1xuICAgICAgaWYgKGZsYWdzID09PSB1bmRlZmluZWQpIGZsYWdzID0gMDtcbiAgICAgIHRoaXMubV9kcmF3RmxhZ3MgJj0gfmZsYWdzO1xuICAgfTtcbiAgIGIyRGVidWdEcmF3LnByb3RvdHlwZS5TZXRTcHJpdGUgPSBmdW5jdGlvbiAoc3ByaXRlKSB7XG4gICAgICB0aGlzLm1fY3R4ID0gc3ByaXRlO1xuICAgfTtcbiAgIGIyRGVidWdEcmF3LnByb3RvdHlwZS5HZXRTcHJpdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5tX2N0eDtcbiAgIH07XG4gICBiMkRlYnVnRHJhdy5wcm90b3R5cGUuU2V0RHJhd1NjYWxlID0gZnVuY3Rpb24gKGRyYXdTY2FsZSkge1xuICAgICAgaWYgKGRyYXdTY2FsZSA9PT0gdW5kZWZpbmVkKSBkcmF3U2NhbGUgPSAwO1xuICAgICAgdGhpcy5tX2RyYXdTY2FsZSA9IGRyYXdTY2FsZTtcbiAgIH07XG4gICBiMkRlYnVnRHJhdy5wcm90b3R5cGUuR2V0RHJhd1NjYWxlID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMubV9kcmF3U2NhbGU7XG4gICB9O1xuICAgYjJEZWJ1Z0RyYXcucHJvdG90eXBlLlNldExpbmVUaGlja25lc3MgPSBmdW5jdGlvbiAobGluZVRoaWNrbmVzcykge1xuICAgICAgaWYgKGxpbmVUaGlja25lc3MgPT09IHVuZGVmaW5lZCkgbGluZVRoaWNrbmVzcyA9IDA7XG4gICAgICB0aGlzLm1fbGluZVRoaWNrbmVzcyA9IGxpbmVUaGlja25lc3M7XG4gICAgICB0aGlzLm1fY3R4LnN0cm9rZVdpZHRoID0gbGluZVRoaWNrbmVzcztcbiAgIH07XG4gICBiMkRlYnVnRHJhdy5wcm90b3R5cGUuR2V0TGluZVRoaWNrbmVzcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzLm1fbGluZVRoaWNrbmVzcztcbiAgIH07XG4gICBiMkRlYnVnRHJhdy5wcm90b3R5cGUuU2V0QWxwaGEgPSBmdW5jdGlvbiAoYWxwaGEpIHtcbiAgICAgIGlmIChhbHBoYSA9PT0gdW5kZWZpbmVkKSBhbHBoYSA9IDA7XG4gICAgICB0aGlzLm1fYWxwaGEgPSBhbHBoYTtcbiAgIH07XG4gICBiMkRlYnVnRHJhdy5wcm90b3R5cGUuR2V0QWxwaGEgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5tX2FscGhhO1xuICAgfTtcbiAgIGIyRGVidWdEcmF3LnByb3RvdHlwZS5TZXRGaWxsQWxwaGEgPSBmdW5jdGlvbiAoYWxwaGEpIHtcbiAgICAgIGlmIChhbHBoYSA9PT0gdW5kZWZpbmVkKSBhbHBoYSA9IDA7XG4gICAgICB0aGlzLm1fZmlsbEFscGhhID0gYWxwaGE7XG4gICB9O1xuICAgYjJEZWJ1Z0RyYXcucHJvdG90eXBlLkdldEZpbGxBbHBoYSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzLm1fZmlsbEFscGhhO1xuICAgfTtcbiAgIGIyRGVidWdEcmF3LnByb3RvdHlwZS5TZXRYRm9ybVNjYWxlID0gZnVuY3Rpb24gKHhmb3JtU2NhbGUpIHtcbiAgICAgIGlmICh4Zm9ybVNjYWxlID09PSB1bmRlZmluZWQpIHhmb3JtU2NhbGUgPSAwO1xuICAgICAgdGhpcy5tX3hmb3JtU2NhbGUgPSB4Zm9ybVNjYWxlO1xuICAgfTtcbiAgIGIyRGVidWdEcmF3LnByb3RvdHlwZS5HZXRYRm9ybVNjYWxlID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMubV94Zm9ybVNjYWxlO1xuICAgfTtcbiAgIGIyRGVidWdEcmF3LnByb3RvdHlwZS5EcmF3UG9seWdvbiA9IGZ1bmN0aW9uICh2ZXJ0aWNlcywgdmVydGV4Q291bnQsIGNvbG9yKSB7XG4gICAgICBpZiAoIXZlcnRleENvdW50KSByZXR1cm47XG4gICAgICB2YXIgcyA9IHRoaXMubV9jdHg7XG4gICAgICB2YXIgZHJhd1NjYWxlID0gdGhpcy5tX2RyYXdTY2FsZTtcbiAgICAgIHMuYmVnaW5QYXRoKCk7XG4gICAgICBzLnN0cm9rZVN0eWxlID0gdGhpcy5fY29sb3IoY29sb3IuY29sb3IsIHRoaXMubV9hbHBoYSk7XG4gICAgICBzLm1vdmVUbyh2ZXJ0aWNlc1swXS54ICogZHJhd1NjYWxlLCB2ZXJ0aWNlc1swXS55ICogZHJhd1NjYWxlKTtcbiAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgdmVydGV4Q291bnQ7IGkrKykge1xuICAgICAgICAgcy5saW5lVG8odmVydGljZXNbaV0ueCAqIGRyYXdTY2FsZSwgdmVydGljZXNbaV0ueSAqIGRyYXdTY2FsZSk7XG4gICAgICB9XG4gICAgICBzLmxpbmVUbyh2ZXJ0aWNlc1swXS54ICogZHJhd1NjYWxlLCB2ZXJ0aWNlc1swXS55ICogZHJhd1NjYWxlKTtcbiAgICAgIHMuY2xvc2VQYXRoKCk7XG4gICAgICBzLnN0cm9rZSgpO1xuICAgfTtcbiAgIGIyRGVidWdEcmF3LnByb3RvdHlwZS5EcmF3U29saWRQb2x5Z29uID0gZnVuY3Rpb24gKHZlcnRpY2VzLCB2ZXJ0ZXhDb3VudCwgY29sb3IpIHtcbiAgICAgIGlmICghdmVydGV4Q291bnQpIHJldHVybjtcbiAgICAgIHZhciBzID0gdGhpcy5tX2N0eDtcbiAgICAgIHZhciBkcmF3U2NhbGUgPSB0aGlzLm1fZHJhd1NjYWxlO1xuICAgICAgcy5iZWdpblBhdGgoKTtcbiAgICAgIHMuc3Ryb2tlU3R5bGUgPSB0aGlzLl9jb2xvcihjb2xvci5jb2xvciwgdGhpcy5tX2FscGhhKTtcbiAgICAgIHMuZmlsbFN0eWxlID0gdGhpcy5fY29sb3IoY29sb3IuY29sb3IsIHRoaXMubV9maWxsQWxwaGEpO1xuICAgICAgcy5tb3ZlVG8odmVydGljZXNbMF0ueCAqIGRyYXdTY2FsZSwgdmVydGljZXNbMF0ueSAqIGRyYXdTY2FsZSk7XG4gICAgICBmb3IgKHZhciBpID0gMTsgaSA8IHZlcnRleENvdW50OyBpKyspIHtcbiAgICAgICAgIHMubGluZVRvKHZlcnRpY2VzW2ldLnggKiBkcmF3U2NhbGUsIHZlcnRpY2VzW2ldLnkgKiBkcmF3U2NhbGUpO1xuICAgICAgfVxuICAgICAgcy5saW5lVG8odmVydGljZXNbMF0ueCAqIGRyYXdTY2FsZSwgdmVydGljZXNbMF0ueSAqIGRyYXdTY2FsZSk7XG4gICAgICBzLmNsb3NlUGF0aCgpO1xuICAgICAgcy5maWxsKCk7XG4gICAgICBzLnN0cm9rZSgpO1xuICAgfTtcbiAgIGIyRGVidWdEcmF3LnByb3RvdHlwZS5EcmF3Q2lyY2xlID0gZnVuY3Rpb24gKGNlbnRlciwgcmFkaXVzLCBjb2xvcikge1xuICAgICAgaWYgKCFyYWRpdXMpIHJldHVybjtcbiAgICAgIHZhciBzID0gdGhpcy5tX2N0eDtcbiAgICAgIHZhciBkcmF3U2NhbGUgPSB0aGlzLm1fZHJhd1NjYWxlO1xuICAgICAgcy5iZWdpblBhdGgoKTtcbiAgICAgIHMuc3Ryb2tlU3R5bGUgPSB0aGlzLl9jb2xvcihjb2xvci5jb2xvciwgdGhpcy5tX2FscGhhKTtcbiAgICAgIHMuYXJjKGNlbnRlci54ICogZHJhd1NjYWxlLCBjZW50ZXIueSAqIGRyYXdTY2FsZSwgcmFkaXVzICogZHJhd1NjYWxlLCAwLCBNYXRoLlBJICogMiwgdHJ1ZSk7XG4gICAgICBzLmNsb3NlUGF0aCgpO1xuICAgICAgcy5zdHJva2UoKTtcbiAgIH07XG4gICBiMkRlYnVnRHJhdy5wcm90b3R5cGUuRHJhd1NvbGlkQ2lyY2xlID0gZnVuY3Rpb24gKGNlbnRlciwgcmFkaXVzLCBheGlzLCBjb2xvcikge1xuICAgICAgaWYgKCFyYWRpdXMpIHJldHVybjtcbiAgICAgIHZhciBzID0gdGhpcy5tX2N0eCxcbiAgICAgICAgIGRyYXdTY2FsZSA9IHRoaXMubV9kcmF3U2NhbGUsXG4gICAgICAgICBjeCA9IGNlbnRlci54ICogZHJhd1NjYWxlLFxuICAgICAgICAgY3kgPSBjZW50ZXIueSAqIGRyYXdTY2FsZTtcbiAgICAgIHMubW92ZVRvKDAsIDApO1xuICAgICAgcy5iZWdpblBhdGgoKTtcbiAgICAgIHMuc3Ryb2tlU3R5bGUgPSB0aGlzLl9jb2xvcihjb2xvci5jb2xvciwgdGhpcy5tX2FscGhhKTtcbiAgICAgIHMuZmlsbFN0eWxlID0gdGhpcy5fY29sb3IoY29sb3IuY29sb3IsIHRoaXMubV9maWxsQWxwaGEpO1xuICAgICAgcy5hcmMoY3gsIGN5LCByYWRpdXMgKiBkcmF3U2NhbGUsIDAsIE1hdGguUEkgKiAyLCB0cnVlKTtcbiAgICAgIHMubW92ZVRvKGN4LCBjeSk7XG4gICAgICBzLmxpbmVUbygoY2VudGVyLnggKyBheGlzLnggKiByYWRpdXMpICogZHJhd1NjYWxlLCAoY2VudGVyLnkgKyBheGlzLnkgKiByYWRpdXMpICogZHJhd1NjYWxlKTtcbiAgICAgIHMuY2xvc2VQYXRoKCk7XG4gICAgICBzLmZpbGwoKTtcbiAgICAgIHMuc3Ryb2tlKCk7XG4gICB9O1xuICAgYjJEZWJ1Z0RyYXcucHJvdG90eXBlLkRyYXdTZWdtZW50ID0gZnVuY3Rpb24gKHAxLCBwMiwgY29sb3IpIHtcbiAgICAgIHZhciBzID0gdGhpcy5tX2N0eCxcbiAgICAgICAgIGRyYXdTY2FsZSA9IHRoaXMubV9kcmF3U2NhbGU7XG4gICAgICBzLnN0cm9rZVN0eWxlID0gdGhpcy5fY29sb3IoY29sb3IuY29sb3IsIHRoaXMubV9hbHBoYSk7XG4gICAgICBzLmJlZ2luUGF0aCgpO1xuICAgICAgcy5tb3ZlVG8ocDEueCAqIGRyYXdTY2FsZSwgcDEueSAqIGRyYXdTY2FsZSk7XG4gICAgICBzLmxpbmVUbyhwMi54ICogZHJhd1NjYWxlLCBwMi55ICogZHJhd1NjYWxlKTtcbiAgICAgIHMuY2xvc2VQYXRoKCk7XG4gICAgICBzLnN0cm9rZSgpO1xuICAgfTtcbiAgIGIyRGVidWdEcmF3LnByb3RvdHlwZS5EcmF3VHJhbnNmb3JtID0gZnVuY3Rpb24gKHhmKSB7XG4gICAgICB2YXIgcyA9IHRoaXMubV9jdHgsXG4gICAgICAgICBkcmF3U2NhbGUgPSB0aGlzLm1fZHJhd1NjYWxlO1xuICAgICAgcy5iZWdpblBhdGgoKTtcbiAgICAgIHMuc3Ryb2tlU3R5bGUgPSB0aGlzLl9jb2xvcigweGZmMDAwMCwgdGhpcy5tX2FscGhhKTtcbiAgICAgIHMubW92ZVRvKHhmLnBvc2l0aW9uLnggKiBkcmF3U2NhbGUsIHhmLnBvc2l0aW9uLnkgKiBkcmF3U2NhbGUpO1xuICAgICAgcy5saW5lVG8oKHhmLnBvc2l0aW9uLnggKyB0aGlzLm1feGZvcm1TY2FsZSAqIHhmLlIuY29sMS54KSAqIGRyYXdTY2FsZSwgKHhmLnBvc2l0aW9uLnkgKyB0aGlzLm1feGZvcm1TY2FsZSAqIHhmLlIuY29sMS55KSAqIGRyYXdTY2FsZSk7XG5cbiAgICAgIHMuc3Ryb2tlU3R5bGUgPSB0aGlzLl9jb2xvcigweGZmMDAsIHRoaXMubV9hbHBoYSk7XG4gICAgICBzLm1vdmVUbyh4Zi5wb3NpdGlvbi54ICogZHJhd1NjYWxlLCB4Zi5wb3NpdGlvbi55ICogZHJhd1NjYWxlKTtcbiAgICAgIHMubGluZVRvKCh4Zi5wb3NpdGlvbi54ICsgdGhpcy5tX3hmb3JtU2NhbGUgKiB4Zi5SLmNvbDIueCkgKiBkcmF3U2NhbGUsICh4Zi5wb3NpdGlvbi55ICsgdGhpcy5tX3hmb3JtU2NhbGUgKiB4Zi5SLmNvbDIueSkgKiBkcmF3U2NhbGUpO1xuICAgICAgcy5jbG9zZVBhdGgoKTtcbiAgICAgIHMuc3Ryb2tlKCk7XG4gICB9O1xufSkoKTtcbnZhciBpO1xuZm9yIChpID0gMDsgaSA8IEJveDJELnBvc3REZWZzLmxlbmd0aDsgKytpKSBCb3gyRC5wb3N0RGVmc1tpXSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEJveDJEIl19
